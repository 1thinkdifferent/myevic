@
@ +-------------------------------------------------------------------------+
@ |   This file	has been generated by The Interactive Disassembler (IDA)    |
@ |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>			    |
@ |			Doskey Lee, Kingsoft Internet Security Software				    |
@ +-------------------------------------------------------------------------+
@
@ Input	MD5   :	5366F56114EBD4C7FC252D3D56164D9D
@ Input	CRC32 :	ACCB3046

@ Format      :	Binary file

@ Processor	  : ARM
@ ARM architecture: ARMv7-M
@ Target assembler: GNU	assembler
@ Byte sex	  : Little endian

@ ===========================================================================

		.syntax	unified

@ ===========================================================================

		.include "globals.s"
		.include "rodata.s"
		.include "sram.s"

@ ===========================================================================

		.section .isr_vectors

		.long Stack_Top
		.long Reset_Handler+1
		.long NMI_Handler+1
		.long Plantage+1			@	HardFault_Handler+1
		.long Plantage+1			@	MemManage_Handler+1
		.long Plantage+1			@	BusFault_Handler+1
		.long Plantage+1			@	UsageFault_Handler+1
		.long 0
		.long 0
		.long 0
		.long 0
		.long SVC_Handler+1
		.long DebugMon_Handler+1
		.long 0
		.long PendSV_Handler+1
		.long SysTick_Handler+1
		.long Default_Handler+1		@  0 : Brown-Out Detector
		.long Default_Handler+1		@  1 : Internal	RC
		.long Default_Handler+1		@  2 : Power down wake up
		.long Default_Handler+1		@  3 : RAM parity error
		.long Default_Handler+1		@  4 : Clock detection fail
		.long Default_Handler+1		@  5 : Reserved
		.long RTC_IRQHandler+1		@  6 : Real Time Clock
		.long Default_Handler+1		@  7 : Backup register tamper interrupt
		.long Default_Handler+1		@  8 : Watchdog	timer
		.long Default_Handler+1		@  9 : Window watchdog timer
		.long Default_Handler+1		@ 10 : External	Input 0
		.long Default_Handler+1		@ 11 : External	Input 1
		.long Default_Handler+1		@ 12 : External	Input 2
		.long Default_Handler+1		@ 13 : External	Input 3
		.long Default_Handler+1		@ 14 : External	Input 4
		.long Default_Handler+1		@ 15 : External	Input 5
		.long Default_Handler+1		@ 16 : GPIO Port A
		.long Default_Handler+1		@ 17 : GPIO Port B
		.long Default_Handler+1		@ 18 : GPIO Port C
		.long GPD_IRQHandler+1		@ 19 : GPIO Port D
		.long GPE_IRQHandler+1		@ 20 : GPIO Port E
		.long GPF_IRQHandler+1		@ 21 : GPIO Port F
		.long Default_Handler+1		@ 22 : SPI0
		.long Default_Handler+1		@ 23 : SPI1
		.long Default_Handler+1		@ 24 : PWM0 brake
		.long Default_Handler+1		@ 25 : PWM0 pair 0
		.long Default_Handler+1		@ 26 : PWM0 pair 1
		.long Default_Handler+1		@ 27 : PWM0 pair 2
		.long Default_Handler+1		@ 28 : PWM1 brake
		.long Default_Handler+1		@ 29 : PWM1 pair 0
		.long Default_Handler+1		@ 30 : PWM1 pair 1
		.long Default_Handler+1		@ 31 : PWM1 pair 2
		.long TMR0_IRQHandler+1		@ 32 : Timer 0
		.long TMR1_IRQHandler+1		@ 33 : Timer 1
		.long TMR2_IRQHandler+1		@ 34 : Timer 2
		.long TMR3_IRQHandler+1		@ 35 : Timer 3
		.long Default_Handler+1		@ 36 : UART0
		.long Default_Handler+1		@ 37 : UART1
		.long Default_Handler+1		@ 38 : I2C0
		.long Default_Handler+1		@ 39 : I2C1
		.long Default_Handler+1		@ 40 : Peripheral DMA
		.long Default_Handler+1		@ 41 : DAC
		.long ADC00_IRQHandler+1 	@ 42 :	ADC0 interrupt source 0
		.long Default_Handler+1		@ 43 : ADC0 interrupt source 1
		.long Default_Handler+1		@ 44 : ACMP0 and ACMP1
		.long Default_Handler+1		@ 45 : Reserved
		.long Default_Handler+1		@ 46 : ADC0 interrupt source 2
		.long Default_Handler+1		@ 47 : ADC0 interrupt source 3
		.long Default_Handler+1		@ 48 : UART2
		.long Default_Handler+1		@ 49 : UART3
		.long Default_Handler+1		@ 50 : Reserved
		.long Default_Handler+1		@ 51 : SPI2
		.long Default_Handler+1		@ 52 : Reserved
		.long USBD_IRQHandler+1		@ 53 : USB device
		.long Default_Handler+1		@ 54 : USB host
		.long Default_Handler+1		@ 55 : USB OTG
		.long Default_Handler+1		@ 56 : CAN0
		.long Default_Handler+1		@ 57 : Reserved
		.long Default_Handler+1		@ 58 : Smart card host 0 interrupt
		.long Default_Handler+1		@ 59 : Reserved
		.long Default_Handler+1		@ 60 : Reserved
		.long Default_Handler+1		@ 61 : Reserved
		.long Default_Handler+1		@ 62 : Reserved
		.long Default_Handler+1		@ 63 : Touch key interrupt


@ ===========================================================================

				.section .stack

				.balign 8,0
Stack_Bottom:	.ds.b	0x400	@ Stack	space
Stack_Top:

@ ===========================================================================
@ Segment type:	Pure code

		.text
		.code 16

@ =============== S U B	R O U T	I N E =======================================

		.global Reset_Handler

Reset_Handler:
		LDR		R0, =0x40000100	@ SYS_REGLCTL
		MOV.W	R1, #0x59		@ Unlock sequence
		STR		R1, [R0]
		MOV.W	R1, #0x16
		STR		R1, [R0]
		MOV.W	R1, #0x88
		STR		R1, [R0]
		LDR		R2, =0x40000024	@ SYS_PORCTL
		MOVW	R1, #0x5AA5		@ POROFF
		STR		R1, [R2]
		LDR		R2, =0x40000200
		LDR		R1, [R2]		@ CLK_PWRCTL
		BIC.W	R1, R1,	#0x1000	@ HTX Crystal type INV
		STR		R1, [R2]
		MOVS	R1, #0			@ Lock registers
		STR		R1, [R0]
		LDR		R0, =(EnableFPU+1)
		BLX		R0 @ EnableFPU
		LDR		R0, =(Startup+1)
		BX		R0 @ Startup

		.balign 4,0
		.pool

@ End of function Reset_Handler

@ =============== S U B	R O U T	I N E =======================================

EnableFPU:
		LDR		R0, =0xE000ED88
		LDR		R1, [R0]	@ CPACR
		ORR.W	R1, R1,	#0x00F00000
		STR		R1, [R0]	@ Full access to coprocessors 10 & 11
		BX		LR

		.balign 4,0
		.pool

@ End of function EnableFPU
@ ---------------------------------------------------------------------------


@ =============== S U B	R O U T	I N E =======================================
@ Unused Handlers
@ ---------------------------------------------------------------------------

NMI_Handler:
MemManage_Handler:
BusFault_Handler:
UsageFault_Handler:
SVC_Handler:
DebugMon_Handler:
PendSV_Handler:
SysTick_Handler:
Default_Handler:

		B	.


@ =============== S U B	R O U T	I N E =======================================


Startup:				@ ...
		ldr.w	sp, =Stack_Top

		ldr		r4, =RAMInitTable
		ldr		r5, =RAMInitEnd
2:		cmp 	r4, r5
		beq		1f
		ldmia	r4!, {r0, r1, r2}
		cmp		r0, r1
		beq		3f
		bl		MemCpy2
		b		2b
3:		bl		MemClear2
		b		2b
1:
		ldr	r0, =(Main+1)
		bx	r0

		.balign 4,0
		.pool


@ =============== S U B	R O U T	I N E =======================================

		.global	MemCpy

MemCpy:
		ORR.W	R3, R0,	R1
		LSLS	R3, R3,	#30
		BEQ		loc_200
		B		loc_20E
@ ---------------------------------------------------------------------------

loc_1FA:
		LDMIA	R1!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R0!, {R3}

loc_200:
		CMP		R2, #4
		BCS		loc_1FA
		B		loc_20E
@ ---------------------------------------------------------------------------

loc_206:
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_20E:
		SUBS	R2, R2,	#1
		BCS		loc_206
		BX		LR

@ End of function MemCpy


@ =============== S U B	R O U T	I N E =======================================

		.global MemSet2

MemSet2:
		UXTB	R2, R2
		B		loc_21C
@ ---------------------------------------------------------------------------

loc_218:
		STRB.W	R2, [R0],#1

loc_21C:
		SUBS	R1, R1,	#1
		BCS		loc_218
		BX		LR

@ End of function MemSet2


@ =============== S U B	R O U T	I N E =======================================

		.global MemClear

MemClear:
		MOVS	R2, #0
		B		MemSet2

@ End of function MemClear


@ =============== S U B	R O U T	I N E =======================================


@ void *__fastcall MemSet(void *, char,	unsigned int)

		.global MemSet

MemSet:
		PUSH	{R4,LR}
		MOV		R3, R2
		MOV		R2, R1
		MOV		R4, R0
		MOV		R1, R3
		BL		MemSet2
		MOV		R0, R4
		POP		{R4,PC}
		
@ End of function MemSet


@ =============== S U B	R O U T	I N E =======================================

		.global MemCpy2

MemCpy2:
		B	loc_8A7A
@ ---------------------------------------------------------------------------

loc_8A74:				@ ...
		LDMIA	R0!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R1!, {R3}

loc_8A7A:				@ ...
		CMP	R2, #0
		BNE	loc_8A74
		BX	LR
@ End of function MemCpy2


@ =============== S U B	R O U T	I N E =======================================

		.global MemClear2

MemClear2:
		MOVS	R0, #0
		B	loc_8A8A
@ ---------------------------------------------------------------------------

loc_8A86:				@ ...
		STMIA	R1!, {R0}
		SUBS	R2, R2,	#4

loc_8A8A:				@ ...
		CMP	R2, #0
		BNE	loc_8A86
		BX	LR
@ End of function MemClear2


@ =============== S U B	R O U T	I N E =======================================


sub_2C8:				@ ...
		PUSH.W	{R4-R12,LR}
		MOV	R5, R0
		MOVS	R0, #0
		MOV	R10, R2
		MOV	R11, R3
		MOV	R8, R1
		MOV	R6, R0
		MOV	R9, R0
		MOVS	R4, #0x40
		B	loc_316
@ ---------------------------------------------------------------------------

loc_2DE:				@ ...
		MOV	R0, R5		@ low
		MOV	R1, R8		@ high
		MOV	R7, R8
		MOV	R2, R4		@ shift
		BL	lsr64
		MOV	R3, R10
		MOV	R2, R11
		SUBS	R0, R0,	R3
		SBCS	R1, R2
		BCC	loc_316
		MOV	R1, R2		@ high
		MOV	R0, R3		@ low
		MOV	R2, R4		@ shift
		BL	lsl64
		SUBS	R5, R5,	R0
		SBC.W	R8, R7,	R1
		MOV	R7, R9
		MOV	R2, R4		@ shift
		MOVS	R0, #1		@ low
		MOVS	R1, #0		@ high
		BL	lsl64
		ADDS.W	R9, R7,	R0
		ADCS	R6, R1

loc_316:				@ ...
		SUBS	R0, R4,	#0
		SUB.W	R4, R4,	#1
		BGT	loc_2DE
		MOV	R0, R9
		MOV	R1, R6
		MOV	R2, R5
		MOV	R3, R8
		POP.W	{R4-R12,PC}
@ End of function sub_2C8


@ =============== S U B	R O U T	I N E =======================================


@ __int64 __fastcall lsr64(int low, int	high, int shift)
lsr64:					@ ...
		CMP	R2, #0x20
		BLT	loc_338
		SUBS	R2, #0x20
		LSR.W	R0, R1,	R2
		MOVS	R1, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_338:				@ ...
		LSR.W	R3, R1,	R2
		LSRS	R0, R2
		RSB.W	R2, R2,	#0x20
		LSLS	R1, R2
		ORRS	R0, R1
		MOV	R1, R3
		BX	LR
@ End of function lsr64


@ =============== S U B	R O U T	I N E =======================================


@ __int64 __cdecl lsl64(int low, int high, int shift)
lsl64:					@ ...
		CMP	R2, #0x20
		BLT	loc_48E
		SUBS	R2, #0x20
		LSL.W	R1, R0,	R2
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_48E:				@ ...
		LSLS	R1, R2
		RSB.W	R3, R2,	#0x20
		LSR.W	R3, R0,	R3
		ORRS	R1, R3
		LSLS	R0, R2
		BX	LR
@ End of function lsl64


@ =============== S U B	R O U T	I N E =======================================


sub_49E:
		PUSH	{R4,LR}
		SUBS	R4, R2,	#0
		SBCS.W	R4, R3,	#0
		BGE	locret_4BA
		ADDS	R0, R0,	#1
		ADC.W	R1, R1,	#0
		ADDS	R2, R2,	R2
		ADCS	R3, R3
		ORRS	R2, R3
		BNE	locret_4BA
		BIC.W	R0, R0,	#1

locret_4BA:
		POP	{R4,PC}
@ End of function sub_49E


@ =============== S U B	R O U T	I N E =======================================

@ printf

		.global	PutTextf

PutTextf:

var_14		= -0x14
varg_r0		= -0x10
varg_r1		= -0xC
varg_r2		= -8
varg_r3		= -4

		PUSH	{R0-R3}
		LDR	R3, =(fputc+1)
		PUSH	{R4,LR}
		ADD	R1, SP,	#0xC
		LDR	R2, =__stdout
		LDR	R0, [SP,#8]
		BL	_doprnt
		POP	{R4}
		LDR.W	PC, [SP],#0x14
@ End of function PutTextf

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool


@ =============== S U B	R O U T	I N E =======================================


_doprnt:

var_68		= -0x68
var_67		= -0x67
var_48		= -0x48
var_44		= -0x44
var_43		= -0x43
var_40		= -0x40
var_3C		= -0x3C
anonymous_0	= -0x2C

		PUSH.W	{R0-R11,LR}
		SUB	SP, SP,	#0x34
		MOV	R7, R1
		MOV	R5, R0
		MOVS	R6, #0
		B	loc_8AB8
@ ---------------------------------------------------------------------------

loc_8AAA:				@ ...
		CMP	R0, #0x25
		BEQ	loc_8AC6
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R5, R5,	#1
		ADDS	R6, R6,	#1

loc_8AB8:				@ ...
		LDRB	R0, [R5]
		CMP	R0, #0
		BNE	loc_8AAA

loc_8ABE:				@ ...
		ADD	SP, SP,	#0x44
		MOV	R0, R6
		POP.W	{R4-R11,PC}
@ ---------------------------------------------------------------------------

loc_8AC6:				@ ...
		MOVS	R4, #0
		MOV	R10, R4
		MOV	R9, R4
		MOVS	R2, #1
		LDR	R1, =0x12809
		B	loc_8AD4
@ ---------------------------------------------------------------------------

loc_8AD2:				@ ...
		ORRS	R4, R0

loc_8AD4:				@ ...
		LDRB.W	R3, [R5,#1]!
		SUBS	R3, #0x20
		LSL.W	R0, R2,	R3
		TST	R0, R1
		BNE	loc_8AD2
		LDRB	R0, [R5]
		CMP	R0, #0x2A
		BEQ	loc_8B0A
		MVN.W	R2, #0x2F

loc_8AEC:				@ ...
		LDRB	R0, [R5]
		SUB.W	R1, R0,	#0x30
		CMP	R1, #9
		BHI	loc_8B20
		ADD.W	R1, R10, R10,LSL#2
		ADD.W	R1, R2,	R1,LSL#1
		ORR.W	R4, R4,	#2
		ADD.W	R10, R0, R1
		ADDS	R5, R5,	#1
		B	loc_8AEC
@ ---------------------------------------------------------------------------

loc_8B0A:				@ ...
		LDMIA	R7!, {R0}
		MOVS.W	R10, R0
		BPL	loc_8B1A
		ORR.W	R4, R4,	#0x2000
		RSB.W	R10, R10, #0

loc_8B1A:				@ ...
		ORR.W	R4, R4,	#2
		ADDS	R5, R5,	#1

loc_8B20:				@ ...
		LDRB	R0, [R5]
		CMP	R0, #0x2E
		BNE	loc_8B56
		LDRB.W	R0, [R5,#1]!
		ORR.W	R4, R4,	#4
		CMP	R0, #0x2A
		BEQ	loc_8B50
		MVN.W	R2, #0x2F

loc_8B36:				@ ...
		LDRB	R0, [R5]
		SUB.W	R1, R0,	#0x30
		CMP	R1, #9
		BHI	loc_8B56
		ADD.W	R1, R9,	R9,LSL#2
		ADD.W	R1, R2,	R1,LSL#1
		ADD.W	R9, R0,	R1
		ADDS	R5, R5,	#1
		B	loc_8B36
@ ---------------------------------------------------------------------------

loc_8B50:				@ ...
		LDR.W	R9, [R7],#4
		ADDS	R5, R5,	#1

loc_8B56:				@ ...
		LDRB	R0, [R5]
		CMP	R0, #0x6C
		BEQ	loc_8B7C
		BGT	loc_8B6C
		CMP	R0, #0x4C
		BEQ	loc_8B92
		CMP	R0, #0x68
		BEQ	loc_8B82
		CMP	R0, #0x6A
		BNE	loc_8B94
		B	loc_8B76
@ ---------------------------------------------------------------------------

loc_8B6C:				@ ...
		CMP	R0, #0x74
		BEQ	loc_8B92
		CMP	R0, #0x7A
		BNE	loc_8B94
		B	loc_8B92
@ ---------------------------------------------------------------------------

loc_8B76:				@ ...
		ORR.W	R4, R4,	#0x200000
		B	loc_8B92
@ ---------------------------------------------------------------------------

loc_8B7C:				@ ...
		ORR.W	R4, R4,	#0x100000
		B	loc_8B86
@ ---------------------------------------------------------------------------

loc_8B82:				@ ...
		ORR.W	R4, R4,	#0x300000

loc_8B86:				@ ...
		LDRB	R1, [R5,#1]
		CMP	R1, R0
		BNE	loc_8B92
		ADD.W	R4, R4,	#0x100000
		ADDS	R5, R5,	#1

loc_8B92:				@ ...
		ADDS	R5, R5,	#1

loc_8B94:				@ ...
		LDRB	R2, [R5]
		CMP	R2, #0x6E
		BEQ	loc_8BDA
		BGT	loc_8BB6
		CMP	R2, #0x63
		BEQ	loc_8C04
		BGT	loc_8BAC
		CMP	R2, #0
		BEQ	loc_8ABE
		CMP	R2, #0x58
		BNE	loc_8BCE
		B	loc_8CF4
@ ---------------------------------------------------------------------------

loc_8BAC:				@ ...
		CMP	R2, #0x64
		BEQ	loc_8C82
		CMP	R2, #0x69
		BNE	loc_8BCE
		B	loc_8C82
@ ---------------------------------------------------------------------------

loc_8BB6:				@ ...
		CMP	R2, #0x73
		BEQ	loc_8C18
		BGT	loc_8BC6
		CMP	R2, #0x6F
		BEQ	loc_8CA8
		CMP	R2, #0x70
		BNE	loc_8BCE
		B	loc_8CFE
@ ---------------------------------------------------------------------------

loc_8BC6:				@ ...
		CMP	R2, #0x75
		BEQ	loc_8CAA
		CMP	R2, #0x78
		BEQ	loc_8CAC

loc_8BCE:				@ ...
		MOV	R0, R2
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R6, R6,	#1
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BDA:				@ ...
		UBFX.W	R0, R4,	#0x14, #3
		CMP	R0, #2
		BEQ	loc_8BF0
		CMP	R0, #3
		BEQ	loc_8BFA
		CMP	R0, #4
		LDMIA	R7!, {R0}
		BEQ	loc_8C00
		STR	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BF0:				@ ...
		LDMIA	R7!, {R0}
		ASRS	R1, R6,	#0x1F
		STRD.W	R6, R1,	[R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BFA:				@ ...
		LDMIA	R7!, {R0}
		STRH	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8C00:				@ ...
		STRB	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8C04:				@ ...
		LDRB.W	R0, [R7],#4
		STRB.W	R0, [SP]
		MOVS	R0, #0
		STRB.W	R0, [SP,#1]
		MOV	R11, SP
		MOVS	R0, #1
		B	loc_8C20
@ ---------------------------------------------------------------------------

loc_8C18:				@ ...
		LDR.W	R11, [R7],#4
		MOV.W	R0, #0xFFFFFFFF

loc_8C20:				@ ...
		LSLS	R1, R4,	#0x1D
		MOV.W	R1, #0
		BMI	loc_8C2E
		B	loc_8C46
@ ---------------------------------------------------------------------------

loc_8C2A:				@ ...
		ADD.W	R1, R8,	#1

loc_8C2E:				@ ...
		MOV	R8, R1
		CMP	R1, R9
		BGE	loc_8C54
		CMP	R8, R0
		BLT	loc_8C2A
		LDRB.W	R1, [R11,R8]
		CMP	R1, #0
		BNE	loc_8C2A
		B	loc_8C54
@ ---------------------------------------------------------------------------

loc_8C42:				@ ...
		ADD.W	R1, R8,	#1

loc_8C46:				@ ...
		MOV	R8, R1
		CMP	R1, R0
		BLT	loc_8C42
		LDRB.W	R1, [R11,R8]
		CMP	R1, #0
		BNE	loc_8C42

loc_8C54:				@ ...
		LDRD.W	R2, R3,	[SP,#0x3C]
		SUB.W	R0, R10, R8
		MOV	R9, R0
		MOV	R1, R4
		BL	sub_8ED0
		ADD	R0, R6
		ADD.W	R6, R0,	R8
		B	loc_8C76
@ ---------------------------------------------------------------------------

loc_8C6C:				@ ...
		LDRD.W	R1, R2,	[SP,#0x3C]
		LDRB.W	R0, [R11],#1
		BLX	R2

loc_8C76:				@ ...
		SUBS.W	R8, R8,	#1
		BCS	loc_8C6C
		MOV	R1, R4
		MOV	R0, R9
		B	loc_8E72
@ ---------------------------------------------------------------------------

loc_8C82:				@ ...
		MOVS	R1, #0xA
		UBFX.W	R3, R4,	#0x14, #3
		MOV.W	R11, #0
		STR	R1, [SP,#0x20]
		CMP	R3, #2
		BEQ	loc_8C9C
		LDMIA	R7!, {R0}
		ASRS	R1, R0,	#0x1F
		CMP	R3, #3
		BEQ	loc_8CAE
		B	loc_8CB2
@ ---------------------------------------------------------------------------

loc_8C9C:				@ ...
		ADDS	R7, R7,	#7
		BIC.W	R7, R7,	#7
		LDRD.W	R0, R1,	[R7],#8
		B	loc_8CBA
@ ---------------------------------------------------------------------------

loc_8CA8:				@ ...
		B	loc_8D10
@ ---------------------------------------------------------------------------

loc_8CAA:				@ ...
		B	loc_8CEC
@ ---------------------------------------------------------------------------

loc_8CAC:				@ ...
		B	loc_8CF0
@ ---------------------------------------------------------------------------

loc_8CAE:				@ ...
		SXTH	R0, R0
		ASRS	R1, R0,	#0x1F

loc_8CB2:				@ ...
		CMP	R3, #4
		BNE	loc_8CBA
		SXTB	R0, R0
		ASRS	R1, R0,	#0x1F

loc_8CBA:				@ ...
		SUBS	R3, R0,	#0
		SBCS.W	R3, R1,	#0
		BGE	loc_8CD2
		MOV.W	R12, #0
		RSBS.W	R0, R0,	R12
		SBC.W	R1, R12, R1
		MOVS	R3, #0x2D
		B	loc_8CD8
@ ---------------------------------------------------------------------------

loc_8CD2:				@ ...
		LSLS	R3, R4,	#0x14
		BPL	loc_8CE0
		MOVS	R3, #0x2B

loc_8CD8:				@ ...
		STRB.W	R3, [SP,#0x24]
		MOVS	R3, #1
		B	loc_8CE8
@ ---------------------------------------------------------------------------

loc_8CE0:				@ ...
		LSLS	R3, R4,	#0x1F
		BEQ	loc_8CE8
		MOVS	R3, #0x20
		B	loc_8CD8
@ ---------------------------------------------------------------------------

loc_8CE8:				@ ...
		MOV	R8, R3
		B	loc_8D9E
@ ---------------------------------------------------------------------------

loc_8CEC:				@ ...
		MOVS	R1, #0xA
		B	loc_8D12
@ ---------------------------------------------------------------------------

loc_8CF0:				@ ...
		MOVS	R1, #0x10
		B	loc_8D12
@ ---------------------------------------------------------------------------

loc_8CF4:				@ ...
		MOVS	R0, #0x10
		MOV.W	R11, #0
		STR	R0, [SP,#0x20]
		B	loc_8D18
@ ---------------------------------------------------------------------------

loc_8CFE:				@ ...
		MOVS	R1, #0x10
		MOV.W	R11, #0
		ORR.W	R4, R4,	#4
		MOV.W	R9, #8
		STR	R1, [SP,#0x20]
		B	loc_8D18
@ ---------------------------------------------------------------------------

loc_8D10:				@ ...
		MOVS	R1, #8

loc_8D12:				@ ...
		MOV.W	R11, #0
		STR	R1, [SP,#0x20]

loc_8D18:				@ ...
		UBFX.W	R3, R4,	#0x14, #3
		CMP	R3, #2
		BEQ	loc_8D2A
		LDMIA	R7!, {R0}
		MOVS	R1, #0
		CMP	R3, #3
		BEQ	loc_8D36
		B	loc_8D38
@ ---------------------------------------------------------------------------

loc_8D2A:				@ ...
		ADDS	R7, R7,	#7
		BIC.W	R7, R7,	#7
		LDRD.W	R0, R1,	[R7],#8
		B	loc_8D3E
@ ---------------------------------------------------------------------------

loc_8D36:				@ ...
		UXTH	R0, R0

loc_8D38:				@ ...
		CMP	R3, #4
		BNE	loc_8D3E
		UXTB	R0, R0

loc_8D3E:				@ ...
		MOV.W	R8, #0
		LSLS	R3, R4,	#0x1C
		BPL	loc_8D9E
		CMP	R2, #0x70
		BEQ	loc_8D5A
		LDR.W	R12, [SP,#0x20]
		EOR.W	R12, R12, #0x10
		ORRS.W	R12, R12, R11
		BEQ	loc_8D64
		B	loc_8D78
@ ---------------------------------------------------------------------------

loc_8D5A:				@ ...
		MOVS	R3, #0x40
		STRB.W	R3, [SP,#0x68+var_44]
		MOVS	R3, #1
		B	loc_8D76
@ ---------------------------------------------------------------------------

loc_8D64:				@ ...
		ORRS.W	R3, R0,	R1
		BEQ	loc_8D78
		MOVS	R3, #0x30
		STRB.W	R3, [SP,#0x24]
		STRB.W	R2, [SP,#0x25]
		MOVS	R3, #2

loc_8D76:				@ ...
		MOV	R8, R3

loc_8D78:				@ ...
		LDR.W	R12, [SP,#0x20]
		EOR.W	R12, R12, #8
		ORRS.W	R12, R12, R11
		BNE	loc_8D9E
		ORRS.W	R3, R0,	R1
		BNE	loc_8D90
		LSLS	R3, R4,	#0x1D
		BPL	loc_8D9E

loc_8D90:				@ ...
		MOVS	R3, #0x30
		STRB.W	R3, [SP,#0x24]
		MOV.W	R8, #1
		SUB.W	R9, R9,	#1

loc_8D9E:				@ ...
		CMP	R2, #0x58
		BEQ	loc_8DAC
		ADR	R2, a0123456789abcd

loc_8DA4:				@ ...
		STR	R2, [SP,#0x2C]
		ADD	R2, SP,	#0x20
		STR	R2, [SP,#0x28]
		B	loc_8DC4
@ ---------------------------------------------------------------------------

loc_8DAC:				@ ...
		ADR	R2, a0123456789ab_0
		B	loc_8DA4
@ ---------------------------------------------------------------------------

loc_8DB0:				@ ...
		MOV	R3, R11
		LDR	R2, [SP,#0x20]
		BL	sub_2C8
		LDR	R3, [SP,#0x2C]
		LDRB	R3, [R3,R2]
		LDR	R2, [SP,#0x28]
		SUBS	R2, R2,	#1
		STR	R2, [SP,#0x28]
		STRB	R3, [R2]

loc_8DC4:				@ ...
		ORRS.W	R2, R0,	R1
		BNE	loc_8DB0
		LDR	R0, [SP,#0x28]
		SUB.W	R0, SP,	R0
		ADD.W	R11, R0, #0x20
		LSLS	R0, R4,	#0x1D
		BPL	loc_8DDE
		BIC.W	R4, R4,	#0x10000
		B	loc_8DE2
@ ---------------------------------------------------------------------------

loc_8DDE:				@ ...
		MOV.W	R9, #1

loc_8DE2:				@ ...
		CMP	R9, R11
		BLE	loc_8DEC
		SUB.W	R0, R9,	R11
		B	loc_8DEE
@ ---------------------------------------------------------------------------

loc_8DEC:				@ ...
		MOVS	R0, #0

loc_8DEE:				@ ...
		ADD.W	R1, R0,	R11
		ADD	R1, R8
		STR	R0, [SP,#0x20]
		SUB.W	R10, R10, R1
		LSLS	R0, R4,	#0xF
		BMI	loc_8E0C
		LDRD.W	R2, R3,	[SP,#0x3C]
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_8ED0
		ADD	R6, R0

loc_8E0C:				@ ...
		MOV.W	R9, #0
		B	loc_8E24
@ ---------------------------------------------------------------------------

loc_8E12:				@ ...
		ADD	R1, SP,	#0x24
		LDRB.W	R0, [R1,R9]
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADD.W	R9, R9,	#1
		ADDS	R6, R6,	#1

loc_8E24:				@ ...
		CMP	R9, R8
		BLT	loc_8E12
		LSLS	R0, R4,	#0xF
		BPL	loc_8E46
		LDRD.W	R2, R3,	[SP,#0x3C]
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_8ED0
		ADD	R6, R0
		B	loc_8E46
@ ---------------------------------------------------------------------------

loc_8E3C:				@ ...
		LDRD.W	R1, R2,	[SP,#0x3C]
		MOVS	R0, #0x30
		BLX	R2
		ADDS	R6, R6,	#1

loc_8E46:				@ ...
		LDR	R1, [SP,#0x20]
		SUBS	R0, R1,	#1
		STR	R0, [SP,#0x20]
		CMP	R1, #0
		BGT	loc_8E3C
		B	loc_8E64
@ ---------------------------------------------------------------------------

loc_8E52:				@ ...
		LDR	R0, [SP,#0x28]
		LDR	R1, [SP,#0x28]
		LDRB	R0, [R0]
		ADDS	R1, R1,	#1
		STR	R1, [SP,#0x28]
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R6, R6,	#1

loc_8E64:				@ ...
		SUBS.W	R1, R11, #0
		SUB.W	R11, R11, #1
		BGT	loc_8E52
		MOV	R1, R4
		MOV	R0, R10

loc_8E72:				@ ...
		LDRD.W	R2, R3,	[SP,#0x3C]
		BL	sub_8EAC
		ADD	R6, R0

loc_8E7C:				@ ...
		ADDS	R5, R5,	#1
		B	loc_8AB8
@ End of function _doprnt

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
a0123456789abcd:.ascii "0123456789abcdef" @ ...
		.byte 0
		.balign 4,0
a0123456789ab_0:.ascii "0123456789ABCDEF" @ ...
		.byte 0
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


sub_8EAC:				@ ...
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOVS	R5, #0
		MOV	R6, R3
		MOV	R7, R2
		LSLS	R0, R1,	#0x12
		BMI	loc_8EC6
		B	loc_8ECA
@ ---------------------------------------------------------------------------

loc_8EBE:				@ ...
		MOV	R1, R7
		MOVS	R0, #0x20
		BLX	R6
		ADDS	R5, R5,	#1

loc_8EC6:				@ ...
		SUBS	R4, R4,	#1
		BPL	loc_8EBE

loc_8ECA:				@ ...
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function sub_8EAC


@ =============== S U B	R O U T	I N E =======================================


sub_8ED0:				@ ...
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOVS	R5, #0
		MOV	R6, R3
		MOV	R8, R2
		LSLS	R0, R1,	#0xF
		BPL	loc_8EE4
		MOVS	R7, #0x30
		B	loc_8EE6
@ ---------------------------------------------------------------------------

loc_8EE4:				@ ...
		MOVS	R7, #0x20

loc_8EE6:				@ ...
		LSLS	R0, R1,	#0x12
		BPL	loc_8EF4
		B	loc_8EF8
@ ---------------------------------------------------------------------------

loc_8EEC:				@ ...
		MOV	R1, R8
		MOV	R0, R7
		BLX	R6
		ADDS	R5, R5,	#1

loc_8EF4:				@ ...
		SUBS	R4, R4,	#1
		BPL	loc_8EEC

loc_8EF8:				@ ...
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function sub_8ED0

@ ---------------------------------------------------------------------------
		.balign 4,0


@ =============== S U B	R O U T	I N E =======================================

@ char fputc( char, FILE* )
fputc:
		PUSH	{LR}
		MOV		R3, R0
		BL		UART0_Cout
		MOV		R0, R3
		POP		{PC}
@ End of function fputc

@ ===========================================================================

		.section	.myevic

		.global	DrawHexDigit

DrawHexDigit:
		and		r2, #0xF
		add		r2, #1
		cmp		r2, #0xB
		blt		1f
		add		r2, #0x5D
1:		mov		r3, #1
		b		DrawImage

		.global	DrawHexDigit2

DrawHexDigit2:
		and		r2, #0xF
		add		r2, #0x1F
		cmp		r2, #0x29
		blt		1f
		add		r2, #0x73
		add		r1, #2
1:		mov		r3, #1
		b		DrawImage

		.global	DrawHexLong

DrawHexLong:
		push	{r4-r8,lr}
		mov		r5, r0
		mov		r6, r1
		mov		r7, r2
		mov		r8, r3
		movs	r4, #28
1:		lsr		r2, r4
		mov		r3, r8
		cbz		r3, 2f
		bl		DrawHexDigit2
		add		r5, #8
		b		3f
2:		bl		DrawHexDigit
		add		r5, #6
3:		mov		r0, r5
		mov		r1, r6
		mov		r2, r7
		subs	r4, #4
		bpl		1b
		pop		{r4-r8,pc}


@ ---------------------------------------------------------------------------
@ BSOD

Plantage:
		mov		r0, #4
		mov		r1, lr
		tst		r0, r1
		beq		2f
		mrs		r6, psp
		b		3f
2:		mrs		r6, msp
3:
		mrs		r4, xpsr

		mov		r0, r4
		mov		r1, r6
		bl		Plantouille
		b		.


@ ---------------------------------------------------------------------------
@ ul sqrtul( ul )

		.global	sqrtul

sqrtul:
		fmsr	s0, r0
		fuitos	s0, s0
		fsqrts	s0, s0
		ftouis	s0, s0
		fmrs	r0, s0
		bx		lr

@ ---------------------------------------------------------------------------

		.end

