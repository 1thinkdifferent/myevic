@
@ +-------------------------------------------------------------------------+
@ |   This file	has been generated by The Interactive Disassembler (IDA)    |
@ |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
@ |			 License info: 48-B611-7234-BB			    |
@ |		Doskey Lee, Kingsoft Internet Security Software		    |
@ +-------------------------------------------------------------------------+
@
@ Input	MD5   :	5366F56114EBD4C7FC252D3D56164D9D
@ Input	CRC32 :	ACCB3046

@ File Name   :	H:\Users\Ferox\Downloads\UpdateFirmware\eVic_VTC_Mini_V3.03_dec.bin
@ Format      :	Binary file

@ Processor	  : ARM
@ ARM architecture: ARMv7-M
@ Target assembler: GNU	assembler
@ Byte sex	  : Little endian

@ ===========================================================================

		.syntax	unified

@ ===========================================================================

		.set modifs,1
		.set keeporgcode,0
		.set keeporgcode_eabi,0
		.set keeporglibs_tmr,0
		.set keeporglibs_eadc,0
		.set keeporglibs_wdt,0
		.set keeporglibs_uart,0
		.set keeporglibs_sys,0
		.set keeporglibs_spi,0
		.set keeporglibs_clk,0
		.set keeporglibs_pwm,0
		.set keeporglibs_gpio,0
		.set keeporglibs_nvic,0
		.set keeporglibs_crc,0
		.set keeporglibs_fmc,0
		.set keeporglibs_usbd,0
		.set keeporgcode_usbd,0

@ ===========================================================================

		.include "globals.s"
		.include "rodata.s"
		.include "sram.s"

@ ===========================================================================

		.section .isr_vectors

		.long Stack_Top
		.long Reset_Handler+1
		.long NMI_Handler+1
		.long Plantage+1			@	HardFault_Handler+1
		.long Plantage+1			@	MemManage_Handler+1
		.long Plantage+1			@	BusFault_Handler+1
		.long Plantage+1			@	UsageFault_Handler+1
		.long 0
		.long 0
		.long 0
		.long 0
		.long SVC_Handler+1
		.long DebugMon_Handler+1
		.long 0
		.long PendSV_Handler+1
		.long SysTick_Handler+1
		.long Default_Handler+1		@  0 : Brown-Out Detector
		.long Default_Handler+1		@  1 : Internal	RC
		.long Default_Handler+1		@  2 : Power down wake up
		.long Default_Handler+1		@  3 : RAM parity error
		.long Default_Handler+1		@  4 : Clock detection fail
		.long Default_Handler+1		@  5 : Reserved
		.long RTC_IRQHandler+1		@  6 : Real Time Clock
		.long Default_Handler+1		@  7 : Backup register tamper interrupt
		.long Default_Handler+1		@  8 : Watchdog	timer
		.long Default_Handler+1		@  9 : Window watchdog timer
		.long Default_Handler+1		@ 10 : External	Input 0
		.long Default_Handler+1		@ 11 : External	Input 1
		.long Default_Handler+1		@ 12 : External	Input 2
		.long Default_Handler+1		@ 13 : External	Input 3
		.long Default_Handler+1		@ 14 : External	Input 4
		.long Default_Handler+1		@ 15 : External	Input 5
		.long Default_Handler+1		@ 16 : GPIO Port A
		.long Default_Handler+1		@ 17 : GPIO Port B
		.long Default_Handler+1		@ 18 : GPIO Port C
		.long GPD_IRQHandler+1		@ 19 : GPIO Port D
		.long GPE_IRQHandler+1		@ 20 : GPIO Port E
		.long GPF_IRQHandler+1		@ 21 : GPIO Port F
		.long Default_Handler+1		@ 22 : SPI0
		.long Default_Handler+1		@ 23 : SPI1
		.long Default_Handler+1		@ 24 : PWM0 brake
		.long Default_Handler+1		@ 25 : PWM0 pair 0
		.long Default_Handler+1		@ 26 : PWM0 pair 1
		.long Default_Handler+1		@ 27 : PWM0 pair 2
		.long Default_Handler+1		@ 28 : PWM1 brake
		.long Default_Handler+1		@ 29 : PWM1 pair 0
		.long Default_Handler+1		@ 30 : PWM1 pair 1
		.long Default_Handler+1		@ 31 : PWM1 pair 2
		.long TMR0_IRQHandler+1		@ 32 : Timer 0
		.long TMR1_IRQHandler+1		@ 33 : Timer 1
		.long TMR2_IRQHandler+1		@ 34 : Timer 2
		.long TMR3_IRQHandler+1		@ 35 : Timer 3
		.long Default_Handler+1		@ 36 : UART0
		.long Default_Handler+1		@ 37 : UART1
		.long Default_Handler+1		@ 38 : I2C0
		.long Default_Handler+1		@ 39 : I2C1
		.long Default_Handler+1		@ 40 : Peripheral DMA
		.long Default_Handler+1		@ 41 : DAC
		.long ADC00_IRQHandler+1 	@ 42 :	ADC0 interrupt source 0
		.long Default_Handler+1		@ 43 : ADC0 interrupt source 1
		.long Default_Handler+1		@ 44 : ACMP0 and ACMP1
		.long Default_Handler+1		@ 45 : Reserved
		.long Default_Handler+1		@ 46 : ADC0 interrupt source 2
		.long Default_Handler+1		@ 47 : ADC0 interrupt source 3
		.long Default_Handler+1		@ 48 : UART2
		.long Default_Handler+1		@ 49 : UART3
		.long Default_Handler+1		@ 50 : Reserved
		.long Default_Handler+1		@ 51 : SPI2
		.long Default_Handler+1		@ 52 : Reserved
		.long USBD_IRQHandler+1		@ 53 : USB device
		.long Default_Handler+1		@ 54 : USB host
		.long Default_Handler+1		@ 55 : USB OTG
		.long Default_Handler+1		@ 56 : CAN0
		.long Default_Handler+1		@ 57 : Reserved
		.long Default_Handler+1		@ 58 : Smart card host 0 interrupt
		.long Default_Handler+1		@ 59 : Reserved
		.long Default_Handler+1		@ 60 : Reserved
		.long Default_Handler+1		@ 61 : Reserved
		.long Default_Handler+1		@ 62 : Reserved
		.long Default_Handler+1		@ 63 : Touch key interrupt


@ ===========================================================================
@ Segment type:	Pure code

		.text
		.code 16

@ =============== S U B	R O U T	I N E =======================================


Startup:				@ ...
		ldr.w	sp, =Stack_Top

		ldr		r4, =RAMInitTable
		ldr		r5, =RAMInitEnd
2:		cmp 	r4, r5
		beq		1f
		ldmia	r4!, {r0, r1, r2}
		cmp		r0, r1
		beq		3f
		bl		MemCpy2
		b		2b
3:		bl		MemClear2
		b		2b
1:
		ldr	r0, =(Main+1)
		bx	r0

		.balign 4,0
		.pool


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

HardFault_Handler:

		MOVS	R0, #4
		MOV	R1, LR
		TST	R0, R1
		BEQ	loc_162
		MRS.W	R0, PSP
		B	loc_166
@ ---------------------------------------------------------------------------

loc_162:
		MRS.W	R0, MSP

loc_166:
		MOV	R1, LR
		LDR	R2, =(loc_2CB0+1)
		BX	R2 @ loc_2CB0

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		
		.endif

@ End of function HardFault_Handler

@ =============== S U B	R O U T	I N E =======================================

Reset_Handler:
		LDR		R0, =0x40000100	@ SYS_REGLCTL
		MOV.W	R1, #0x59		@ Unlock sequence
		STR		R1, [R0]
		MOV.W	R1, #0x16
		STR		R1, [R0]
		MOV.W	R1, #0x88
		STR		R1, [R0]
		LDR		R2, =0x40000024	@ SYS_PORCTL
		MOVW	R1, #0x5AA5		@ POROFF
		STR		R1, [R2]
		LDR		R2, =0x40000200
		LDR		R1, [R2]		@ CLK_PWRCTL
		BIC.W	R1, R1,	#0x1000	@ HTX Crystal type INV
		STR		R1, [R2]
		MOVS	R1, #0			@ Lock registers
		STR		R1, [R0]
		LDR		R0, =(EnableFPU+1)
		BLX		R0 @ EnableFPU
		LDR		R0, =(Startup+1)
		BX		R0 @ Startup

		.balign 4,0
		.pool

@ End of function Reset_Handler

@ =============== S U B	R O U T	I N E =======================================
@ Unused Handlers

NMI_Handler:
MemManage_Handler:
BusFault_Handler:
UsageFault_Handler:
SVC_Handler:
DebugMon_Handler:
PendSV_Handler:
SysTick_Handler:
Default_Handler:

		B	.

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

Random:					@ ...
		LDR	R1, =RNGSeed
		LDR	R2, =0x41C64E6D
		LDR	R0, [R1]
		MULS	R0, R2
		MOVW	R2, #12345
		ADD	R0, R2
		STR	R0, [R1]
		LSRS	R0, R0,	#1
		BX	LR

@ End of function Random


@ =============== S U B	R O U T	I N E =======================================


SetRandSeed:				@ ...
		LDR	R1, =RNGSeed
		STR	R0, [R1]
		BX	LR

		.balign 4,0
		.pool

@ End of function SetRandSeed

		.endif
		
@ =============== S U B	R O U T	I N E =======================================


MemCpy:
		ORR.W	R3, R0,	R1
		LSLS	R3, R3,	#30
		BEQ		loc_200
		B		loc_20E
@ ---------------------------------------------------------------------------

loc_1FA:
		LDMIA	R1!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R0!, {R3}

loc_200:
		CMP		R2, #4
		BCS		loc_1FA
		B		loc_20E
@ ---------------------------------------------------------------------------

loc_206:
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_20E:
		SUBS	R2, R2,	#1
		BCS		loc_206
		BX		LR

@ End of function MemCpy


@ =============== S U B	R O U T	I N E =======================================


MemSet2:
		UXTB	R2, R2
		B		loc_21C
@ ---------------------------------------------------------------------------

loc_218:
		STRB.W	R2, [R0],#1

loc_21C:
		SUBS	R1, R1,	#1
		BCS		loc_218
		BX		LR

@ End of function MemSet2


@ =============== S U B	R O U T	I N E =======================================


MemClear:
		MOVS	R2, #0
		B		MemSet2

@ End of function MemClear


@ =============== S U B	R O U T	I N E =======================================


@ void *__fastcall MemSet(void *, char,	unsigned int)

MemSet:
		PUSH	{R4,LR}
		MOV		R3, R2
		MOV		R2, R1
		MOV		R4, R0
		MOV		R1, R3
		BL		MemSet2
		MOV		R0, R4
		POP		{R4,PC}
		
@ End of function MemSet


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_eabi

@ __int64 __fastcall double2int64()
double2int64:				@ ...
		UBFX.W	R2, R1,	#20, #11
		PUSH	{R4,LR}
		UBFX.W	R1, R1,	#0, #20
		MOVW	R3, #0x3FF
		ORR.W	R1, R1,	#0x100000 @ high
		CMP	R2, R3
		BGE	loc_252
		MOVS	R0, #0		@ low
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_252:				@ ...
		MOVW	R3, #0x433
		CMP	R2, R3
		SUBW	R2, R2,	#0x433
		BGT	loc_266
		NEGS	R2, R2
		BL	lsr64
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_266:				@ ...
		LSLS	R0, R2
		POP	{R4,PC}
@ End of function double2int64


@ =============== S U B	R O U T	I N E =======================================


@ __int64 __fastcall float2double(int)
float2double:				@ ...
		AND.W	R2, R0,	#0x80000000 @ sign
		BICS.W	R0, R0,	#0x80000000
		BEQ	loc_28A
		LSRS	R1, R0,	#23	@ exponent
		ADD.W	R1, R1,	#0x380
		UBFX.W	R0, R0,	#0, #23	@ mantissa
		ORR.W	R1, R2,	R1,LSL#20
		LSRS	R2, R0,	#3
		LSLS	R0, R0,	#29
		ORRS	R1, R2
		BX	LR
@ ---------------------------------------------------------------------------

loc_28A:				@ ...
		MOVS	R0, #0
		MOV	R1, R0
		BX	LR
@ End of function float2double


@ =============== S U B	R O U T	I N E =======================================


double2float:				@ ...

@ FUNCTION CHUNK AT 0000034A SIZE 00000012 BYTES

		AND.W	R3, R1,	#0x80000000
		PUSH	{R4,R5}
		BIC.W	R1, R1,	#0x80000000
		ORRS.W	R2, R0,	R1
		BEQ	loc_2AE
		LSRS	R2, R1,	#20
		SUB.W	R2, R2,	#0x380
		UBFX.W	R1, R1,	#0, #20
		CMP	R2, #0
		BGT	loc_2B4

loc_2AE:				@ ...
		POP	{R4,R5}
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_2B4:				@ ...
		LSRS	R4, R0,	#29
		ORR.W	R4, R4,	R1,LSL#3
		LSLS	R1, R0,	#3
		ADDS	R0, R4,	R3
		POP	{R4,R5}
		ADD.W	R0, R0,	R2,LSL#23
		B.W	loc_34A
@ End of function double2float

		.endif

@ =============== S U B	R O U T	I N E =======================================


sub_2C8:				@ ...
		PUSH.W	{R4-R12,LR}
		MOV	R5, R0
		MOVS	R0, #0
		MOV	R10, R2
		MOV	R11, R3
		MOV	R8, R1
		MOV	R6, R0
		MOV	R9, R0
		MOVS	R4, #0x40
		B	loc_316
@ ---------------------------------------------------------------------------

loc_2DE:				@ ...
		MOV	R0, R5		@ low
		MOV	R1, R8		@ high
		MOV	R7, R8
		MOV	R2, R4		@ shift
		BL	lsr64
		MOV	R3, R10
		MOV	R2, R11
		SUBS	R0, R0,	R3
		SBCS	R1, R2
		BCC	loc_316
		MOV	R1, R2		@ high
		MOV	R0, R3		@ low
		MOV	R2, R4		@ shift
		BL	lsl64
		SUBS	R5, R5,	R0
		SBC.W	R8, R7,	R1
		MOV	R7, R9
		MOV	R2, R4		@ shift
		MOVS	R0, #1		@ low
		MOVS	R1, #0		@ high
		BL	lsl64
		ADDS.W	R9, R7,	R0
		ADCS	R6, R1

loc_316:				@ ...
		SUBS	R0, R4,	#0
		SUB.W	R4, R4,	#1
		BGT	loc_2DE
		MOV	R0, R9
		MOV	R1, R6
		MOV	R2, R5
		MOV	R3, R8
		POP.W	{R4-R12,PC}
@ End of function sub_2C8


@ =============== S U B	R O U T	I N E =======================================


@ __int64 __fastcall lsr64(int low, int	high, int shift)
lsr64:					@ ...
		CMP	R2, #0x20
		BLT	loc_338
		SUBS	R2, #0x20
		LSR.W	R0, R1,	R2
		MOVS	R1, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_338:				@ ...
		LSR.W	R3, R1,	R2
		LSRS	R0, R2
		RSB.W	R2, R2,	#0x20
		LSLS	R1, R2
		ORRS	R0, R1
		MOV	R1, R3
		BX	LR
@ End of function lsr64

@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR double2float

		.ifne	keeporgcode_eabi

loc_34A:
		CMP	R1, #0
		IT ge
		BXGE	LR
		ADDS	R0, R0,	#1
		LSLS	R1, R1,	#1
		IT eq
		BICEQ.W	R0, R0,	#1
		BX	LR
@ END OF FUNCTION CHUNK	FOR double2float

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_eabi
@unused
sub_35C:
		PUSH	{R4}
		CLZ.W	R12, R0
		LSL.W	R0, R0,	R12
		ORRS.W	R4, R0,	R1
		ITT eq
		POPEQ	{R4}
		BXEQ	LR
		CBZ	R1, loc_386
		RSB.W	R4, R12, #0x20
		LSR.W	R4, R1,	R4
		LSLS.W	R1, R1,	R12
		IT ne
		MOVNE	R1, #1
		ORRS	R1, R4
		ORRS	R0, R1

loc_386:				@ ...
		SUB.W	R1, R3,	R12
		ADDS	R3, R1,	#7
		MOV.W	R1, R0,LSL#24
		MOV.W	R0, R0,LSR#8
		ITTT mi
		MOVMI	R0, #0
		POPMI	{R4}
		BXMI	LR
		ADD.W	R0, R0,	R3,LSL#23
		ADD	R0, R2
		CMP	R1, #0
		ITT ge
		POPGE	{R4}
		BXGE	LR
		ADDS	R0, R0,	#1
		LSLS	R1, R1,	#1
		IT eq
		BICEQ.W	R0, R0,	#1
		POP	{R4}
		BX	LR
@ End of function sub_35C

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_eabi

@ used by sqrtd()
sub_3B8:				@ ...
		PUSH.W	{R4-R8,R10,R11,LR}
		MOVS	R3, #0
		MOV	R2, R3
		SUBS	R3, R3,	R0
		SBCS	R2, R1
		BLT	loc_3CE
		MOVS	R0, #0
		MOV	R1, R0
		POP.W	{R4-R8,R10,R11,PC}
@ ---------------------------------------------------------------------------

loc_3CE:				@ ...
		UBFX.W	R2, R1,	#20, #11
		UBFX.W	R1, R1,	#0, #20
		ORR.W	R5, R1,	#0x100000
		MOV.W	R11, #0
		LSLS	R1, R2,	#31
		BNE	loc_3E8
		ADDS	R0, R0,	R0
		ADCS	R5, R5
		SUBS	R2, R2,	#1

loc_3E8:				@ ...
		MOVS	R7, #0
		MOV	R4, R0
		MOVW	R1, #0x1FF
		MOV	R0, R7
		ADD.W	R10, R1, R2,ASR#1
		MOV	R6, R7
		MOV	R8, R0

loc_3FA:				@ ...
		MOV	R2, R0		@ shift
		MOVS	R0, #0		@ low
		MOV.W	R1, #0x100000	@ high
		BL	lsr64
		ADDS	R2, R0,	R7
		ADCS	R1, R6
		ADDS	R3, R7,	R2
		ADC.W	R0, R6,	R1
		SUBS.W	R12, R4, R3
		SBCS.W	R12, R5, R0
		BCC	loc_424
		SUBS	R4, R4,	R3
		SBC.W	R5, R5,	R0
		MOV	R7, R2
		MOV	R6, R1

loc_424:				@ ...
		ADDS	R4, R4,	R4
		ADD.W	R0, R8,	#1
		ADCS	R5, R5
		MOV	R8, R0
		CMP	R0, #0x34
		BLE	loc_3FA
		ADDS	R1, R7,	R7
		ADC.W	R0, R6,	R6
		SUBS	R1, R1,	R4
		SBCS	R0, R5
		BCS	loc_446
		MOV.W	R2, #0xFFFFFFFF
		MOV	R3, R2
		B	loc_44A
@ ---------------------------------------------------------------------------

loc_446:				@ ...
		MOVS	R2, #0
		MOV	R3, R2

loc_44A:				@ ...
		ADDS.W	R0, R11, R7
		ADC.W	R1, R6,	R10,LSL#20
		POP.W	{R4-R8,R10,R11,LR}
		B.W	sub_49E
@ End of function sub_3B8

		.endif

@ =============== S U B	R O U T	I N E =======================================


@ __int64 __cdecl lsl64(int low, int high, int shift)
lsl64:					@ ...
		CMP	R2, #0x20
		BLT	loc_48E
		SUBS	R2, #0x20
		LSL.W	R1, R0,	R2
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_48E:				@ ...
		LSLS	R1, R2
		RSB.W	R3, R2,	#0x20
		LSR.W	R3, R0,	R3
		ORRS	R1, R3
		LSLS	R0, R2
		BX	LR
@ End of function lsl64


@ =============== S U B	R O U T	I N E =======================================


sub_49E:
		PUSH	{R4,LR}
		SUBS	R4, R2,	#0
		SBCS.W	R4, R3,	#0
		BGE	locret_4BA
		ADDS	R0, R0,	#1
		ADC.W	R1, R1,	#0
		ADDS	R2, R2,	R2
		ADCS	R3, R3
		ORRS	R2, R3
		BNE	locret_4BA
		BIC.W	R0, R0,	#1

locret_4BA:
		POP	{R4,PC}
@ End of function sub_49E


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_eabi
@unused
sub_4BC:

anonymous_0	=  0
arg_8		=  8

		PUSH.W	{R4-R8,R10,R11,LR}
		MOV	R10, R2
		MOV	R11, R3
		CBZ	R1, loc_4CC
		CLZ.W	R2, R1
		B	loc_4D2
@ ---------------------------------------------------------------------------

loc_4CC:				@ ...
		CLZ.W	R2, R0
		ADDS	R2, #0x20	@ shift

loc_4D2:				@ ...
		MOV	R8, R2
		BL	lsl64
		MOV	R4, R0
		MOV	R7, R1
		ORR.W	R0, R0,	R10
		ORR.W	R1, R1,	R11
		MOV	R3, R10
		MOV	R2, R11
		ORRS	R0, R1
		BEQ	loc_514
		MOV	R1, R2		@ high
		ORRS.W	R0, R3,	R1
		BEQ	loc_528
		RSB.W	R2, R8,	#0x40
		MOV	R0, R10		@ low
		BL	lsr64
		MOV	R5, R0
		MOV	R6, R1
		MOV	R0, R10		@ low
		MOV	R1, R11		@ high
		MOV	R2, R8		@ shift
		BL	lsl64
		ORRS	R0, R1
		BEQ	loc_51C
		MOVS	R0, #1
		B	loc_51E
@ ---------------------------------------------------------------------------

loc_514:				@ ...
		MOV	R0, R4
		MOV	R1, R7

locret_518:				@ ...
		POP.W	{R4-R8,R10,R11,PC}
@ ---------------------------------------------------------------------------

loc_51C:				@ ...
		MOVS	R0, #0

loc_51E:				@ ...
		ORRS	R5, R0
		ORR.W	R6, R6,	R0,ASR#31
		ORRS	R4, R5
		ORRS	R7, R6

loc_528:				@ ...
		LDR	R0, [SP,#0x20+arg_8]
		LSLS	R3, R4,	#0x15
		LSRS	R4, R4,	#0xB
		SUB.W	R0, R0,	R8
		MOVS	R2, #0
		LSRS	R5, R7,	#0xB
		ORR.W	R4, R4,	R7,LSL#21
		ADDS	R0, #0xA
		BPL	loc_544
		MOVS	R0, #0
		MOV	R1, R0
		B	locret_518
@ ---------------------------------------------------------------------------

loc_544:				@ ...
		LSLS	R1, R0,	#0x14
		ADDS	R0, R2,	R4
		ADCS	R1, R5
		LDRD.W	R4, R5,	[SP,#0x20]
		ADDS	R0, R0,	R4
		ADCS	R1, R5
		POP.W	{R4-R8,R10,R11,LR}
		B	sub_49E
@ End of function sub_4BC

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

ADC00_IRQHandler:			@ ...
		LDR	R1, =ADC00_IRQ_Flag
		MOVS	R0, #1
		STR	R0, [R1]
		LDR	R1, =0x40043000
		STR.W	R0, [R1,#0xF8]
		BX	LR
@ End of function ADC00_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSetADCState:				@ ...
		PUSH	{R4,R5}
		MOV	R3, R0
		MOVS	R4, #0
		LDR	R0, =0x40004040
		MOV.W	R2, #0x40000000
		CMP	R3, #1
		BEQ	loc_5A0
		CMP	R3, #2
		BEQ	loc_5C4
		CMP	R3, #0xE
		BNE	loc_5FC
		CMP	R1, #0
		LDR	R1, [R2,#0x38]
		BIC.W	R1, R1,	#0xF000000
		STR	R1, [R2,#0x38]
		LDR	R1, [R2,#0x38]
		BEQ	loc_5EA
		ORR.W	R1, R1,	#0x1000000
		STR	R1, [R2,#0x38]
		MOVS	R2, #0
		B	loc_5F4
@ ---------------------------------------------------------------------------

loc_5A0:				@ ...
		CMP	R1, #0
		LDR	R1, [R2,#0x38]
		BIC.W	R1, R1,	#0xF0
		STR	R1, [R2,#0x38]
		LDR	R1, [R2,#0x38]
		BEQ	loc_5B8
		ORR.W	R1, R1,	#0x10
		STR	R1, [R2,#0x38]
		MOVS	R2, #0
		B	loc_5C0
@ ---------------------------------------------------------------------------

loc_5B8:				@ ...
		STR	R1, [R2,#0x38]
		LDR	R1, =0x40004844
		STR	R4, [R1]
		MOVS	R2, #1

loc_5C0:				@ ...
		MOVS	R1, #2
		B	loc_5F6
@ ---------------------------------------------------------------------------

loc_5C4:				@ ...
		CMP	R1, #0
		LDR	R1, [R2,#0x38]
		BIC.W	R1, R1,	#0xF00
		STR	R1, [R2,#0x38]
		LDR	R1, [R2,#0x38]
		BEQ	loc_5DC
		ORR.W	R1, R1,	#0x100
		STR	R1, [R2,#0x38]
		MOVS	R2, #0
		B	loc_5E6
@ ---------------------------------------------------------------------------

loc_5DC:				@ ...
		STR	R1, [R2,#0x38]
		LDR	R1, =0x40004844
		ADDS	R1, R1,	#4
		STR	R4, [R1]
		MOVS	R2, #1

loc_5E6:				@ ...
		MOVS	R1, #4
		B	loc_5F6
@ ---------------------------------------------------------------------------

loc_5EA:				@ ...
		STR	R1, [R2,#0x38]
		LDR	R1, =0x40004844
		ADDS	R1, #0x14
		STR	R4, [R1]
		MOVS	R2, #1

loc_5F4:				@ ...
		MOVS	R1, #0x40

loc_5F6:				@ ...
		POP	{R4,R5}
		B.W	GPIO_SetMode
@ ---------------------------------------------------------------------------

loc_5FC:				@ ...
		POP	{R4,R5}
		BX	LR
@ End of function SetADCState

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgBatteryVoltsToPercent:
		CMP.W	R0, #310
		BHI	loc_612
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_612:				@ ...
		CMP.W	R0, #410
		BCC	loc_61C
		MOVS	R0, #100
		BX	LR
@ ---------------------------------------------------------------------------

loc_61C:				@ ...
		LDR	R2, =BatteryVoltsTable
		MOVS	R1, #1

loc_620:				@ ...
		LDRH.W	R3, [R2,R1,LSL#1]
		CMP	R3, R0
		BCS	loc_630
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		CMP	R1, #11
		BCC	loc_620

loc_630:				@ ...
		LDRH.W	R3, [R2,R1,LSL#1]
		ADD.W	R2, R2,	R1,LSL#1
		ADD.W	R1, R1,	R1,LSL#2
		LDRH.W	R2, [R2,#-2]
		SUBS	R0, R0,	R2
		ADD.W	R0, R0,	R0,LSL#2
		SUBS	R3, R3,	R2
		LSLS	R0, R0,	#1
		SDIV.W	R0, R0,	R3
		ADD.W	R0, R0,	R1,LSL#1
		SUBS	R0, #10
		UXTB	R0, R0
		BX	LR
@ End of function BatteryVoltsToPercent

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgNewBatteryVoltage:
		PUSH	{R4,R5,LR}
		LDR	R4, =KeyUpTimer
		LDRH	R0, [R4,#(BatteryVoltage - KeyUpTimer)]
		BL	BatteryVoltsToPercent
		ADD.W	R5, R4,	#(Flags64 - KeyUpTimer)
		STRB	R0, [R4,#(BatteryPercent - KeyUpTimer)]
		LDR	R0, [R5]
		LSLS	R1, R0,	#19
		BMI	loc_67A
		LSLS	R1, R0,	#21
		BPL	loc_67A
		MOVS	R1, #100
		STRB	R1, [R4,#(BatteryPercent - KeyUpTimer)]

loc_67A:				@ ...
		LDRB	R2, [R4,#(SavedBatPercent - KeyUpTimer)]
		LDRB	R1, [R4,#(BatteryPercent - KeyUpTimer)]
		CMP	R2, R1
		BEQ	loc_68E
		LDRB	R3, [R4,#(BatPCCmpCnt -	KeyUpTimer)]
		ADDS	R3, R3,	#1
		UXTB	R3, R3
		STRB	R3, [R4,#(BatPCCmpCnt -	KeyUpTimer)]
		CMP	R3, #3
		BCS	loc_692

loc_68E:				@ ...
		LSLS	R3, R0,	#0x18
		BPL	loc_6B6

loc_692:				@ ...
		LDRH	R2, [R4,#(BatteryVoltage - KeyUpTimer)]
		MOVS	R3, #0
		STRH	R2, [R4,#(SavedBatVoltage - KeyUpTimer)]
		STRB	R3, [R4,#(BatPCCmpCnt -	KeyUpTimer)]
		STRB	R1, [R4,#(SavedBatPercent - KeyUpTimer)]
		CMP.W	R2, #300
		BLS	loc_6B8
		LDR	R1, =Screen
		LDRB	R1, [R1]
		CMP	R1, #1
		BEQ	loc_6AE
		CMP	R1, #3
		BNE	loc_6B8

loc_6AE:				@ ...
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R5]
		B	loc_6B8
@ ---------------------------------------------------------------------------

loc_6B6:				@ ...
		STRB	R2, [R4,#(BatteryPercent - KeyUpTimer)]

loc_6B8:				@ ...
		LDRB	R0, [R4,#(BatteryPercent - KeyUpTimer)]
		LDR	R1, [R5]
		CMP	R0, #0xA
		BCS	loc_6C6
		ORR.W	R1, R1,	#0x80000
		B	loc_6CA
@ ---------------------------------------------------------------------------

loc_6C6:				@ ...
		BIC.W	R1, R1,	#0x80000

loc_6CA:				@ ...
		STR	R1, [R5]
		MOVS	R1, #10
		UDIV.W	R0, R0,	R1
		STRB	R0, [R4,#(BatteryTenth - KeyUpTimer)]
		POP	{R4,R5,PC}
@ End of function NewBatteryVoltage

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgReadBatteryVoltage:			@ ...
		PUSH	{R4-R6,LR}
		LDR	R5, =Flags64
		LDRH	R0, [R5]
		LSLS	R0, R0,	#23
		BMI	locret_70C
		SUB.W	R4, R5,	#(Flags64 - KeyUpTimer)

loc_6EE:				@ ...
		LDRB	R0, [R4,#(VbatSampleCnt	- KeyUpTimer)]
		CMP	R0, #0x10
		BCS	loc_70E
		MOVS	R0, #0x12	@ VBAT
		BL	ADC_Read
		LDR	R1, [R4,#(VbatSampleSum	- KeyUpTimer)]
		ADD	R0, R1
		STR	R0, [R4,#(VbatSampleSum	- KeyUpTimer)]
		LDRB	R0, [R4,#(VbatSampleCnt	- KeyUpTimer)]
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#(VbatSampleCnt	- KeyUpTimer)]
		LDRH	R0, [R5]
		LSLS	R0, R0,	#16
		BMI	loc_6EE

locret_70C:				@ ...
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_70E:				@ ...
		LDR	R0, [R5]
		BIC.W	R0, R0,	#0x8000
		STR	R0, [R5]
		LDR	R0, [R4,#(VbatSampleSum	- KeyUpTimer)]
		LSRS	R0, R0,	#7
		STR	R0, [R4,#(VbatSampleSum	- KeyUpTimer)]
		UXTH	R0, R0
		STRH	R0, [R4,#(BatteryVoltage - KeyUpTimer)]
		LDRB	R1, [R4,#(BatRefreshTmr	- KeyUpTimer)]
		CMP	R1, #100
		BHI	loc_740
		LDRH	R1, [R4,#(SavedBatVoltage - KeyUpTimer)]
		CMP	R1, R0
		BLS	loc_732
		SUBS	R2, R1,	R0
		CMP	R2, #3
		BGT	loc_73C

loc_732:				@ ...
		CMP	R0, R1
		BLS	loc_740
		SUBS	R0, R0,	R1
		CMP	R0, #3
		BLE	loc_740

loc_73C:				@ ...
		BL	NewBatteryVoltage

loc_740:				@ ...
		MOVS	R0, #0
		STRB	R0, [R4,#(VbatSampleCnt	- KeyUpTimer)]
		STR	R0, [R4,#(VbatSampleSum	- KeyUpTimer)]
		POP	{R4-R6,PC}
@ End of function ReadBatteryVoltage

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================


		.ifne	keeporgcode

orgCheckBattery:
		PUSH.W	{R4-R10,LR}
		LDR	R6, =dfData
		MOVS	R4, #0
		LDRB	R0, [R6,#(dfMode - dfData)]
		CMP	R0, #6
		BEQ	loc_79C
		LDRH	R5, [R6,#(dfPower - dfData)]

loc_75C:				@ ...
		MOVS	R7, #0
		MOV.W	R8, #280	@ corresponds to 2.8V

loc_762:				@ ...
		MOVS	R0, #0x12	@ Vbat channel
		BL	ADC_Read
		LSRS	R2, R0,	#3
		CMP	R2, R8
		BHI	loc_776
		ADDS	R7, R7,	#1
		UXTB	R7, R7
		CMP	R7, #3
		BCC	loc_762

loc_776:				@ ...
		CMP	R7, #3
		BEQ	loc_7AA
		LDR	R7, =Flags64
		LDR	R0, [R7]
		LSLS	R1, R0,	#23
		BPL	loc_836
		LDRB	R1, [R6,#(dfMode - dfData)]
		CMP	R1, #4
		BEQ	loc_7BE
		CMP	R1, #6
		BEQ	loc_7BE
		CBZ	R1, loc_7BA
		CMP	R1, #1
		BEQ	loc_7BA
		CMP	R1, #2
		BEQ	loc_7BA
		CMP	R1, #3
		BEQ	loc_7BA
		B	loc_836
@ ---------------------------------------------------------------------------

loc_79C:				@ ...
		LDR	R0, =ConfigIndex
		LDRB	R0, [R0]
		ADD.W	R0, R6,	R0,LSL#1
		LDRH.W	R5, [R0,#(dfSavedCfgPwr	- dfData)]
		B	loc_75C
@ ---------------------------------------------------------------------------

loc_7AA:				@ ...
		BL	StopFire
		LDR	R1, =Event
		MOVS	R0, #28
		STRB	R0, [R1]
		MOVS	R0, #1

locret_7B6:				@ ...
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_7BA:				@ ...
		LSLS	R3, R0,	#8
		BMI	loc_836

loc_7BE:				@ ...
		LDR	R6, =BBCNextMode
		MOV.W	R9, #290
		LDRH	R3, [R6,#(LowBatVolts -	BBCNextMode)]
		CBZ	R3, loc_7F6
		CMP.W	R5, #600	@ TODO:	should be 750? (pwr)
		BLS	loc_7F6
		LDR.W	R12, [R6,#(PowerScale - BBCNextMode)]
		CMP.W	R12, #100
		BNE	loc_7F6
		CMP	R2, R9
		BCC	loc_7F6
		SUB.W	R12, R2, #290
		MOV.W	R8, #100
		MUL.W	R12, R12, R8
		SUB.W	R3, R3,	#290
		UDIV.W	R3, R12, R3
		CMP	R3, #10
		BCS	loc_7F6
		MOVS	R4, #1

loc_7F6:				@ ...
		LSLS	R3, R0,	#2
		BMI	loc_802
		CMP	R2, R9
		BCC	loc_802
		CBNZ	R4, loc_804
		B	loc_836
@ ---------------------------------------------------------------------------

loc_802:				@ ...
		CBZ	R4, loc_80E

loc_804:				@ ...
		MOVW	R2, #60000	@ TODO:	should be 75000
		UDIV.W	R2, R2,	R5
		STR	R2, [R6,#(PowerScale - BBCNextMode)]

loc_80E:				@ ...
		ORR.W	R2, R0,	#0x400000
		LDR	R3, =ShowWeakBatFlag
		MOVS	R0, #5
		STR	R2, [R7]
		STRB	R0, [R3]
		CMP	R1, #4
		BEQ	loc_822
		CMP	R1, #6
		BNE	loc_82C

loc_822:				@ ...
		LDR	R0, [R6,#(PowerScale - BBCNextMode)]
		CMP	R0, #5
		BLS	loc_82C
		SUBS	R0, R0,	#1
		STR	R0, [R6,#(PowerScale - BBCNextMode)]

loc_82C:				@ ...
		BIC.W	R0, R2,	#0x20000000

loc_830:				@ ...
		STR	R0, [R7]
		MOVS	R0, #0
		B	locret_7B6
@ ---------------------------------------------------------------------------

loc_836:				@ ...
		BIC.W	R0, R0,	#0x400000

loc_83A:
		B	loc_830
@ End of function CheckBattery

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgfbDeathScreen:				@ ...

var_14		= -0x14

		PUSH	{R2-R6,LR}
		LDR	R4, =fbBirdLine
		MOVS	R6, #1
		LDR	R0, =0x40004900
		LDRB	R1, [R4,#(fbAnimStep - fbBirdLine)]
		MOVS	R5, #0
		CMP	R1, #5		@ switch 5 cases
		BCS	def_864
		TBB.W	[PC,R1]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_864:
		.byte (loc_86E - jpt_864)/2 @ ...
		.byte (loc_880 - jpt_864)/2
		.byte (def_864 - jpt_864)/2
		.byte (loc_892 - jpt_864)/2
		.byte (loc_8A6 - jpt_864)/2
		.balign 2,0

loc_86E:				@ ...
		MOVS	R0, #0xFF
		BL	fbFillScreen
		BL	j_DisplayRefresh
		BL	fbCLSBuf
		MOVS	R0, #5
		B	loc_886
@ ---------------------------------------------------------------------------

loc_880:				@ ...
		BL	j_DisplayRefresh
		MOVS	R0, #10

loc_886:				@ ...
		BL	fbSetTimeoutValue
		LDRB	R0, [R4,#(fbAnimStep - fbBirdLine)]
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#(fbAnimStep - fbBirdLine)]

locret_890:				@ ...
		POP	{R2-R6,PC}
@ ---------------------------------------------------------------------------

loc_892:				@ ...
		LDR	R0, [R0]
		CMP	R0, #0
		BNE	locret_890
		MOVS	R0, #4
		STRB	R0, [R4,#(fbAnimStep - fbBirdLine)]
		POP.W	{R2-R6,LR}
		MOVS	R0, #100
		B.W	fbSetTimeoutValue
@ ---------------------------------------------------------------------------

loc_8A6:				@ ...
		LDR	R0, [R0]
		CMP	R0, #0
		BEQ	locret_890
		STRB	R6, [R4]
		STRB	R5, [R4,#(fbAnimStep - fbBirdLine)]
		STRH	R5, [R4,#(fbScore - fbBirdLine)]
		LDR	R0, =(fbStartScreen+1)
		BL	fbCreateTimeout
		LDR	R0, =fbCurrentTimeout
		LDRB	R0, [R0]
		POP.W	{R2-R6,LR}
		B.W	fbDeleteTimeout
@ ---------------------------------------------------------------------------

def_864:				@ ...
		LDRSB.W	R0, [R4]
		CMP	R0, #0x30
		BGE	loc_8D2
		ADDS	R0, R0,	#4
		STRB	R0, [R4]
		B	loc_8E2
@ ---------------------------------------------------------------------------

loc_8D2:				@ ...
		LDRB	R0, [R4,#(fdDead - fbBirdLine)]
		CMP	R0, #3
		BNE	loc_8DC
		STRB	R5, [R4,#(fdDead - fbBirdLine)]
		STRB	R0, [R4,#(fbAnimStep - fbBirdLine)]

loc_8DC:				@ ...
		MOVS	R0, #200
		BL	fbSetTimeoutValue

loc_8E2:				@ ...
		LDRB	R0, [R4]
		BL	fbDrawDeadBird
		LDR	R0, [R4,#(fbColumn1 - fbBirdLine)]
		LDRH	R1, [R4,#(fbColumn1+4 -	fbBirdLine)]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	fbDrawColumn
		LDRB	R2, [R4,#(fbColumn2+4 -	fbBirdLine)]
		LDR.W	R0, [R4,#(fbColumn2 - fbBirdLine)]
		BFI.W	R1, R2,	#0, #8
		BL	fbDrawColumn
		LDR.W	R0, [R4,#(fbColumn3 - fbBirdLine)]
		LDRH	R1, [R4,#(fbColumn3+4 -	fbBirdLine)]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	fbDrawColumn
		STRD.W	R5, R6,	[SP]
		MOVS	R3, #52
		MOVS	R2, #98
		MOVS	R1, #16
		MOVS	R0, #26
		BL	fbDrawRect
		STRD.W	R6, R5,	[SP]
		MOVS	R3, #52
		MOVS	R2, #98
		MOVS	R1, #16
		MOVS	R0, #26
		BL	fbDrawRect
		ADR	R2, aScore
		MOVS	R1, #18
		MOVS	R0, #27
		BL	fbDrawText
		ADR	R2, aBest
		MOVS	R1, #36
		MOVS	R0, #27
		BL	fbDrawText
		LDRH	R0, [R4,#(fbScore - fbBirdLine)]
		BL	fbNumDigits
		MOV	R2, R0
		LDRH	R3, [R4,#(fbScore - fbBirdLine)]
		MOVS	R1, #18
		MOVS	R0, #71
		BL	fbDrawNumber
		LDR	R4, =dfData
		LDRH.W	R0, [R4,#(dfFBBest - dfData)]!
		BL	fbNumDigits
		MOV	R2, R0
		LDRH	R3, [R4]
		MOVS	R1, #36
		MOVS	R0, #71
		BL	fbDrawNumber
		BL	j_DisplayRefresh
		BL	fbCLSBuf
		MOVS	R0, #4
		BL	fbSetTimeoutValue
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #50
		STRB	R0, [R1]
		POP	{R2-R6,PC}
@ End of function fbDeathScreen

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.balign 4,0
aScore:	.ascii "SCORE"
		.byte 0

		.balign 4,0
aBest:	.ascii "BEST"
		.byte 0

		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================


fbStartScreen:				@ ...
		PUSH	{R4-R6,LR}
		LDR	R4, =fbBirdLine
		LDR	R0, =0x40004900
		MOVS	R5, #0
		STRH	R5, [R4,#(fbScore - fbBirdLine)]
		LDR	R0, [R0]
		CBZ	R0, loc_9D4
		MOV	R0, R4
		LDRB	R1, [R4,#(fbAnimStep - fbBirdLine)]
		LDRSB.W	R0, [R0]
		CBZ	R1, loc_A2C
		ADDS	R0, R0,	#1
		SXTB	R0, R0
		STRB	R0, [R4]
		CMP	R0, #4
		BEQ	loc_A28
		B	loc_A3A
@ ---------------------------------------------------------------------------

loc_9D4:				@ ...
		LDR	R1, =fbBirdLine
		MOVS	R0, #0x7F
		ADDS	R1, #(fbColumn1	- fbBirdLine)
		BL	fbCreateColumn
		LDR	R1, =fbBirdLine
		MOVS	R0, #0x7F
		ADDS	R1, #(fbColumn2	- fbBirdLine)
		BL	fbCreateColumn
		LDR	R1, =fbBirdLine
		MOVS	R0, #0x7F
		ADDS	R1, #(fbColumn3	- fbBirdLine)
		BL	fbCreateColumn
		MOVS	R0, #16
		BL	fbSetBirdColumn
		MOVS	R0, #24
		STRB	R0, [R4]
		STRB	R5, [R4,#(fbAnimStep - fbBirdLine)]
		LDR	R0, =fbCurrentTimeout
		STRB	R5, [R4,#(fbAnimTimer -	fbBirdLine)]
		STRB	R5, [R4,#(fdDead - fbBirdLine)]
		LDRB	R0, [R0]
		BL	fbDeleteTimeout
		LDR	R0, =TMR0Counter
		LDR	R0, [R0,#(TMR1Counter -	TMR0Counter)]
		BL	SetRandSeed
		LDR	R0, =(fbGame+1)
		BL	fbCreateTimeout
		LDR	R0, =(fbCheckFire+1)
		BL	fbCreateTimeout
		POP.W	{R4-R6,LR}
		LDR	R0, =(fbMoveBird+1)
		B.W	fbCreateTimeout
@ ---------------------------------------------------------------------------

loc_A28:				@ ...
		STRB	R5, [R4,#(fbAnimStep - fbBirdLine)]
		B	loc_A3A
@ ---------------------------------------------------------------------------

loc_A2C:				@ ...
		B	loc_A2E
@ ---------------------------------------------------------------------------

loc_A2E:				@ ...
		SUBS	R0, R0,	#1
		SXTB	R0, R0
		STRB	R0, [R4]
		CBNZ	R0, loc_A3A
		MOVS	R0, #1
		STRB	R0, [R4,#(fbAnimStep - fbBirdLine)]

loc_A3A:				@ ...
		MOVS	R0, #100
		BL	fbSetBirdColumn
		LDRB	R0, [R4]
		ADR	R2, aFlappyBird
		ADDS	R0, #16
		UXTB	R1, R0
		MOVS	R0, #10
		BL	fbDrawText
		LDRB	R0, [R4]
		ADDS	R0, #16
		UXTB	R0, R0
		BL	fbBirdAnim
		BL	j_DisplayRefresh
		BL	fbCLSBuf
		POP.W	{R4-R6,LR}
		MOVS	R0, #0xA
		B.W	fbSetTimeoutValue
@ End of function fbStartScreen

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.balign 4,0
aFlappyBird:	.ascii "Flappy Bird"
		.byte 0
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgfbGame:	
		PUSH.W	{R2-R8,LR}
		LDR	R4, =fbBirdLine
		MOVS	R7, #0
		LDRB	R0, [R4,#(fdDead - fbBirdLine)]
		CBZ	R0, loc_AC6
		STRB	R7, [R4,#(fbAnimTimer -	fbBirdLine)]
		LDR	R1, =dfData
		STRB	R7, [R4,#(fbAnimStep - fbBirdLine)]
		LDRH	R0, [R4,#(fbScore - fbBirdLine)]
		LDRH.W	R2, [R1,#(dfFBBest - dfData)]
		CMP	R2, R0
		BCS	loc_AB4
		STRH.W	R0, [R1,#(dfFBBest - dfData)]

loc_AB4:				@ ...
		LDR	R0, =fbCurrentTimeout
		LDRB	R0, [R0]
		BL	fbDeleteTimeout
		POP.W	{R2-R8,LR}
		LDR	R0, =(fbDeathScreen+1)
		B.W	fbCreateTimeout
@ ---------------------------------------------------------------------------

loc_AC6:				@ ...
		LDR	R0, [R4,#(fbColumn1 - fbBirdLine)]
		STR	R0, [SP]
		LDRH	R1, [R4,#(fbColumn1+4 -	fbBirdLine)]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	fbDrawColumn
		LDRB	R2, [R4,#(fbColumn2+4 -	fbBirdLine)]
		LDR.W	R0, [R4,#(fbColumn2 - fbBirdLine)]
		BFI.W	R1, R2,	#0, #8
		BL	fbDrawColumn
		LDR.W	R0, [R4,#(fbColumn3 - fbBirdLine)]
		STR	R0, [SP]
		LDRH	R1, [R4,#(fbColumn3+4 -	fbBirdLine)]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	fbDrawColumn
		LDR.W	R8, =fbBirdLine
		LDRB	R0, [R4,#(fbAnimStep - fbBirdLine)]
		ADD.W	R8, R8,	#8
		ADD.W	R5, R8,	#5
		ADDS	R6, R5,	#5
		CBZ	R0, loc_B1C
		CMP	R0, #1
		BEQ	loc_B16
		CMP	R0, #2
		BNE	loc_B26
		LDRB	R1, [R6]
		SUBS	R1, R1,	#2
		STRB	R1, [R6]

loc_B16:				@ ...
		LDRB	R1, [R5]
		SUBS	R1, R1,	#2
		STRB	R1, [R5]

loc_B1C:				@ ...
		LDRB.W	R1, [R8]
		SUBS	R1, R1,	#2
		STRB.W	R1, [R8]

loc_B26:				@ ...
		LDRB	R1, [R4,#(fbAnimTimer -	fbBirdLine)]
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		STRB	R1, [R4,#(fbAnimTimer -	fbBirdLine)]
		CMP	R1, #0x20
		BNE	loc_B3C
		STRB	R7, [R4,#(fbAnimTimer -	fbBirdLine)]
		CMP	R0, #2
		BCS	loc_B3C
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#(fbAnimStep - fbBirdLine)]

loc_B3C:				@ ...
		LDRB.W	R0, [R8]
		SUBS	R0, #0x81
		CMP	R0, #0x48
		BCS	loc_B50
		LDR	R1, =fbBirdLine
		MOVS	R0, #0x7F
		ADDS	R1, #(fbColumn1	- fbBirdLine)
		BL	fbCreateColumn

loc_B50:				@ ...
		LDRB	R0, [R5]
		SUBS	R0, #0x81
		CMP	R0, #0x48
		BCS	loc_B62
		LDR	R1, =fbBirdLine
		MOVS	R0, #0x7F
		ADDS	R1, #(fbColumn2	- fbBirdLine)
		BL	fbCreateColumn

loc_B62:				@ ...
		LDRB	R0, [R6]
		SUBS	R0, #0x81
		CMP	R0, #0x48
		BCS	loc_B74
		LDR	R1, =fbBirdLine
		MOVS	R0, #0x7F
		ADDS	R1, #(fbColumn3	- fbBirdLine)
		BL	fbCreateColumn

loc_B74:				@ ...
		LDRB.W	R0, [R8]
		CMP	R0, #21
		BEQ	loc_B88
		LDRB	R0, [R5]
		CMP	R0, #21
		BEQ	loc_B88
		LDRB	R0, [R6]
		CMP	R0, #21
		BNE	loc_B8E

loc_B88:				@ ...
		LDRH	R0, [R4,#(fbScore - fbBirdLine)]
		ADDS	R0, R0,	#1
		STRH	R0, [R4,#(fbScore - fbBirdLine)]

loc_B8E:				@ ...
		LDRSB.W	R0, [R4]
		MOVS	R7, #1
		CMP	R0, #0x30
		BGE	loc_BA0
		UXTB	R0, R0
		BL	fbBirdAnim
		B	loc_BA2
@ ---------------------------------------------------------------------------

loc_BA0:				@ ...
		STRB	R7, [R4,#(fdDead - fbBirdLine)]

loc_BA2:				@ ...
		LDRB.W	R0, [R8]
		MOV	R1, R8
		SUBS	R0, #0x20
		CMP	R0, #0xD8
		BCC	loc_BC6
		LDRB	R2, [R1,#1]
		LDRSB.W	R0, [R4]
		ADDS	R2, R2,	#6
		CMP	R2, R0
		BGT	loc_BC4
		LDRB.W	R1, [R8,#3]
		SUBS	R1, #0xC
		CMP	R1, R0
		BGE	loc_BC6

loc_BC4:				@ ...
		STRB	R7, [R4,#(fdDead - fbBirdLine)]

loc_BC6:				@ ...
		LDRB	R0, [R5]
		SUBS	R0, #0x20
		CMP	R0, #0xD8
		BCC	loc_BE4
		LDRB	R1, [R5,#1]
		LDRSB.W	R0, [R4]
		ADDS	R1, R1,	#6
		CMP	R1, R0
		BGT	loc_BE2
		LDRB	R1, [R5,#3]
		SUBS	R1, #0xC
		CMP	R1, R0
		BGE	loc_BE4

loc_BE2:				@ ...
		STRB	R7, [R4,#(fdDead - fbBirdLine)]

loc_BE4:				@ ...
		LDRB	R0, [R6]
		SUBS	R0, #0x20
		CMP	R0, #0xD8
		BCC	loc_C02
		LDRB	R1, [R6,#1]
		LDRSB.W	R0, [R4]
		ADDS	R1, R1,	#6
		CMP	R1, R0
		BGT	loc_C00
		LDRB	R1, [R6,#3]
		SUBS	R1, #0xC
		CMP	R1, R0
		BGE	loc_C02

loc_C00:				@ ...
		STRB	R7, [R4,#(fdDead - fbBirdLine)]

loc_C02:				@ ...
		LDRH	R0, [R4,#(fbScore - fbBirdLine)]
		BL	fbNumDigits
		MOV	R5, R0
		LDRH	R0, [R4,#(fbScore - fbBirdLine)]
		BL	fbNumDigits
		NEGS	R0, R0
		MOVS	R1, #0x40
		ADD.W	R0, R1,	R0,LSL#2
		UXTB	R0, R0
		LDRH	R3, [R4,#(fbScore - fbBirdLine)]
		MOV	R2, R5
		MOVS	R1, #4
		BL	fbDrawNumber
		BL	j_DisplayRefresh
		BL	fbCLSBuf
		POP.W	{R2-R8,LR}
		MOVS	R0, #4
		B.W	fbSetTimeoutValue
@ End of function fbGame

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitHardware:
		PUSH	{R4,LR}
		BL	SYS_UnlockReg
		BL	InitDevices
		MOVS	R3, #0		@ WKEN = 0 (no wake-up event)
		MOVS	R2, #1		@ RSTEN	= 1 (enable watchdog reset)
		MOVS	R1, #2		@ WDT Reset Delay Period is 18 * WDT_CLK (1.8ms)
		MOV.W	R0, #0x700	@ TOUTSEL = 2^18 * WDT_CLK (26.214s)
		BL	WDT_Open
		MOV.W	R1, #0x40000000
		MOVS	R0, #0
		STR.W	R0, [R1,#0x100]	@ Enable registers protection
		BL	InitUART0
		BL	InitGPIO
		BL	InitSPI0
		BL	InitEADC
		BL	InitPWM
		BL	InitTimers
		BL	InitUSB
		ADR	R0, aJoyetechAprom
		BL	PutTextf
		LDR	R0, =PllClock
		LDR	R2, [R0]
		LDR	R0, =SystemCoreClock
		LDR	R1, [R0]
		POP.W	{R4,LR}
		ADR	R0, aCpuDhzPllDhz
		B.W	PutTextf
@ End of function InitHardware

@ ---------------------------------------------------------------------------
		.balign 4,0
aJoyetechAprom:
		.ascii "\n\nJoyetech APROM\n"
		.byte 0
		.balign 4,0
		.pool
aCpuDhzPllDhz:
		.ascii "CPU @ %dHz(PLL@ %dHz)\n"
		.byte 0
		.balign 2,0

		.endif

@ =============== S U B	R O U T	I N E =======================================
@ START	OF FUNCTION CHUNK FOR hidResetSysCmd

		.ifne	keeporgcode_usbd

loc_CD4:
		BL	SYS_UnlockReg
		BL	SYS_ResetChip

loc_CDC:
		B	loc_CDC
@ END OF FUNCTION CHUNK	FOR hidResetSysCmd

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk

CLK_DisablePLL:
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		ORR.W	R1, R1,	#0x10000 @ PLL PD enable
		STR.W	R1, [R0,#0x240]
		BX	LR
@ End of function CLK_DisablePLL

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk

CLK_EnableModuleClock:				@ ...
		LSRS	R1, R0,	#30
		LSLS	R1, R1,	#2
		ADD.W	R1, R1,	#0x40000000
		LDR.W	R2, [R1,#0x204]
		AND.W	R3, R0,	#0x1F
		MOVS	R0, #1
		LSLS	R0, R3
		ORRS	R2, R0
		STR.W	R2, [R1,#0x204]
		BX	LR
@ End of function CLK_EnableModuleClock

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk

CLK_EnablePLL:					@ ...

var_28		= -0x28

		PUSH.W	{R3-R11,LR}
		MOV	R4, R1
		MOV	R6, R0
		BL	CLK_DisablePLL
		MOV.W	R11, #0x40000000
		LDR	R7, =12000000
		LDR.W	R8, =22118400
		LDR.W	R1, [R11,#0x200]
		MOV	R0, R11
		CBZ	R6, loc_D52
		ORR.W	R1, R1,	#4
		STR.W	R1, [R0,#0x200]	@ HIRC enable
		MOVS	R0, #0x10
		BL	CLK_WaitClockReady
		MOV.W	R0, #0x80000
		MOV	R9, R8
		MOVS	R1, #4
		STR	R0, [SP]

loc_D42:				@ ...
		LDR	R0, =-250000001
		LDR	R2, =249999999
		ADD	R0, R4
		CMP	R0, R2
		BHI	loc_D6A
		MOV.W	R10, #0
		B	loc_D8C
@ ---------------------------------------------------------------------------

loc_D52:				@ ...
		ORR.W	R1, R1,	#1
		STR.W	R1, [R0,#0x200]	@ HXT enable
		MOVS	R0, #1
		BL	CLK_WaitClockReady
		MOVS	R0, #0
		MOV	R9, R7
		MOVS	R1, #2
		STR	R0, [SP]
		B	loc_D42
@ ---------------------------------------------------------------------------

loc_D6A:				@ ...
		LDR	R0, =-125000001
		LDR	R2, =124999999
		ADD	R0, R4
		CMP	R0, R2
		BHI	loc_D7C
		MOV.W	R10, #1
		LSLS	R4, R4,	#1
		B	loc_D8C
@ ---------------------------------------------------------------------------

loc_D7C:				@ ...
		LDR	R0, =-50000000
		LDR	R2, =75000000
		ADD	R0, R4
		CMP	R0, R2
		BHI	loc_E0C
		MOV.W	R10, #3
		LSLS	R4, R4,	#2

loc_D8C:				@ ...
		MOVS	R5, #0
		MOV.W	R2, #-1
		MOV	R7, R5
		B	loc_DDC
@ ---------------------------------------------------------------------------

loc_D96:				@ ...
		UDIV.W	R12, R9, R1
		LDR	R0, =-1600001
		LDR	R3, =14399999
		ADD	R0, R12
		CMP	R0, R3
		BCS	loc_DDA
		LDR.W	LR, =-200000000
		LDR.W	R8, =300000000
		MOVS	R6, #2

loc_DAE:				@ ...
		MUL.W	R0, R12, R6
		ADD.W	R3, R0,	LR
		CMP	R3, R8
		BHI	loc_DD0
		CMP	R0, R4
		BLS	loc_DC2
		SUBS	R3, R0,	R4
		B	loc_DC4
@ ---------------------------------------------------------------------------

loc_DC2:				@ ...
		SUBS	R3, R4,	R0

loc_DC4:				@ ...
		CMP	R3, R2
		BCS	loc_DD0
		MOVS	R2, R3
		MOV	R5, R1
		MOV	R7, R6
		BEQ	loc_DDA

loc_DD0:				@ ...
		MOVW	R0, #0x201
		ADDS	R6, R6,	#1
		CMP	R6, R0
		BLS	loc_DAE

loc_DDA:				@ ...
		ADDS	R1, R1,	#1

loc_DDC:				@ ...
		CMP	R1, #0x21
		BLS	loc_D96
		LDR	R0, [SP]
		ORR.W	R1, R0,	R10,LSL#14
		LDR	R0, =-1024
		ADD.W	R0, R0,	R5,LSL#9
		ORRS	R1, R0
		SUBS	R0, R7,	#2
		ORRS	R1, R0
		STR.W	R1, [R11,#0x240]
		MOVS	R0, #4		@ PLL
		BL	CLK_WaitClockReady
		ADD.W	R0, R10, #1
		MULS	R0, R5
		UDIV.W	R0, R9,	R0
		MULS	R0, R7

locret_E08:				@ ...
		POP.W	{R3-R11,PC}
@ ---------------------------------------------------------------------------

loc_E0C:				@ ...
		CBZ	R6, loc_E2E
		LDR	R1, =0x0008C432			@ PD=1, OUTDIV=3, INDIV=2, FBDIV=50

loc_E10:
		STR.W	R1, [R11,#0x240]	@ CLK_PLLCTL
		MOVS	R0, #4				@ PLL
		BL	CLK_WaitClockReady
		ADR	R0, dword_EA0
		LDR	R0, [R0]
		STR	R0, [SP]
		LDR.W	R1, [R11,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_E34
		MOVS	R0, #0
		B	locret_E08
@ ---------------------------------------------------------------------------

loc_E2E:
		MOVW	R1, #0x0000C02E		@ OUTDIV=3, INDIV=0, FBDIV=46
		B	loc_E10
@ ---------------------------------------------------------------------------

loc_E34:				@ ...
		LSLS	R0, R1,	#0xC
		BPL	loc_E3C
		MOV	R0, R8
		B	loc_E3E
@ ---------------------------------------------------------------------------

loc_E3C:				@ ...
		MOV	R0, R7

loc_E3E:				@ ...
		LSLS	R2, R1,	#0xE
		BMI	locret_E08
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#0xE, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		B	locret_E08
@ End of function CLK_EnablePLL

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
dword_EA0:	.long	0x04020201

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk

CLK_EnableXtalRC:			@ ...
		MOV.W	R1, #0x40000000
		LDR.W	R2, [R1,#0x200]
		ORRS	R2, R0
		STR.W	R2, [R1,#0x200]
		BX	LR
@ End of function CLK_EnableXtalRC

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk
		
CLK_GetHCLKFreq:				@ ...
		PUSH	{R4,LR}
		BL	SystemCoreClockUpdate
		LDR	R0, =SystemCoreClock
		LDR	R0, [R0]
		POP	{R4,PC}
@ End of function CLK_GetHCLKFreq

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

@inline but duplicate
		
		.ifne	0	@keeporglibs_clk

CLK_GetPLLClockFreq:				@ ...

var_8		= -8

		PUSH	{R3,LR}
		ADR	R0, dword_F10
		LDR	R0, [R0]
		STR	R0, [SP]
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_EDE
		MOVS	R0, #0

locret_EDC:				@ ...
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_EDE:				@ ...
		LSLS	R0, R1,	#0xC
		BPL	loc_EE6
		LDR	R0, =22118400
		B	loc_EE8
@ ---------------------------------------------------------------------------

loc_EE6:				@ ...
		LDR	R0, =12000000

loc_EE8:				@ ...
		LSLS	R2, R1,	#0xE
		BMI	locret_EDC
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#0xE, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		POP	{R3,PC}
@ End of function CLK_GetPLLClockFreq

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_F10:	.long	0x04020201
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================


@inline but duplicate (2)
		
		.ifne	0	@keeporglibs_clk

CLK_GetPLLClockFreq:

var_8		= -8

		PUSH	{R3,LR}
		ADR	R0, dword_F68
		LDR	R0, [R0]
		STR	R0, [SP]
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_F36
		MOVS	R0, #0

locret_F34:				@ ...
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_F36:				@ ...
		LSLS	R0, R1,	#0xC
		BPL	loc_F3E
		LDR	R0, =0x1518000
		B	loc_F40
@ ---------------------------------------------------------------------------

loc_F3E:				@ ...
		LDR	R0, =0xB71B00

loc_F40:				@ ...
		LSLS	R2, R1,	#0xE
		BMI	locret_F34
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#0xE, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		POP	{R3,PC}
@ End of function CLK_GetPLLClockFreq

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_F68:	.long	0x04020201
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk
@ inline func

CLKGetPLLClockFreq:				

var_8		= -8

		PUSH	{R3,LR}
		ADR	R0, dword_FC0
		LDR	R0, [R0]
		STR	R0, [SP]
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_F8E
		MOVS	R0, #0

locret_F8C:				@ ...
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_F8E:				@ ...
		LSLS	R0, R1,	#0xC
		BPL	loc_F96
		LDR	R0, =22118400
		B	loc_F98
@ ---------------------------------------------------------------------------

loc_F96:				@ ...
		LDR	R0, =12000000

loc_F98:				@ ...
		LSLS	R2, R1,	#14
		BMI	locret_F8C
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#14, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		POP	{R3,PC}
@ End of function CLKGetPLLClockFreq

@ ---------------------------------------------------------------------------
			.balign 4,0
dword_FC0:	.long	0x04020201
			.pool
			
		.endif

@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR DisplaySendData

		.ifne	keeporglibs_clk
		
CLK_PowerDown:
		LDR	R0, =0xE000ED10
		LDR	R1, [R0]
		ORR.W	R1, R1,	#4
		STR	R1, [R0]	@ SCR.SLEEPDEEP	= 1
		LSLS	R0, R0,	#26	@ 0x40000000 ...
		LDR.W	R1, [R0,#0x200]
		ORR.W	R1, R1,	#0x180
		STR.W	R1, [R0,#0x200]	@ PDWTCPU = PDEN = 1 (sleep at next WFI)
		WFI
		BX	LR
@ END OF FUNCTION CHUNK	FOR DisplaySendData
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk
		
CLK_SetCoreClock:				@ ...
		PUSH	{R4-R6,LR}
		MOV.W	R5, #0x40000000
		MOV	R4, R0
		LDR.W	R0, [R5,#0x250]	@ CLK_STATUS
		AND.W	R6, R0,	#0x10	@ HIRCSTB
		LDR	R0, =72000000
		CMP	R4, R0
		BHI	loc_1008
		LDR	R0, =25000000
		CMP	R4, R0
		BCS	loc_100A

loc_1008:				@ ...
		MOV	R4, R0

loc_100A:				@ ...
		LDR.W	R0, [R5,#0x200]
		ORR.W	R0, R0,	#4
		STR.W	R0, [R5,#0x200]	@ HIRC enabled
		MOVS	R0, #0x10
		ADD.W	R5, R5,	#0x200
		BL	CLK_WaitClockReady
		LDR	R0, [R5,#0x10]
		ORR.W	R0, R0,	#7
		STR	R0, [R5,#0x10]	@ HCLKSEL = HIRC
		LDR	R0, [R5,#0x20]
		BIC.W	R0, R0,	#0xF
		STR	R0, [R5,#0x20]	@ HCLKDIV = 0
		LDR	R0, [R5]	@ CLK_PWRCTL
		SUB.W	R5, R5,	#0x200
		LSLS	R0, R0,	#31
		MOV.W	R1, R4,LSL#1
		BEQ	loc_1048	@ If HXTEN = 0
		MOVS	R0, #0
		BL	CLK_EnablePLL
		MOV	R4, R0
		B	loc_105A
@ ---------------------------------------------------------------------------

loc_1048:				@ ...
		MOV.W	R0, #0x80000
		BL	CLK_EnablePLL
		MOV	R4, R0
		LDR.W	R0, [R5,#0x250]
		AND.W	R6, R0,	#0x10	@ HIRCSTB

loc_105A:				@ ...
		MOVS	R1, #1		@ HCLKDIV = 1 (PLL/2)
		MOVS	R0, #2		@ HCLKSEL = PLL
		BL	CLK_SetHCLK
		CBNZ	R6, loc_1070
		LDR.W	R0, [R5,#0x200]
		BIC.W	R0, R0,	#4
		STR.W	R0, [R5,#0x200]

loc_1070:				@ ...
		LSRS	R0, R4,	#1
		POP	{R4-R6,PC}
@ End of function CLK_SetCoreClock

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk

CLK_SetHCLK:				@ ...
		PUSH.W	{R4-R8,LR}
		MOV.W	R4, #0x40000000
		MOV	R7, R0
		LDR.W	R0, [R4,#0x250]	@ CLK_STATUS
		MOV	R6, R1
		AND.W	R5, R0,	#0x10	@ HIRCSTB
		LDR.W	R0, [R4,#0x200]
		ORR.W	R0, R0,	#4
		STR.W	R0, [R4,#0x200]	@ HIRC enabled
		MOVS	R0, #0x10
		ADD.W	R4, R4,	#0x200
		BL	CLK_WaitClockReady
		LDR	R0, [R4,#0x10]
		ORR.W	R0, R0,	#7
		STR	R0, [R4,#0x10]	@ HCLKSEL = HIRC
		LDR	R0, [R4,#0x20]
		BIC.W	R0, R0,	#0xF
		ORRS	R0, R6
		STR	R0, [R4,#0x20]	@ HCLKDIV = R1
		LDR	R0, [R4,#0x10]
		BIC.W	R0, R0,	#7
		ORRS	R0, R7
		STR	R0, [R4,#0x10]	@ HCLKSEL = R0
		SUB.W	R4, R4,	#0x200
		BL	SystemCoreClockUpdate
		CMP	R5, #0
		BNE	locret_10DA
		LDR.W	R0, [R4,#0x200]
		BIC.W	R0, R0,	#4
		STR.W	R0, [R4,#0x200]

locret_10DA:				@ ...
		POP.W	{R4-R8,PC}
@ End of function CLK_SetHCLK

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk

CLK_SetModuleClock:				@ ...
		PUSH	{R4-R6,LR}
		TST.W	R0, #0x3FC00
		BEQ	loc_1104
		LDR	R4, =0x40000220
		UBFX.W	R3, R0,	#18, #2
		ADD.W	R3, R4,	R3,LSL#2
		LDR	R4, [R3]
		UBFX.W	R5, R0,	#10, #8
		UBFX.W	R6, R0,	#5, #5
		LSLS	R5, R6
		BICS	R4, R5
		ORRS	R4, R2
		STR	R4, [R3]

loc_1104:				@ ...
		LSRS	R2, R0,	#25
		LSLS	R2, R2,	#29
		BEQ	locret_1128
		LDR	R3, =0x40000220
		UBFX.W	R2, R0,	#28, #2
		SUBS	R3, #0x10
		ADD.W	R2, R3,	R2,LSL#2
		LDR	R3, [R2]
		UBFX.W	R4, R0,	#25, #3
		UBFX.W	R0, R0,	#20, #5
		LSLS	R4, R0
		BICS	R3, R4
		ORRS	R3, R1
		STR	R3, [R2]

locret_1128:				@ ...
		POP	{R4-R6,PC}
@ End of function CLK_SetModuleClock

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk

CLK_WaitClockReady:				@ ...
		PUSH	{R4,LR}
		MOV.W	R2, #0x40000000
		MOV	R4, R0
		LDR	R1, =2160000	@ Time to wait for clock stability (loops)
		LDR.W	R0, [R2,#0x200]
		BIC.W	R0, R0,	#0x1000
		STR.W	R0, [R2,#0x200]	@ HTX Crystal type INV
		B	loc_1154
@ ---------------------------------------------------------------------------

loc_1148:				@ ...
		SUBS	R3, R1,	#0
		SUB.W	R1, R1,	#1
		BGT	loc_1154
		MOVS	R0, #0
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_1154:				@ ...
		LDR.W	R3, [R2,#0x250]
		BICS.W	R0, R4,	R3	@ Test clock stability
		BNE	loc_1148
		MOVS	R0, #1
		POP	{R4,PC}
@ End of function CLK_WaitClockReady

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_crc

CRC_GetChecksum:				@ ...
		LDR	R1, =0x40031000
		LDR	R0, [R1]
		AND.W	R0, R0,	#0xC0000000
		CMP.W	R0, #0x80000000
		BEQ	loc_1188
		CMP.W	R0, #0xC0000000
		BEQ	loc_118E
		CBZ	R0, loc_1188
		CMP.W	R0, #0x40000000
		BEQ	loc_1192
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_1188:				@ ...
		LDR	R0, [R1,#0xC]
		UXTH	R0, R0
		BX	LR
@ ---------------------------------------------------------------------------

loc_118E:				@ ...
		LDR	R0, [R1,#0xC]
		BX	LR
@ ---------------------------------------------------------------------------

loc_1192:				@ ...
		LDR	R0, [R1,#0xC]
		UXTB	R0, R0
		BX	LR
@ End of function CRC_GetChecksum

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgCalcPageCRC:
		PUSH	{R4-R6,LR}
		MOV	R4, R0
		MOVS	R1, #0
		MOV.W	R3, #0x10000000
		MOVW	R2, #0xFFFF
		MOV	R0, R1
		BL	CRC_Open
		MOVS	R1, #0
		LDR	R5, =0x40031000
		ADDS	R4, R4,	#4

loc_11B6:				@ ...
		LDRH.W	R0, [R4,R1,LSL#1]
		STR	R0, [R5,#4]
		ADDS	R1, R1,	#1
		CMP	R1, #0x7E
		BCC	loc_11B6
		BL	CRC_GetChecksum
		LDR	R1, [R5]
		BIC.W	R1, R1,	#1
		STR	R1, [R5]
		POP	{R4-R6,PC}
@ End of function CalcPageCRC

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_crc

CRC_Open:				@ ...
		PUSH	{R4,R5,LR}
		MOV.W	R4, #0x40000000
		LDR.W	R5, [R4,#0x204]
		ORR.W	R5, R5,	#0x80
		STR.W	R5, [R4,#0x204]
		LDR	R4, =0x40031000
		STR	R2, [R4,#8]
		ORRS	R0, R1
		ORRS	R0, R3
		ORR.W	R0, R0,	#1
		STR	R0, [R4]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#2
		STR	R0, [R4]
		POP	{R4,R5,PC}
@ End of function CRC_Open

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ R0 = Sum of the R1 bytes at R0

		.ifne	keeporgcode

orgChecksum:				@ ...
		PUSH	{R4,LR}
		MOV	R3, R0
		MOVS	R2, #0
		MOV	R0, R2
		B	loc_1214
@ ---------------------------------------------------------------------------

loc_120E:				@ ...
		LDRB	R4, [R3,R2]
		ADDS	R2, R2,	#1
		ADD	R0, R4

loc_1214:				@ ...
		SUBS	R1, R1,	#1
		BCS	loc_120E
		POP	{R4,PC}
@ End of function Checksum

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgClampPower:				@ ...
		PUSH	{R4,LR}
		MOV	R4, R1
		LDR	R1, =AtoError
		LDRB	R1, [R1]
		CBNZ	R1, loc_1258
		LDR	R1, =AtoRez
		LDRH	R2, [R1]
		CBZ	R2, loc_1258
		MULS	R0, R0
		MOVS	R1, #10
		UDIV.W	R0, R0,	R1
		UDIV.W	R0, R0,	R2
		UXTH	R3, R0
		BL	ClampPowers
		LDR	R0, =AtoMinPower
		LDR	R0, [R0]
		CMP	R3, R0
		BCS	loc_1248
		MOV	R3, R0

loc_1248:				@ ...
		CBZ	R4, loc_1254
		LDR	R0, =AtoMaxPower
		LDR	R0, [R0]
		CMP	R3, R0
		BLS	loc_1254
		MOV	R3, R0

loc_1254:				@ ...
		UXTH	R0, R3
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_1258:				@ ...
		LDR	R0, =MaxPower
		LDR	R3, [R0]
		B	loc_1254
@ End of function ClampPower

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetAtoVWVolts:
		LDR	R1, =AtoError
		PUSH	{R4,LR}
		LDRB	R1, [R1]
		CBNZ	R1, loc_12F8
		LDR	R1, =AtoRez
		LDRH	R1, [R1]	@ int
		CBZ	R1, loc_12F8
		FMSR	S0, R0
		FUITOS	S1, S0
		FMSR	S0, R1
		FUITOS	S0, S0
		FMULS	S0, S1,	S0
		CDP	p10, 0xF, c0,c2,c4, 0
		FMULS	S0, S0,	S1
		FMRS	R0, S0
		BL	float2double
		FMDRR	D0, R0,	R1
		BL	sqrtd
		FMRRD	R0, R1,	D0
		BL	double2float
		FMSR	S0, R0
		CDP	p10, 0xF, c0,c6,c0, 0
		FADDS	S0, S0,	S1
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		FMSR	S0, R0
		FUITOS	S0, S0
		BL	ClampAtoVolts
		LDR	R0, =AtoMinVolts
		FLDS	S1, [R0]
		FUITOS	S2, S1
		FCMPES	S0, S2
		FMSTAT
		BCS	loc_12F0
		FUITOS	S0, S1

loc_12F0:				@ ...
		LDR	R0, =AtoMaxVolts
		FLDS	S1, [R0]
		B	loc_12FA
@ ---------------------------------------------------------------------------

loc_12F8:				@ ...
		B	loc_1318
@ ---------------------------------------------------------------------------

loc_12FA:				@ ...
		FUITOS	S2, S1
		FCMPES	S0, S2
		FMSTAT
		BLE	loc_130C
		FUITOS	S0, S1

loc_130C:				@ ...
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_1318:				@ ...
		FLDS	S0, 1f
		B	loc_130C
@ End of function GetAtoVWVolts

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
1:		.float 330.0

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgCelsiusToF:
		ADD.W	R0, R0,	R0,LSL#3
		UXTH	R0, R0
		MOVS	R1, #5
		UDIV.W	R0, R0,	R1
		ADDS	R0, #0x20
		UXTH	R0, R0
		BX	LR
@ End of function CelsiusToF

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif

@ =============== S U B	R O U T	I N E =======================================


fbCLSBuf:
		LDR	R1, =ScreenBuffer
		MOVS	R2, #0
		MOV	R0, R2

loc_134E:				@ ...
		STRB	R0, [R1]
		STRB	R0, [R1,#1]
		STRB	R0, [R1,#2]
		STRB	R0, [R1,#3]
		STRB	R0, [R1,#4]
		STRB	R0, [R1,#5]
		STRB	R0, [R1,#6]
		STRB	R0, [R1,#7]
		STRB	R0, [R1,#8]
		STRB	R0, [R1,#9]
		STRB	R0, [R1,#10]
		STRB	R0, [R1,#11]
		STRB	R0, [R1,#12]
		STRB	R0, [R1,#13]
		STRB	R0, [R1,#14]
		STRB	R0, [R1,#15]
		ADDS	R2, R2,	#1
		UXTB	R2, R2
		ADDS	R1, #0x10
		CMP	R2, #0x40
		BCC	loc_134E
		BX	LR
@ End of function fbCLSBuf

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgResetWatchDog:
		PUSH	{R4,LR}
		BL	SYS_UnlockReg
		LDR	R0, =0x40040000
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x2C
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		MOV.W	R1, #0x40000000
		MOVS	R0, #0
		STR.W	R0, [R1,#0x100]
		POP	{R4,PC}
@ End of function ResetWatchDog

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgfbCreateColumn:
		PUSH	{R4,LR}
		MOV	R4, R1
		CMP	R0, #0x7F
		BHI	locret_13DA
		STRB	R0, [R4]
		BL	Random
		MOVS	R1, #0x18
		SDIV.W	R2, R0,	R1
		MLS.W	R0, R1,	R2, R0
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		LSRS	R1, R0,	#3
		STRB	R1, [R4,#2]
		STRB	R0, [R4,#1]
		ADDS	R0, #0x28
		UXTB	R0, R0
		SUB.W	R1, R0,	#8
		RSB.W	R0, R0,	#0x40
		STRB	R1, [R4,#3]
		UBFX.W	R0, R0,	#3, #5
		STRB	R0, [R4,#4]

locret_13DA:				@ ...
		POP	{R4,PC}
@ End of function fbCreateColumn

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ in R0	Callback fct
@ out R0 Timeout # or 255

fbCreateTimeout:				@ ...
		PUSH	{R4,R5,LR}
		LDR	R5, =fbTimeoutMask
		MOVS	R1, #1
		UXTH	R4, R0
		LDRB	R2, [R5,#2]
		MOVS	R0, #0

loc_13E8:				@ ...
		TST	R1, R2
		BNE	loc_13FA
		ORRS	R2, R1
		LDR	R1, =TimeoutsTable
		STRB	R2, [R5,#2]
		ADD.W	R1, R1,	R0,LSL#3
		STR	R4, [R1,#4]
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_13FA:				@ ...
		LSLS	R1, R1,	#0x19
		ADDS	R0, R0,	#1
		LSRS	R1, R1,	#0x18
		UXTB	R0, R0
		CMP	R0, #3
		BCC	loc_13E8
		MOVS	R0, #0xFF
		POP	{R4,R5,PC}
@ End of function fbCreateTimeout

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne keeporgcode

orgDrawScreen:				@ ...
		PUSH.W	{R4-R10,LR}
		LDR	R4, =ScreenDuration
		LDR	R5, =ShowFDTimer
		LDR	R7, =Flags64
		LDRB	R0, [R4,#(Screen - ScreenDuration)]
		MOV.W	R8, #0
		CMP	R0, #2
		BNE	loc_1448
		LDR	R1, =CurrentFD
		LDR	R0, =FireDuration
		LDRH	R2, [R1]
		LDRH	R0, [R0]
		CMP	R2, R0
		BEQ	loc_1448
		CBZ	R0, loc_1448
		STRH	R0, [R1]
		MOVS	R0, #1
		STRB	R0, [R4]
		STRB.W	R8, [R5]
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R7]

loc_1448:				@ ...
		LDR	R0, [R7]
		LDR	R6, =dfData
		LSLS	R1, R0,	#14
		BPL	loc_1542
		BIC.W	R0, R0,	#0x20000
		STR	R0, [R7]
		BL	ClearScreenBuffer
		LDRB	R0, [R4,#(Screen - ScreenDuration)]
1:		CMP	R0, #28
		BEQ	loc_150E
		BGT	loc_1486
		CMP	R0, #20
		BEQ	loc_14D2
		BGT	loc_1476
		CMP	R0, #6		@ switch 6 cases
		BCS	def_147C
		TBB.W	[PC,R0]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_146C:
		.byte (def_147C - jpt_146C)/2
		.byte (loc_14C6 - jpt_146C)/2
		.byte (loc_14C0 - jpt_146C)/2
		.byte (loc_14C6 - jpt_146C)/2
		.byte (def_147C - jpt_146C)/2
		.byte (loc_14CC - jpt_146C)/2
		.balign 2,0
@ ---------------------------------------------------------------------------

loc_1476:				@ ...
		SUBS	R0, #21		@ switch 5 cases
		CMP	R0, #5
		BCS	def_147C
		TBB.W	[PC,R0]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_147C:
		.byte (loc_14D8 - jpt_147C)/2 @ ...
		.byte (loc_14DE - jpt_147C)/2
		.byte (loc_14FC - jpt_147C)/2
		.byte (loc_1502 - jpt_147C)/2
		.byte (loc_1508 - jpt_147C)/2
		.balign 2,0

loc_1486:				@ ...
		CMP	R0, #50
		BEQ	loc_151A
		BGT	loc_14A6
		CMP	R0, #37
		BEQ	loc_14F6
		BGT	loc_149C
		CMP	R0, #29
		BEQ	loc_14F0
		CMP	R0, #31
		BNE	def_147C
		B	loc_1514
@ ---------------------------------------------------------------------------

loc_149C:				@ ...
		CMP	R0, #40
		BEQ	loc_14E4
		CMP	R0, #41
		BNE	def_147C
		B	loc_153A
@ ---------------------------------------------------------------------------

loc_14A6:				@ ...
		CMP	R0, #59
		BEQ	loc_1520
		BGT	loc_14B6
		CMP	R0, #51
		BEQ	loc_14EA
		CMP	R0, #54
		BNE	def_147C
		B	loc_1534
@ ---------------------------------------------------------------------------

loc_14B6:				@ ...
		CMP	R0, #82
		BEQ	loc_1526
		CMP	R0, #83
		BNE	def_147C
		B	loc_152C
@ ---------------------------------------------------------------------------

loc_14C0:				@ ...
		LDRB.W	R0, [R6,#(dfStealthOn -	dfData)]
		CBNZ	R0, loc_1506

loc_14C6:				@ ...
		BL	ShowMainView
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14CC:				@ ...
		BL	ShowBatCharging
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14D2:				@ ...
		BL	ShowNoAtoFound
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14D8:				@ ...
		BL	ShowAtoShort
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14DE:				@ ...
		BL	ShowAtoLow
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14E4:				@ ...
		BL	ShowStealthMode
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14EA:				@ ...
		BL	ShowNewCoil
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14F0:				@ ...
		BL	ShowDevTooHot
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14F6:				@ ...
		BL	ShowBoardTemp
		B	def_147C
@ ---------------------------------------------------------------------------

loc_14FC:				@ ...
		BL	Show10sProtec
		B	def_147C
@ ---------------------------------------------------------------------------

loc_1502:				@ ...
		BL	ShowBatLow

loc_1506:				@ ...
		B	def_147C
@ ---------------------------------------------------------------------------

loc_1508:				@ ...
		BL	ShowBatLowLock
		B	def_147C
@ ---------------------------------------------------------------------------

loc_150E:				@ ...
		BL	ShowKeyLock
		B	def_147C
@ ---------------------------------------------------------------------------

loc_1514:				@ ...
		BL	ShowKeyUnLock
		B	def_147C
@ ---------------------------------------------------------------------------

loc_151A:				@ ...
		BL	ShowVersion
		B	def_147C
@ ---------------------------------------------------------------------------

loc_1520:				@ ...
		BL	ShowTCRSet
		B	def_147C
@ ---------------------------------------------------------------------------

loc_1526:				@ ...
		BL	ShowLOGOMenu
		B	def_147C
@ ---------------------------------------------------------------------------

loc_152C:				@ ...
		BL	ShowGameMenu
		B	def_147C
@ ---------------------------------------------------------------------------
		B	loc_1542
@ ---------------------------------------------------------------------------

loc_1534:				@ ...
		BL	ShowBattVolts
		B	def_147C
@ ---------------------------------------------------------------------------

loc_153A:				@ ...
		BL	ShowTiOnOff

def_147C:				@ ...
		BL	DisplayRefresh

loc_1542:				@ ...
		LDR	R1, [R7]
		LSLS	R0, R1,	#23
		BPL	loc_1558
		LDRB	R0, [R6,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_159C
		CBZ	R0, loc_159C
		CMP	R0, #2
		BEQ	loc_159C
		CMP	R0, #3
		BEQ	loc_159C

loc_1558:				@ ...
		LDRB	R0, [R5]
		ADDS	R0, R0,	#1

loc_155C:				@ ...
		STRB	R0, [R5]
		UXTB	R0, R0
		CMP	R0, #10
		BCC	def_15B2
		STRB.W	R8, [R5]
		LDRB	R0, [R4]
		CBZ	R0, loc_1576
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R4]
		BNE	def_15B2

loc_1576:				@ ...
		LDRB	R0, [R4,#(Screen - ScreenDuration)]
		LDR	R5, =SleepTimer
		MOV.W	R9, #5
		MOVW	R10, #18000
@MODIF****************************
		.ifne	modifs
		CMP	R0, #100
		BGT loc_161A
		.endif
@*********************************
		CMP	R0, #29
		BEQ	loc_161A
		BGT	loc_15BE
		CMP	R0, #21
		BEQ	loc_161A
		BGT	loc_15AC
		CMP	R0, #2
		BEQ	loc_15F8
		BGT	loc_15A2
		CBZ	R0, loc_15F6
		CMP	R0, #1
		BNE	def_15B2
		B	loc_15EE
@ ---------------------------------------------------------------------------

loc_159C:				@ ...
		LDRB	R0, [R5]
		ADDS	R0, R0,	#5
		B	loc_155C
@ ---------------------------------------------------------------------------

loc_15A2:				@ ...
		CMP	R0, #3
		BEQ	loc_15EE
		CMP	R0, #20
		BNE	def_15B2
		B	loc_161A
@ ---------------------------------------------------------------------------

loc_15AC:				@ ...
		SUBS	R0, #22		@ switch 7 cases
		CMP	R0, #7
		BCS	def_15B2
		TBB.W	[PC,R0]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_15B2:
		.byte (loc_161A - jpt_15B2)/2
		.byte (loc_161A - jpt_15B2)/2
		.byte (loc_161A - jpt_15B2)/2
		.byte (loc_161A - jpt_15B2)/2
		.byte (def_15B2 - jpt_15B2)/2
		.byte (def_15B2 - jpt_15B2)/2
		.byte (loc_15EE - jpt_15B2)/2
		.balign 2,0

loc_15BE:				@ ...
		CMP	R0, #51
		BEQ	loc_161A
		BGT	loc_15DA
		CMP	R0, #40
		BEQ	loc_15EE
		BGT	loc_15D4
		CMP	R0, #31
		BEQ	loc_15EE
		CMP	R0, #37
		BNE	def_15B2
		B	loc_15EE
@ ---------------------------------------------------------------------------

loc_15D4:				@ ...
		CMP	R0, #41
		BNE	def_15B2
		B	loc_15EE
@ ---------------------------------------------------------------------------

loc_15DA:				@ ...
		CMP	R0, #54
		BEQ	loc_15EE
		CMP	R0, #59
		BEQ	loc_15EA
		CMP	R0, #82
		BEQ	loc_15EA
		CMP	R0, #83
		BNE	def_15B2

loc_15EA:				@ ...
		BL	UpdateDataFlash

loc_15EE:				@ ...
		LDR	R0, [R7]
		LSLS	R1, R0,	#19
		BMI	loc_1608
		B	loc_1622
@ ---------------------------------------------------------------------------

loc_15F6:				@ ...
		B	loc_162A
@ ---------------------------------------------------------------------------

loc_15F8:				@ ...
		LDRB.W	R0, [R6,#(dfStealthOn -	dfData)]
		CBZ	R0, loc_161A
		ORR.W	R0, R1,	#0x20000
		STR	R0, [R7]
		LSLS	R0, R0,	#19
		BPL	loc_1610

loc_1608:				@ ...
		STRB.W	R9, [R4,#1]

def_15B2:				@ ...
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_1610:				@ ...
		STRB.W	R8, [R4,#1]
		STRH.W	R10, [R5]
		B	def_15B2
@ ---------------------------------------------------------------------------

loc_161A:				@ ...
		POP.W	{R4-R10,LR}
		B.W	MainView
@ ---------------------------------------------------------------------------

loc_1622:				@ ...
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R7]
		B	loc_1610
@ ---------------------------------------------------------------------------

loc_162A:				@ ...
		LDRB.W	R0, [R6,#(dfStatus - dfData)]
		LSLS	R0, R0,	#31
		BEQ	def_15B2
		STRH.W	R8, [R5]
		B	def_15B2
@ End of function DrawScreen

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgMainView:
		LDR	R0, =ScreenDuration
		LDRB	R1, [R0,#(Screen - ScreenDuration)]
		CMP	R1, #1
		BNE	loc_1672
		LDR	R1, =0x400048CC
		LDR	R1, [R1]	@ PD3 (left btn)
		CBZ	R1, loc_1672
		LDR	R1, =0x400048CC
		SUBS	R1, R1,	#4
		LDR	R1, [R1]	@ PD2 (right btn)
		CBZ	R1, loc_1672
		LDR	R1, =0x400048CC
		ADDS	R1, #0x34
		LDR	R1, [R1]	@ PE0 (fire)
		CBNZ	R1, loc_1678

loc_1672:				@ ...
		LDR	R2, =HideLogo
		MOVS	R1, #3
		STRH	R1, [R2]

loc_1678:				@ ...
		LDR	R1, =Flags64
		LDR	R2, [R1]
		ORR.W	R2, R2,	#0x20000
		STR	R2, [R1]
		MOVS	R1, #1
		STRB	R1, [R0,#(Screen - ScreenDuration)]
		MOVS	R1, #30
		STRB	R1, [R0]
		BX	LR
@ End of function MainView

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

@ Writes 2kB from RAM R1 to DF R0

orgFMCWrite800:				@ ...
		PUSH	{R4-R7,LR}
		MOVS	R2, #0
		MOVS	R6, #0x21	@ Flash	32-Bits	program
		LDR	R3, =0x4000C000
		MOVS	R7, #1
		MOV.W	R12, #0x200	@ # of words in	2kB

loc_16AA:				@ ...
		LDR.W	R4, [R1,R2,LSL#2]
		ADD.W	R5, R0,	R2,LSL#2
		STR	R6, [R3,#0xC]
		STR	R5, [R3,#4]
		STR	R4, [R3,#8]
		STR	R7, [R3,#0x10]

loc_16BA:				@ ...
		LDR	R4, [R3,#0x10]
		CMP	R4, #0
		BNE	loc_16BA
		ADDS	R2, R2,	#1
		CMP	R2, R12
		BCC	loc_16AA
		MOVS	R0, #0
		POP	{R4-R7,PC}
@ End of function FMCWrite800

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

@ Compares 2kB (0x800) DF @R0 with RAM @R1

orgFMCVerif800:				@ ...
		PUSH	{R4-R7,LR}
		MOV	R4, R0
		MOVS	R0, #0
		LDR	R2, =0x4000C000
		MOVS	R6, #1
		MOV	R5, R0
		ASRS	R7, R2,	#21

loc_16DE:				@ ...
		ADD.W	R3, R4,	R0,LSL#2
		STR	R5, [R2,#0xC]	@ Flash	32-bit read
		STR	R3, [R2,#4]
		STR	R5, [R2,#8]
		STR	R6, [R2,#0x10]

loc_16EA:				@ ...
		LDR	R3, [R2,#0x10]
		CMP	R3, #0
		BNE	loc_16EA
		LDR	R3, [R2,#8]
		LDR.W	R12, [R1,R0,LSL#2]
		ADD.W	R0, R0,	#1
		CMP	R3, R12
		BNE	locret_1704
		CMP	R0, R7
		BCC	loc_16DE
		MOVS	R0, #0

locret_1704:				@ ...
		POP	{R4-R7,PC}
@ End of function FMCVerif800

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

@ Erase	& writes 2kB from RAM R1 to DF R0

orgFMCEraseWrite800:			@ ...
		LDR	R2, =0x4000C000
		PUSH	{LR}
		MOVS	R3, #0x22	@ Flash	page erase
		STR	R3, [R2,#0xC]
		STR	R0, [R2,#4]
		MOVS	R3, #1
		STR	R3, [R2,#0x10]	@ Go

loc_171A:				@ ...
		LDR	R3, [R2,#0x10]
		CMP	R3, #0
		BNE	loc_171A	@ Wait for completion
		LDR	R3, [R2]
		LSLS	R3, R3,	#25
		BPL	loc_1734
		LDR	R3, [R2]
		ORR.W	R3, R3,	#0x40
		STR	R3, [R2]
		MOV.W	R2, #-1
		B	loc_1736
@ ---------------------------------------------------------------------------

loc_1734:				@ ...
		MOVS	R2, #0

loc_1736:				@ ...
		ADDS	R2, R2,	#1
		BEQ	loc_1742
		BL	FMCWrite800
		MOVS	R0, #0
		POP	{PC}
@ ---------------------------------------------------------------------------

loc_1742:				@ ...
		MOVS	R0, #1
		POP	{PC}
@ End of function FMCEraseWrite800

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ Waits	R0 ms

		.ifne	keeporgcode
		
orgWaitOnTMR2:				@ ...
		PUSH	{R4-R6,LR}
		LDR	R5, =Flags64
		MOV	R4, R0
		LDR	R0, [R5]
		BIC.W	R0, R0,	#4
		STR	R0, [R5]
		B	loc_176E
@ ---------------------------------------------------------------------------

loc_175C:				@ ...
		LDR	R0, [R5]
		LSLS	R1, R0,	#29
		BPL	loc_176A
		BIC.W	R0, R0,	#4
		SUBS	R4, R4,	#1
		STR	R0, [R5]

loc_176A:				@ ...
		BL	ResetWatchDog

loc_176E:				@ ...
		CMP	R4, #0
		BNE	loc_175C
		POP	{R4-R6,PC}
@ End of function WaitOnTMR2

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_clk
@ inline

CLK_SysTickDelay:				@ ...
		LDR	R1, =CyclesPerUs
		LDR	R1, [R1]
		MULS	R0, R1
		MOV.W	R1, #0xE000E000
		STR	R0, [R1,#0x14]	@ SysTick reload value
		MOVS	R0, #0
		STR	R0, [R1,#0x18]	@ Clear	SysTick
		MOVS	R0, #5
		STR	R0, [R1,#0x10]	@ Use core clk,	multishot

loc_178C:				@ ...
		LDR	R0, [R1,#0x10]
		LSLS	R0, R0,	#0xF
		BPL	loc_178C
		BX	LR
@ End of function CLK_SysTickDelay

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================


fbDrawDeadBird:

var_8		= -8

		PUSH	{R3,LR}
		LDR	R2, =fbBirdDead
		MOVS	R3, #16
		STR	R2, [SP]
		MOV	R1, R0
		MOV	R2, R3
		MOVS	R0, #10
		BL	fbDrawSprite
		POP	{R3,PC}
@ End of function fbDrawDeadBird

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1327_SetColsRowsAddrs:
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOV	R5, R3
		MOV	R6, R2
		MOV	R7, R1
		MOVS	R0, #0x15
		BL	DisplaySendCommand
		MOV	R0, R4
		BL	DisplaySendCommand
		MOV	R0, R7
		BL	DisplaySendCommand
		MOVS	R0, #0x75
		BL	DisplaySendCommand
		MOV	R0, R6
		BL	DisplaySendCommand
		MOV	R0, R5
		POP.W	{R4-R8,LR}
		B.W	DisplaySendCommand
@ End of function SSD1327_SetColsRowsAddrs

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_eadc

EADC_Close:				@ ...
		LDR	R1, [R0,#0x50]
		BIC.W	R1, R1,	#1
		STR	R1, [R0,#0x50]
		BX	LR
@ End of function EADC_Close

@ ---------------------------------------------------------------------------
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_eadc

EADC_ConfigSampleModule:				@ ...
		PUSH	{R4,LR}
		ADD.W	R0, R0,	R1,LSL#2
		LDR.W	R1, [R0,#0x80]!
		LDR	R4, =0xFFE0FFF0
		ANDS	R1, R4
		STR	R1, [R0]
		LDR	R1, [R0]
		ORRS	R2, R3
		ORRS	R1, R2
		STR	R1, [R0]
		POP	{R4,PC}
@ End of function EADC_ConfigSampleModule

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitEADC:
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x38]
		AND.W	R1, R1,	#0xF0000000
		STR	R1, [R0,#0x38]
		LDR	R1, [R0,#0x38]
		LDR	R2, =0x1111111
		ORRS	R1, R2
		STR	R1, [R0,#0x38]	@ PB0-PB6 = EADC analog	input chan 0-4,13-14
		MOV.W	R0, #0x40004000
		LDR	R1, [R0,#0x44]
		ORR.W	R1, R1,	#0x7F0000
		STR	R1, [R0,#0x44]
		BX	LR
@ End of function InitEADC

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_eadc

EADC_Open:				@ ...
		LDR	R2, [R0,#0x50]
		BIC.W	R2, R2,	#0x100
		STR	R2, [R0,#0x50]	@ Single-end analog
		LDR	R2, [R0,#0x50]
		ORR.W	R1, R1,	#1
		ORRS	R2, R1
		STR	R2, [R0,#0x50]	@ ADC enable
		BX	LR
@ End of function EADC_Open

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ R0: Channel

		.ifne	keeporgcode

orgADC_Read:
		PUSH	{R4-R6,LR}
		LDR	R5, =0x40043000
		MOV	R4, R0
		MOVS	R1, #0
		MOV	R0, R5
		BL	EADC_Open
		MOVS	R1, #6
		MOV	R0, R5
		BL	EADC_SetInternalSampleTime
		MOV	R3, R4
		MOVS	R2, #0
		MOV	R1, R3
		MOV	R0, R5
		BL	EADC_ConfigSampleModule
		MOVS	R6, #1
		STR.W	R6, [R5,#0xF8]	@ Clear	interrupt flag
		LDR	R0, [R5,#0x50]
		ORR.W	R0, R0,	#4
		STR	R0, [R5,#0x50]	@ Enable ADC IRQ0
		LDR.W	R0, [R5,#0xD0]
		LSLS	R6, R4
		ORRS	R0, R6
		STR.W	R0, [R5,#0xD0]	@ Enable IRQ0 for module R0
		MOVS	R0, #0x2A
		BL	NVIC_EnableIRQ
		LDR	R0, =ADC00_IRQ_Flag
		MOVS	R1, #0
		STR	R1, [R0]
		STR	R6, [R5,#0x54]

loc_1896:				@ ...
		LDR	R2, [R0]
		CMP	R2, #0
		BEQ	loc_1896	@ Wait for interrupt
		LDR	R0, [R5,#0x50]
		BIC.W	R0, R0,	#4
		STR	R0, [R5,#0x50]	@ Disable interrupts
		LDR.W	R0, [R5,R4,LSL#2] @ Read data
		UXTH	R0, R0
		POP	{R4-R6,PC}
@ End of function ADC_Read

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_eadc
		
EADC_SetInternalSampleTime:			@ ...
		LDR	R2, [R0,#0x50]
		BIC.W	R2, R2,	#0x70000
		STR	R2, [R0,#0x50]
		LDR	R2, [R0,#0x50]
		LDR	R3, =0xFFFF0000
		ADD.W	R1, R3,	R1,LSL#16
		ORRS	R2, R1
		STR	R2, [R0,#0x50]
		BX	LR
@ End of function EADC_SetInternalSampleTime

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgFMCCheckConfig:				@ ...
		PUSH	{R4-R6,LR}
		MOV	R4, R0
		LDRB	R0, [R0]
		MOV.W	R5, #0x1E000
		LSLS	R0, R0,	#0x1F
		BNE	loc_18E4
		LDR	R0, [R4,#4]
		CMP	R0, R5
		BEQ	loc_1922

loc_18E4:				@ ...
		BL	FMC_EnableConfigUpdate
		MOV.W	R0, #0x300000
		BL	FMCErase
		LDR	R0, [R4]
		MOVS	R1, #2
		BIC.W	R0, R0,	#1
		STRD.W	R0, R5,	[R4]
		MOV	R0, R4
		BL	FMC_WriteConfig
		CMP	R0, #0
		BLT	loc_191A
		MOVS	R1, #2
		MOV	R0, R4
		BL	FMC_ReadConfig
		LDRB	R0, [R4]
		LSLS	R0, R0,	#0x1F
		BNE	loc_191A
		LDR	R0, [R4,#4]
		CMP	R0, R5
		BEQ	loc_191E

loc_191A:				@ ...
		MOVS	R0, #0
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_191E:				@ ...
		BL	SYS_ResetChip @ Does	not return (obviously)

loc_1922:				@ ...
		MOVS	R0, #1
		POP	{R4-R6,PC}
@ End of function FMCCheckConfig

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgFMCRead100:
		PUSH	{R4-R6,LR}
		MOV	R5, R1
		MOV	R6, R0
		MOVS	R4, #0

loc_192E:				@ ...
		ADDS	R0, R6,	R4
		BL	FMCRead
		STMIA	R5!, {R0}
		ADDS	R4, R4,	#4
		CMP	R4, #0xFF
		BLS	loc_192E
		POP	{R4-R6,PC}
@ End of function FMCRead100

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitDataFlash:
		PUSH.W	{R2-R10,LR}
		BL	SYS_UnlockReg
		BL	FMCEnableISP
		MOV.W	R1, #0x800
		LDR	R0, =dfData
		BL	MemClear
		LDR	R3, =0x4000C000
		MOVS	R0, #0xB	@ Read Company ID
		STR	R0, [R3,#0xC]
		MOVS	R7, #0
		STR	R7, [R3,#4]
		MOVS	R5, #1
		STR	R5, [R3,#0x10]

loc_1964:				@ ...
		LDR	R0, [R3,#0x10]
		LSLS	R0, R0,	#31
		BNE	loc_1964
		LDR	R0, [R3,#8]
		LDR	R4, =dfData
		MOVS	R1, #0xC
		STR.W	R0, [R4,#(dffmcCID - dfData)]
		STR	R1, [R3,#0xC]
		STR	R7, [R3,#4]
		STR	R5, [R3,#0x10]

loc_197A:				@ ...
		LDR	R0, [R3,#0x10]
		LSLS	R0, R0,	#31
		BNE	loc_197A
		LDR	R0, [R3,#8]
		STR.W	R0, [R4,#(dffmcDID - dfData)]
		STR	R1, [R3,#0xC]
		MOV.W	R12, #4
		STR.W	R12, [R3,#4]
		STR	R5, [R3,#0x10]

loc_1992:				@ ...
		LDR	R0, [R3,#0x10]
		LSLS	R0, R0,	#31
		BNE	loc_1992
		LDR	R0, [R3,#8]
		STR.W	R0, [R4,#(dffmcPID - dfData)]
		MOVS	R0, #0

loc_19A0:				@ ...
		STR.W	R12, [R3,#0xC]	@ Read Unique ID
		LSLS	R1, R0,	#2
		STR	R1, [R3,#4]
		STR	R7, [R3,#8]
		STR	R5, [R3,#0x10]

loc_19AC:				@ ...
		LDR	R1, [R3,#0x10]
		CMP	R1, #0
		BNE	loc_19AC
		LDR	R1, [R3,#8]
		ADD.W	R2, R4,	R0,LSL#2
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STR.W	R1, [R2,#(dffmcUID -	dfData)]
		CMP	R0, #3
		BCC	loc_19A0
		MOVS	R0, #0
		MOVS	R1, #0x10

loc_19C8:				@ ...
		STR.W	R12, [R3,#0xC]	@ Read Unique ID
		ADD.W	R2, R1,	R0,LSL#2
		STR	R2, [R3,#4]
		STR	R5, [R3,#0x10]

loc_19D4:				@ ...
		LDR	R2, [R3,#0x10]
		LSLS	R2, R2,	#0x1F
		BNE	loc_19D4
		LDR	R2, [R3,#8]
		ADD.W	R8, R4,	R0,LSL#2
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STR.W	R2, [R8,#(dffmcUCID - dfData)]
		CMP	R0, #4
		BCC	loc_19C8
		MOVS	R1, #2
		MOV	R0, SP
		BL	FMC_ReadConfig
		MOV	R0, SP
		BL	FMCCheckConfig
		MOV.W	R8, #0x1E000
		CBZ	R0, loc_1A0A
		ADDS	R1, R4,	#4
		MOV	R0, R8
		BL	FMCLoadDFFirstPage
		MOV	R6, R0

loc_1A0A:				@ ...
		ADDS	R0, R4,	#(dfCRC	- dfData)
		BL	CalcPageCRC
		LDR	R1, [R4,#(dfCRC	- dfData)]
		CMP	R0, R1
		BEQ	loc_1A42
		CMP	R6, R8
		BNE	loc_1A1E
		LDR	R0, =0x1EF00
		B	loc_1A22
@ ---------------------------------------------------------------------------

loc_1A1E:				@ ...
		SUB.W	R0, R6,	#0x100

loc_1A22:				@ ...
		ADDS	R1, R4,	#(dfCRC	- dfData)
		LDR.W	R8, [R4,#(dfHWVersion -	dfData)]
		BL	FMCRead100
		ADDS	R0, R4,	#4
		BL	CalcPageCRC
		LDR	R1, [R4,#(dfCRC	- dfData)]
		CMP	R0, R1
		BEQ	loc_1A3E
		STR.W	R8, [R4,#(dfHWVersion -	dfData)]
		B	loc_1A42
@ ---------------------------------------------------------------------------

loc_1A3E:				@ ...
		BL	UpdateDataFlash

loc_1A42:				@ ...
		BL	FMCReadCounters
		BL	FMCDisableISP
		MOV.W	R1, #0x40000000
		MOV	R8, R7
		STR.W	R7, [R1,#0x100]	@ Lock registers
		BL	GetProductID
		LDR	R2, [R4,#(dfHWVersion -	dfData)]
		LDR	R6, =UpdateDFTimer
		CMP	R2, #102
		BEQ	loc_1AAC
		CMP	R2, #103
		BEQ	loc_1AAC
		CMP	R2, #106
		BEQ	loc_1AAC
		CMP	R2, #108
		BEQ	loc_1AAC
		CMP	R2, #109
		BEQ	loc_1AAC
		CMP	R2, #111
		BEQ	loc_1AAC
		STRB.W	R8, [R6,#(DisplayModel - UpdateDFTimer)]

loc_1A78:				@ ...
		MOVS	R0, #115
		CMP	R2, #100
		BEQ	loc_1ABE
		CMP	R2, #102
		BEQ	loc_1ABE
		CMP	R2, #101
		BEQ	loc_1AB0
		CMP	R2, #108
		BEQ	loc_1AB0
		CMP	R2, #103
		BEQ	loc_1AB4
		CMP	R2, #104
		BEQ	loc_1AB4
		CMP	R2, #105
		BEQ	loc_1AB4
		CMP	R2, #106
		BEQ	loc_1AB4
		CMP	R2, #107
		BEQ	loc_1AB8
		CMP	R2, #109
		BEQ	loc_1AB8
		CMP	R2, #110
		BEQ	loc_1ABC
		CMP	R2, #111
		BEQ	loc_1ABC
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1AAC:				@ ...
		STRB	R5, [R6,#(DisplayModel - UpdateDFTimer)]
		B	loc_1A78
@ ---------------------------------------------------------------------------

loc_1AB0:				@ ...
		MOVS	R0, #125
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1AB4:				@ ...
		MOVS	R0, #110
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1AB8:				@ ...
		MOVS	R0, #120
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1ABC:				@ ...
		MOVS	R0, #105

loc_1ABE:				@ ...
		STRB	R0, [R6,#(AtoShuntValue	- UpdateDFTimer)]
		LDR	R2, =MaxVWVolts
		MOVW	R0, #303
		MOV.W	R1, #900
		STR.W	R0, [R4,#(dfFWVersion -	dfData)]
		STR	R1, [R2]
		LDR	R2, =MaxPower
		MOVW	R1, #750
		MOVS	R7, #10
		STR	R1, [R2]
		LDR	R2, =MaxTCPower
		MOV.W	R9, #100
		STR	R1, [R2]
		UDIV.W	R1, R0,	R7
		MLS.W	R3, R7,	R1, R0
		UDIV.W	R1, R0,	R7
		UDIV.W	R2, R1,	R7
		MLS.W	R2, R7,	R2, R1
		UDIV.W	R1, R0,	R9
		ADR	R0, aApromVersion__
		BL	PutTextf
		LDR	R0, [R4,#(dfHWVersion -	dfData)]
		UDIV.W	R1, R0,	R7
		MLS.W	R3, R7,	R1, R0
		UDIV.W	R1, R0,	R7
		UDIV.W	R2, R1,	R7
		MLS.W	R2, R7,	R2, R1
		UDIV.W	R1, R0,	R9
		ADR	R0, aHardwareVersio
		BL	PutTextf
		LDRB	R0, [R4,#(dfMagic - dfData)]
		CMP	R0, #0x36
		BNE	loc_1B32
		ADDS	R0, R4,	#4
		BL	CalcPageCRC
		LDR	R1, [R4,#(dfCRC	- dfData)]
		CMP	R0, R1
		BEQ	loc_1B54

loc_1B32:				@ ...
		ADR	R0, aDataFlashReIni
		BL	PutTextf
		BL	ResetDataFlash
		STRB.W	R8, [R4,#(dfMode - dfData)]
		STRB.W	R8, [R4,#(dfLastTCMode - dfData)]
		MOVS	R0, #200
		STRH	R0, [R4,#(dfPower - dfData)]
		STRB	R5, [R4,#(dfIsCelsius -	dfData)]
		MOVS	R0, #235
		STRH	R0, [R4,#(dfTemp - dfData)]
		BL	UpdateDataFlash
		B	loc_1B58
@ ---------------------------------------------------------------------------

loc_1B54:				@ ...
		BL	DFCheckValuesValidity

loc_1B58:				@ ...
		LDR	R0, [R4,#(dfStatus - dfData)]
		ADDS	R1, R4,	#4
		BIC.W	R0, R0,	#1
		STR	R0, [R4,#(dfStatus - dfData)]
		MOVS	R0, #2
		STRB.W	R0, [R4,#(dfUIVersion -	dfData)]
		LSLS	R2, R0,	#7
		LDR	R0, =SavedDF
		BL	MemCpy
		LDRB	R0, [R4,#(dfBootFlag - dfData)]
		CMP	R0, #0
		BEQ	locret_1B7C
		STRB.W	R8, [R4,#(dfBootFlag - dfData)]
		STRB	R5, [R6]

locret_1B7C:				@ ...
		POP.W	{R2-R10,PC}
@ End of function InitDataFlash

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
aApromVersion__:.ascii "  APROM Version ......................... [%d.%d%d]\n"
		.byte	0
aHardwareVersio:.ascii "  Hardware Version ...................... [%d.%d%d]\n"
		.byte	0
aDataFlashReIni:.ascii "Data Flash Re-Initialization\n"
		.byte	0
		.balign 2,0

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgResetDataFlash:				@ ...
		PUSH	{R4-R6,LR}
		LDR	R4, =dfData
		MOV.W	R1, #0x100
		ADDS	R0, R4,	#4
		LDR	R5, [R4,#(dfHWVersion -	dfData)]
		BL	MemClear
		STR.W	R5, [R4,#(dfHWVersion -	dfData)]!
		MOVS	R0, #0x36
		STRB	R0, [R4,#(dfMagic - dfHWVersion)]
		MOVS	R0, #4
		STRB	R0, [R4,#(dfMode - dfHWVersion)]
		MOVS	R5, #0
		STRB	R5, [R4,#(dfMode+1 - dfHWVersion)]
		MOV.W	R0, #330
		STRH	R0, [R4,#(dfVWVolts - dfHWVersion)]
		LDR	R0, =MaxPower
		MOV.W	R1, #450
		LDRH	R0, [R0]
		STRH	R0, [R4,#(dfPower - dfHWVersion)]
		LDR	R0, =MaxTCPower
		LDRH	R0, [R0]
		STRH	R0, [R4,#(dfTCPower - dfHWVersion)]
		STR.W	R5, [R4,#(dfPuffCount -	dfHWVersion)]
		STR.W	R5, [R4,#(dfTimeCount -	dfHWVersion)]
		STRB	R5, [R4,#(dfIsCelsius -	dfHWVersion)]
		MOVS	R0, #1
		STRB	R0, [R4,#(dfRezType	- dfHWVersion)]
		STRB	R0, [R4,#(dfTempAlgo - dfHWVersion)]
		STRH	R1, [R4,#(dfTemp - dfHWVersion)]
		STRH	R5, [R4,#(dfResistance - dfHWVersion)]
		STRB	R5, [R4,#(dfStealthOn -	dfHWVersion)]
		MOVS	R1, #2
		STRB.W	R1, [R4,#(dfUIVersion -	dfHWVersion)]
		STRB	R5, [R4,#(dfAPT	- dfHWVersion)]
		STRH	R5, [R4,#(dfRezTI - dfHWVersion)]
		STRH	R5, [R4,#(dfRezNI - dfHWVersion)]
		STRB	R5, [R4,#(dfRezLockedTI	- dfHWVersion)]
		STRB	R5, [R4,#(dfRezLockedNI	- dfHWVersion)]
		STRB	R0, [R4,#(dfTiOn - dfHWVersion)]
		STRH.W	R5, [R4,#(dfRezSS - dfHWVersion)]
		STRB.W	R5, [R4,#(dfRezLockedSS	- dfHWVersion)]
		STRH.W	R5, [R4,#(dfRezTCR - dfHWVersion)]
		STRB.W	R5, [R4,#(dfRezLockedTCR - dfHWVersion)]
		MOVS	R0, #120
		STRH.W	R0, [R4,#(dfTCRM1 - dfHWVersion)]
		STRH.W	R0, [R4,#(dfTCRM2 - dfHWVersion)]
		STRH.W	R0, [R4,#(dfTCRM3 - dfHWVersion)]
		STRB.W	R5, [R4,#(dfbyte_2000033D	- dfHWVersion)]
		STRH.W	R5, [R4,#(dfFBBest - dfHWVersion)]
		STRB.W	R5, [R4,#(dfFBSpeed - dfHWVersion)]
		BL	CpyTmpCoefsNI
		BL	CpyTmpCoefsTI
		LDR	R0, =dfData
		MOVS	R1, #20
		ADDS	R0, #(dfSavedCfgRez - dfData)
		STR	R5, [R4,#(dfStatus - dfHWVersion)]
		BL	MemClear
		LDR	R0, =dfData
		MOVS	R1, #20
		ADDS	R0, #(dfSavedCfgPwr - dfData)
		BL	MemClear
		POP.W	{R4-R6,LR}
		B.W	FMCWriteCounters
@ End of function ResetDataFlash

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgFMCLoadDFFirstPage:
		PUSH.W	{R4-R8,LR}
		MOV	R8, R1
		MOV	R5, R0
		MOVS	R4, #0
		MOV.W	R6, #0x1000

loc_1CFA:				@ ...
		ADDS	R0, R5,	R4
		MOV	R7, R0
		BL	FMCRead
		ADDS	R0, R0,	#1
		BNE	loc_1D10
		ADDS	R0, R7,	#4
		BL	FMCRead
		ADDS	R0, R0,	#1
		BEQ	loc_1D18

loc_1D10:				@ ...
		ADD.W	R4, R4,	#0x100
		CMP	R4, R6
		BCC	loc_1CFA

loc_1D18:				@ ...
		CBZ	R4, loc_1D20
		ADD	R5, R4
		SUB.W	R5, R5,	#0x100

loc_1D20:				@ ...
		MOV	R1, R8
		MOV	R0, R5
		BL	FMCRead100
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function FMCLoadDFFirstPage

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgUpdateDataFlash:
		PUSH	{R4-R6,LR}
		LDR	R0, =AtoRez
		LDR	R5, =dfData
		LDRH	R0, [R0]
		STRH.W	R0, [R5,#(dfAtoRez - dfData)]
		LDR	R0, =AtoStatus
		ADDS	R4, R5,	#4
		SUB.W	R1, R5,	#(dfData - SavedDF)
		LDRB	R0, [R0]
		STRB.W	R0, [R5,#(dfAtoStatus -	dfData)]
		MOVS	R0, #0

loc_1D4C:				@ ...
		LDRB	R2, [R4]
		LDRB	R3, [R1]
		CMP	R2, R3
		BNE	loc_1D60
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		ADDS	R1, R1,	#1
		ADDS	R4, R4,	#1
		CMP	R0, #0xFF
		BLS	loc_1D4C

loc_1D60:				@ ...
		MOV.W	R4, #0x100
		CMP	R0, R4
		BEQ	locret_1D98
		ADDS	R0, R5,	#(dfCRC	- dfData)
		BL	CalcPageCRC
		STR	R0, [R5,#(dfCRC	- dfData)]
		MOV	R2, R4
		ADDS	R1, R5,	#(dfCRC	- dfData)
		LDR	R0, =SavedDF
		BL	MemCpy
		BL	SYS_UnlockReg
		BL	FMCEnableISP
		ADDS	R1, R5,	#(dfCRC	- dfData)
		MOV.W	R0, #0x1E000
		BL	WriteDataFlash
		BL	FMCDisableISP
		MOVS	R0, #0
		LSLS	R1, R4,	#22
		STR.W	R0, [R1,#0x100]

locret_1D98:				@ ...
		POP	{R4-R6,PC}
@ End of function UpdateDataFlash

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDFCheckValuesValidity:
		PUSH.W	{R4-R8,LR}
		LDR	R5, =dfData
		LDRB	R0, [R5,#(dfMode - dfData)]
		CMP	R0, #7
		BCC	loc_1DBC
		MOVS	R0, #4
		STRB	R0, [R5,#(dfMode - dfData)]

loc_1DBC:				@ ...
		LDR	R1, =MaxVWVolts
		LDRH	R0, [R5,#(dfVWVolts - dfData)]
		LDR	R1, [R1]
		CMP	R0, R1
		BHI	loc_1DCA
		CMP	R0, #50
		BCS	loc_1DD0

loc_1DCA:				@ ...
		MOV.W	R0, #330
		STRH	R0, [R5,#(dfVWVolts - dfData)]

loc_1DD0:				@ ...
		LDR	R6, =MaxPower
		LDRH	R1, [R5,#(dfPower - dfData)]
		LDR	R0, [R6]
		CMP	R1, R0
		BHI	loc_1DDE
		CMP	R1, #0xA
		BCS	loc_1DE0

loc_1DDE:				@ ...
		STRH	R0, [R5,#(dfPower - dfData)]

loc_1DE0:				@ ...
		LDR	R0, =MaxTCPower
		LDRH	R1, [R5,#(dfTCPower - dfData)]
		LDR	R0, [R0]
		CMP	R1, R0
		BHI	loc_1DEE
		CMP	R1, #10
		BCS	loc_1DF0

loc_1DEE:				@ ...
		STRH	R0, [R5,#(dfTCPower - dfData)]

loc_1DF0:				@ ...
		LDR	R1, =99999
		LDR.W	R0, [R5,#(dfPuffCount -	dfData)]
		MOVS	R4, #0
		CMP	R0, R1
		BHI	loc_1E06
		LDR	R1, =999999
		LDR.W	R0, [R5,#(dfTimeCount -	dfData)]
		CMP	R0, R1
		BLS	loc_1E12

loc_1E06:				@ ...
		STR.W	R4, [R5,#(dfPuffCount -	dfData)]
		STR.W	R4, [R5,#(dfTimeCount -	dfData)]
		BL	FMCWriteCounters

loc_1E12:				@ ...
		LDRB.W	R0, [R5,#(dfUIVersion -	dfData)]
		CMP	R0, #4
		BCC	loc_1E22
		MOVS	R0, #2
		STRB.W	R0, [R5,#(dfUIVersion -	dfData)]
		B	loc_1E36
@ ---------------------------------------------------------------------------

loc_1E22:				@ ...
		CBZ	R0, loc_1E2E
		CMP	R0, #1
		BEQ	loc_1E3C
		CMP	R0, #2
		BEQ	loc_1E36
		B	loc_1E3E
@ ---------------------------------------------------------------------------

loc_1E2E:				@ ...
		LDRB	R0, [R5,#(dfAPT	- dfData)]
		CMP	R0, #4
		BCS	loc_1E3C
		B	loc_1E3E
@ ---------------------------------------------------------------------------

loc_1E36:				@ ...
		LDRB	R0, [R5,#(dfAPT	- dfData)]
		CMP	R0, #3
		BCC	loc_1E3E

loc_1E3C:				@ ...
		STRB	R4, [R5,#(dfAPT	- dfData)]

loc_1E3E:				@ ...
		LDRB	R0, [R5,#(dfTempAlgo - dfData)]
		MOVS	R1, #1
		CMP	R0, #2
		BEQ	loc_1E54
		CMP	R0, #1
		BEQ	loc_1E54
		CMP	R0, #3
		BEQ	loc_1E54
		CMP	R0, #4
		BEQ	loc_1E54
		STRB	R1, [R5,#(dfTempAlgo - dfData)]

loc_1E54:				@ ...
		LDRB	R0, [R5,#(dfIsCelsius -	dfData)]
		CMP	R0, #1
		BLS	loc_1E5E
		STRB	R4, [R5,#(dfIsCelsius -	dfData)]
		B	loc_1E66
@ ---------------------------------------------------------------------------

loc_1E5E:				@ ...
		CBZ	R0, loc_1E66
		CMP	R0, #1
		BEQ	loc_1E76
		B	loc_1E82
@ ---------------------------------------------------------------------------

loc_1E66:				@ ...
		LDRH	R0, [R5,#(dfTemp - dfData)]
		SUBS	R0, #200
		CMP.W	R0, #400
		BLS	loc_1E82
		MOV.W	R0, #450
		B	loc_1E80
@ ---------------------------------------------------------------------------

loc_1E76:				@ ...
		LDRH	R0, [R5,#(dfTemp - dfData)]
		SUBS	R0, #100
		CMP	R0, #216
		BCC	loc_1E82
		MOVS	R0, #230

loc_1E80:				@ ...
		STRH	R0, [R5,#(dfTemp - dfData)]

loc_1E82:				@ ...
		LDRH	R0, [R5,#(dfRezTI - dfData)]
		CMP	R0, #150
		BLS	loc_1E8A
		STRH	R4, [R5,#(dfRezTI - dfData)]

loc_1E8A:				@ ...
		LDRH	R0, [R5,#(dfRezNI - dfData)]
		CMP	R0, #150
		BLS	loc_1E92
		STRH	R4, [R5,#(dfRezNI - dfData)]

loc_1E92:				@ ...
		LDRB.W	R0, [R5,#(dfRezLockedTI	- dfData)]
		CMP	R0, #1
		BLS	loc_1E9E
		STRB.W	R4, [R5,#(dfRezLockedTI	- dfData)]

loc_1E9E:				@ ...
		LDRB.W	R0, [R5,#(dfRezLockedNI	- dfData)]
		CMP	R0, #1
		BLS	loc_1EAA
		STRB.W	R4, [R5,#(dfRezLockedNI	- dfData)]

loc_1EAA:				@ ...
		LDRB.W	R0, [R5,#(dfStealthOn -	dfData)]
		CMP	R0, #1
		BLS	loc_1EB6
		STRB.W	R4, [R5,#(dfStealthOn -	dfData)]

loc_1EB6:				@ ...
		LDRB.W	R0, [R5,#(dfTiOn - dfData)]
		CMP	R0, #1
		BLS	loc_1EC2
		STRB.W	R1, [R5,#(dfTiOn - dfData)]

loc_1EC2:				@ ...
		LDRH.W	R0, [R5,#(dfRezSS - dfData)]
		CMP	R0, #150
		BLS	loc_1ECE
		STRH.W	R4, [R5,#(dfRezSS - dfData)]

loc_1ECE:				@ ...
		LDRB.W	R0, [R5,#(dfRezLockedSS	- dfData)]
		CMP	R0, #1
		BLS	loc_1EDA
		STRB.W	R4, [R5,#(dfRezLockedSS	- dfData)]

loc_1EDA:				@ ...
		LDRH.W	R0, [R5,#(dfRezTCR - dfData)]
		CMP	R0, #150
		BLS	loc_1EE6
		STRH.W	R4, [R5,#(dfRezTCR - dfData)]

loc_1EE6:				@ ...
		LDRB.W	R0, [R5,#(dfRezLockedTCR - dfData)]
		CMP	R0, #1
		BLS	loc_1EF2
		STRB.W	R4, [R5,#(dfRezLockedTCR - dfData)]

loc_1EF2:				@ ...
		MOVS	R0, #0

loc_1EF4:				@ ...
		ADD.W	R1, R5,	R0,LSL#1
		LDRH	R1, [R1,#(dfTempCoefsNI	- dfData)]
		SUBS	R1, #10
		CMP	R1, #191
		BCS	loc_1F08
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #21
		BCC	loc_1EF4

loc_1F08:				@ ...
		CMP	R0, #21
		BEQ	loc_1F10
		BL	CpyTmpCoefsNI

loc_1F10:				@ ...
		MOVS	R0, #0

loc_1F12:				@ ...
		ADD.W	R1, R5,	R0,LSL#1
		LDRH.W	R1, [R1,#(dfTempCoefsTI	- dfData)]
		SUBS	R1, #50
		CMP	R1, #51
		BCS	loc_1F28
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #11
		BCC	loc_1F12

loc_1F28:				@ ...
		CMP	R0, #11
		BEQ	loc_1F30
		BL	CpyTmpCoefsTI

loc_1F30:				@ ...
		MOVS	R0, #0
		MOVW	R2, #999
		MOVS	R3, #120

loc_1F38:				@ ...
		ADD.W	R1, R5,	R0,LSL#1
		LDRH.W	R7, [R1,#(dfTCRM1 - dfData)]
		SUBS	R7, R7,	#1
		CMP	R7, R2
		BCC	loc_1F4A
		STRH.W	R3, [R1,#(dfTCRM1 - dfData)]

loc_1F4A:				@ ...
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #3
		BCC	loc_1F38
		LDRB.W	R0, [R5,#(dfbyte_2000033D	- dfData)]
		CMP	R0, #2
		BCC	loc_1F5E
		STRB.W	R4, [R5,#(dfbyte_2000033D	- dfData)]

loc_1F5E:				@ ...
		LDRB.W	R0, [R5,#(dfFBSpeed - dfData)]
		CMP	R0, #2
		BLS	loc_1F6A
		STRB.W	R4, [R5,#(dfFBSpeed - dfData)]

loc_1F6A:				@ ...
		LDR	R4, [R6]
		MOVS	R0, #0
		MOV.W	R3, #350

loc_1F72:				@ ...
		ADD.W	R2, R5,	R0,LSL#1
		LDRH.W	R1, [R2,#(dfSavedCfgRez	- dfData)]
		CMP	R1, R3
		BHI	loc_1F92
		CMP	R1, #5
		BCS	loc_1F84
		CBNZ	R1, loc_1F92

loc_1F84:				@ ...
		LDRH.W	R1, [R2,#(dfSavedCfgPwr	- dfData)]
		CMP	R1, R4
		BHI	loc_1F92
		CMP	R1, #10
		BCS	loc_1FAA
		CBZ	R1, loc_1FAA

loc_1F92:				@ ...
		LDR	R0, =dfData
		MOVS	R1, #20
		ADDS	R0, #(dfSavedCfgRez - dfData)
		BL	MemClear
		POP.W	{R4-R8,LR}
		LDR	R0, =dfData
		MOVS	R1, #20
		ADDS	R0, #(dfSavedCfgPwr - dfData)
		B.W	MemClear
@ ---------------------------------------------------------------------------

loc_1FAA:				@ ...
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #10
		BCC	loc_1F72
		POP.W	{R4-R8,PC}
@ End of function DFCheckValuesValidity

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ Writes 256 bytes from	address	R1 to
@ first	free space in DF after addr R0

		.ifne	keeporgcode

orgWriteDataFlash:
		PUSH.W	{R4-R8,LR}
		MOV	R6, R1
		MOV	R5, R0
		MOVS	R4, #0
		MOV.W	R8, #0x1000

loc_1FDE:				@ ...
		ADDS	R0, R5,	R4
		MOV	R7, R0
		BL	FMCRead
		ADDS	R0, R0,	#1
		BNE	loc_1FF4
		ADDS	R0, R7,	#4
		BL	FMCRead
		ADDS	R0, R0,	#1
		BEQ	loc_1FFC

loc_1FF4:				@ ...
		ADD.W	R4, R4,	#0x100
		CMP	R4, R8
		BCC	loc_1FDE

loc_1FFC:				@ ...
		CMP.W	R4, #0x100
		BEQ	loc_200E
		CMP	R4, R8
		BCC	loc_2018
		MOV	R0, R5
		BL	FMCErase
		B	loc_201C
@ ---------------------------------------------------------------------------

loc_200E:				@ ...
		ADD.W	R0, R5,	#0x800
		BL	FMCErase
		B	loc_201A
@ ---------------------------------------------------------------------------

loc_2018:				@ ...
		CBZ	R4, loc_201C

loc_201A:				@ ...
		ADD	R5, R4

loc_201C:				@ ...
		MOVS	R4, #0

loc_201E:				@ ...
		LDMIA	R6!, {R1}
		ADDS	R0, R5,	R4
		BL	FMCWrite
		ADDS	R4, R4,	#4
		CMP	R4, #0xFF
		BLS	loc_201E
		POP.W	{R4-R8,PC}
@ End of function WriteDataFlash

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgUpdateFlash:				@ ...
		PUSH	{R4,LR}
		LDR	R4, =UpdateDFTimer
		LDRB	R0, [R4]
		CBZ	R0, loc_2046
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R4]
		BNE	loc_2046
		BL	UpdateDataFlash

loc_2046:				@ ...
		LDRB	R0, [R4,#1]
		CMP	R0, #0
		BEQ	locret_205E
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R4,#1]
		BNE	locret_205E
		POP.W	{R4,LR}
		B.W	FMCWriteCounters
@ ---------------------------------------------------------------------------

locret_205E:				@ ...
		POP	{R4,PC}
@ End of function UpdateFlash

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetProductID:
		ADR	R0, HWProductID
		LDRD.W	R1, R2,	[R0]
		LDR	R0, =dfPage2
		STRD.W	R1, R2,	[R0,#(dfProductID - dfPage2)]
		BX	LR
@ End of function GetProductID

@ ---------------------------------------------------------------------------
		.balign 4,0
HWProductID:	.ascii "E052"
		.byte 1, 1, 1, 0	@ Max supported	hardware version (1.11)
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgFMCReadCounters:			@ ...
		PUSH	{R4-R6,LR}
		MOVS	R4, #0
		MOV.W	R6, #0x800

loc_2088:				@ ...
		ADD.W	R0, R4,	#0x1F000
		BL	FMCRead
		ADDS	R1, R0,	#1
		BEQ	loc_209E
		ADDS	R4, R4,	#4
		UXTH	R4, R4
		MOV	R5, R0
		CMP	R4, R6
		BCC	loc_2088

loc_209E:				@ ...
		LDR	R0, =UpdateDFTimer
		LDR	R6, =dfData
		STRH	R4, [R0,#(fmcCntrsIndex	- UpdateDFTimer)]
		CBZ	R4, loc_20B8
		LDR	R0, =0x1F7FC
		STR.W	R5, [R6,#(dfPuffCount -	dfData)]
		ADD	R0, R4
		BL	FMCRead

loc_20B2:				@ ...
		STR.W	R0, [R6,#(dfTimeCount -	dfData)]
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_20B8:				@ ...
		MOVS	R0, #0
		STR.W	R0, [R6,#(dfPuffCount -	dfData)]
		B	loc_20B2
@ End of function FMCReadCounters

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgFMCWriteCounters:
	PUSH	{R4-R6,LR}
		BL	SYS_UnlockReg
		BL	FMCEnableISP
		LDR	R4, =UpdateDFTimer
		MOVS	R5, #0
		LDRH	R0, [R4,#(fmcCntrsIndex	- UpdateDFTimer)]
		CMP.W	R0, #0x800
		BCC	loc_20F4
		MOV.W	R0, #0x1F000
		BL	FMCErase
		MOV.W	R0, #0x1F800
		BL	FMCErase
		STRH	R5, [R4,#(fmcCntrsIndex	- UpdateDFTimer)]

loc_20F4:				@ ...
		LDR	R6, =dfData
		LDRH	R0, [R4,#(fmcCntrsIndex	- UpdateDFTimer)]
		ADD.W	R0, R0,	#0x1F000
		LDR.W	R1, [R6,#(dfPuffCount -	dfData)]
		BL	FMCWrite
		LDRH	R0, [R4,#(fmcCntrsIndex	- UpdateDFTimer)]
		LDR.W	R1, [R6,#(dfTimeCount -	dfData)]
		ADD.W	R0, R0,	#0x1F800
		BL	FMCWrite
		LDRH	R0, [R4,#(fmcCntrsIndex	- UpdateDFTimer)]
		ADDS	R0, R0,	#4
		STRH	R0, [R4,#(fmcCntrsIndex	- UpdateDFTimer)]
		BL	FMCDisableISP
		MOV.W	R0, #0x40000000
		STR.W	R5, [R0,#0x100]
		POP	{R4-R6,PC}
@ End of function FMCWriteCounters

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orgusbdEP3Handler:			@ ...
		LDR	R0, =0x400C0530
		PUSH	{R4,LR}
		LDR	R0, [R0]
		LDR	R4, =0x400C0530
		LDR	R1, =0x400C0100
		ADDS	R4, R4,	#4
		ADD	R0, R1
		LDR	R1, [R4]
		BL	hidGetOutReport
		MOVS	R0, #0x40
		STR	R0, [R4]
		POP	{R4,PC}
@ End of function usbdEP3Handler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

@ Macro
FMCDisableISP:				@ ...
		LDR	R0, =0x4000C000
		LDR	R1, [R0]
		BIC.W	R1, R1,	#1
		STR	R1, [R0]
		BX	LR
@ End of function FMCDisableISP

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_fmc

FMC_DisableLDUpdate:			@ ...
		LDR	R0, =0x4000C000
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x20
		STR	R1, [R0]
		BX	LR
@ End of function FMC_DisableLDUpdate

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_fmc

FMC_EnableConfigUpdate:			@ ...
		LDR	R0, =0x4000C000
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x10
		STR	R1, [R0]
		BX	LR
@ End of function FMC_EnableConfigUpdate

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_fmc

FMC_EnableLDUpdate:			@ ...
		LDR	R0, =0x4000C000
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x20
		STR	R1, [R0]
		BX	LR
@ End of function FMC_EnableLDUpdate

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_fmc
@inline
FMCErase:				@ ...
		LDR	R1, =0x4000C000
		MOVS	R2, #0x22	@ Flash	page erase
		STR	R2, [R1,#0xC]	@ FMC_ISPCMD
		STR	R0, [R1,#4]	@ FMC_ISPADDR
		MOVS	R0, #1
		STR	R0, [R1,#0x10]	@ FMC_ISPTRG.ISPGO = 1

loc_21A0:				@ ...
		LDR	R0, [R1,#0x10]
		CMP	R0, #0
		BNE	loc_21A0
		LDR	R0, [R1]
		LSLS	R0, R0,	#25	@ ISPFF	(fail flag)
		BPL	loc_21BA	@ if ok
		LDR	R0, [R1]
		ORR.W	R0, R0,	#0x40
		STR	R0, [R1]
		MOV.W	R0, #-1
		BX	LR
@ ---------------------------------------------------------------------------

loc_21BA:				@ ...
		MOVS	R0, #0
		BX	LR
@ End of function FMCErase

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

@macro

FMCEnableISP:				@ ...
		LDR	R0, =0x4000C000
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		BX	LR
@ End of function FMCEnableISP

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_fmc
@inline
FMCRead:				@ ...
		LDR	R1, =0x4000C000
		MOVS	R2, #0		@ FLASH	32-bit Read.
		STR	R2, [R1,#0xC]	@ FMC_ISPCMD
		STR	R0, [R1,#4]	@ FMC_ISPADDR
		STR	R2, [R1,#8]	@ FMC_ISPDAT = 0
		MOVS	R0, #1
		STR	R0, [R1,#0x10]	@ FMC_ISPTRG.ISPGO = 1

loc_21E2:				@ ...
		LDR	R0, [R1,#0x10]
		CMP	R0, #0
		BNE	loc_21E2
		LDR	R0, [R1,#8]	@ FMC_ISPDAT
		BX	LR
@ End of function FMCRead

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	0

FMCRead_2:			@ ...
		LDR	R1, =0x4000C000
		MOVS	R2, #0
		STR	R2, [R1,#0xC]
		STR	R0, [R1,#4]
		STR	R2, [R1,#8]
		MOVS	R0, #1
		STR	R0, [R1,#0x10]

loc_21FE:				@ ...
		LDR	R0, [R1,#0x10]
		CMP	R0, #0
		BNE	loc_21FE
		LDR	R0, [R1,#8]
		BX	LR
@ End of function FMCRead_2

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_fmc
		
FMC_ReadConfig:				@ ...
		PUSH.W	{R4-R8,LR}
		MOV	R5, R1
		MOV	R6, R0
		MOVS	R4, #0
		MOV.W	R7, #0x300000
		B	loc_222A
@ ---------------------------------------------------------------------------

loc_221C:				@ ...
		ADD.W	R0, R7,	R4,LSL#2
		BL	FMCRead
		STR.W	R0, [R6,R4,LSL#2]
		ADDS	R4, R4,	#1

loc_222A:				@ ...
		CMP	R4, R5
		BCC	loc_221C
		MOVS	R0, #0
		POP.W	{R4-R8,PC}
@ End of function FMC_ReadConfig

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ Writes Word R1 at addr R0

		.ifne	keeporglibs_fmc
@inline
FMCWrite:				@ ...
		LDR	R2, =0x4000C000
		MOVS	R3, #0x21	@ FLASH	32-bit Program
		STR	R3, [R2,#0xC]	@ FMC_ISPCMD
		STR	R0, [R2,#4]	@ FMC_ISPADDR
		STR	R1, [R2,#8]	@ FMC_ISPDAT
		MOVS	R0, #1
		STR	R0, [R2,#0x10]	@ FMC_ISPTRG.ISPGO = 1

loc_2242:				@ ...
		LDR	R0, [R2,#0x10]
		CMP	R0, #0
		BNE	loc_2242
		BX	LR
@ End of function FMCWrite

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_fmc
		
FMC_WriteConfig:				@ ...
		PUSH.W	{R4-R10,LR}
		MOV	R7, R1
		MOV	R6, R0
		MOVS	R4, #0
		LDR	R5, =0x4000C000
		MOV.W	R8, #0x300000
		MOV.W	R9, #0x21
		MOV.W	R10, #1
		B	loc_229A
@ ---------------------------------------------------------------------------

loc_226A:				@ ...
		LDR.W	R1, [R6,R4,LSL#2]
		ADD.W	R0, R8,	R4,LSL#2
		STR.W	R9, [R5,#0xC]
		STR	R0, [R5,#4]
		STR	R1, [R5,#8]
		STR.W	R10, [R5,#0x10]

loc_227E:				@ ...
		LDR	R1, [R5,#0x10]
		CMP	R1, #0
		BNE	loc_227E
		BL	FMCRead
		LDR.W	R1, [R6,R4,LSL#2]
		CMP	R0, R1
		BEQ	loc_2298
		MOV.W	R0, #-1

locret_2294:				@ ...
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_2298:				@ ...
		ADDS	R4, R4,	#1

loc_229A:				@ ...
		CMP	R4, R7
		BCC	loc_226A
		MOVS	R0, #0
		B	locret_2294
@ End of function FMC_WriteConfig

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
FarenheitToC:				@ ...
		SUBS	R0, #0x20
		ADD.W	R0, R0,	R0,LSL#2
		UXTH	R0, R0
		MOVS	R1, #9
		UDIV.W	R0, R0,	R1
		BX	LR
@ End of function FarenheitToC

		.endif

@ =============== S U B	R O U T	I N E =======================================


fbFillScreen:				@ ...
		LDR	R1, =ScreenBuffer
		MOVS	R2, #0

loc_22BC:				@ ...
		ADDS	R2, R2,	#1
		STRB	R0, [R1]
		STRB	R0, [R1,#1]
		STRB	R0, [R1,#2]
		STRB	R0, [R1,#3]
		STRB	R0, [R1,#4]
		STRB	R0, [R1,#5]
		STRB	R0, [R1,#6]
		STRB	R0, [R1,#7]
		STRB	R0, [R1,#8]
		STRB	R0, [R1,#9]
		STRB	R0, [R1,#10]
		STRB	R0, [R1,#11]
		STRB	R0, [R1,#12]
		STRB	R0, [R1,#13]
		STRB	R0, [R1,#14]
		STRB	R0, [R1,#15]
		UXTB	R2, R2
		ADDS	R1, #0x10
		CMP	R2, #0x40
		BCC	loc_22BC
		BX	LR
@ End of function fbFillScreen

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

GPD_IRQHandler:	
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0xE0]	@ PD_INTSRC
		LSLS	R2, R1,	#24
		MOV.W	R1, #1
		BPL	loc_231A
		MOVS	R2, #0x80
		STR.W	R2, [R0,#0xE0]
		LDR	R0, =Flags64
		LDR	R0, [R0]
		LSLS	R2, R0,	#21
		BPL	locret_2318
		LDR	R2, =Flags64
		SUBS	R2, #(Flags64 -	KeyUpTimer)
		LSLS	R0, R0,	#19
		STRB	R1, [R2,#(byte_20000048	- KeyUpTimer)]
		BPL	locret_2318
		MOVS	R0, #13
		STRB	R0, [R2,#(Event	- KeyUpTimer)]

locret_2318:				@ ...
		BX	LR
@ ---------------------------------------------------------------------------

loc_231A:				@ ...
		LDR.W	R2, [R0,#0xE0]
		LSLS	R2, R2,	#31
		BEQ	loc_2328
		STR.W	R1, [R0,#0xE0]
		BX	LR
@ ---------------------------------------------------------------------------

loc_2328:				@ ...
		LDR.W	R1, [R0,#0xE0]!
		STR	R1, [R0]
		BX	LR
@ End of function GPD_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================


GPE_IRQHandler:				@ ...
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0x120]
		STR.W	R1, [R0,#0x120]
		BX	LR
@ End of function GPE_IRQHandler


@ =============== S U B	R O U T	I N E =======================================


GPF_IRQHandler:				@ ...
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0x160]
		STR.W	R1, [R0,#0x160]
		BX	LR
@ End of function GPF_IRQHandler

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_gpio

@ void __cdecl GPIO_DisableInt(int *pinbase, int num)
GPIO_DisableInt:			@ ...
		LDR	R2, [R0,#0x18]	@ GPIO Px_INTTYPE
		MOVS	R3, #1
		LSLS	R3, R1
		BICS	R2, R3		@ Edge trigger
		STR	R2, [R0,#0x18]
		LDR	R2, [R0,#0x1C]	@ GPIO Px_INTEN
		MOV.W	R3, #0x10001
		LSLS	R3, R1
		BICS	R2, R3		@ disable rising & falling ints.
		STR	R2, [R0,#0x1C]
		BX	LR
@ End of function GPIO_DisableInt

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_gpio

GPIO_EnableInt:				@ ...
		PUSH	{R4,LR}
		LDR	R3, [R0,#0x18]
		LSRS	R4, R2,	#0x18
		LSLS	R4, R1
		ORRS	R3, R4
		STR	R3, [R0,#0x18]
		LDR	R3, [R0,#0x1C]
		BIC.W	R2, R2,	#0xFF000000
		LSLS	R2, R1
		ORRS	R3, R2
		STR	R3, [R0,#0x1C]
		POP	{R4,PC}
@ End of function GPIO_EnableInt

@ ---------------------------------------------------------------------------
		.balign 4,0
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgInitGPIO:				@ ...
		PUSH.W	{R4-R8,LR}
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x48]
		ORR.W	R1, R1,	#0x30
		STR	R1, [R0,#0x48]	@ PD1 =	Data transmitter output	pin for	UART0
		MOVS	R1, #1
		MOVS	R0, #0
		BL	BBC_Configure
		MOVS	R1, #1
		MOVS	R0, #2
		BL	BBC_Configure
		LDR.W	R8, =0x40004100
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R8
		BL	GPIO_SetMode	@ PE0 =	Input
		LDR	R6, =0x40004100
		MOVS	R2, #0
		SUBS	R6, #0x40
		MOVS	R1, #4
		MOV	R0, R6
		BL	GPIO_SetMode	@ PD2 =	Input
		MOVS	R2, #0
		MOVS	R1, #8
		MOV	R0, R6
		BL	GPIO_SetMode	@ PD3 =	Input
		LDR	R0, =0x40004884
		MOVS	R4, #0
		STR	R4, [R0]	@ PC1 =	low
		LDR	R7, =0x40004100
		MOVS	R2, #1
		SUBS	R7, #0x80
		MOVS	R1, #2
		MOV	R0, R7
		BL	GPIO_SetMode	@ PC1 =	Push-Pull Output
		LDR	R0, =0x40004884
		ADDS	R0, #8
		STR	R4, [R0]	@ PC3 =	low
		MOVS	R2, #1
		MOVS	R1, #8
		MOV	R0, R7
		BL	GPIO_SetMode	@ PC3 =	Push-Pull Output
		LDR	R0, =0x40004884
		SUBS	R0, #0x84
		STR	R4, [R0]	@ PA0 =	low
		MOVS	R2, #1
		MOV.W	R5, #0x40004000
		MOV	R1, R2
		MOV	R0, R5
		BL	GPIO_SetMode	@ PA0 =	Push-Pull Output
		LDR	R0, =0x40004884
		SUBS	R0, #0x80
		STR	R4, [R0]	@ PA1 =	low
		MOVS	R2, #1
		MOVS	R1, #2
		MOV	R0, R5
		BL	GPIO_SetMode	@ PA1 =	Push-Pull Output
		LDR	R0, =0x40004884
		ADDS	R0, #0xC
		STR	R4, [R0]	@ PC4 =	low
		MOVS	R2, #1
		MOVS	R1, #0x10
		MOV	R0, R7
		BL	GPIO_SetMode	@ PC4 =	Push-Pull Output
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R6
		BL	GPIO_SetMode	@ PD0 =	Input
		MOVS	R2, #1
		MOVS	R1, #0
		MOV	R0, R6
		BL	GPIO_EnableInt	@ PD0 Trigger =	Edge, INT = Falling edge
		MOVS	R2, #0
		MOVS	R1, #0x80
		MOV	R0, R6
		BL	GPIO_SetMode	@ PD7 =	Input
		LSLS	R2, R5,	#2	@ 0x00010000
		MOVS	R1, #7
		MOV	R0, R6
		BL	GPIO_EnableInt	@ PD7 Trigger =	Edge, INT = Rising edge
		LDR.W	R0, [R5,#0xD4]!
		ORR.W	R0, R0,	#0x80
		STR	R0, [R5]	@ PD7 Debounce enabled
		LDR	R0, =0x40004884
		ADDS	R0, #0xA4
		STR	R4, [R0]	@ PE10 = low
		ASRS	R1, R0,	#20
		MOVS	R2, #1
		MOV	R0, R8
		BL	GPIO_SetMode	@ PE10 = Push-Pull Output
		LDR	R0, =0x40004884
		ADDS	R0, #0xAC
		STR	R4, [R0]	@ PE12 = low
		ASRS	R1, R0,	#18
		MOVS	R2, #1
		MOV	R0, R8
		BL	GPIO_SetMode	@ PE12 = Push-Pull Output
		LDR	R1, =0x40004884
		MOVS	R0, #1
		SUBS	R1, #0x28
		STR	R0, [R1]	@ PB7 =	high
		MOV	R2, R0
		LDR	R0, =0x40004100
		MOVS	R1, #0x80
		SUBS	R0, #0xC0
		BL	GPIO_SetMode	@ PB7 =	Push-Pull Output
		MOVS	R0, #0x13
		BL	NVIC_EnableIRQ	@ GPD IRQ enable
		MOVS	R0, #0x14
		BL	NVIC_EnableIRQ	@ GPE IRQ enable
		MOVS	R0, #0x15
		BL	NVIC_EnableIRQ	@ GPF IRQ enable
		LDR	R1, =0x40004440
		MOVS	R0, #0x3A
		STR	R0, [R1]	@ ICLKON, DBCLKSRC = LIRC, DBCLKSEL = 4*256 CLK	(0.1s)
		POP.W	{R4-R8,PC}
@ End of function InitGPIO

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_gpio

GPIO_SetMode:				@ ...
		PUSH	{R4-R7,LR}
		MOVS	R3, #0
		MOVS	R7, #1
		MOVS	R5, #3

loc_24B8:				@ ...
		LSL.W	R4, R7,	R3
		TST	R4, R1
		BEQ	loc_24D4
		LDR	R6, [R0]
		LSLS	R4, R3,	#1
		LSL.W	R12, R5, R4
		BIC.W	R6, R6,	R12
		LSL.W	R4, R2,	R4
		ORRS	R6, R4
		STR	R6, [R0]

loc_24D4:				@ ...
		ADDS	R3, R3,	#1
		CMP	R3, #0x10
		BCC	loc_24B8
		POP	{R4-R7,PC}
@ End of function GPIO_SetMode

		.endif

@ =============== S U B	R O U T	I N E =======================================


fbNumDigits:				@ ...
		MOV	R1, R0
		MOVS	R0, #0
		MOVS	R2, #10
		B	loc_24EC
@ ---------------------------------------------------------------------------

loc_24E4:				@ ...
		UDIV.W	R1, R1,	R2
		ADDS	R0, R0,	#1
		UXTB	R0, R0

loc_24EC:				@ ...
		CMP	R1, #0
		BNE	loc_24E4
		CMP	R0, #0
		BNE	locret_24F6
		MOVS	R0, #1

locret_24F6:				@ ...
		BX	LR
@ End of function fbNumDigits


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgfbMoveBird:
		PUSH	{R4,LR}
		LDR	R4, =fbBirdLine
		LDRB	R0, [R4,#(fdDead - fbBirdLine)]
		CBZ	R0, loc_250C
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#(fdDead - fbBirdLine)]
		LDR	R0, =fbCurrentTimeout
		LDRB	R0, [R0]
		BL	fbDeleteTimeout

loc_250C:				@ ...
		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfFBSpeed - dfData)]
		CMP	R0, #2
		BEQ	loc_2534
		CMP	R0, #1
		LDRB	R0, [R4,#(fbBirdDisp - fbBirdLine)]
		BEQ	loc_253A
		ADDS	R0, R0,	#4

loc_251E:				@ ...
		STRB	R0, [R4,#(fbBirdDisp - fbBirdLine)]
		SXTB	R0, R0
		MOVS	R1, #12
		CMP	R0, #0
		BLE	loc_253E
		SDIV.W	R0, R0,	R1
		LDRB	R1, [R4]
		ADD	R0, R1
		ADDS	R0, R0,	#1
		B	loc_254A
@ ---------------------------------------------------------------------------

loc_2534:				@ ...
		LDRB	R0, [R4,#(fbBirdDisp - fbBirdLine)]
		ADDS	R0, R0,	#6
		B	loc_251E
@ ---------------------------------------------------------------------------

loc_253A:				@ ...
		ADDS	R0, R0,	#5
		B	loc_251E
@ ---------------------------------------------------------------------------

loc_253E:				@ ...
		NEGS	R0, R0
		SDIV.W	R0, R0,	R1
		LDRB	R1, [R4]
		SUBS	R0, R1,	R0
		SUBS	R0, R0,	#1

loc_254A:				@ ...
		STRB	R0, [R4]
		POP.W	{R4,LR}
		MOVS	R0, #8
		B.W	fbSetTimeoutValue
@ End of function fbMoveBird

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orgusbdRQClass:

var_10		= -0x10

		PUSH	{R2-R4,LR}
		MOV	R0, SP
		BL	USBD_GetSetupPacket
		LDRB.W	R0, [SP]
		LSLS	R0, R0,	#24
		BMI	loc_2582
		LDRB.W	R0, [SP,#1]
		MOVS	R1, #0
		CMP	R0, #9
		BEQ	loc_258A
		CMP	R0, #10
		BEQ	loc_25A2

loc_2582:				@ ...
		MOVS	R0, #0		@ ept
		BL	USBD_SetStall

locret_2588:				@ ...
		POP	{R2-R4,PC}
@ ---------------------------------------------------------------------------

loc_258A:				@ ...
		LDRB.W	R0, [SP,#3]
		CMP	R0, #3
		BNE	locret_2588
		LDR	R0, =0x400C0518
		LDR	R2, [R0]
		ORR.W	R2, R2,	#0x80
		STR	R2, [R0]
		SUBS	R0, R0,	#4

loc_259E:				@ ...
		STR	R1, [R0]
		POP	{R2-R4,PC}
@ ---------------------------------------------------------------------------

loc_25A2:				@ ...
		LDR	R0, =0x400C0518
		SUBS	R0, #0x10
		LDR	R2, [R0]
		ORR.W	R2, R2,	#0x80
		STR	R2, [R0]
		SUBS	R0, R0,	#4
		B	loc_259E
@ End of function hidClassRequest

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orghidGetInfoCmd:
		PUSH.W	{R4-R8,LR}
		LDR.W	R4, [R0,#2]
		LDR.W	R6, [R0,#6]
		MOV	R7, R0
		LDR	R5, =dfData
		MOV	R2, R6
		MOV	R1, R4
		ADR	R0, aGetInfoCommand
		BL	PutTextf
		CBZ	R6, loc_262A
		MOVW	R1, #0x7FC
		ADDS	R0, R5,	#(dfCRC	- dfData)
		BL	Checksum
		MOV	R1, R5
		LDR.W	R8, =hidDataIndex
		STR	R0, [R1]
		ADDS	R0, R4,	R6
		CMP.W	R0, #0x800
		BHI	loc_25F4
		ADDS	R1, R5,	R4
		MOV	R2, R6
		B	loc_25FC
@ ---------------------------------------------------------------------------

loc_25F4:				@ ...
		RSB.W	R2, R4,	#0x800
		MOV	R6, R2
		ADDS	R1, R5,	R4

loc_25FC:				@ ...
		LDR	R0, =hidData
		BL	MemCpy
		LDR	R0, =0x400C0520
		STR.W	R6, [R8]
		STR.W	R6, [R7,#0xA]
		LDR	R0, [R0]
		MOV	R4, R8
		LDR	R1, =0x400C0100
		MOVS	R2, #0x40
		ADD	R0, R1
		LDR	R1, =hidData
		BL	USBD_MemCopy
		LDR	R1, =0x400C0520
		MOVS	R0, #0x40
		ADDS	R1, R1,	#4
		STR	R0, [R1]	@ max payload =	0x40
		LDR	R0, [R4]
		SUBS	R0, #0x40
		STR	R0, [R4]

loc_262A:				@ ...
		MOVS	R0, #0
		POP.W	{R4-R8,PC}
@ End of function hidGetInfoCmd

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
aGetInfoCommand:.ascii "Get Info command - Start Addr: %d    Param Len: %d" @ ...
		.byte 0xA, 0
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================


orghidBootLogoCmd:
		PUSH	{R4,LR}
		MOV	R4, R0
		ADR	R0, aSetBootLogoC_0
		LDR.W	R1, [R4,#2]!
		LDR	R2, [R4,#4]
		BL	PutTextf
		MOV.W	R1, #0x800
		LDR	R0, =hidData
		BL	MemClear
		LDR	R1, =hidDataIndex
		MOVS	R0, #0
		STR	R0, [R1]
		STR	R0, [R4,#8]
		POP	{R4,PC}
@ End of function hidBootLogoCmd

@ ---------------------------------------------------------------------------
aSetBootLogoC_0:.ascii "Set Boot Logo command - Start page: %d" @ ...
		.ds.b 2, 9
		.ascii "Len: %d"
		.byte 0xA, 0
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================


orghidSetParamCmd:
		PUSH	{R4,LR}
		LDR.W	R1, [R0,#2]!
		LDR	R2, [R0,#4]
		ADR	R0, aSetParamComman
		BL	PutTextf
		LDR	R1, =hidDataIndex
		MOVS	R0, #0
		STR	R0, [R1]
		POP	{R4,PC}
@ End of function hidSetParamCmd

@ ---------------------------------------------------------------------------
		.balign 4,0
aSetParamComman:.ascii "Set Param command - Start Addr: %d    Param Len: %d" @ ...
		.byte 0xA, 0
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================


orghidUpdateLDROMCmd:
		PUSH	{R4,LR}
		MOV	R4, R0
		ADR	R0, aUpdateLdromC_0
		LDR.W	R1, [R4,#2]!
		LDR	R2, [R4,#4]
		BL	PutTextf
		MOV.W	R1, #0x800
		LDR	R0, =hidData
		BL	MemClear
		LDR	R1, =hidDataIndex
		MOVS	R0, #0
		STR	R0, [R1]
		STR	R0, [R4,#8]
		POP	{R4,PC}
@ End of function hidLDUpdateCmd

@ ---------------------------------------------------------------------------
aUpdateLdromC_0:.ascii "Update LDROM command - Start page: %d" @ ...
		.ds.b 2, 9
		.ascii "Len: %d"
		.byte 0xA, 0
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orghidGetOutReport:
		PUSH.W	{R4-R12,LR}
		LDR.W	R9, =hidDFData
		LDR.W	R8, =hidDataIndex
		ADD.W	R10, R9, #0x800
		MOV	R3, R0
		LDRB.W	R5, [R10]
		LDR.W	R2, [R8]
		LDR.W	R7, [R10,#(hidRQvalue1 - hidRequest)]
		LDR.W	R6, [R10,#(hidRQvalue2 - hidRequest)]
		LDR.W	R4, [R10,#(hidRQhidc - hidRequest)]
		SUB.W	R0, R9,	#0x800
		ADD	R0, R2
		MOV.W	R11, #0
		CMP	R5, #0x53	@ Set Sys Param
		BEQ	loc_27DC
		MOV.W	R9, #0x40000000
		CMP	R5, #0xA5	@ Set boot logo
		BEQ	loc_2884
		CMP	R5, #0x3C	@ Update LDROM
		BEQ	loc_28C0
		MOV	R0, R3
		BL	hidProcessCommand
		CMP	R0, #0
		BEQ	locret_2880
		POP.W	{R4-R12,LR}
		ADR	R0, aUnknownHidComm
		B.W	PutTextf
@ ---------------------------------------------------------------------------

loc_27DC:				@ ...
		MOVS	R2, #0x40
		MOV	R1, R3
		BL	USBD_MemCopy
		LDR.W	R0, [R8]
		ADDS	R0, #0x40
		STR.W	R0, [R8]
		CMP	R0, R6
		BCC	loc_287C
		MOVS	R5, #0
		ADDS	R0, R7,	R6
		CMP.W	R0, #0x800
		BHI	loc_2804
		ADD.W	R0, R9,	R7
		MOV	R2, R6
		B	loc_280C
@ ---------------------------------------------------------------------------

loc_2804:				@ ...
		RSB.W	R2, R7,	#0x800
		ADD.W	R0, R9,	R7

loc_280C:				@ ...
		LDR	R1, =hidData
		BL	MemCpy
		ADR	R0, aSetSysParamCom
		BL	PutTextf
		MOVW	R1, #0x7FC
		ADD.W	R0, R9,	#4
		BL	Checksum
		LDR	R4, =hidDFData
		LDR	R1, [R4]
		CMP	R0, R1
		BNE	loc_2872
		ADR	R0, aCompanyId_____
		LDR.W	R1, [R4,#(dffmcCID - dfData)]
		BL	PutTextf
		ADR	R0, aDeviceId______
		LDR.W	R1, [R4,#(dffmcDID - dfData)]
		BL	PutTextf
		ADR	R0, aProductId_____
		LDR.W	R1, [R4,#(dffmcPID - dfData)]
		BL	PutTextf
		LDRB	R1, [R4,#(dfBootFlag - dfData)]
		ADR	R0, aU8updateaprom_
		BL	PutTextf
		MOV.W	R2, #0x100
		ADDS	R1, R4,	#4
		LDR	R0, =dfCRC
		BL	MemCpy
		BL	DFCheckValuesValidity
		BL	UpdateDataFlash
		LDR	R0, =Flags64
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x20000
		STR	R1, [R0]
		B	loc_2878
@ ---------------------------------------------------------------------------

loc_2872:				@ ...
		ADR	R0, aSysParamRecive
		BL	PutTextf

loc_2878:				@ ...
		STR.W	R11, [R8]

loc_287C:				@ ...
		STRB.W	R5, [R10]

locret_2880:				@ ...
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_2884:				@ ...
		MOVS	R2, #0x40
		MOV	R1, R3
		BL	USBD_MemCopy
		LDR.W	R0, [R8]
		ADDS	R0, #0x40
		STR.W	R0, [R8]
		CMP.W	R0, #0x800
		BCS	loc_28A2
		ADD	R0, R4
		CMP	R0, R6
		BCC	loc_2908

loc_28A2:				@ ...
		ADD	R7, R4
		MOV	R1, R7
		ADR	R0, aWritingPageD
		BL	PutTextf
		BL	SYS_UnlockReg
		BL	FMCEnableISP
		MOV	R0, R7
		LDR	R1, =hidData
		BL	FMCEraseWrite800
		CBZ	R0, loc_28C8
		B	loc_28C2
@ ---------------------------------------------------------------------------

loc_28C0:				@ ...
		B	loc_2912
@ ---------------------------------------------------------------------------

loc_28C2:				@ ...
		ADR	R0, aDataFlashErase
		BL	PutTextf

loc_28C8:				@ ...
		MOV	R0, R7
		LDR	R1, =hidData
		BL	FMCVerif800
		CBZ	R0, loc_28DC
		LSLS	R1, R0,	#2
		ADR	R0, aDataFlashVerif
		SUBS	R1, R1,	#4
		BL	PutTextf

loc_28DC:				@ ...
		MOV.W	R1, #0x800
		LDR	R0, =hidData
		BL	MemClear
		LDR.W	R1, [R8]
		MOV	R7, R8
		ADD	R4, R1
		MOV	R2, R4
		ADR	R0, aG_u32bytesinpa
		BL	PutTextf
		BL	FMCDisableISP
		STR.W	R11, [R9,#0x100]
		CMP	R4, R6
		BCC	loc_299C
		MOVS	R5, #0
		ADR	R0, aSetBootLogoCom
		B	loc_2998
@ ---------------------------------------------------------------------------

loc_2908:				@ ...
		STRB.W	R5, [R10]
		STR.W	R4, [R10,#0xA]
		B	locret_2880
@ ---------------------------------------------------------------------------

loc_2912:				@ ...
		MOVS	R2, #0x40
		MOV	R1, R3
		BL	USBD_MemCopy
		LDR.W	R0, [R8]
		ADDS	R0, #0x40
		STR.W	R0, [R8]
		CMP.W	R0, #0x800
		BCS	loc_2930
		ADD	R0, R4
		CMP	R0, R6
		BCC	loc_2908

loc_2930:				@ ...
		ADD	R7, R4
		MOV	R1, R7
		ADR	R0, aWritingPage0x0
		BL	PutTextf
		BL	SYS_UnlockReg
		BL	FMCEnableISP
		BL	FMC_EnableLDUpdate
		MOV	R0, R7
		LDR	R1, =hidData
		BL	FMCEraseWrite800
		CBZ	R0, loc_2956
		ADR	R0, aDataFlashErase
		BL	PutTextf

loc_2956:				@ ...
		MOV	R0, R7
		LDR	R1, =hidData
		BL	FMCVerif800
		CBZ	R0, loc_296A
		LSLS	R1, R0,	#2
		ADR	R0, aDataFlashVerif
		SUBS	R1, R1,	#4
		BL	PutTextf

loc_296A:				@ ...
		MOV.W	R1, #0x800
		LDR	R0, =hidData
		BL	MemClear
		LDR.W	R1, [R8]
		MOV	R7, R8
		ADD	R4, R1
		MOV	R2, R4
		ADR	R0, aG_u32bytesinpa
		BL	PutTextf
		BL	FMC_DisableLDUpdate
		BL	FMCDisableISP
		STR.W	R11, [R9,#0x100]
		CMP	R4, R6
		BCC	loc_299C
		MOVS	R5, #0
		ADR	R0, aUpdateLdromCom

loc_2998:				@ ...
		BL	PutTextf

loc_299C:				@ ...
		STR.W	R11, [R7]
		B	loc_2908
@ End of function hidGetOutReport

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
aUnknownHidComm:.ascii "Unknown HID command!" @ ...
		.byte 0xA, 0
		.balign 4,0
		.pool
aSetSysParamCom:.ascii "Set Sys Param complete." @ ...
		.byte 0xA, 0
		.balign 4,0
aCompanyId_____:.byte 9			@ ...
		.ascii "Company ID ............................ [0x%08x]"
		.byte 0xA, 0
		.balign 4,0
aDeviceId______:.byte 9			@ ...
		.ascii "Device ID ............................. [0x%08x]"
		.byte 0xA, 0
		.balign 4,0
aProductId_____:.byte 9			@ ...
		.ascii "Product ID ............................ [0x%08x]"
		.byte 0xA, 0
		.balign 4,0
aU8updateaprom_:.byte 9			@ ...
		.ascii "u8UpdateAPRom ......................... [0x%08x]"
		.byte 0xA, 0
		.balign 4,0
		.pool
		.balign 4,0
aSysParamRecive:.ascii "Sys Param Recive fail." @ ...
		.byte 0xA, 0
		.balign 4,0
aWritingPageD:	.ascii "Writing page %d" @ ...
		.byte 0xA, 0
		.balign 4,0
aDataFlashErase:.ascii "Data Flash Erase error!" @ ...
		.byte 0xA, 0
		.balign 4,0
aDataFlashVerif:.ascii "Data Flash Verify error! 0x%x" @ ...
		.byte 0xA, 0
		.balign 4,0
aG_u32bytesinpa:.ascii "g_u32BytesInPageBuf %d, u32LenCnt 0x%x" @ ...
		.byte 0xA, 0
		.balign 4,0
aSetBootLogoCom:.ascii "set boot logo command complete." @ ...
		.byte 0xA, 0
		.balign 4,0
aWritingPage0x0:.ascii "Writing page 0x%08X" @ ...
		.byte 0xA, 0
		.balign 4,0
aUpdateLdromCom:.ascii "Update LDROM command complete." @ ...
		.byte 0xA, 0
		.balign 4,0
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orgusbdInitEndpoints:
		LDR	R1, =0x400C0000
		MOVS	R0, #0
		STR	R0, [R1,#0x18]
		LDR	R1, =0x400C0508
		MOV.W	R0, #0x240
		STR	R0, [R1]
		LDR	R1, =0x400C0508
		MOVS	R0, #8
		SUBS	R1, #8
		STR	R0, [R1]
		LDR	R2, =0x400C0508
		MOV.W	R1, #0x220
		ADDS	R2, #0x10
		STR	R1, [R2]
		LDR	R1, =0x400C0508
		ADDS	R1, #8
		STR	R0, [R1]
		LDR	R1, =0x400C0508
		MOVS	R0, #0x41
		ADDS	R1, #0x20
		STR	R0, [R1]
		LDR	R1, =0x400C0508
		MOVS	R0, #0x10
		ADDS	R1, #0x18
		STR	R0, [R1]
		LDR	R1, =0x400C0508
		MOVS	R0, #0x22
		ADDS	R1, #0x30
		STR	R0, [R1]
		LDR	R1, =0x400C0508
		MOVS	R0, #0x50
		ADDS	R1, #0x28
		STR	R0, [R1]
		MOVS	R0, #0x40
		ADDS	R1, R1,	#4
		STR	R0, [R1]
		BX	LR
@ End of function hidInit

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orghidResetParamCmd:
		PUSH	{R4,LR}
		MOV	R4, R0
		ADR	R0, aResetParam
		BL	PutTextf
		BL	ResetDataFlash
		BL	UpdateDataFlash
		LDR	R1, =Flags64
		LDR	R0, [R1]
		ORR.W	R2, R0,	#0x20000
		MOVS	R0, #0
		STR	R2, [R1]
		STRB	R0, [R4]
		POP	{R4,PC}
@ End of function hidResetParamCmd

@ ---------------------------------------------------------------------------
		.balign 4,0
aResetParam:	.ascii "Reset param"    @ ...
		.byte 0xA, 0
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orghidResetSysCmd:

@ FUNCTION CHUNK AT 00000CD4 SIZE 0000000A BYTES

		PUSH	{R4,LR}
		ADR	R0, aResetSystemCom
		BL	PutTextf
		BL	loc_CD4
@ End of function hidResetSysCmd


@ =============== S U B	R O U T	I N E =======================================

sub_2C44:
		MOVS	R0, #0
		POP	{R4,PC}
@ End of function sub_2C44

@ ---------------------------------------------------------------------------
aResetSystemCom:.ascii "Reset system command" @ ...
		.byte 0xA, 0
		.balign 4,0

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orgusbdEP2Handler:
		PUSH	{R4-R6,LR}
		LDR	R5, =hidRequest
		LDRB	R4, [R5]
		CMP	R4, #0x35
		BNE	locret_2C9A
		LDR	R6, =hidDataIndex
		LDR.W	R2, [R5,#0xA]
		LDR	R1, [R6]
		CBZ	R1, loc_2C9C
		LDR	R0, =0x400C0520
		LDR	R0, [R0]
		SUBS	R1, R2,	R1
		LDR	R3, =0x400C0100
		SUB.W	R2, R5,	#0x1000
		ADD	R1, R2
		ADD	R0, R3
		MOVS	R2, #0x40
		BL	USBD_MemCopy
		LDR	R1, =0x400C0520
		MOVS	R0, #0x40
		ADDS	R1, R1,	#4
		STR	R0, [R1]
		LDR	R0, [R6]
		SUBS	R0, #0x40
		STR	R0, [R6]

loc_2C98:				@ ...
		STRB	R4, [R5]

locret_2C9A:				@ ...
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_2C9C:				@ ...
		MOVS	R4, #0
		B	loc_2C98
@ End of function usbdEP2Handler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR HardFault_Handler

		.ifne	keeporgcode

loc_2CB0:				@ ...
		MOV	R4, R0
		ADR	R0, aInHardFaultHan
		BL	PutTextf
		MOV	R0, R4
		BL	DumpRegisters

loc_2CBE:				@ ...
		B	loc_2CBE
@ END OF FUNCTION CHUNK	FOR HardFault_Handler
@ ---------------------------------------------------------------------------
aInHardFaultHan:.ascii "In Hard Fault Handler" @ ...
		.byte 0xA, 0
		.balign 4,0

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgRegulateBuckBoost:
		PUSH.W	{R4-R12,LR}
		LDR	R4, =Flags64
		LDRH	R0, [R4]
		LSLS	R0, R0,	#23
		BPL	loc_2CEC
		BL	CheckBattery
		CMP	R0, #0
		BNE	locret_2DC8

loc_2CEC:				@ ...
		LDR	R0, [R4]
		MOV	R8, R4
		LSLS	R1, R0,	#0x12
		BMI	loc_2CF8
		LSLS	R0, R0,	#0x17
		BPL	locret_2DC8

loc_2CF8:				@ ...
		MOVS	R0, #1
		BL	ADC_Read
		LDR	R6, =BBCNextMode
		MOVW	R1, #0x455
		LDR.W	R11, =0x40004888
		STR	R0, [R6,#(AtoVoltsADC -	BBCNextMode)]
		MULS	R0, R1
		LSRS	R0, R0,	#0xC
		STR	R0, [R6,#(AtoVolts - BBCNextMode)]
		LDR	R1, =0x40004888
		LDRB	R0, [R6]
		MOVS	R5, #1
		ADD.W	R9, R1,	#4
		SUB.W	R11, R11, #8
		SUB.W	R10, R1, #4
		CMP	R0, #1
		BEQ	loc_2D7C
		LDR	R4, =BuckDuty
		LDR	R7, =0x40058000
		CMP	R0, #2
		BEQ	loc_2DD6
		CMP	R0, #3
		BNE	locret_2DC8
		MOV	R8, R6
		LDRB	R1, [R6,#(BBCMode - BBCNextMode)]
		LDR	R6, =BoostDuty
		CMP	R1, #3
		BEQ	loc_2D66
		STRB.W	R0, [R8,#(BBCMode - BBCNextMode)]
		STR.W	R5, [R11]
		MOVS	R1, #0
		MOV	R0, R1
		BL	BBC_Configure
		STR.W	R5, [R10]
		MOVS	R1, #1
		MOVS	R0, #2
		BL	BBC_Configure
		MOVW	R0, #0x1DF
		STRH	R0, [R6]
		LDRH	R0, [R4]
		STR	R0, [R7,#0x50]
		STR.W	R5, [R9]

loc_2D66:				@ ...
		LDR.W	R2, [R8,#(TargetVolts -	BBCNextMode)]
		LDR.W	R1, [R8,#(AtoVolts - BBCNextMode)]
		CMP	R1, R2
		BCS	loc_2E70
		LDRH	R0, [R6]
		CMP	R0, #0x50
		BLS	loc_2E76
		SUBS	R0, R0,	#1
		B	loc_2E84
@ ---------------------------------------------------------------------------

loc_2D7C:				@ ...
		LDRB	R0, [R6,#(BBCMode - BBCNextMode)]
		CMP	R0, #1
		BEQ	loc_2DA0
		STR	R5, [R1]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	BBC_Configure
		STR.W	R5, [R9]
		STR.W	R5, [R11]
		MOVS	R1, #0
		MOV	R0, R1
		BL	BBC_Configure
		STR.W	R5, [R10]

loc_2DA0:				@ ...
		LDR	R1, [R6,#(TargetVolts -	BBCNextMode)]
		LDR	R0, [R6,#(AtoVolts - BBCNextMode)]
		CMP	R0, R1
		BEQ	loc_2DCC
		LDRB	R0, [R6,#(BBCNumCmps - BBCNextMode)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R6,#(BBCNumCmps - BBCNextMode)]
		CMP	R0, #5
		BCC	locret_2DC8
		LDR	R0, =dfData
		LDRB	R0, [R0,#(dfMode - dfData)]
		CMP	R0, #5
		BEQ	loc_2DC6
		LDRB	R0, [R6,#(BBCMode - BBCNextMode)]
		CMP	R0, #2
		BEQ	loc_2DD2
		MOVS	R0, #2

loc_2DC4:				@ ...
		STRB	R0, [R6]

loc_2DC6:				@ ...
		STRB	R5, [R6,#(BBCMode - BBCNextMode)]

locret_2DC8:				@ ...
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_2DCC:				@ ...
		MOVS	R0, #0
		STRB	R0, [R6,#(BBCNumCmps - BBCNextMode)]
		B	locret_2DC8
@ ---------------------------------------------------------------------------

loc_2DD2:				@ ...
		MOVS	R0, #3
		B	loc_2DC4
@ ---------------------------------------------------------------------------

loc_2DD6:				@ ...
		LDRB	R0, [R6,#(BBCMode - BBCNextMode)]
		CMP	R0, #2
		BEQ	loc_2E08
		STR	R5, [R1]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	BBC_Configure
		STR.W	R5, [R9]
		MOVS	R1, #1
		MOVS	R0, #0
		BL	BBC_Configure
		LDRB	R0, [R6,#(BBCMode - BBCNextMode)]
		CBZ	R0, loc_2E1C
		MOVW	R0, #0x1DF

loc_2DFA:				@ ...
		STRH	R0, [R4]
		UXTH	R0, R0
		STR	R0, [R7,#0x50]
		STR.W	R5, [R10]
		LDRB	R0, [R6]
		STRB	R0, [R6,#(BBCMode - BBCNextMode)]

loc_2E08:				@ ...
		LDR	R1, [R6,#(TargetVolts -	BBCNextMode)]
		LDR	R0, [R6,#(AtoVolts - BBCNextMode)]
		CMP	R0, R1
		BCS	loc_2E38
		LDRH	R0, [R4]
		CMP.W	R0, #478
		BHI	loc_2E20
		ADDS	R0, R0,	#1
		B	loc_2E46
@ ---------------------------------------------------------------------------

loc_2E1C:				@ ...
		MOVS	R0, #10
		B	loc_2DFA
@ ---------------------------------------------------------------------------

loc_2E20:				@ ...
		ADD.W	R0, R1,	R1,LSL#1
		LSLS	R1, R0,	#2
		LDR	R0, =BatteryVoltage
		LDRH	R0, [R0]
		ADD.W	R0, R0,	R0,LSL#2
		CMP.W	R1, R0,LSL#1
		BLS	loc_2E48
		STRB	R5, [R6]
		B	loc_2E48
@ ---------------------------------------------------------------------------

loc_2E38:				@ ...
		BLS	loc_2E48
		LDRH	R0, [R4]
		CMP	R0, #10
		BLS	loc_2E44
		SUBS	R0, R0,	#1
		B	loc_2E46
@ ---------------------------------------------------------------------------

loc_2E44:				@ ...
		MOVS	R0, #0

loc_2E46:				@ ...
		STRH	R0, [R4]

loc_2E48:				@ ...
		LDR	R0, =AtoStatus
		LDRB	R0, [R0]
		CBZ	R0, loc_2E62
		CMP	R0, #1
		BEQ	loc_2E62
		LDRH.W	R0, [R8]
		LSLS	R0, R0,	#23
		BMI	loc_2E6C
		LDR	R0, =AtoProbeCount
		LDRB	R0, [R0]
		CMP	R0, #0xC
		BCC	loc_2E6C

loc_2E62:				@ ...
		LDRH	R0, [R4]
		CMP	R0, #45
		BCC	loc_2E6C
		MOVS	R0, #45
		STRH	R0, [R4]

loc_2E6C:				@ ...
		LDRH	R0, [R4]
		B	loc_2E72
@ ---------------------------------------------------------------------------

loc_2E70:				@ ...
		B	loc_2E76
@ ---------------------------------------------------------------------------

loc_2E72:				@ ...
		STR	R0, [R7,#0x50]
		B	locret_2DC8
@ ---------------------------------------------------------------------------

loc_2E76:				@ ...
		CMP	R1, R2
		BLS	loc_2E8C
		LDRH	R0, [R6]
		CMP.W	R0, #478
		BHI	loc_2E88
		ADDS	R0, R0,	#1

loc_2E84:				@ ...
		STRH	R0, [R6]
		B	loc_2E8C
@ ---------------------------------------------------------------------------

loc_2E88:				@ ...
		STRB.W	R5, [R8]

loc_2E8C:				@ ...
		LDRH	R0, [R6]
		STR	R0, [R7,#0x58]
		B	locret_2DC8
@ End of function RegulateBuckBoost

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgReachTargetVoltage:
		PUSH.W	{R4-R10,LR}
		LDR	R5, =BBCNextMode
		MOVS	R0, #2
		LDR	R6, =AtoStatus
		STRB	R0, [R5]
		MOVS	R0, #0
		STRB	R0, [R5,#(BBCMode - BBCNextMode)]
		LDR	R4, =Flags64
		LDR	R7, =AtoProbeCount
		LDR.W	R8, =BuckDuty
		LDR.W	R9, =dfData
		MOV.W	R10, #2000
		STR	R0, [R5,#(TMR0Counter2 - BBCNextMode)]

loc_2EDE:				@ ...
		LDR	R0, [R4]
		LSLS	R1, R0,	#18
		BMI	loc_2EE8
		LSLS	R0, R0,	#23
		BPL	locret_2F28

loc_2EE8:				@ ...
		BL	RegulateBuckBoost
		BL	GetAtoCurrent
		LDR	R1, [R5,#(TargetVolts -	BBCNextMode)]
		LDR	R0, [R5,#(AtoVolts - BBCNextMode)]
		CMP	R0, R1
		BEQ	locret_2F28
		LDRB	R0, [R6]
		CBZ	R0, loc_2F0C
		CMP	R0, #1
		BEQ	loc_2F0C
		LDRH	R0, [R4]
		LSLS	R0, R0,	#23
		BMI	loc_2F14
		LDRB	R0, [R7]
		CMP	R0, #0xC
		BCC	loc_2F14

loc_2F0C:				@ ...
		LDRH.W	R0, [R8]
		CMP	R0, #45
		BCS	locret_2F28

loc_2F14:				@ ...
		LDRB.W	R0, [R9,#(dfMode - dfData)]
		CMP	R0, #5
		BNE	loc_2F22
		LDRB	R0, [R5,#(BBCMode - BBCNextMode)]
		CMP	R0, #1
		BEQ	locret_2F28

loc_2F22:				@ ...
		LDR	R0, [R5,#(TMR0Counter2 - BBCNextMode)]
		CMP	R0, R10
		BCC	loc_2EDE

locret_2F28:				@ ...
		POP.W	{R4-R10,PC}
@ End of function ReachTargetVoltage

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetAtoTemp:
		PUSH	{R4-R6,LR}
		LDR	R3, =byte_20000098
		LDR	R0, [R3,#(AtoRezMilli -	byte_20000098)]
		CMP	R0, #0
		BEQ	locret_2FD8
		MOVW	R1, #3000
		CMP	R0, R1
		BHI	locret_2FD8
		LDR	R1, =dfData
		LDRH	R2, [R1,#(dfResistance - dfData)]
		CMP	R2, #150
		BHI	locret_2FD8
		ADD.W	R4, R2,	R2,LSL#3
		ADD.W	R4, R4,	R2,LSL#4
		CMP.W	R0, R4,LSL#1
		BHI	locret_2FD8
		MOVS	R4, #10
		UDIV.W	R4, R0,	R4
		CMP	R4, R2
		BHI	loc_2F7A
		MOVS	R0, #70
		B	loc_2FD6
@ ---------------------------------------------------------------------------

loc_2F7A:				@ ...
		LDR	R4, =dfData
		LDR	R6, =byte_20000098
		LDRB	R1, [R1,#(dfTempAlgo - dfData)]
		LDRH	R4, [R4,#(dfResistance - dfData)]
		LDR	R5, [R6,#(AtoRezMilli -	byte_20000098)]
		NEGS	R4, R4
		ADD.W	R4, R4,	R4,LSL#2
		ADD.W	R5, R5,	R4,LSL#1
		LDRH	R4, [R6,#(TCR -	byte_20000098)]
		CMP	R1, #1
		BEQ	loc_2FCC
		CMP	R1, #2
		BEQ	loc_2FDA
		LDR	R0, =dfData
		MOV	R4, R6
		LDRH	R0, [R0,#(dfResistance - dfData)]
		LDR	R5, [R4,#(AtoRezMilli -	byte_20000098)]
		NEGS	R2, R0
		ADD.W	R2, R2,	R2,LSL#2
		ADD.W	R2, R5,	R2,LSL#1
		LDRH	R4, [R4,#(TCR -	byte_20000098)]
		MOVW	R5, #10000
		MULS	R2, R5
		MULS	R0, R4
		CMP	R1, #3
		BEQ	loc_2FBC
		CMP	R1, #4
		BNE	locret_2FD8

loc_2FBC:				@ ...
		UDIV.W	R0, R2,	R0
		ADDS	R0, #20
		UXTH	R0, R0
		STRH	R0, [R3,#(AtoTemp - byte_20000098)]
		BL	CelsiusToF
		B	loc_2FD6
@ ---------------------------------------------------------------------------

loc_2FCC:				@ ...
		MOVS	R0, #100
		MULS	R5, R0
		UDIV.W	R0, R5,	R4
		ADDS	R0, #140

loc_2FD6:				@ ...
		STRH	R0, [R3,#(AtoTemp - byte_20000098)]

locret_2FD8:				@ ...
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_2FDA:				@ ...
		MULS	R0, R4
		UDIV.W	R0, R0,	R2
		SUB.W	R0, R0,	#460
		B	loc_2FD6
@ End of function GetAtoTemp

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetTempCoef:
		PUSH	{R4-R7,LR}
		LDR	R1, =dfData
		LDR	R7, =byte_20000098
		LDRH	R1, [R1,#(dfResistance - dfData)]
		CMP	R1, #100
		BLS	loc_3002
		LDRH	R0, [R0,#40]
		STRH	R0, [R7,#(TCR -	byte_20000098)]

locret_3000:				@ ...
		POP	{R4-R7,PC}
@ ---------------------------------------------------------------------------

loc_3002:				@ ...
		MOVS	R6, #5
		UDIV.W	R2, R1,	R6
		UDIV.W	R4, R1,	R6
		UXTB	R2, R2
		MLS.W	R4, R6,	R4, R1
		LDRH.W	R3, [R0,R2,LSL#1]
		STRH	R3, [R7,#(TCR -	byte_20000098)]
		CBNZ	R4, loc_301E
		CMP	R2, #20
		BCS	locret_3000

loc_301E:				@ ...
		ADD.W	R5, R0,	R2,LSL#1
		LDRH.W	R0, [R0,R2,LSL#1]
		LDRH	R4, [R5,#2]
		CMP	R4, R0
		BLS	loc_304E
		SUBS	R0, R4,	R0
		UDIV.W	R2, R1,	R6
		SDIV.W	R0, R0,	R6
		MLS.W	R1, R6,	R2, R1
		UXTH	R0, R0
		MLA.W	R0, R0,	R1, R3
		UXTH	R0, R0
		STRH	R0, [R7,#(TCR -	byte_20000098)]
		LDRH	R1, [R5,#2]
		CMP	R1, R0
		BHI	locret_3000

loc_304A:				@ ...
		STRH	R1, [R7,#(TCR -	byte_20000098)]
		POP	{R4-R7,PC}
@ ---------------------------------------------------------------------------

loc_304E:				@ ...
		SUBS	R0, R0,	R4
		UDIV.W	R2, R1,	R6
		SDIV.W	R0, R0,	R6
		MLS.W	R1, R6,	R2, R1
		UXTH	R0, R0
		MLS.W	R0, R0,	R1, R3
		UXTH	R0, R0
		STRH	R0, [R7,#(TCR -	byte_20000098)]
		LDRH	R1, [R5,#2]
		CMP	R1, R0
		BCS	loc_304A
		POP	{R4-R7,PC}
@ End of function GetTempCoef

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgCheckMode:
		PUSH.W	{R4-R10,LR}
		LDR	R0, =byte_20000098
		LDR	R3, =AtoRez
		LDR	R1, [R0,#20]
		MOVS	R0, #10
		UDIV.W	R4, R1,	R0
		LDRH	R2, [R3]
		CMP	R4, R2
		BLS	loc_3098
		UDIV.W	R0, R1,	R0
		SUBS	R0, R0,	R2
		UXTB	R0, R0
		B	loc_309A
@ ---------------------------------------------------------------------------

loc_3098:				@ ...
		MOVS	R0, #0

loc_309A:				@ ...
		ADD.W	R1, R1,	R1,LSL#2
		LSLS	R1, R1,	#1
		UDIV.W	R1, R1,	R2
		MOVS	R6, #0
		LDR.W	R9, =UpdateDFTimer
		LDR	R5, =CheckModeCounter
		LDR	R7, =Flags64
		LDR	R4, =dfData
		MOV	R10, R3
		MOV.W	R8, #50
		CMP	R2, #150
		BHI	loc_30F2
		CMP	R1, #115
		BHI	loc_30D0
		LDRB	R2, [R4,#(dfMode - dfData)]
		CMP	R2, #2
		BEQ	loc_30C8
		CMP	R2, #3
		BNE	loc_30F2

loc_30C8:				@ ...
		CMP	R1, #105
		BLS	loc_30F2
		CMP	R0, #1
		BLS	loc_30F2

loc_30D0:				@ ...
		LDRB	R0, [R5]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R5]
		CMP	R0, #3
		BLS	locret_315E
		LDRB	R0, [R4,#(dfRezType	- dfData)]
		CMP	R0, #2
		BEQ	loc_30E8
		MOVS	R0, #2
		STRB	R0, [R4,#(dfRezType	- dfData)]
		B	loc_3156
@ ---------------------------------------------------------------------------

loc_30E8:				@ ...
		LDR	R0, [R7]
		BIC.W	R0, R0,	#0x800000
		STR	R0, [R7]
		B	loc_315C
@ ---------------------------------------------------------------------------

loc_30F2:				@ ...
		LDR	R0, =FireDuration
		LDRH	R0, [R0]
		CMP	R0, #0x14
		BCC	loc_315C
		MOVS	R0, #1
		STRB	R0, [R4,#(dfRezType	- dfData)]
		MOVS	R0, #4
		STRB	R0, [R4,#(dfMode - dfData)]
		LDRH	R0, [R4,#(dfPower - dfData)]
		CMP	R0, #200
		BLS	loc_3112
		MOVS	R0, #200
		STRH	R0, [R4,#(dfPower - dfData)]
		BL	GetAtoVWVolts
		STRH	R0, [R4,#(dfVWVolts - dfData)]

loc_3112:				@ ...
		LDR	R0, [R7]
		LSLS	R1, R0,	#4
		BMI	loc_311E
		LDR	R1, =word_200000B8
		LDRH	R1, [R1]
		STRH	R1, [R4,#(dfRezTI - dfData)]

loc_311E:				@ ...
		LSLS	R1, R0,	#3
		BMI	loc_3128
		LDR	R1, =word_200000BA
		LDRH	R1, [R1]
		STRH	R1, [R4,#(dfRezNI - dfData)]

loc_3128:				@ ...
		CMP	R0, #0
		BLT	loc_3134
		LDR	R0, =word_200000BC
		LDRH	R0, [R0]
		STRH.W	R0, [R4,#(dfRezSS - dfData)]

loc_3134:				@ ...
		LDR	R0, =Flags68
		LDRB	R0, [R0]
		LSLS	R0, R0,	#30
		BMI	loc_3144
		LDR	R0, =word_200000BE
		LDRH	R0, [R0]
		STRH.W	R0, [R4,#(dfRezTCR - dfData)]

loc_3144:				@ ...
		LDRH.W	R0, [R10]
		CMP	R0, #10
		BCS	loc_3156
		BL	StopFire
		LDR	R1, =Event
		MOVS	R0, #27
		STRB	R0, [R1]

loc_3156:				@ ...
		STRB.W	R8, [R9]
		B	loc_30E8
@ ---------------------------------------------------------------------------

loc_315C:				@ ...
		STRB	R6, [R5]

locret_315E:				@ ...
		POP.W	{R4-R10,PC}
@ End of function CheckMode

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgTweakTargetVoltsVW:
		LDR	R0, =dfData
		PUSH	{R4,LR}
		LDRB	R1, [R0,#(dfMode - dfData)]
		CMP	R1, #6
		BEQ	loc_31BE
		LDRH	R0, [R0,#(dfPower - dfData)]

loc_31A4:				@ ...
		BL	AtoPowerLimit
		LDR	R1, =PowerScale
		LDR	R1, [R1]
		MULS	R0, R1
		MOVS	R1, #100
		UDIV.W	R0, R0,	R1
		BL	GetVoltsForPower
		LDR	R1, =TargetVolts
		STR	R0, [R1]
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_31BE:				@ ...
		LDR	R1, =ConfigIndex
		LDRB	R1, [R1]
		ADD.W	R0, R0,	R1,LSL#1
		LDRH.W	R0, [R0,#(dfSavedCfgPwr	- dfData)]
		B	loc_31A4
@ End of function TweakTargetVoltsVW

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgAtoPower:
		LDR	R1, =byte_20000098
		MULS	R0, R0
		LDR	R1, [R1,#(AtoRezMilli -	byte_20000098)]
		UDIV.W	R0, R0,	R1
		CBNZ	R0, loc_31EA
		MOVS	R0, #1

loc_31EA:				@ ...
		UXTH	R0, R0
		BX	LR
@ End of function AtoPower

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetVoltsForPower:
		FMSR	S0, R0
		LDR	R0, =byte_20000098
		PUSH	{R4,LR}
		FUITOS	S1, S0
		FLDS	S0, [R0,#(AtoRezMilli -	byte_20000098)]
		FUITOS	S0, S0
		FMULS	S0, S1,	S0
		FMRS	R0, S0
		BL	float2double
		FMDRR	D0, R0,	R1
		BL	sqrtd
		FMRRD	R0, R1,	D0
		BL	double2float
		FMSR	S0, R0
		CDP	p10, 0xF, c0,c6,c0, 0
		LDR	R1, =MaxVWVolts
		FADDS	S0, S0,	S1
		LDR	R1, [R1]
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		CMP	R0, R1
		BLS	locret_3244
		UXTH	R0, R1

locret_3244:				@ ...
		POP	{R4,PC}
@ End of function GetVoltsForPower

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================


		.ifne	keeporgcode

orgReadAtoTemp:

var_28		= -0x28

		PUSH.W	{R3-R11,LR}
		LDR	R0, =TargetVolts
		LDR	R0, [R0]
		CMP	R0, #0
		BEQ	locret_333A
		LDR	R5, =Flags64
		LDR.W	R9, =AtoProbeCount
		LDR.W	R8, =byte_20000098
		LDRH	R0, [R5]
		MOV.W	R7, #1
		LSLS	R0, R0,	#23
		BMI	loc_3278
		LDRB.W	R0, [R9]
		CMP	R0, #10
		BEQ	loc_328C

loc_3278:				@ ...
		STRB.W	R7, [R8]

loc_327C:				@ ...
		MOV.W	R10, #0
		STR.W	R10, [R8,#(ADCAtoSum - byte_20000098)]
		MOV	R4, R10
		STR.W	R10, [R8,#(ADCShuntSum - byte_20000098)]
		B	loc_32C4
@ ---------------------------------------------------------------------------

loc_328C:				@ ...
		MOVS	R0, #50
		STRB.W	R0, [R8]
		B	loc_327C
@ ---------------------------------------------------------------------------

loc_3294:				@ ...
		MOVS	R0, #10
		BL	CLK_SysTickDelay
		MOVS	R0, #2
		BL	ADC_Read
		LDR.W	R1, [R8,#(ADCShuntSum -	byte_20000098)]
		ADD	R0, R1
		STR.W	R0, [R8,#(ADCShuntSum -	byte_20000098)]
		MOVS	R0, #10
		BL	CLK_SysTickDelay
		MOVS	R0, #1
		BL	ADC_Read
		LDR.W	R1, [R8,#(ADCAtoSum - byte_20000098)]
		ADDS	R4, R4,	#1
		ADD	R0, R1
		UXTB	R4, R4
		STR.W	R0, [R8,#(ADCAtoSum - byte_20000098)]

loc_32C4:				@ ...
		LDRB.W	R0, [R8]
		CMP	R4, R0
		BCC	loc_3294
		LDR.W	R0, [R8,#8]
		CBNZ	R0, loc_32D6
		STR.W	R7, [R8,#8]

loc_32D6:				@ ...
		LDR	R0, =AtoShuntValue
		MOVW	R1, #1300
		LDRB	R0, [R0]
		SMULBB.W R0, R0, R1
		MOVS	R1, #100
		UDIV.W	R1, R0,	R1
		LDR.W	R0, [R8,#(ADCAtoSum - byte_20000098)]
		MULS	R1, R0
		LDR.W	R0, [R8,#(ADCShuntSum -	byte_20000098)]
		ADD.W	R0, R0,	R0,LSL#1
		UDIV.W	R0, R1,	R0
		STR.W	R0, [R8,#(AtoRezMilli -	byte_20000098)]
		BL	GetAtoCurrent
		LDR.W	R1, [R8,#(AtoRezMilli -	byte_20000098)]
		CMP	R1, #5
		BCC	locret_333A
		LDR	R6, =Event
		LDR	R4, =AtoStatus
		MOV.W	R11, #25
		CMP	R1, #20
		BHI	loc_333E
		STRB	R7, [R4]
		LDR.W	R0, [R8,#(dword_200000A4 - byte_20000098)]
		STR	R0, [SP]
		ADR	R0, aRl_gndDDDD
		LDR.W	R3, [R8,#(ADCShuntSum -	byte_20000098)]
		LDR.W	R2, [R8,#(ADCAtoSum - byte_20000098)]
		BL	PutTextf
		LDRH	R0, [R5]
		LSLS	R0, R0,	#23
		BPL	locret_333A
		BL	StopFire
		STRB.W	R11, [R6]

locret_333A:				@ ...
		POP.W	{R3-R11,PC}
@ ---------------------------------------------------------------------------

loc_333E:				@ ...
		LDRB.W	R0, [R9]
		CMP	R0, #10
		BHI	loc_334A
		CMP	R1, #50
		BCC	loc_334E

loc_334A:				@ ...
		CMP	R1, #40
		BCS	loc_3362

loc_334E:				@ ...
		ADR	R0, aRl_lowD
		BL	PutTextf
		MOVS	R0, #2
		STRB	R0, [R4]
		LDRH	R0, [R5]
		LSLS	R0, R0,	#23
		BPL	locret_333A
		MOVS	R0, #27
		B	loc_337A
@ ---------------------------------------------------------------------------

loc_3362:				@ ...
		MOVW	R2, #50000
		CMP	R1, R2
		BLS	loc_337E
		STRB.W	R10, [R4]
		STR.W	R10, [R8,#(AtoRezMilli - byte_20000098)]
		LDRH	R0, [R5]
		LSLS	R0, R0,	#0x17
		BPL	locret_333A
		MOVS	R0, #26

loc_337A:				@ ...
		STRB	R0, [R6]
		B	locret_333A
@ ---------------------------------------------------------------------------

loc_337E:				@ ...
		MOVW	R7, #3500
		CMP	R0, #10
		BHI	loc_3392
		CMP	R1, R7
		BLS	loc_3392
		MOVS	R0, #3
		STRB	R0, [R4]
		ADR	R0, aRl_largeD
		B	loc_33B6
@ ---------------------------------------------------------------------------

loc_3392:				@ ...
		LDR	R2, [R5]
		LSLS	R3, R2,	#23
		BPL	loc_33BE
		MOVS	R3, #10
		UDIV.W	R3, R1,	R3
		LDR	R5, =AtoRez
		LDRH	R5, [R5]
		CMP.W	R3, R5,LSR#2
		BHI	loc_33BE
		BL	StopFire
		STRB.W	R11, [R6]
		LDR.W	R1, [R8,#(AtoRezMilli -	byte_20000098)]
		ADR	R0, aRl_gnd2D

loc_33B6:				@ ...
		POP.W	{R3-R11,LR}
		B.W	PutTextf
@ ---------------------------------------------------------------------------

loc_33BE:				@ ...
		LDRB	R3, [R4]
		CMP	R3, #4
		BEQ	loc_33CA
		CBZ	R3, loc_33CA
		CMP	R3, #3
		BNE	locret_333A

loc_33CA:				@ ...
		CMP	R1, #50
		BCC	locret_333A
		CMP	R1, R7
		BHI	locret_333A
		LSLS	R1, R2,	#23
		BMI	loc_33DA
		CMP	R0, #10
		BHI	locret_333A

loc_33DA:				@ ...
		MOVS	R0, #4
		STRB	R0, [R4]
		LSLS	R0, R2,	#23
		BPL	locret_333A
		POP.W	{R3-R11,LR}
		B.W	GetAtoTemp
@ End of function ReadAtoTemp

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
aRl_gndDDDD:	.ascii "RL_GND %d(%d,%d,%d)" @ ...
		.byte 0xA, 0
		.balign 4,0
aRl_lowD:	.ascii "RL_LOW %d"      @ ...
		.byte 0xA, 0
		.balign 4,0
aRl_largeD:	.ascii "RL_LARGE %d"    @ ...
		.byte 0xA, 0
		.balign 4,0
		.pool
aRl_gnd2D:	.ascii "RL_GND2 %d"     @ ...
		.byte 0xA, 0

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgStopFire:
		PUSH	{R4-R6,LR}
		MOVS	R2, #0
		MOVS	R1, #0x80
		LDR	R0, =0x400040C0
		BL	GPIO_SetMode
		LDR	R1, =Flags64
		LDR	R0, [R1]
		LSLS	R2, R0,	#23
		BPL	loc_3466
		BIC.W	R0, R0,	#0x100
		STR	R0, [R1]

loc_3466:				@ ...
		LDR	R5, =Flags64
		MOVS	R4, #0
		SUBS	R5, #(Flags64 -	KeyUpTimer)
		LDRH	R0, [R5,#(FireDuration - KeyUpTimer)]
		CMP	R0, #5
		BLS	loc_34A2
		LDR	R1, =dfData
		LDR.W	R2, [R1,#(dfTimeCount -	dfData)]
		ADD	R0, R2
		LDR	R2, =999999
		STR.W	R0, [R1,#(dfTimeCount -	dfData)]
		CMP	R0, R2
		BLS	loc_3488
		STR.W	R4, [R1,#(dfTimeCount -	dfData)]

loc_3488:				@ ...
		LDR.W	R0, [R1,#(dfPuffCount -	dfData)]
		LDR	R2, =99999
		ADDS	R0, R0,	#1
		STR.W	R0, [R1,#(dfPuffCount -	dfData)]
		CMP	R0, R2
		BLS	loc_349C
		STR.W	R4, [R1,#(dfPuffCount -	dfData)]

loc_349C:				@ ...
		LDR	R1, =UpdatePTTimer
		MOVS	R0, #80
		STRB	R0, [R1]

loc_34A2:				@ ...
		LDR	R0, =0x40004884
		STRH	R4, [R5,#(FireDuration - KeyUpTimer)]
		STR	R4, [R0]
		LDR	R0, =0x40004884
		ADDS	R0, #8
		STR	R4, [R0]
		LDR	R0, =0x40004884
		STRH	R4, [R5,#(BuckDuty - KeyUpTimer)]
		SUBS	R0, R0,	#4
		STR	R4, [R0]
		MOVS	R1, #0
		MOV	R0, R1
		BL	BBC_Configure
		LDR	R0, =0x40004884
		STRH	R4, [R5,#(BoostDuty - KeyUpTimer)]
		ADDS	R0, R0,	#4
		STR	R4, [R0]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	BBC_Configure
		MOVS	R1, #0
		MOVS	R0, #1
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #2
		BL	SetADCState
		LDR	R0, =LowBatVolts
		STRH	R4, [R0]
		MOVS	R0, #200
		STRB	R0, [R5,#(BatReadTimer - KeyUpTimer)]
		POP	{R4-R6,PC}
@ End of function StopFire

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgLowestRezMeasure:
		LDR	R0, =dfData
		LDR	R1, =AtoRez
		LDRH	R0, [R0,#(dfResistance - dfData)]
		LDRH	R1, [R1]
		CMP	R0, R1
		BLS	loc_3518
		CBZ	R1, loc_3518
		MOV	R0, R1

loc_3518:				@ ...
		LDR	R1, =byte_20000098
		MOVS	R2, #10
		LDR	R1, [R1,#(AtoRezMilli -	byte_20000098)]
		UDIV.W	R3, R1,	R2
		CMP	R3, R0
		BCS	locret_3530
		CMP	R1, #10
		BCC	locret_3530
		UDIV.W	R0, R1,	R2
		UXTH	R0, R0

locret_3530:				@ ...
		BX	LR
@ End of function LowestRezMeasure

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgAtoPowerLimit:
		LDR	R1, =byte_20000098
		LDR	R1, [R1,#(AtoRezMilli -	byte_20000098)]
		CMP	R1, #120
		BCS	locret_355E
		MOVW	R2, #625
		MULS	R1, R2
		MOVS	R2, #10
		UDIV.W	R1, R1,	R2
		UDIV.W	R1, R1,	R2
		CMP	R0, R1
		BLS	locret_355E
		UXTH	R0, R1

locret_355E:				@ ...
		BX	LR
@ End of function AtoPowerLimit

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgGetAtoCurrent:				@ ...

var_24		= -0x24

		PUSH.W	{R0-R10,LR}
		LDR.W	R8, =Flags64
		LDR.W	R0, [R8]
		LSLS	R1, R0,	#23
		BMI	loc_3578
		LSLS	R0, R0,	#18
		BPL	locret_3632

loc_3578:				@ ...
		MOVS	R0, #2
		BL	ADC_Read
		MOV	R6, R0
		MOVS	R0, #10
		BL	CLK_SysTickDelay
		MOVS	R0, #1
		BL	ADC_Read
		LDR	R5, =AtoShuntValue
		MOV	R9, R0
		MOV.W	R0, #25600
		MULS	R0, R6
		LDRB	R1, [R5]
		LSRS	R0, R0,	#12
		UDIV.W	R0, R0,	R1
		LDR	R7, =byte_20000098
		STRH	R0, [R7,#(AtoCurrent - byte_20000098)]
		BL	LowestRezMeasure
		MOV	R4, R0
		LDR.W	R0, [R8]
		LDR.W	R8, =TargetVolts
		LSLS	R1, R0,	#23
		BPL	loc_35E6
		LDRB	R1, [R5]
		MOVS	R2, #100
		ADD.W	R1, R1,	R1,LSL#6
		LSLS	R1, R1,	#5
		UDIV.W	R2, R1,	R2
		MUL.W	R1, R6,	R4
		MUL.W	R2, R2,	R9
		RSB.W	R1, R1,	R1,LSL#4
		CMP.W	R2, R1,LSL#1
		BCS	loc_35E6
		LDRH	R1, [R7,#(AtoCurrent - byte_20000098)]
		CMP	R1, #50
		BLS	loc_35E6
		LDR.W	R1, [R8]
		CMP	R1, #100
		BCC	loc_35E6
		MOVS	R5, #2
		B	loc_35F8
@ ---------------------------------------------------------------------------

loc_35E6:				@ ...
		LDRH	R1, [R7,#(AtoCurrent - byte_20000098)]
		CMP.W	R1, #0x100
		BLS	locret_3632
		LDR	R1, =dfData
		LDRB	R1, [R1,#(dfMode - dfData)]
		CMP	R1, #5
		BEQ	locret_3632
		MOVS	R5, #3

loc_35F8:				@ ...
		LDR	R2, =AtoStatus
		MOVS	R1, #1
		LSLS	R0, R0,	#23
		STRB	R1, [R2]
		BPL	loc_3608
		LDR	R1, =Event
		MOVS	R0, #25
		STRB	R0, [R1]

loc_3608:				@ ...
		BL	StopFire
		LDRH	R0, [R7,#(AtoCurrent - byte_20000098)]
		MOVS	R1, #10
		UDIV.W	R2, R0,	R1
		MLS.W	R2, R1,	R2, R0
		UDIV.W	R0, R0,	R1
		LDR.W	R1, [R8]
		STR	R1, [SP,#0xC]
		STMEA.W	SP, {R0,R2,R4}
		MOV	R3, R9
		MOV	R2, R6
		MOV	R1, R5
		LDR	R0, =aShortDU32adval
		BL	PutTextf

locret_3632:				@ ...
		POP.W	{R0-R10,PC}
@ End of function GetAtoCurrent

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgTweakTargetVoltsTC:
		PUSH	{R4-R6,LR}
		LDR	R4, =TargetVolts
		LDR	R0, [R4]
		CMP	R0, #0
		BEQ	locret_36AA
		LDR	R6, =dfData
		LDRH	R0, [R6,#(dfTCPower - dfData)]
		CMP	R0, #10
		BCS	loc_366C
		MOVS	R0, #10

loc_366C:				@ ...
		LDR	R5, =Flags64
		MOV.W	R3, #300
		LDR	R1, [R5]
		LSLS	R1, R1,	#8
		BPL	loc_368A
		CMP	R0, R3
		BCS	loc_3680
		MOV	R0, R3
		B	loc_368A
@ ---------------------------------------------------------------------------

loc_3680:				@ ...
		MOV.W	R1, #400
		CMP	R0, R1
		BLS	loc_368A
		MOV	R0, R1

loc_368A:				@ ...
		BL	AtoPowerLimit
		LDR	R1, =FireDuration
		LDRH	R1, [R1]
		CMP	R1, #2
		BHI	loc_369C
		CMP	R0, R3
		BLS	loc_369C
		MOV	R0, R3

loc_369C:				@ ...
		BL	GetVoltsForPower
		MOV	R2, R0
		LDR	R0, [R5]
		LSLS	R0, R0,	#8
		BPL	loc_36AC

loc_36A8:				@ ...
		STR	R2, [R4]

locret_36AA:				@ ...
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_36AC:				@ ...
		LDRB	R0, [R6,#(dfIsCelsius -	dfData)]
		CMP	R0, #1
		LDRH	R0, [R6,#(dfTemp - dfData)]
		BNE	loc_36B8
		BL	CelsiusToF

loc_36B8:				@ ...
		LDR	R1, [R5]
		LSLS	R3, R1,	#9
		BMI	loc_3704
		LDR	R3, =byte_20000098
		LDRH	R3, [R3,#(AtoTemp - byte_20000098)]
		CMP	R3, R0
		BCS	loc_36D4
		LDR	R0, [R4]
		ADDS	R0, R0,	#1
		STR	R0, [R4]
		BIC.W	R0, R1,	#0x4000000
		STR	R0, [R5]
		B	loc_370C
@ ---------------------------------------------------------------------------

loc_36D4:				@ ...
		LSLS	R6, R1,	#5
		BPL	loc_3700
		CMP	R3, R0
		BLS	loc_3700
		BIC.W	R0, R1,	#0x4000000
		STR	R0, [R5]
		LDR	R1, =0x4000488C
		MOVS	R0, #0
		STR	R0, [R4]
		STR	R0, [R1]
		LDR	R1, =0x4000488C
		SUBS	R1, #8
		STR	R0, [R1]
		LDR	R1, =BuckDuty
		STRH	R0, [R1]
		LDR	R1, =0x40058000
		STR	R0, [R1,#0x50]
		LDR	R3, =BoostDuty
		STRH	R0, [R3]
		STR	R0, [R1,#0x58]
		B	loc_370C
@ ---------------------------------------------------------------------------

loc_3700:				@ ...
		CMP	R3, R0
		BLS	loc_370C

loc_3704:				@ ...
		LDR	R0, [R4]
		CBZ	R0, loc_370C
		SUBS	R0, R0,	#1
		STR	R0, [R4]

loc_370C:				@ ...
		LDR	R0, [R4]
		CMP	R0, R2
		BHI	loc_36A8
		POP	{R4-R6,PC}
@ End of function TweakTargetVoltsTC

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne keeporgcode

orgKeyRepeat:
		PUSH.W	{R4-R8,LR}
		LDR	R1, =Screen
		LDR	R4, =dfData
		LDRB	R3, [R1]
		LDR	R1, =EditModeTimer
		LDR	R0, [R4,#(dfStatus - dfData)]
		LDRH	R1, [R1]
		LSLS	R2, R0,	#30
		BPL	loc_3752
		CBNZ	R1, loc_3752
		CMP	R3, #59
		BNE	locret_379E

loc_3752:				@ ...
		LDR	R2, =0x40004900	@ PE0_PDIO (fire button)
		LDR	R2, [R2]
		CMP	R2, #0
		BEQ	locret_379E
		LSLS	R5, R0,	#31
		LDR	R0, =dfData
		LDR	R7, =0x400048C8
		LDRH	R2, [R0,#(dfTCPower - dfData)]
		LDRB	R0, [R0,#(dfMode - dfData)]
		ADD.W	R12, R7, #4
		BEQ	loc_3770
		CMP	R3, #59
		BNE	locret_379E
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_3770:				@ ...
		CBZ	R1, loc_37A2
		LDR	R1, =EditItemIndex
		LDRB	R1, [R1]
		CMP	R1, #2
		BNE	locret_379E
		LDR	R1, =MaxTCPower
		LDR	R4, =Flags64
		LDR	R5, [R1]
		LDR	R1, [R4]
		CMP	R2, R5
		ORR.W	R1, R1,	#0x40000
		BNE	loc_3790
		LDR	R5, [R7]	@ PD2_PDIO (right button)
		CMP	R5, #1
		BNE	loc_379C

loc_3790:				@ ...
		CMP	R2, #10
		BNE	loc_37E4
		LDR.W	R5, [R12]	@ PD3_PDIO (left button)
		CMP	R5, #1
		BEQ	loc_37E4

loc_379C:				@ ...
		STR	R1, [R4]

locret_379E:				@ ...
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_37A2:				@ ...
		CBZ	R0, loc_37B0
		CMP	R0, #1
		BEQ	loc_37B0
		CMP	R0, #2
		BEQ	loc_37B0
		CMP	R0, #3
		BNE	loc_37E4

loc_37B0:				@ ...
		LDR	R1, =dfData
		LDRB	R4, [R4,#(dfIsCelsius -	dfData)]
		LDRH	R1, [R1,#(dfTemp - dfData)]
		CBZ	R4, loc_37BE
		CMP	R4, #1
		BEQ	loc_37D2
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_37BE:				@ ...
		CMP.W	R1, #600
		BEQ	loc_37CA
		CMP	R1, #200
		BEQ	loc_3810
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_37CA:				@ ...
		LDR	R1, [R7]

loc_37CC:				@ ...
		CMP	R1, #1
		BNE	locret_379E
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_37D2:				@ ...
		SUB.W	R4, R1,	#0x100
		SUBS	R4, #59
		BNE	loc_37E0
		LDR	R4, [R7]
		CMP	R4, #1
		BNE	locret_379E

loc_37E0:				@ ...
		CMP	R1, #100
		BEQ	loc_3810

loc_37E4:				@ ...
		LDR	R1, [R7]
		LDR.W	LR, [R12]
		MOVS	R6, #0
		LDR	R4, =byte_20000080
		LDR	R5, =word_20000054
		CMP	R1, LR
		BEQ	loc_3832
		LDRB	R0, [R4]
		CMP	R0, #3
		BCS	loc_3804
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R4]
		CMP	R0, #3
		BCC	locret_379E

loc_3804:				@ ...
		LDRH	R0, [R5]
		CMP	R0, #105
		BCS	loc_3816
		ADDS	R0, R0,	#1
		STRH	R0, [R5]
		B	loc_3818
@ ---------------------------------------------------------------------------

loc_3810:				@ ...
		LDR.W	R1, [R12]
		B	loc_37CC
@ ---------------------------------------------------------------------------

loc_3816:				@ ...
		STRB	R6, [R4]

loc_3818:				@ ...
		LDR	R1, [R7]
		LDR	R0, =Event
		CMP	R1, #1
		BEQ	loc_3824
		MOVS	R1, #2
		B	loc_382E
@ ---------------------------------------------------------------------------

loc_3824:				@ ...
		LDR.W	R1, [R12]
		CMP	R1, #1
		BEQ	locret_379E
		MOVS	R1, #3

loc_382E:				@ ...
		STRB	R1, [R0]
		B	locret_379E
@ ---------------------------------------------------------------------------

loc_3832:				@ ...
		LDR	R7, =KeyUpTimer
		LDRB	R1, [R7]
		CBZ	R1, loc_3854
		SUBS	R1, R1,	#1
		ANDS.W	R1, R1,	#0xFF
		STRB	R1, [R7]
		BNE	loc_3854
		CMP	R3, #1
		BNE	loc_3854
		CMP.W	R2, #1000
		BCS	loc_3850
		CMP	R0, #6
		BNE	loc_3854

loc_3850:				@ ...
		BL	MainView

loc_3854:				@ ...
		STRH	R6, [R5]
		STRB	R6, [R4]
		B	locret_379E
@ End of function KeyRepeat

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgCpyTmpCoefsNI:
		PUSH	{LR}
		SUB	SP, SP,	#44
		MOVS	R2, #44
		LDR	R1, =TempCoefsNI
		MOV	R0, SP
		BL	MemCpy
		MOVS	R2, #42
		MOV	R1, SP
		LDR	R0, =dfTempCoefsNI
		BL	MemCpy
		ADD	SP, SP,	#44
		POP	{PC}
@ End of function CpyTmpCoefsNI

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================


fbInitTimeouts:
		LDR	R0, =fbTimeoutMask
		MOVS	R1, #0
		LDR	R2, =TimeoutsTable
		STRB	R1, [R0,#(fbCurrentTimeout - fbTimeoutMask)]
		STRB	R1, [R0,#(fbUsedTimeouts - fbTimeoutMask)]
		MOV	R0, R1

loc_38BC:				@ ...
		ADD.W	R3, R2,	R0,LSL#3
		STRB.W	R1, [R2,R0,LSL#3]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STR	R1, [R3,#4]
		CMP	R0, #3
		BCC	loc_38BC
		BX	LR
@ End of function fbInitTimeouts

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgCpyTmpCoefsTI:
		PUSH	{LR}
		SUB	SP, SP,	#44
		MOVS	R2, #44
		LDR	R1, =TempCoefsTI
		MOV	R0, SP
		BL	MemCpy
		MOVS	R2, #42
		MOV	R1, SP
		LDR	R0, =dfTempCoefsTI
		BL	MemCpy
		ADD	SP, SP,	#44
		POP	{PC}
@ End of function CpyTmpCoefsTI

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSetAtoSTARTParams:			@ ...
		PUSH.W	{R4-R8,LR}
		LDR	R7, =AtoRez
		MOVS	R4, #0
		LDR.W	R8, =STARTPowers
		LDR	R6, =dfData
		LDRH	R1, [R7]
		MOVS	R3, #20

loc_390E:				@ ...
		ADD.W	R5, R6,	R4,LSL#1
		LDRH.W	R0, [R5,#(dfSavedCfgRez	- dfData)]
		UDIV.W	R2, R0,	R3
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3926
		SUBS	R2, R0,	#1
		CMP	R2, R1
		BGT	loc_3954

loc_3926:				@ ...
		UDIV.W	R2, R0,	R3
		ADD	R2, R0
		CMP	R2, R1
		BCS	loc_3936
		ADDS	R2, R0,	#1
		CMP	R2, R1
		BCC	loc_3954

loc_3936:				@ ...
		BL	SearchSTARTRez
		LDR	R2, =MaxPower
		LDRH.W	R1, [R5,#(dfSavedCfgPwr	- dfData)]
		LDR	R2, [R2]
		CMP	R1, R2
		BHI	loc_394A
		CMP	R1, #10
		BCS	loc_395C

loc_394A:				@ ...
		LDRH.W	R0, [R8,R0,LSL#2]
		STRH.W	R0, [R5,#(dfSavedCfgPwr	- dfData)]
		B	loc_395C
@ ---------------------------------------------------------------------------

loc_3954:				@ ...
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #10
		BCC	loc_390E

loc_395C:				@ ...
		LDR	R5, =ConfigIndex
		CMP	R4, #10
		BEQ	loc_396E
		STRB	R4, [R5]

loc_3964:				@ ...
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #50
		STRB	R0, [R1]
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_396E:				@ ...
		MOVS	R0, #0

loc_3970:				@ ...
		ADD.W	R1, R6,	R0,LSL#1
		LDRH.W	R1, [R1,#(dfSavedCfgRez	- dfData)]
		CBZ	R1, loc_3982
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #10
		BCC	loc_3970

loc_3982:				@ ...
		CMP	R0, #10
		BEQ	loc_39A8
		STRB	R0, [R5]

loc_3988:				@ ...
		LDRB	R1, [R5]
		LDRH	R0, [R7]
		ADD.W	R1, R6,	R1,LSL#1
		STRH.W	R0, [R1,#(dfSavedCfgRez	- dfData)]
		BL	SearchSTARTRez
		LDRB	R1, [R5]
		LDRH.W	R0, [R8,R0,LSL#2]
		ADD.W	R1, R6,	R1,LSL#1
		STRH.W	R0, [R1,#(dfSavedCfgPwr	- dfData)]
		B	loc_3964
@ ---------------------------------------------------------------------------

loc_39A8:				@ ...
		MOVS	R0, #9
		STRB	R0, [R5]
		MOVS	R0, #0

loc_39AE:				@ ...
		ADD.W	R1, R6,	R0,LSL#1
		ADDS	R0, R0,	#1
		LDRH.W	R2, [R1,#(dfSavedCfgRez+2 - dfData)]
		STRH.W	R2, [R1,#(dfSavedCfgRez	- dfData)]!
		UXTB	R0, R0
		LDRH	R2, [R1,#(dfSavedCfgPwr+2 - dfSavedCfgRez)]
		STRH	R2, [R1,#(dfSavedCfgPwr	- dfSavedCfgRez)]
		CMP	R0, #9
		BCC	loc_39AE
		B	loc_3988
@ End of function SetAtoSTARTParams

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ Attributes: bp==sp

		.ifne	keeporgcode

orgEventHandler:				@ ...

var_44		= -0x44
var_40		= -0x40
var_3C		= -0x3C
var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28
var_24		= -0x24
var_20		= -0x20
var_1C		= -0x1C
var_18		= -0x18
var_14		= -0x14
var_10		= -0x10
var_C		= -0xC
var_8		= -8
var_4		= -4
arg_3DE4	=  0x3E08

		PUSH.W	{R4-R11,LR}
		LDR	R0, =KeyUpTimer
		SUB	SP, SP,	#0x44
		LDRB	R6, [R0,#(Event	- KeyUpTimer)]
		CMP	R6, #0xFF
		BEQ	def_3A9A
		MOVS	R1, #200
		STRB	R1, [R0,#(BatRefreshTmr	- KeyUpTimer)]
		LDR		R1, =KeyUpTimer
		STRB	R6, [R1,#(LastEvent	- KeyUpTimer)]
		MOVS	R0, #0xFF
		STRB	R0, [R1,#(Event	- KeyUpTimer)]
@MODIF*****************************
		.ifne	modifs
		BL		CustomEvents
		CMP		R0, #0
		BNE		def_3A9A
		LDR		R1, =KeyUpTimer
		.endif
@**********************************
		ADD.W	R0, R1,	#(Flags68 - KeyUpTimer)
		ADD.W	R4, R1,	#(Flags64 - KeyUpTimer)
		LDR	R0, [R0]
		STR	R0, [SP,#0x44+var_38]
		BIC.W	R0, R0,	#1
		STR	R0, [SP,#0x44+var_4]
		LDR	R0, [R4]
		LDR	R7, =ConfigIndex
		MOV	R11, R0
		ORR.W	R12, R0, #0x20000
		MOV	R0, R1
		LDR.W	R9, =Screen
		LDRH	R0, [R0,#(EditModeTimer	- KeyUpTimer)]
		STR	R0, [SP,#0x44+var_8]
		ORR.W	R0, R11, #0x40000
		STR	R0, [SP,#0x44+var_28]
		BIC.W	R0, R11, #0x8000000
		STR	R0, [SP,#0x44+var_C]
		BIC.W	R0, R11, #0x10000000
		STR	R0, [SP,#0x44+var_10]
		BIC.W	R0, R11, #0x80000000
		STR	R0, [SP,#0x44+var_14]
		LDR	R0, [SP,#0x44+var_38]
		LDR.W	R8, =dfData
		BIC.W	R0, R0,	#2
		STR	R0, [SP,#0x44+var_18]
		LDR	R0, =dfData
		LDR.W	R10, =ScreenDuration
		MOVS	R5, #0
		LDRB	R0, [R0,#(dfIsCelsius -	dfData)]
		STR	R0, [SP,#0x44+var_1C]
		MOV	R0, R1
		CMP	R6, #42		@ switch 42 cases
		LDR	R0, [R0,#(MaxTCPower - KeyUpTimer)]
		STR	R0, [SP,#0x44+var_40]
		MOV	R0, R1
		LDRH	R0, [R0,#(word_20000054	- KeyUpTimer)]
		STR	R0, [SP,#0x44+var_2C]
		MOV	R0, R1
		LDR	R1, =dfData
		LDRB	R0, [R0,#(BatteryTenth - KeyUpTimer)]
		STR	R0, [SP,#0x44+var_20]
		LDR	R0, =dfData
		LDRH	R0, [R0,#(dfTCPower - dfData)]
		STR	R0, [SP,#0x44+var_44]
		LDR	R0, =EditItemIndex
		LDRB	R7, [R7]
		LDRB.W	R2, [R9]
		LDRB	R3, [R0]
		LDR	R0, =dfData
		LDR	R1, [R1,#(dfStatus - dfData)]
		ADD.W	R8, R8,	R7,LSL#1
		LDRB.W	LR, [R0,#(dfUIVersion -	dfData)]
		LDRB	R0, [R0,#(dfMode - dfData)]
		STR	R7, [SP,#0x44+var_24]
		LDR	R7, =dfData
		LDRH	R7, [R7,#(dfPower - dfData)]
		STR	R7, [SP,#0x44+var_3C]
		LDR	R7, =KeyUpTimer
		LDRB	R7, [R7,#(EditTCRIndex - KeyUpTimer)]
		STR	R7, [SP,#0x44+var_34]
		LDR	R7, =dfData
		LDRH	R7, [R7,#(dfTemp - dfData)]
		STR	R7, [SP,#0x44+var_30]
		BCS	def_3A9A
		TBB.W	[PC,R6]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_3A9A:
		.byte (def_3A9A - jpt_3A9A)/2 @ ...
		.byte (loc_3ACC - jpt_3A9A)/2
		.byte (loc_3C98 - jpt_3A9A)/2
		.byte (loc_3C96 - jpt_3A9A)/2
		.byte (loc_3C94 - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (loc_3C92 - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (loc_3C90 - jpt_3A9A)/2
		.byte (loc_3C8E - jpt_3A9A)/2
		.byte (loc_3C8C - jpt_3A9A)/2
		.byte (loc_3C8A - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (loc_3C88 - jpt_3A9A)/2
		.byte (loc_3C86 - jpt_3A9A)/2
		.byte (loc_3C84 - jpt_3A9A)/2
		.byte (loc_3C82 - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (loc_3AC8 - jpt_3A9A)/2
		.byte (loc_3AC8 - jpt_3A9A)/2
		.byte (loc_3C80 - jpt_3A9A)/2
		.byte (loc_3C7E - jpt_3A9A)/2
		.byte (loc_3C7C - jpt_3A9A)/2
		.byte (loc_3C7A - jpt_3A9A)/2
		.byte (loc_3C78 - jpt_3A9A)/2
		.byte (loc_3C76 - jpt_3A9A)/2
		.byte (loc_3C74 - jpt_3A9A)/2
		.byte (loc_3C72 - jpt_3A9A)/2
		.byte (loc_3C70 - jpt_3A9A)/2
		.byte (loc_3C6E - jpt_3A9A)/2
		.byte (loc_3C6C - jpt_3A9A)/2
		.byte (loc_3C6A - jpt_3A9A)/2
		.byte (loc_3C68 - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (def_3A9A - jpt_3A9A)/2
		.byte (loc_3C66 - jpt_3A9A)/2
		.byte (loc_3C64 - jpt_3A9A)/2
		.byte (loc_3C62 - jpt_3A9A)/2
		.byte (loc_3C60 - jpt_3A9A)/2
		.balign 2,0
@ ---------------------------------------------------------------------------

loc_3AC8:				@ ...
		LDR	R0, [R4]
		B	loc_42AC
@ ---------------------------------------------------------------------------

loc_3ACC:				@ ...
		LDR	R3, =dfData
		LSLS	R1, R1,	#31
		BEQ	loc_3AD6
		CMP	R2, #59
		BEQ	loc_3AE6

loc_3AD6:				@ ...
		MOV	R11, R3
		CMP	R0, #6
		BEQ	loc_3AFE
		LDR	R7, [SP,#0x44+var_3C]

loc_3ADE:				@ ...
		CMP	R2, #0x52
		BEQ	loc_3B04
		B	loc_3B08
@ ---------------------------------------------------------------------------

def_3A9A:				@ ...
		B	loc_3C02
@ ---------------------------------------------------------------------------

loc_3AE6:				@ ...
		LDR	R1, =KeyUpTimer
		LDR	R0, [SP,#0x44+var_38]
		ADDS	R1, #(Flags68 - KeyUpTimer)
		LSLS	R0, R0,	#0x1F
		BEQ	loc_3AF6
		LDR	R0, [SP,#0x44+var_4]

loc_3AF2:				@ ...
		STR	R0, [R1]
		B	loc_42F4
@ ---------------------------------------------------------------------------

loc_3AF6:				@ ...
		LDR	R0, [SP,#0x44+var_38]
		ORR.W	R0, R0,	#1
		B	loc_3AF2
@ ---------------------------------------------------------------------------

loc_3AFE:				@ ...
		LDRH.W	R7, [R8,#(dfSavedCfgPwr	- dfData)]
		B	loc_3ADE
@ ---------------------------------------------------------------------------

loc_3B04:				@ ...
		BL	UpdateDataFlash

loc_3B08:				@ ...
		LDR	R0, =Screen
		LDRB	R0, [R0]
		CMP	R0, #83
		BEQ	loc_3B5A
		LDRB.W	R0, [R11,#(dfStatus - dfData)]
		MOV	R9, R11
		LSLS	R0, R0,	#31
		BNE	loc_3C02
		LDR	R6, =KeyUpTimer
		LDRH	R0, [R6,#(EditModeTimer	- KeyUpTimer)]
		CBZ	R0, loc_3B30
		STRH	R5, [R6,#(EditModeTimer	- KeyUpTimer)]
		LDR	R0, [R4]
		LDR	R1, =UpdateDFTimer
		ORR.W	R0, R0,	#0x40000
		STR	R0, [R4]
		MOVS	R0, #50
		STRB	R0, [R1]

loc_3B30:				@ ...
		LDR	R0, =KeyUpTimer
		ADDS	R0, #(Flags68 -	KeyUpTimer)
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x10
		STR	R1, [R0]
		LDR	R0, [R4]
		LSLS	R1, R0,	#23
		BMI	loc_3C22
		LSLS	R1, R0,	#22
		MOV.W	R11, #25
		BPL	loc_3BCC
		LDRH	R1, [R6,#(BatteryVoltage - KeyUpTimer)]
		CMP.W	R1, #330
		BCC	loc_3BA8
		BIC.W	R0, R0,	#0x200
		STR	R0, [R4]
		B	loc_3BC6
@ ---------------------------------------------------------------------------

loc_3B5A:				@ ...
		BL	UpdateDataFlash
		LDRB.W	R0, [R11,#(dfFBSpeed - dfData)]
		CMP	R0, #2
		BHI	loc_3C02
		LDR	R1, =KeyUpTimer
		ADDS	R1, #(Flags68 -	KeyUpTimer)
		LDR	R0, [R1]
		LSLS	R2, R0,	#22

loc_3B6E:				@ ...
		BMI	loc_3C02
		ORR.W	R0, R0,	#0x200
		STR	R0, [R1]
		LDR	R0, =Screen
		LDR	R1, =SleepTimer
		STRB	R5, [R0]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x4000
		STR	R0, [R4]
		LDR	R0, =KeyUpTimer
		STRB	R5, [R0,#(BatRefreshTmr	- KeyUpTimer)]
		MOVW	R0, #3000
		STRH	R0, [R1]
		BL	fbInitTimeouts
		BL	j_DisplayRefresh
		MOVS	R0, #24
		BL	fbBirdAnim
		ADD	SP, SP,	#0x44
		LDR	R0, =(fbStartScreen+1)
		POP.W	{R4-R11,LR}
		B.W	fbCreateTimeout
@ ---------------------------------------------------------------------------

loc_3BA8:				@ ...
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		LDR	R0, =Screen
		STRB.W	R11, [R0]
		MOVS	R0, #2
		STRB.W	R0, [R10]
		LDR	R0, =KeyUpTimer
		ADDS	R0, #(KeyPressTime - KeyUpTimer)
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]

loc_3BC6:				@ ...
		LDRH	R0, [R4]
		LSLS	R0, R0,	#22
		BMI	loc_3B6E

loc_3BCC:				@ ...
		LDRH	R0, [R6,#(BatteryVoltage - KeyUpTimer)]
		CMP.W	R0, #310
		BLS	loc_3CB2
		LDRB	R0, [R6,#(BoardTemp - KeyUpTimer)]
		CMP	R0, #70
		BCC	loc_3BE4
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,LR}
		B.W	Overtemp
@ ---------------------------------------------------------------------------

loc_3BE4:				@ ...
		LDR.W	R8, =AtoStatus

loc_3BE8:				@ ...
		LDRB.W	R0, [R8]
		CMP	R0, #4
		BNE	loc_3C04
		LDRB	R0, [R6,#(AtoProbeCount	- KeyUpTimer)]
		CMP	R0, #12
		BCS	loc_3C04
		BL	ProbeAtomizer
		MOVS	R0, #10
		BL	WaitOnTMR2
		B	loc_3BE8
@ ---------------------------------------------------------------------------

loc_3C02:				@ ...
		B	loc_3D2C
@ ---------------------------------------------------------------------------

loc_3C04:				@ ...
		LDRB.W	R0, [R8]
		CBZ	R0, loc_3C1E
		CMP	R0, #1
		BEQ	loc_3C18
		CMP	R0, #2
		BEQ	loc_3C24
		CMP	R0, #3
		BNE	loc_3C28
		B	loc_3C1E
@ ---------------------------------------------------------------------------

loc_3C18:				@ ...
		STRB.W	R11, [R6,#(Event - KeyUpTimer)]
		B	loc_3C28
@ ---------------------------------------------------------------------------

loc_3C1E:				@ ...
		MOVS	R0, #26
		B	loc_3C26
@ ---------------------------------------------------------------------------

loc_3C22:				@ ...
		B	loc_41F0
@ ---------------------------------------------------------------------------

loc_3C24:				@ ...
		MOVS	R0, #27

loc_3C26:				@ ...
		STRB	R0, [R6,#(Event	- KeyUpTimer)]

loc_3C28:				@ ...
		LDRB	R0, [R6,#(AtoError - KeyUpTimer)]
		MOV	R11, R6
		CMP	R0, #0
		BNE	loc_3D2C
		LDR	R0, =byte_200000B3
		LDRB	R1, [R0]
		CMP	R1, #1
		BNE	loc_3CC4
		STRB	R5, [R0]
		LDR	R0, =AtoRez
		MOV	R2, R9
		LDRH	R1, [R0]
		LDR	R0, =word_200000C0
		STRH	R1, [R0]
		LDRB.W	R0, [R9,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_3CA0
		CBZ	R0, loc_3CA6
		CMP	R0, #2
		BEQ	loc_3CAC
		CMP	R0, #3
		BEQ	loc_3CB4
		CMP	R0, #5
		BEQ	loc_3CBA
		CMP	R0, #4
		BEQ	loc_3CBA
		B	loc_3C9A
@ ---------------------------------------------------------------------------

loc_3C60:				@ ...
		B	loc_4458
@ ---------------------------------------------------------------------------

loc_3C62:				@ ...
		B	loc_445A
@ ---------------------------------------------------------------------------

loc_3C64:				@ ...
		B	loc_445C
@ ---------------------------------------------------------------------------

loc_3C66:				@ ...
		B	loc_445E
@ ---------------------------------------------------------------------------

loc_3C68:				@ ...
		B	loc_4460
@ ---------------------------------------------------------------------------

loc_3C6A:				@ ...
		B	loc_4258
@ ---------------------------------------------------------------------------

loc_3C6C:				@ ...
		B	loc_4462
@ ---------------------------------------------------------------------------

loc_3C6E:				@ ...
		B	loc_4464
@ ---------------------------------------------------------------------------

loc_3C70:				@ ...
		B	loc_4466
@ ---------------------------------------------------------------------------

loc_3C72:				@ ...
		B	loc_4468
@ ---------------------------------------------------------------------------

loc_3C74:				@ ...
		B	loc_446A
@ ---------------------------------------------------------------------------

loc_3C76:				@ ...
		B	loc_446C
@ ---------------------------------------------------------------------------

loc_3C78:				@ ...
		B	loc_446E
@ ---------------------------------------------------------------------------

loc_3C7A:				@ ...
		B	loc_4470
@ ---------------------------------------------------------------------------

loc_3C7C:				@ ...
		B	loc_4472
@ ---------------------------------------------------------------------------

loc_3C7E:				@ ...
		B	loc_4474
@ ---------------------------------------------------------------------------

loc_3C80:				@ ...
		B	loc_4476
@ ---------------------------------------------------------------------------

loc_3C82:				@ ...
		B	loc_4478
@ ---------------------------------------------------------------------------

loc_3C84:				@ ...
		B	loc_447A
@ ---------------------------------------------------------------------------

loc_3C86:				@ ...
		B	loc_447C
@ ---------------------------------------------------------------------------

loc_3C88:				@ ...
		B	loc_41FE
@ ---------------------------------------------------------------------------

loc_3C8A:				@ ...
		B	loc_447E
@ ---------------------------------------------------------------------------

loc_3C8C:				@ ...
		B	loc_4480
@ ---------------------------------------------------------------------------

loc_3C8E:				@ ...
		B	loc_4482
@ ---------------------------------------------------------------------------

loc_3C90:				@ ...
		B	loc_4484
@ ---------------------------------------------------------------------------

loc_3C92:				@ ...
		B	loc_4486
@ ---------------------------------------------------------------------------

loc_3C94:				@ ...
		B	loc_4488
@ ---------------------------------------------------------------------------

loc_3C96:				@ ...
		B	loc_448A
@ ---------------------------------------------------------------------------

loc_3C98:				@ ...
		B	loc_42C6
@ ---------------------------------------------------------------------------

loc_3C9A:				@ ...
		CMP	R0, #6
		BEQ	loc_3CBA
		B	loc_3CC4
@ ---------------------------------------------------------------------------

loc_3CA0:				@ ...
		LDRB.W	R0, [R2,#(dfRezLockedTI	- dfData)]
		B	loc_3CB8
@ ---------------------------------------------------------------------------

loc_3CA6:				@ ...
		LDRB.W	R0, [R2,#(dfRezLockedNI	- dfData)]
		B	loc_3CB8
@ ---------------------------------------------------------------------------

loc_3CAC:				@ ...
		LDRB.W	R0, [R2,#(dfRezLockedSS	- dfData)]
		B	loc_3CB8
@ ---------------------------------------------------------------------------

loc_3CB2:				@ ...
		B	loc_41E4
@ ---------------------------------------------------------------------------

loc_3CB4:				@ ...
		LDRB.W	R0, [R2,#(dfRezLockedTCR - dfData)]

loc_3CB8:				@ ...
		CBNZ	R0, loc_3CC4

loc_3CBA:				@ ...
		STRH.W	R1, [R9,#(dfResistance - dfData)]
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #50
		STRB	R0, [R1]

loc_3CC4:				@ ...
		LDR	R0, [R4]
		MOV.W	R2, #0x20
		LSLS	R1, R0,	#4
		BPL	loc_3D82
		LDRB.W	R1, [R9,#(dfMode - dfData)]
		MOV	R8, R9
		CMP	R1, #1
		BNE	loc_3D82
		BIC.W	R3, R0,	#0x8000000
		STR	R3, [R4]
		LDRH.W	R0, [R8,#(dfRezTI - dfData)]
		CBZ	R0, loc_3D52
		LDR	R1, =word_200000B8
		STRH	R0, [R1]
		LDR	R1, =word_200000C0
		LDRH	R1, [R1]
		CMP.W	R1, R0,LSL#1
		BHI	loc_3D74
		MOVS	R6, #20
		UDIV.W	R12, R0, R6
		ADD	R12, R0
		CMP	R12, R1
		BCS	loc_3D10
		ADD.W	R12, R0, #1
		CMP	R12, R1
		BCS	loc_3D10
		LDRB.W	R12, [R8,#(dfRezLockedTI - dfData)]
		CMP.W	R12, #0
		BEQ	loc_3D5E

loc_3D10:				@ ...
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3D20
		SUBS	R3, R0,	#1
		CMP	R3, R1
		BGT	loc_3D34

loc_3D20:				@ ...
		UDIV.W	R3, R0,	R6
		ADD	R3, R0
		CMP	R3, R1
		BCS	loc_3D4C
		B	loc_3D2E
@ ---------------------------------------------------------------------------

loc_3D2C:				@ ...
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_3D2E:				@ ...
		ADDS	R3, R0,	#1
		CMP	R3, R1
		BCS	loc_3D4C

loc_3D34:				@ ...
		LDRB.W	R3, [R8,#(dfRezLockedTI	- dfData)]
		CBZ	R3, loc_3D64
		MOVS	R3, #10
		UDIV.W	R3, R0,	R3
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3D4C
		SUBS	R3, R0,	#4
		CMP	R3, R1
		BGT	loc_3D64

loc_3D4C:				@ ...
		STRH.W	R0, [R9,#(dfResistance - dfData)]
		B	loc_3D7C
@ ---------------------------------------------------------------------------

loc_3D52:				@ ...
		B	loc_3D54
@ ---------------------------------------------------------------------------

loc_3D54:				@ ...
		LDRH.W	R0, [R8,#(dfResistance - dfData)]
		STRH.W	R0, [R9,#(dfRezTI - dfData)]
		B	loc_3D7C
@ ---------------------------------------------------------------------------

loc_3D5E:				@ ...
		ORR.W	R0, R3,	#0x8000000
		B	loc_3E58
@ ---------------------------------------------------------------------------

loc_3D64:				@ ...
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3D7C
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3D7C

loc_3D74:				@ ...
		STRH.W	R1, [R8,#(dfResistance - dfData)]
		STRH.W	R1, [R9,#(dfRezTI - dfData)]

loc_3D7C:				@ ...
		LDR	R0, =UpdateDFTimer
		MOVS	R1, #50
		STRB	R1, [R0]

loc_3D82:				@ ...
		LDR	R0, [R4]
		LSLS	R1, R0,	#3
		BPL	loc_3E82
		LDRB.W	R1, [R9,#(dfMode - dfData)]
		MOV	R8, R9
		CBNZ	R1, loc_3DDC
		BIC.W	R3, R0,	#0x10000000
		STR	R3, [R4]
		LDRH.W	R0, [R8,#(dfRezNI - dfData)]
		CBZ	R0, loc_3DDE
		LDR	R1, =word_200000BA
		ADD.W	R6, R0,	R0,LSL#1
		STRH	R0, [R1]
		LDR	R1, =word_200000C0
		LDRH	R1, [R1]
		CMP	R6, R1
		BCC	loc_3E74
		MOVS	R6, #20
		UDIV.W	R12, R0, R6
		ADD	R12, R0
		CMP	R12, R1
		BCS	loc_3DCA
		ADD.W	R12, R0, #1
		CMP	R12, R1
		BCS	loc_3DCA
		LDRB.W	R12, [R8,#(dfRezLockedNI - dfData)]
		CMP.W	R12, #0
		BEQ	loc_3E54

loc_3DCA:				@ ...
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3DDA
		SUBS	R3, R0,	#1
		CMP	R3, R1
		BGT	loc_3E2C

loc_3DDA:				@ ...
		B	loc_3E1C
@ ---------------------------------------------------------------------------

loc_3DDC:				@ ...
		B	loc_3E82
@ ---------------------------------------------------------------------------

loc_3DDE:				@ ...
		B	loc_3E4A
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ ---------------------------------------------------------------------------

loc_3E1C:				@ ...
		UDIV.W	R3, R0,	R6
		ADD	R3, R0
		CMP	R3, R1
		BCS	loc_3E44
		ADDS	R3, R0,	#1
		CMP	R3, R1
		BCS	loc_3E44

loc_3E2C:				@ ...
		LDRB.W	R3, [R8,#(dfRezLockedNI	- dfData)]
		CBZ	R3, loc_3E64
		MOVS	R3, #10
		UDIV.W	R3, R0,	R3
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3E44
		SUBS	R3, R0,	#4
		CMP	R3, R1
		BGT	loc_3E64

loc_3E44:				@ ...
		STRH.W	R0, [R9,#(dfResistance - dfData)]
		B	loc_3E7C
@ ---------------------------------------------------------------------------

loc_3E4A:				@ ...
		LDRH.W	R0, [R8,#(dfResistance - dfData)]
		STRH.W	R0, [R9,#(dfRezNI - dfData)]
		B	loc_3E7C
@ ---------------------------------------------------------------------------

loc_3E54:				@ ...
		ORR.W	R0, R3,	#0x10000000

loc_3E58:				@ ...
		STR	R0, [R4]

loc_3E5A:				@ ...
		STRB.W	R2, [R11,#(Event - KeyUpTimer)]

loc_3E5E:				@ ...
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,PC}
@ ---------------------------------------------------------------------------

loc_3E64:				@ ...
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3E7C
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3E7C

loc_3E74:				@ ...
		STRH.W	R1, [R8,#(dfResistance - dfData)]
		STRH.W	R1, [R9,#(dfRezNI - dfData)]

loc_3E7C:				@ ...
		LDR	R0, =UpdateDFTimer
		MOVS	R1, #50
		STRB	R1, [R0]

loc_3E82:				@ ...
		LDR	R0, =Flags64
		LDR	R0, [R0]
		CMP	R0, #0
		BGE	loc_3F40
		LDRB.W	R1, [R9,#(dfMode - dfData)]
		MOV	R6, R9
		CMP	R1, #2
		BNE	loc_3F40
		LDR.W	R8, =Flags64
		BIC.W	R3, R0,	#0x80000000
		STR.W	R3, [R8]
		LDRH.W	R0, [R6,#(dfRezSS - dfData)]
		CBZ	R0, loc_3F10
		LDR	R1, =word_200000BC
		ADD.W	R4, R0,	R0,LSL#1
		STRH	R0, [R1]
		LDR	R1, =word_200000C0
		LDRH	R1, [R1]
		CMP.W	R4, R1,LSL#1
		BCC	loc_3F34
		MOV.W	R12, #0x14
		UDIV.W	R4, R0,	R12
		ADD	R4, R0
		CMP	R4, R1
		BCS	loc_3ED2
		ADDS	R4, R0,	#1
		CMP	R4, R1
		BCS	loc_3ED2
		LDRB.W	R4, [R6,#(dfRezLockedSS	- dfData)]
		CBZ	R4, loc_3F1A

loc_3ED2:				@ ...
		UDIV.W	R3, R0,	R12
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3EE2
		SUBS	R3, R0,	#1
		CMP	R3, R1
		BGT	loc_3EF2

loc_3EE2:				@ ...
		UDIV.W	R3, R0,	R12
		ADD	R3, R0
		CMP	R3, R1
		BCS	loc_3F0A
		ADDS	R3, R0,	#1
		CMP	R3, R1
		BCS	loc_3F0A

loc_3EF2:				@ ...
		LDRB.W	R3, [R6,#(dfRezLockedSS	- dfData)]
		CBZ	R3, loc_3F24
		MOVS	R3, #0xA
		UDIV.W	R3, R0,	R3
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3F0A
		SUBS	R3, R0,	#4
		CMP	R3, R1
		BGT	loc_3F24

loc_3F0A:				@ ...
		STRH.W	R0, [R9,#(dfResistance - dfData)]
		B	loc_3F3A
@ ---------------------------------------------------------------------------

loc_3F10:				@ ...
		B	loc_3F12
@ ---------------------------------------------------------------------------

loc_3F12:				@ ...
		LDRH	R0, [R6,#(dfResistance - dfData)]
		STRH.W	R0, [R9,#(dfRezSS - dfData)]
		B	loc_3F3A
@ ---------------------------------------------------------------------------

loc_3F1A:				@ ...
		ORR.W	R0, R3,	#0x80000000
		STR.W	R0, [R8]
		B	loc_3E5A
@ ---------------------------------------------------------------------------

loc_3F24:				@ ...
		UDIV.W	R3, R0,	R12
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3F3A
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3F3A

loc_3F34:				@ ...
		STRH	R1, [R6,#(dfResistance - dfData)]
		STRH.W	R1, [R9,#(dfRezSS - dfData)]

loc_3F3A:				@ ...
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #0x32
		STRB	R0, [R1]

loc_3F40:				@ ...
		LDR.W	R12, =Flags64
		ADD.W	R12, R12, #4
		LDR.W	R0, [R12]
		LSLS	R1, R0,	#0x1E
		BPL	loc_4002
		LDRB.W	R1, [R9,#(dfMode - dfData)]
		MOV	R6, R9
		CMP	R1, #3
		BNE	loc_4002
		BIC.W	R3, R0,	#2
		STR.W	R3, [R12]
		LDRH.W	R0, [R6,#(dfRezTCR - dfData)]
		CBZ	R0, loc_3FD2
		LDR	R1, =word_200000BE
		ADD.W	R4, R0,	R0,LSL#1
		STRH	R0, [R1]
		LDR	R1, =word_200000C0
		LDRH	R1, [R1]
		CMP.W	R4, R1,LSL#1
		BCC	loc_3FF6
		MOV.W	R8, #0x14
		UDIV.W	R4, R0,	R8
		ADD	R4, R0
		CMP	R4, R1
		BCS	loc_3F94
		ADDS	R4, R0,	#1
		CMP	R4, R1
		BCS	loc_3F94
		LDRB.W	R4, [R6,#(dfRezLockedTCR - dfData)]
		CBZ	R4, loc_3FDC

loc_3F94:				@ ...
		UDIV.W	R2, R0,	R8
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3FA4
		SUBS	R2, R0,	#1
		CMP	R2, R1
		BGT	loc_3FB4

loc_3FA4:				@ ...
		UDIV.W	R2, R0,	R8
		ADD	R2, R0
		CMP	R2, R1
		BCS	loc_3FCC
		ADDS	R2, R0,	#1
		CMP	R2, R1
		BCS	loc_3FCC

loc_3FB4:				@ ...
		LDRB.W	R2, [R6,#(dfRezLockedTCR - dfData)]
		CBZ	R2, loc_3FE6
		MOVS	R2, #0xA
		UDIV.W	R2, R0,	R2
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3FCC
		SUBS	R2, R0,	#4
		CMP	R2, R1
		BGT	loc_3FE6

loc_3FCC:				@ ...
		STRH.W	R0, [R9,#(dfResistance - dfData)]
		B	loc_3FFC
@ ---------------------------------------------------------------------------

loc_3FD2:				@ ...
		B	loc_3FD4
@ ---------------------------------------------------------------------------

loc_3FD4:				@ ...
		LDRH	R0, [R6,#(dfResistance - dfData)]
		STRH.W	R0, [R9,#(dfRezTCR - dfData)]
		B	loc_3FFC
@ ---------------------------------------------------------------------------

loc_3FDC:				@ ...
		ORR.W	R0, R3,	#2
		STR.W	R0, [R12]
		B	loc_3E5A
@ ---------------------------------------------------------------------------

loc_3FE6:				@ ...
		UDIV.W	R2, R0,	R8
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3FFC
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3FFC

loc_3FF6:				@ ...
		STRH	R1, [R6,#(dfResistance - dfData)]
		STRH.W	R1, [R9,#(dfRezTCR - dfData)]

loc_3FFC:				@ ...
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #0x32
		STRB	R0, [R1]

loc_4002:				@ ...
		MOVS	R2, #1
		MOVS	R1, #0x80
		LDR	R0, =0x400040C0
		BL	GPIO_SetMode
		LDR	R1, =0x400048DC
		MOVS	R0, #0
		STR	R0, [R1]
		LDR.W	R8, =Flags64
		MOV	R5, R11
		LDR.W	R1, [R8]
		ORR.W	R1, R1,	#0x100
		STR.W	R1, [R8]
		LDRB.W	R0, [R11,#(byte_20000048 - KeyUpTimer)]
		CMP	R0, #1
		BNE	loc_4030
		MOVS	R0, #2
		STRB	R0, [R5,#(byte_20000048	- KeyUpTimer)]

loc_4030:				@ ...
		LDRB.W	R0, [R9,#(dfTempAlgo - dfData)]
		MOV	R4, R9
		CMP	R0, #1
		BEQ	loc_404A
		CMP	R0, #2
		BEQ	loc_404E
		LDR	R1, =TCR
		CMP	R0, #3
		BEQ	loc_4058
		CMP	R0, #4
		BEQ	loc_405C
		B	loc_406A
@ ---------------------------------------------------------------------------

loc_404A:				@ ...
		LDR	R0, =dfTempCoefsNI
		B	loc_4052
@ ---------------------------------------------------------------------------

loc_404E:				@ ...
		LDR	R0, =dfTempCoefsNI
		ADDS	R0, #0x2A

loc_4052:				@ ...
		BL	GetTempCoef
		B	loc_406A
@ ---------------------------------------------------------------------------

loc_4058:				@ ...
		MOVS	R0, #120
		B	loc_4068
@ ---------------------------------------------------------------------------

loc_405C:				@ ...
		LDRB.W	R0, [R4,#(dfTCRIndex - dfData)]
		ADD.W	R0, R4,	R0,LSL#1
		LDRH.W	R0, [R0,#(dfTCRM1 - dfData)]

loc_4068:				@ ...
		STRH	R0, [R1]

loc_406A:				@ ...
		LDR	R6, =TargetVolts
		LDR	R1, =PowerScale
		MOV.W	R9, #100
		STR.W	R9, [R6]
		STR.W	R9, [R1]
		LDRB	R0, [R4,#(dfMode - dfData)]
		MOV.W	R11, #400
		CMP	R0, #1
		BEQ	loc_408E
		CBZ	R0, loc_408E
		CMP	R0, #2
		BEQ	loc_408E
		CMP	R0, #3
		BNE	loc_40A6

loc_408E:				@ ...
		LDRH	R0, [R4,#(dfResistance - dfData)]
		CMP	R0, #150
		BHI	loc_40A2
		LDRB	R0, [R4,#(dfRezType	- dfData)]
		CMP	R0, #1
		BNE	loc_40A6
		LDR.W	R0, [R8]
		LSLS	R0, R0,	#8
		BMI	loc_40AE

loc_40A2:				@ ...
		MOVS	R0, #4
		STRB	R0, [R4,#(dfMode - dfData)]

loc_40A6:				@ ...
		LDR.W	R0, [R8]
		LSLS	R0, R0,	#8
		BPL	loc_40DC

loc_40AE:				@ ...
		LDRB	R0, [R4,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_40BE
		CBZ	R0, loc_40BE
		CMP	R0, #2
		BEQ	loc_40BE
		CMP	R0, #3
		BNE	loc_40EC

loc_40BE:				@ ...
		LDRH	R0, [R4,#(dfTCPower - dfData)]
		MOV.W	R1, #300
		CMP	R0, R1
		BCS	loc_40CC
		MOV	R0, R1
		B	loc_40D2
@ ---------------------------------------------------------------------------

loc_40CC:				@ ...
		CMP	R0, R11
		BLS	loc_40D2
		MOV	R0, R11

loc_40D2:				@ ...
		BL	AtoPowerLimit
		BL	GetVoltsForPower
		B	loc_4128
@ ---------------------------------------------------------------------------

loc_40DC:				@ ...
		LDRB	R0, [R4,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_40FC
		CBZ	R0, loc_40FC
		CMP	R0, #2
		BEQ	loc_40FC
		CMP	R0, #3
		BEQ	loc_40FC

loc_40EC:				@ ...
		UXTB	R0, R0
		CMP	R0, #4
		BEQ	loc_412C
		CMP	R0, #6
		BEQ	loc_412C
		CMP	R0, #5
		BEQ	loc_418A
		B	loc_41A2
@ ---------------------------------------------------------------------------

loc_40FC:				@ ...
		LDRB	R0, [R4,#(dfIsCelsius -	dfData)]
		CMP	R0, #1
		LDRH	R0, [R4,#(dfTemp - dfData)]
		BNE	loc_4108
		BL	CelsiusToF

loc_4108:				@ ...
		MOVS	R1, #100
		SUBS	R0, #200
		MULS	R0, R1
		SDIV.W	R0, R0,	R11
		UXTB	R0, R0
		MOV.W	R1, #300
		SMULBB.W R1, R0, R1
		UDIV.W	R0, R1,	R9
		ADDS	R0, #100
		UXTB	R0, R0
		BL	GetAtoVWVolts

loc_4128:				@ ...
		STR	R0, [R6]
		B	loc_417A
@ ---------------------------------------------------------------------------

loc_412C:				@ ...
		MOV.W	R0, #300
		CMP	R7, R0
		BLS	loc_413A
		BL	GetVoltsForPower
		B	loc_413C
@ ---------------------------------------------------------------------------

loc_413A:				@ ...
		LDRH	R0, [R4,#(dfVWVolts - dfData)]

loc_413C:				@ ...
		STR	R0, [R6]
		LDR.W	R0, [R8]
		CMP.W	R7, #600
		BIC.W	R0, R0,	#0x20000000
		STR.W	R0, [R8]
		BLS	loc_416C
		LDRH	R2, [R5,#(BatteryVoltage - KeyUpTimer)]
		CMP.W	R2, #340
		BHI	loc_416C
		ORR.W	R0, R0,	#0x20000000
		STR.W	R0, [R8]
		MOVW	R0, #60000
		UDIV.W	R1, R0,	R7
		LDR	R0, =PowerScale
		STR	R1, [R0]

loc_416C:				@ ...
		LDRH	R0, [R5,#(BatteryVoltage - KeyUpTimer)]
		LDR	R1, =LowBatVolts
		CMP.W	R0, #380
		BLS	loc_4178
		MOVS	R0, #0

loc_4178:				@ ...
		STRH	R0, [R1]

loc_417A:				@ ...
		LDRB	R0, [R4,#(dfMode - dfData)]
		CMP	R0, #4
		BEQ	loc_4190
		CMP	R0, #5
		BEQ	loc_4190
		CMP	R0, #6
		BEQ	loc_4190
		B	loc_41A2
@ ---------------------------------------------------------------------------

loc_418A:				@ ...
		MOV.W	R0, #450
		STR	R0, [R6]

loc_4190:				@ ...
		LDR	R0, =AtoRez
		LDRH	R0, [R0]
		CMP	R0, #10
		BCS	loc_41A2
		BL	StopFire
		MOVS	R0, #27
		STRB	R0, [R5,#(Event	- KeyUpTimer)]

loc_41A0:				@ ...
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_41A2:				@ ...
		LDR	R0, =BBCNextMode
		MOVS	R6, #2
		LDR	R1, =BBCMode
		STRB	R6, [R0]
		MOVS	R0, #0
		STRB	R0, [R1]
		MOVS	R1, #1
		MOV	R0, R1
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #2
		BL	SetADCState
		BL	ReachTargetVoltage
		LDRH.W	R0, [R8]
		MOV	R4, R8
		LSLS	R0, R0,	#23
		BPL	loc_41D2
		LDRB	R0, [R5,#(LastInputs - KeyUpTimer)]
		CMP	R0, #1
		BEQ	loc_41D6

loc_41D2:				@ ...
		BL	StopFire

loc_41D6:				@ ...
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		LDR	R0, =Screen
		STRB	R6, [R0]
		B	loc_4984
@ ---------------------------------------------------------------------------

loc_41E4:				@ ...
		MOVS	R0, #28
		STRB	R0, [R6,#(Event	- KeyUpTimer)]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x200
		B	loc_48C6
@ ---------------------------------------------------------------------------

loc_41F0:				@ ...
		LDR	R0, =Flags64
		SUBS	R0, #(Flags64 - KeyPressTime)
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]

loc_41FC:				@ ...
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_41FE:				@ ...
		LSLS	R0, R1,	#0x1F
		BNE	loc_41A0
		MOVS.W	R0, R11,LSL#23
		BMI	loc_41A0
		MOV	R6, R9
		CMP	R2, #82
		BNE	loc_4212
		BL	UpdateDataFlash

loc_4212:				@ ...
		LDRB	R0, [R6]
		CMP	R0, #83
		BNE	loc_421C
		BL	UpdateDataFlash

loc_421C:				@ ...
		LDR	R0, [R4]
		LSLS	R1, R0,	#20
		BPL	loc_4230
		BIC.W	R0, R0,	#0x800
		ORR.W	R0, R0,	#0x8000
		STR	R0, [R4]
		BL	ReadBatteryVoltage

loc_4230:				@ ...
		LDR	R0, =Flags64
		SUBS	R0, #(Flags64 -	KeyUpTimer)
		LDRH	R1, [R0,#(EditModeTimer	- KeyUpTimer)]
		CBZ	R1, loc_4252
		STRH	R5, [R0,#(EditModeTimer	- KeyUpTimer)]
		ADDS	R0, #(Flags68 -	KeyUpTimer)
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x10
		STR	R1, [R0]
		LDR	R0, [R4]
		LDR	R1, =UpdateDFTimer
		ORR.W	R0, R0,	#0x40000
		STR	R0, [R4]
		MOVS	R0, #50
		STRB	R0, [R1]

loc_4252:				@ ...
		BL	MainView
		B	loc_48A0
@ ---------------------------------------------------------------------------

loc_4258:				@ ...
		LDR	R0, =dfTempCoefsNI
		SUBS	R0, #(dfTempCoefsNI - dfData)
		LSLS	R1, R1,	#31
		BEQ	loc_41A0
		LDRB.W	R1, [R0,#(dfTiOn - dfData)]
		CBZ	R1, loc_42AE
		STRB.W	R5, [R0,#(dfTiOn - dfData)]
		B	loc_42B4
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ ---------------------------------------------------------------------------

loc_42AC:				@ ...
		B	loc_49EC
@ ---------------------------------------------------------------------------

loc_42AE:				@ ...
		MOVS	R1, #1
		STRB.W	R1, [R0,#(dfTiOn - dfData)]

loc_42B4:				@ ...
		MOVS	R1, #41
		STR.W	R12, [R4]
		STRB.W	R1, [R9]
		MOVS	R1, #3
		STRB.W	R1, [R10]

loc_42C4:				@ ...
		B	loc_4578
@ ---------------------------------------------------------------------------

loc_42C6:				@ ...
		LDR	R6, =dfData
		LSLS	R1, R1,	#31
		BEQ	loc_4310
		CMP	R2, #59
		BNE	loc_41FC
		LDR	R0, [SP,#0x44+var_38]
		LSLS	R0, R0,	#31
		BEQ	loc_42FA
		LDR	R1, [SP,#0x44+var_34]
		LDR	R0, =KeyUpTimer
		CMP	R1, #3
		BCC	loc_42E0
		STRB	R5, [R0,#(EditTCRIndex - KeyUpTimer)]

loc_42E0:				@ ...
		LDRB	R0, [R0,#(EditTCRIndex - KeyUpTimer)]
		MOVW	R2, #999
		ADD.W	R1, R6,	R0,LSL#1
		LDRH.W	R0, [R1,#(dfTCRM1 - dfData)]
		CMP	R0, R2
		BCS	loc_430A
		B	loc_42F6
@ ---------------------------------------------------------------------------

loc_42F4:				@ ...
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_42F6:				@ ...
		ADDS	R0, R0,	#1
		B	loc_45AC
@ ---------------------------------------------------------------------------

loc_42FA:				@ ...
		LDR	R0, [SP,#0x44+var_34]
		LDR	R1, =KeyUpTimer
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R1,#(EditTCRIndex - KeyUpTimer)]
		CMP	R0, #3
		BCC	loc_430A
		STRB	R5, [R1,#(EditTCRIndex - KeyUpTimer)]

loc_430A:				@ ...
		STR.W	R12, [R4]
		B	loc_4AF8
@ ---------------------------------------------------------------------------

loc_4310:				@ ...
		CMP	R2, #80
		BCC	loc_4330
		LDR	R7, =MenuPage
		LDRB	R1, [R7]
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		STRB	R1, [R7]
		CMP	R1, #3
		BCC	loc_4328
		MOVS	R0, #1
		STRB	R0, [R7]
		B	loc_4356
@ ---------------------------------------------------------------------------

loc_4328:				@ ...
		CMP	R1, #1
		BEQ	loc_4356
		CMP	R1, #2
		BEQ	loc_435A

loc_4330:				@ ...
		LDR.W	R9, =KeyUpTimer
		MOVS	R7, #5
		STRB.W	R7, [R9]
		LDR	R1, [SP,#0x44+var_8]
		CBZ	R1, loc_43A2
		MOV.W	R2, #1000
		STRH.W	R2, [R9,#(EditModeTimer	- KeyUpTimer)]
		CBZ	R3, loc_4362
		CMP	R3, #1
		BEQ	loc_4368
		CMP	R3, #2
		BEQ	loc_43C4
		CMP	R3, #3
		BEQ	loc_4416
		B	loc_4376
@ ---------------------------------------------------------------------------

loc_4356:				@ ...
		MOVS	R1, #40
		B	loc_435C
@ ---------------------------------------------------------------------------

loc_435A:				@ ...
		MOVS	R1, #41

loc_435C:				@ ...
		LDR	R0, =KeyUpTimer
		STRB	R1, [R0,#(Event	- KeyUpTimer)]
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_4362:				@ ...
		BL	NextMode
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4368:				@ ...
		CMP	R0, #3
		BEQ	loc_438C
		CBZ	R0, loc_43A4
		CMP	R0, #1
		BEQ	loc_43A4
		CMP	R0, #2
		BEQ	loc_43A4

loc_4376:				@ ...
		LDR	R0, =dfData
		LDRB	R0, [R0,#(dfAPT	- dfData)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP.W	LR, #0
		BEQ	loc_441C
		CMP.W	LR, #2
		BEQ	loc_4428
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_438C:				@ ...
		LDRB.W	R0, [R6,#(dfTCRIndex - dfData)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R0, [R6,#(dfTCRIndex - dfData)]
		CMP	R0, #3
		BCC	loc_43A0
		STRB.W	R5, [R6,#(dfTCRIndex - dfData)]

loc_43A0:				@ ...
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_43A2:				@ ...
		B	loc_4436
@ ---------------------------------------------------------------------------

loc_43A4:				@ ...
		LDRB.W	R0, [R6,#(dfLastTCMode - dfData)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R0, [R6,#(dfLastTCMode - dfData)]
		CMP	R0, #2
		BLS	loc_43B8
		STRB.W	R5, [R6,#(dfLastTCMode - dfData)]

loc_43B8:				@ ...
		LDRB.W	R0, [R6,#(dfLastTCMode - dfData)]
		STRB	R0, [R6,#(dfMode - dfData)]
		BL	ModeChange
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_43C4:				@ ...
		LDRD.W	R0, R1,	[SP]
		CMP	R0, R1
		BCS	loc_4412
		LDR	R0, [SP,#0x44+var_2C]
		CMP	R0, #105
		BCC	loc_440C
		LDR	R1, [SP,#0x44+var_44]
		MOVS	R0, #10
		UDIV.W	R2, R1,	R0
		MLS.W	R1, R0,	R2, R1
		CBZ	R1, loc_43F4
		LDR	R1, [SP,#0x44+var_44]
		UDIV.W	R0, R1,	R0
		ADD.W	R1, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R1,LSL#1
		STRH	R0, [R6,#(dfTCPower - dfData)]

loc_43F4:				@ ...
		LDRH	R0, [R6,#(dfTCPower - dfData)]
		ADDS	R0, #0xA

loc_43F8:				@ ...
		STRH	R0, [R6,#(dfTCPower - dfData)]
		LDR	R0, =KeyUpTimer
		LDR	R1, [SP,#0x44+var_38]
		ADDS	R0, #(Flags68 - KeyUpTimer)
		ORR.W	R1, R1,	#0x10
		STR	R1, [R0]
		BL	MainView
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_440C:				@ ...
		LDR	R0, [SP,#0x44+var_44]
		ADDS	R0, R0,	#1
		B	loc_43F8
@ ---------------------------------------------------------------------------

loc_4412:				@ ...
		MOVS	R0, #10
		B	loc_43F8
@ ---------------------------------------------------------------------------

loc_4416:				@ ...
		BL	SwitchRezLock
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_441C:				@ ...
		CMP	R3, #6
		BNE	loc_4426
		STRB	R0, [R6,#(dfAPT	- dfData)]
		CMP	R0, #4
		BCS	loc_4432

loc_4426:				@ ...
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4428:				@ ...
		CMP	R3, #4
		BNE	loc_4434
		STRB	R0, [R6,#(dfAPT	- dfData)]
		CMP	R0, #3
		BCC	loc_4434

loc_4432:				@ ...
		STRB	R5, [R6,#(dfAPT	- dfData)]

loc_4434:				@ ...
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4436:				@ ...
		CMP	R2, #51
		BEQ	loc_448C
		LDR	R1, =KeyUpTimer
		CMP	R0, #4
		LDR	R2, [R1,#(AtoMaxPower -	KeyUpTimer)]
		UXTH	R1, R2
		BEQ	loc_44BC
		CMP	R0, #6
		BEQ	loc_44FC
		CMP	R0, #1
		BEQ	loc_44AE
		CBZ	R0, loc_44AE
		CMP	R0, #2
		BEQ	loc_4550
		CMP	R0, #3
		BEQ	loc_4550
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4458:				@ ...
		B	loc_4A1C
@ ---------------------------------------------------------------------------

loc_445A:				@ ...
		B	loc_4A10
@ ---------------------------------------------------------------------------

loc_445C:				@ ...
		B	loc_4ADE
@ ---------------------------------------------------------------------------

loc_445E:				@ ...
		B	loc_4AB0
@ ---------------------------------------------------------------------------

loc_4460:				@ ...
		B	loc_4AA4
@ ---------------------------------------------------------------------------

loc_4462:				@ ...
		B	loc_49A2
@ ---------------------------------------------------------------------------

loc_4464:				@ ...
		B	loc_4B20
@ ---------------------------------------------------------------------------

loc_4466:				@ ...
		B	loc_4A58
@ ---------------------------------------------------------------------------

loc_4468:				@ ...
		B	loc_4B10
@ ---------------------------------------------------------------------------

loc_446A:				@ ...
		B	loc_48D4
@ ---------------------------------------------------------------------------

loc_446C:				@ ...
		B	loc_4988
@ ---------------------------------------------------------------------------

loc_446E:				@ ...
		B	loc_48F0
@ ---------------------------------------------------------------------------

loc_4470:				@ ...
		B	loc_497A
@ ---------------------------------------------------------------------------

loc_4472:				@ ...
		B	loc_4904
@ ---------------------------------------------------------------------------

loc_4474:				@ ...
		B	loc_49D8
@ ---------------------------------------------------------------------------

loc_4476:				@ ...
		B	loc_49D0
@ ---------------------------------------------------------------------------

loc_4478:				@ ...
		B	loc_4A6A
@ ---------------------------------------------------------------------------

loc_447A:				@ ...
		B	loc_4922
@ ---------------------------------------------------------------------------

loc_447C:				@ ...
		B	loc_49B2
@ ---------------------------------------------------------------------------

loc_447E:				@ ...
		B	loc_48A8
@ ---------------------------------------------------------------------------

loc_4480:				@ ...
		B	loc_487E
@ ---------------------------------------------------------------------------

loc_4482:				@ ...
		B	loc_4854
@ ---------------------------------------------------------------------------

loc_4484:				@ ...
		B	loc_4848
@ ---------------------------------------------------------------------------

loc_4486:				@ ...
		B	loc_49F2
@ ---------------------------------------------------------------------------

loc_4488:				@ ...
		B	loc_4A28
@ ---------------------------------------------------------------------------

loc_448A:				@ ...
		B	loc_4580
@ ---------------------------------------------------------------------------

loc_448C:				@ ...
		LDR	R1, =word_200000C0
		CMP	R0, #1
		LDRH	R1, [R1]
		STRH	R1, [R6,#(dfResistance - dfData)]
		BEQ	loc_44A2
		CBZ	R0, loc_44A6
		CMP	R0, #2
		BEQ	loc_44B0
		CMP	R0, #3
		BEQ	loc_44B6
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_44A2:				@ ...
		STRH	R1, [R6,#(dfRezTI - dfData)]
		B	loc_474C
@ ---------------------------------------------------------------------------

loc_44A6:				@ ...
		STRH	R1, [R6,#(dfRezNI - dfData)]
		B	loc_4754
@ ---------------------------------------------------------------------------

loc_44AA:				@ ...
		STR	R0, [R4]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_44AE:				@ ...
		B	loc_4550
@ ---------------------------------------------------------------------------

loc_44B0:				@ ...
		STRH.W	R1, [R6,#(dfRezSS - dfData)]
		B	loc_475E
@ ---------------------------------------------------------------------------

loc_44B6:				@ ...
		STRH.W	R1, [R6,#(dfRezTCR - dfData)]
		B	loc_4768
@ ---------------------------------------------------------------------------

loc_44BC:				@ ...
		LDR	R0, [SP,#0x44+var_2C]
		CMP	R0, #105
		BCC	loc_44F6
		LDR	R3, [SP,#0x44+var_3C]
		MOVS	R0, #10
		UDIV.W	R4, R3,	R0
		MLS.W	R3, R0,	R4, R3
		CBZ	R3, loc_44E4
		LDR	R3, [SP,#0x44+var_3C]
		UDIV.W	R0, R3,	R0
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH	R0, [R6,#(dfPower - dfData)]

loc_44E4:				@ ...
		LDRH	R0, [R6,#(dfPower - dfData)]
		ADDS	R0, #10

loc_44E8:				@ ...
		STRH	R0, [R6,#(dfPower - dfData)]
		UXTH	R0, R0
		CMP	R0, R2
		BLS	loc_44F2
		STRH	R1, [R6,#(dfPower - dfData)]

loc_44F2:				@ ...
		LDRH	R0, [R6,#(dfPower - dfData)]
		B	loc_4548
@ ---------------------------------------------------------------------------

loc_44F6:				@ ...
		LDR	R0, [SP,#0x44+var_3C]
		ADDS	R0, R0,	#1
		B	loc_44E8
@ ---------------------------------------------------------------------------

loc_44FC:				@ ...
		LDR	R0, [SP,#0x44+var_24]
		CMP	R0, #10
		BCS	loc_4544
		LDRB.W	R0, [R9,#(AtoError - KeyUpTimer)]
		CBNZ	R0, loc_4544
		LDR	R0, =AtoRez
		LDRH	R0, [R0]
		CBZ	R0, loc_4544
		LDRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]
		MOVS	R3, #10
		UDIV.W	R4, R0,	R3
		MLS.W	R4, R3,	R4, R0
		CBZ	R4, loc_4532
		UDIV.W	R0, R0,	R3
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]

loc_4532:				@ ...
		UXTH	R0, R0
		ADDS	R0, #10
		UXTH	R0, R0
		STRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]
		CMP	R0, R2
		BLS	loc_4544
		STRH.W	R1, [R8,#(dfSavedCfgPwr	- dfData)]

loc_4544:				@ ...
		LDRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]

loc_4548:				@ ...
		BL	GetAtoVWVolts
		STRH	R0, [R6,#(dfVWVolts - dfData)]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4550:				@ ...
		LDR	R0, [SP,#0x44+var_1C]
		CMP	R0, #0
		LDR	R0, [SP,#0x44+var_30]
		BEQ	loc_4566
		ADDS	R0, R0,	#5
		CMP.W	R0, #316
		BCC	loc_4574
		STRB	R5, [R6,#(dfIsCelsius -	dfData)]
		MOVS	R0, #200
		B	loc_4574
@ ---------------------------------------------------------------------------

loc_4566:				@ ...
		ADDS	R0, #10
		CMP.W	R0, #600
		BLS	loc_4574
		MOVS	R0, #1
		STRB	R0, [R6,#(dfIsCelsius -	dfData)]
		MOVS	R0, #100

loc_4574:				@ ...
		STRH	R0, [R6,#(dfTemp - dfData)]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4578:				@ ...
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #50
		STRB	R0, [R1]

loc_457E:				@ ...
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_4580:				@ ...
		LDR	R7, =dfData
		LSLS	R6, R1,	#31
		BEQ	loc_45BE
		CMP	R2, #59
		BNE	loc_457E
		LDR	R0, [SP,#0x44+var_38]
		LDR	R1, [SP,#0x44+var_34]
		LSLS	R0, R0,	#31
		LDR	R0, =KeyUpTimer
		BEQ	loc_45B2
		CMP	R1, #3
		BCC	loc_459A
		STRB	R5, [R0,#(EditTCRIndex - KeyUpTimer)]

loc_459A:				@ ...
		LDRB	R0, [R0,#(EditTCRIndex - KeyUpTimer)]
		ADD.W	R1, R7,	R0,LSL#1
		LDRH.W	R0, [R1,#(dfTCRM1 - dfData)]
		CMP	R0, #1
		BLS.W	loc_430A
		SUBS	R0, R0,	#1

loc_45AC:				@ ...
		STRH.W	R0, [R1,#(dfTCRM1 - dfData)]

loc_45B0:				@ ...
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_45B2:				@ ...
		CBZ	R1, loc_45B8
		SUBS	R1, R1,	#1
		B	loc_45BA
@ ---------------------------------------------------------------------------

loc_45B8:				@ ...
		MOVS	R1, #2

loc_45BA:				@ ...
		STRB	R1, [R0,#(EditTCRIndex - KeyUpTimer)]
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_45BE:				@ ...
		CMP	R2, #82
		BEQ	loc_45E4
		CMP	R2, #83
		BEQ	loc_45F6
		LDR.W	R9, =KeyUpTimer
		MOVS	R6, #5
		STRB.W	R6, [R9]
		LDR	R1, [SP,#0x44+var_8]
		CBZ	R1, loc_464A
		MOV.W	R2, #1000
		LDR	R6, =EditItemIndex
		STRH.W	R2, [R9,#(EditModeTimer	- KeyUpTimer)]
		CMP	R3, #2
		BEQ	loc_460C
		B	loc_466E
@ ---------------------------------------------------------------------------

loc_45E4:				@ ...
		LSLS	R0, R1,	#28
		BMI	loc_45EE
		ORR.W	R0, R1,	#8
		B	loc_45F2
@ ---------------------------------------------------------------------------

loc_45EE:				@ ...
		BIC.W	R0, R1,	#8

loc_45F2:				@ ...
		STR	R0, [R7,#(dfStatus - dfData)]
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_45F6:				@ ...
		LDRB.W	R0, [R7,#(dfFBSpeed - dfData)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R0, [R7,#(dfFBSpeed - dfData)]
		CMP	R0, #3
		BLS	loc_45B0
		STRB.W	R5, [R7,#(dfFBSpeed - dfData)]
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_460C:				@ ...
		LDR	R1, [SP,#0x44+var_38]
		LSLS	R1, R1,	#27
		BPL	loc_466E
		LDR	R0, [SP,#0x44+var_44]
		CMP	R0, #10
		BLS	loc_466A
		LDR	R0, [SP,#0x44+var_2C]
		CMP	R0, #105
		BCC	loc_464C
		LDR	R1, [SP,#0x44+var_44]
		MOVS	R0, #10
		UDIV.W	R2, R1,	R0
		MLS.W	R1, R0,	R2, R1
		CBZ	R1, loc_4644
		LDR	R1, [SP,#0x44+var_44]
		UDIV.W	R0, R1,	R0
		ADD.W	R1, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R1,LSL#1
		STRH	R0, [R7,#(dfTCPower - dfData)]
		CMP	R0, #10
		BLS	loc_4652

loc_4644:				@ ...
		LDRH	R0, [R7,#(dfTCPower - dfData)]
		SUBS	R0, #10
		B	loc_4650
@ ---------------------------------------------------------------------------

loc_464A:				@ ...
		B	loc_4716
@ ---------------------------------------------------------------------------

loc_464C:				@ ...
		LDR	R0, [SP,#0x44+var_44]
		SUBS	R0, R0,	#1

loc_4650:				@ ...
		STRH	R0, [R7,#(dfTCPower - dfData)]

loc_4652:				@ ...
		LDR	R0, [SP,#0x44+var_28]
		STR	R0, [R4]
		BL	MainView
		LDRB.W	R0, [R7,#(dfUIVersion -	dfData)]
		CBZ	R0, loc_46C8
		CMP	R0, #1
		BEQ	loc_46E2
		CMP	R0, #2
		BEQ	loc_470E
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_466A:				@ ...
		LDR	R0, [SP,#0x44+var_40]
		B	loc_4650
@ ---------------------------------------------------------------------------

loc_466E:				@ ...
		LDR	R1, =EditItemIndex
		MOVS	R2, #6
		LDRB	R1, [R1]
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		CMP	R0, #1
		BEQ	loc_4698
		CBZ	R0, loc_4698
		CMP	R0, #2
		BEQ	loc_4698
		CMP	R0, #3
		BEQ	loc_4698
		SUBS.W	R4, LR,	#0
		BEQ	loc_46F4
		CMP.W	LR, #1
		BEQ	loc_46FA
		CMP	R4, #2
		BEQ	loc_46FE
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4698:				@ ...
		CMP.W	LR, #0
		BEQ	loc_46CA
		CMP.W	LR, #1
		BEQ	loc_46DC
		CMP.W	LR, #2
		BEQ	loc_46EE
		B	loc_4834
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ ---------------------------------------------------------------------------

loc_46C8:				@ ...
		B	loc_46D4
@ ---------------------------------------------------------------------------

loc_46CA:				@ ...
		CMP	R3, #3
		BEQ	loc_46F6
		CMP	R3, #6
		BCS	loc_470A
		STRB	R1, [R6]

loc_46D4:				@ ...
		LDRB	R0, [R6]
		CMP	R0, #6
		BHI	loc_470A
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_46DC:				@ ...
		CMP	R3, #5
		BCS	loc_470A
		STRB	R1, [R6]

loc_46E2:				@ ...
		LDRB	R0, [R6]
		CMP	R0, #5
		BHI	loc_470A
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_46EA:				@ ...
		STRB	R1, [R6]
		B	loc_470E
@ ---------------------------------------------------------------------------

loc_46EE:				@ ...
		CMP	R3, #4
		BCS	loc_470A
		B	loc_46EA
@ ---------------------------------------------------------------------------

loc_46F4:				@ ...
		CBNZ	R3, loc_470A

loc_46F6:				@ ...
		STRB	R2, [R6]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_46FA:				@ ...
		CBZ	R3, loc_4704
		B	loc_46DC
@ ---------------------------------------------------------------------------

loc_46FE:				@ ...
		CMP	R0, #6
		BEQ	loc_470E
		CBNZ	R3, loc_470A

loc_4704:				@ ...
		MOVS	R0, #4
		STRB	R0, [R6]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_470A:				@ ...
		STRB	R5, [R6]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_470E:				@ ...
		LDRB	R0, [R6]
		CMP	R0, #4
		BHI	loc_470A
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4716:				@ ...
		CMP	R2, #51
		BEQ	loc_4738
		LDR	R1, =KeyUpTimer
		CMP	R0, #4
		LDR	R2, [R1,#(AtoMinPower -	KeyUpTimer)]
		UXTH	R1, R2
		BEQ	loc_4772
		CMP	R0, #6
		BEQ	loc_47BA
		CMP	R0, #1
		BEQ	loc_480E
		CBZ	R0, loc_47A4
		CMP	R0, #2
		BEQ	loc_480E
		CMP	R0, #3
		BEQ	loc_480E
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4738:				@ ...
		CMP	R0, #1
		BEQ	loc_4748
		CBZ	R0, loc_4750
		CMP	R0, #2
		BEQ	loc_4758
		CMP	R0, #3
		BEQ	loc_4762
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4748:				@ ...
		LDRH	R0, [R7,#(dfRezTI - dfData)]
		STRH	R0, [R7,#(dfResistance - dfData)]

loc_474C:				@ ...
		LDR	R0, [SP,#0x44+var_C]
		B	loc_44AA
@ ---------------------------------------------------------------------------

loc_4750:				@ ...
		LDRH	R0, [R7,#(dfRezNI - dfData)]
		STRH	R0, [R7,#(dfResistance - dfData)]

loc_4754:				@ ...
		LDR	R0, [SP,#0x44+var_10]
		B	loc_44AA
@ ---------------------------------------------------------------------------

loc_4758:				@ ...
		LDRH.W	R0, [R7,#(dfRezSS - dfData)]
		STRH	R0, [R7,#(dfResistance - dfData)]

loc_475E:				@ ...
		LDR	R0, [SP,#0x44+var_14]
		B	loc_44AA
@ ---------------------------------------------------------------------------

loc_4762:				@ ...
		LDRH.W	R0, [R7,#(dfRezTCR - dfData)]
		STRH	R0, [R7,#(dfResistance - dfData)]

loc_4768:				@ ...
		LDR	R0, =KeyUpTimer
		LDR	R1, [SP,#0x44+var_18]
		ADDS	R0, #(Flags68 -	KeyUpTimer)
		STR	R1, [R0]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4772:				@ ...
		LDR	R0, [SP,#0x44+var_2C]
		CMP	R0, #105
		BCC	loc_47A6
		LDR	R3, [SP,#0x44+var_3C]
		MOVS	R0, #10
		UDIV.W	R4, R3,	R0
		MLS.W	R3, R0,	R4, R3
		CBZ	R3, loc_479A
		LDR	R3, [SP,#0x44+var_3C]
		UDIV.W	R0, R3,	R0
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH	R0, [R7,#(dfPower - dfData)]

loc_479A:				@ ...
		LDRH	R0, [R7,#(dfPower - dfData)]
		CMP	R0, #10
		BLS	loc_47AE
		SUBS	R0, #10
		B	loc_47AC
@ ---------------------------------------------------------------------------

loc_47A4:				@ ...
		B	loc_480E
@ ---------------------------------------------------------------------------

loc_47A6:				@ ...
		LDR	R0, [SP,#0x44+var_3C]
		CBZ	R0, loc_47AE
		SUBS	R0, R0,	#1

loc_47AC:				@ ...
		STRH	R0, [R7,#(dfPower - dfData)]

loc_47AE:				@ ...
		LDRH	R0, [R7,#(dfPower - dfData)]
		CMP	R0, R2
		BHI	loc_47B6
		STRH	R1, [R7,#(dfPower - dfData)]

loc_47B6:				@ ...
		LDRH	R0, [R7,#(dfPower - dfData)]
		B	loc_4806
@ ---------------------------------------------------------------------------

loc_47BA:				@ ...
		LDR	R0, [SP,#0x44+var_24]
		CMP	R0, #10
		BCS	loc_4802
		LDRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]
		MOVS	R3, #10
		UDIV.W	R4, R0,	R3
		MLS.W	R4, R3,	R4, R0
		CBZ	R4, loc_47E4
		UDIV.W	R0, R0,	R3
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]

loc_47E4:				@ ...
		UXTH	R0, R0
		SUBS	R0, #10
		CMP	R0, #0
		BLE	loc_47F2
		STRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]
		B	loc_47F6
@ ---------------------------------------------------------------------------

loc_47F2:				@ ...
		STRH.W	R1, [R8,#(dfSavedCfgPwr	- dfData)]

loc_47F6:				@ ...
		LDRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]
		CMP	R0, R2
		BHI	loc_4802
		STRH.W	R1, [R8,#(dfSavedCfgPwr	- dfData)]

loc_4802:				@ ...
		LDRH.W	R0, [R8,#(dfSavedCfgPwr	- dfData)]

loc_4806:				@ ...
		BL	GetAtoVWVolts
		STRH	R0, [R7,#(dfVWVolts - dfData)]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_480E:				@ ...
		LDR	R0, [SP,#0x44+var_1C]
		CMP	R0, #0
		LDR	R0, [SP,#0x44+var_30]
		BEQ	loc_4824
		SUBS	R0, R0,	#5
		CMP	R0, #100
		BGE	loc_4832
		STRB	R5, [R7,#(dfIsCelsius -	dfData)]
		MOV.W	R0, #600
		B	loc_4832
@ ---------------------------------------------------------------------------

loc_4824:				@ ...
		SUBS	R0, #10
		CMP	R0, #200
		BGE	loc_4832
		MOVS	R0, #1
		STRB	R0, [R7,#(dfIsCelsius -	dfData)]
		MOVW	R0, #315

loc_4832:				@ ...
		STRH	R0, [R7,#(dfTemp - dfData)]

loc_4834:				@ ...
		BL	MainView
		LDRH.W	R0, [R9,#(word_20000054	- KeyUpTimer)]
		CMP	R0, #5
		BCC.W	loc_42C4
		BL	DrawScreen
		B	loc_4578
@ ---------------------------------------------------------------------------

loc_4848:				@ ...
		BIC.W	R0, R11, #0x200
		ORR.W	R0, R0,	#0x400
		STR	R0, [R4]
		B	loc_4868
@ ---------------------------------------------------------------------------

loc_4854:				@ ...
		BIC.W	R0, R11, #0x1400
		STR	R0, [R4]
		CMP	R2, #5
		BEQ	loc_486E
		CMP	R2, #3
		BEQ	loc_4950
		CMP	R2, #5
		BNE.W	loc_41A0

loc_4868:				@ ...
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4950

loc_486C:				@ ...
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_486E:				@ ...
		LSLS	R1, R1,	#0x1F
		BEQ	loc_4950
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		STRB.W	R5, [R9]
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_487E:				@ ...
		ORR.W	R0, R11, #0x21000
		STR	R0, [R4]
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4896
		MOVS	R0, #5
		STRB.W	R0, [R9]
		LDR	R0, =KeyUpTimer
		LDR	R1, [SP,#0x44+var_20]
		STRB	R1, [R0,#(BatAnimLevel - KeyUpTimer)]
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_4896:				@ ...
		CMP	R2, #5
		BEQ	loc_48A0
		MOVS	R1, #3
		STRB.W	R1, [R9]

loc_48A0:				@ ...
		MOVS	R1, #30

loc_48A2:				@ ...
		STRB.W	R1, [R10]
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_48A8:				@ ...
		CMP	R2, #5
		BEQ	loc_48B0
		CMP	R2, #4
		BNE	loc_48C0

loc_48B0:				@ ...
		STR.W	R12, [R4]
		STRB.W	R5, [R9]
		LSLS	R0, R1,	#31
		BEQ	loc_48CA
		LDR	R0, =SleepTimer
		STRH	R5, [R0]

loc_48C0:				@ ...
		LDR	R0, [R4]
		BIC.W	R0, R0,	#0x1000

loc_48C6:				@ ...
		STR	R0, [R4]

loc_48C8:				@ ...
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_48CA:				@ ...
		LDR	R1, =SleepTimer
		MOVW	R0, #18000
		STRH	R0, [R1]
		B	loc_48C0
@ ---------------------------------------------------------------------------

loc_48D4:				@ ...
		BL	StopFire
		LDR	R0, =KeyUpTimer
		ADDS	R0, #30
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]
		LDR	R0, [R4]
		MOVS	R1, #24
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		B	loc_4A62
@ ---------------------------------------------------------------------------

loc_48F0:				@ ...
		BL	StopFire
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		MOVS	R0, #20
		STRB.W	R0, [R9]
		B	loc_4984
@ ---------------------------------------------------------------------------

loc_4904:				@ ...
		BL	StopFire
		LDR	R0, =KeyUpTimer
		LDRB	R0, [R0,#(AtoError - KeyUpTimer)]
		CMP	R0, #0
		BNE	loc_486C
		LDR	R0, [R4]
		MOVS	R1, #23
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		B	loc_4A62
@ ---------------------------------------------------------------------------

loc_491C:				@ ...
		STRB.W	R0, [R10]

loc_4920:				@ ...
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_4922:				@ ...
		MOVS.W	R0, R11,LSL#23
		BMI	loc_486C
		LDR	R6, =dfData
		LSLS	R0, R1,	#31
		BEQ	loc_4952
		ORR.W	R0, R11, #0x8000
		STR	R0, [R4]
		BL	ReadBatteryVoltage
		LDR	R0, =KeyUpTimer
		LDRH	R0, [R0,#(BatteryVoltage - KeyUpTimer)]
		CMP.W	R0, #300
		BHI	loc_4948
		LDRH	R0, [R4]
		LSLS	R0, R0,	#21
		BPL	loc_486C

loc_4948:				@ ...
		LDR	R0, [R6,#(dfStatus - dfData)]
		BIC.W	R0, R0,	#1
		STR	R0, [R6,#(dfStatus - dfData)]

loc_4950:				@ ...
		B	loc_49C6
@ ---------------------------------------------------------------------------

loc_4952:				@ ...
		ORR.W	R0, R1,	#1
		STR	R0, [R6,#(dfStatus - dfData)]
		STR.W	R12, [R4]
		MOVS.W	R0, R12,LSL#19
		BPL	loc_4970
		MOVS	R0, #5
		LDR	R1, =KeyUpTimer
		STRB.W	R0, [R9]
		LDR	R0, [SP,#0x44+var_20]
		STRB	R0, [R1,#(BatAnimLevel - KeyUpTimer)]

loc_496E:				@ ...
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_4970:				@ ...
		LDR	R0, =SleepTimer
		STRB.W	R5, [R9]
		STRH	R5, [R0]
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_497A:				@ ...
		MOVS	R1, #21
		STR.W	R12, [R4]
		STRB.W	R1, [R9]

loc_4984:				@ ...
		MOVS	R1, #1
		B	loc_48A2
@ ---------------------------------------------------------------------------

loc_4988:				@ ...
		BL	StopFire
		LDR	R0, [R4]
		MOVS	R1, #22
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		STRB.W	R1, [R9]
		MOVS	R1, #1
		STRB.W	R1, [R10]
		B	loc_41F0
@ ---------------------------------------------------------------------------

loc_49A2:				@ ...
		BL	StopFire
		LDR	R0, [R4]
		MOVS	R1, #51
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		B	loc_4AF4
@ ---------------------------------------------------------------------------

loc_49B2:				@ ...
		LSLS	R0, R1,	#31
		BNE	loc_48C8
		LDR	R0, [SP,#0x44+var_28]
		STR	R0, [R4]
		LDR	R0, =EditItemIndex
		MOV.W	R1, #1000
		STRB	R5, [R0]
		LDR	R0, =KeyUpTimer
		STRH	R1, [R0,#(EditModeTimer	- KeyUpTimer)]

loc_49C6:				@ ...
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,LR}
		B.W	MainView
@ ---------------------------------------------------------------------------

loc_49D0:				@ ...
		LDR	R0, =dfData
		STR.W	R5, [R0,#(dfPuffCount -	dfData)]
		B	loc_49DE
@ ---------------------------------------------------------------------------

loc_49D8:				@ ...
		LDR	R0, =dfData
		STR.W	R5, [R0,#(dfTimeCount -	dfData)]

loc_49DE:				@ ...
		LDR	R1, =UpdatePTTimer
		MOVS	R0, #80
		STRB	R0, [R1]
		LDR	R0, =KeyUpTimer
		STRH	R5, [R0,#(EditModeTimer	- KeyUpTimer)]
		LDR	R0, [SP,#0x44+var_28]
		STR	R0, [R4]

loc_49EC:				@ ...
		ORR.W	R0, R0,	#0x20000
		B	loc_48C6
@ ---------------------------------------------------------------------------

loc_49F2:				@ ...
		LDR	R2, =dfData
		LSLS	R0, R1,	#31
		BNE	loc_4920
		LDRB.W	R0, [R2,#(dfStealthOn -	dfData)]
		CBZ	R0, loc_4A0C
		MOVS	R0, #0

loc_4A00:				@ ...
		STRB.W	R0, [R2,#(dfStealthOn -	dfData)]
		MOVS	R1, #0x28
		STR.W	R12, [R4]
		B	loc_4AD6
@ ---------------------------------------------------------------------------

loc_4A0C:				@ ...
		MOVS	R0, #1
		B	loc_4A00
@ ---------------------------------------------------------------------------

loc_4A10:				@ ...
		LSLS	R0, R1,	#31
		BNE	loc_4920
		MOVS	R1, #82
		STR.W	R12, [R4]
		B	loc_4AF4
@ ---------------------------------------------------------------------------

loc_4A1C:				@ ...
		LSLS	R0, R1,	#31

loc_4A1E:				@ ...
		BNE	loc_496E
		MOVS	R1, #83
		STR.W	R12, [R4]
		B	loc_4AF4
@ ---------------------------------------------------------------------------

loc_4A28:				@ ...
		LDR	R2, =dfData
		LSLS	R0, R1,	#31
		BNE	loc_496E
		LSLS	R0, R1,	#30
		BMI	loc_4A38
		ORR.W	R0, R1,	#2
		B	loc_4A3C
@ ---------------------------------------------------------------------------

loc_4A38:				@ ...
		BIC.W	R0, R1,	#2

loc_4A3C:				@ ...
		STR	R0, [R2,#(dfStatus - dfData)]
		LSLS	R0, R0,	#30
		BPL	loc_4A46
		MOVS	R1, #28
		B	loc_4A48
@ ---------------------------------------------------------------------------

loc_4A46:				@ ...
		MOVS	R1, #31

loc_4A48:				@ ...
		STRB.W	R1, [R9]
		MOVS	R0, #2
		STRB.W	R0, [R10]
		STR.W	R12, [R4]
		B	loc_4578
@ ---------------------------------------------------------------------------

loc_4A58:				@ ...
		LSLS	R0, R1,	#31

loc_4A5A:				@ ...
		BNE	loc_496E
		MOVS	R1, #28
		STR.W	R12, [R4]

loc_4A62:				@ ...
		STRB.W	R1, [R9]
		MOVS	R0, #2
		B	loc_491C
@ ---------------------------------------------------------------------------

loc_4A6A:				@ ...
		LDR	R2, =dfData
		LSLS	R0, R1,	#31

loc_4A6E:				@ ...
		BEQ.W	loc_486C
		LSLS	R0, R1,	#29
		BMI	loc_4A7C
		ORR.W	R0, R1,	#4
		B	loc_4A80
@ ---------------------------------------------------------------------------

loc_4A7C:				@ ...
		BIC.W	R0, R1,	#4

loc_4A80:				@ ...
		STR	R0, [R2,#(dfStatus - dfData)]
		BL	InitDisplay
		LDR	R0, [R4]
		MOVS	R1, #1
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		STRB.W	R1, [R9]
		MOVS	R0, #2
		STRB.W	R0, [R10]
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,LR}
		B.W	UpdateDataFlash
@ ---------------------------------------------------------------------------

loc_4AA4:				@ ...
		LSLS	R0, R1,	#31
		BEQ	loc_4A6E
		MOVS	R1, #54
		STR.W	R12, [R4]
		B	loc_4B2A
@ ---------------------------------------------------------------------------

loc_4AB0:				@ ...
		LDR	R2, =dfData
		LSLS	R0, R1,	#31
		BEQ	loc_4A6E
		ADD.W	R0, LR,	#1
		UXTB	R0, R0
		STRB.W	R0, [R2,#(dfUIVersion -	dfData)]
		CMP	R0, #3
		BCC	loc_4AC8
		STRB.W	R5, [R2,#(dfUIVersion -	dfData)]

loc_4AC8:				@ ...
		BL	UpdateDataFlash
		LDR	R0, [R4]
		MOVS	R1, #1
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]

loc_4AD6:				@ ...
		STRB.W	R1, [R9]
		MOVS	R1, #3
		B	loc_48A2
@ ---------------------------------------------------------------------------

loc_4ADE:				@ ...
		LSLS	R0, R1,	#31
		BEQ	loc_4A6E
		LDR	R0, =KeyUpTimer
		LDR	R1, [SP,#0x44+var_4]
		ADDS	R0, #(Flags68 -	KeyUpTimer)
		STR	R1, [R0]
		SUBS	R0, #(Flags68 -	KeyUpTimer)
		MOVS	R1, #59
		STRB	R5, [R0,#(EditTCRIndex - KeyUpTimer)]
		STR.W	R12, [R4]

loc_4AF4:				@ ...
		STRB.W	R1, [R9]

loc_4AF8:				@ ...
		MOVS	R0, #10
		B	loc_491C
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ ---------------------------------------------------------------------------

loc_4B10:				@ ...
		LSLS	R0, R1,	#31
		BNE	loc_4A1E
		MOVS	R0, #50
		STR.W	R12, [R4]
		STRB.W	R0, [R9]
		B	loc_4B2E
@ ---------------------------------------------------------------------------

loc_4B20:				@ ...
		LSLS	R0, R1,	#31
		BNE	loc_4A5A
		MOVS	R1, #37
		STR.W	R12, [R4]

loc_4B2A:				@ ...
		STRB.W	R1, [R9]

loc_4B2E:				@ ...
		MOVS	R0, #5
		B	loc_491C
@ End of function EventHandler

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetUserInput:
		PUSH.W	{R4-R12,LR}
		LDR	R5, =KeyUpTimer
		LDR.W	R8, =0x40004900
		MOVS	R0, #14
		STRB	R0, [R5,#(UserInputs - KeyUpTimer)]
		LDR.W	R6, [R8]
		LDR	R1, =Screen
		LDR.W	R11, =dfData
		MOV	R0, R5
		LDR.W	R12, =0x40004900
		ADD.W	R9, R5,	#0x28
		LDRB	R3, [R0,#(LastInputs - KeyUpTimer)]
		SUB.W	R12, R12, #0x38
		LDRB	R1, [R1]
		LDR.W	R2, [R9]
		LDR.W	R7, [R11,#(dfStatus - dfData)]
		ADD.W	R0, R12, #4
		MOV.W	R10, #1
		MOVS	R4, #0
		CBNZ	R6, loc_4B82
		LDR.W	R6, [R12]
		CBZ	R6, loc_4B82
		LDR	R6, [R0]
		CBZ	R6, loc_4B82
		STRB.W	R10, [R5,#(UserInputs -	KeyUpTimer)]
		B	loc_4C60
@ ---------------------------------------------------------------------------

loc_4B82:				@ ...
		LSLS	R6, R2,	#23
		BMI	loc_4C42
		LDRB	R6, [R5,#(FireClickTimer - KeyUpTimer)]
		CBNZ	R6, loc_4B92
		LDRB	R6, [R5,#(FireClicksEvent - KeyUpTimer)]
		CBZ	R6, loc_4B92
		STRB	R6, [R5,#(Event	- KeyUpTimer)]
		STRB	R4, [R5,#(FireClicksEvent - KeyUpTimer)]

loc_4B92:				@ ...
		LSLS	R6, R7,	#31
		BEQ	loc_4B9A
		CMP	R1, #59
		BNE	loc_4BB0

loc_4B9A:				@ ...
		LDR.W	R6, [R12]
		CMP	R6, #1
		BEQ	loc_4BA6
		MOVS	R6, #2
		STRB	R6, [R5,#(UserInputs - KeyUpTimer)]

loc_4BA6:				@ ...
		LDR	R6, [R0]
		CMP	R6, #1
		BEQ	loc_4BB0
		MOVS	R6, #3
		STRB	R6, [R5,#(UserInputs - KeyUpTimer)]

loc_4BB0:				@ ...
		LDR.W	R6, [R12]
		CMP	R6, #1
		BEQ	loc_4BC2
		LDR	R6, [R0]
		CMP	R6, #1
		BEQ	loc_4BC2
		MOVS	R6, #4
		STRB	R6, [R5,#(UserInputs - KeyUpTimer)]

loc_4BC2:				@ ...
		LDR.W	R6, [R8]
		CBNZ	R6, loc_4BD4
		LDR.W	R6, [R12]
		CMP	R6, #1
		BEQ	loc_4BD4
		MOVS	R6, #5
		STRB	R6, [R5,#(UserInputs - KeyUpTimer)]

loc_4BD4:				@ ...
		LDR.W	R6, [R8]
		CBNZ	R6, loc_4BE4
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_4BE4
		MOVS	R0, #6
		STRB	R0, [R5,#(UserInputs - KeyUpTimer)]

loc_4BE4:				@ ...
		LDR	R0, =0x400C0000
		LDR	R6, [R0,#0x14]
		LSLS	R6, R6,	#31
		BEQ	loc_4BF4
		LSLS	R6, R2,	#21
		BMI	loc_4BF4
		MOVS	R0, #10
		B	loc_4C24
@ ---------------------------------------------------------------------------

loc_4BF4:				@ ...
		LDR	R0, [R0,#0x14]
		LSLS	R0, R0,	#31
		MOV.W	R0, R2,LSL#21
		BEQ	loc_4C0C
		CMP	R0, #0
		BGE	loc_4C3C

loc_4C02:				@ ...
		LDR	R0, =0x40004900
		SUBS	R0, #0x24
		LDR	R6, [R0]
		CBZ	R6, loc_4C16
		B	loc_4C2A
@ ---------------------------------------------------------------------------

loc_4C0C:				@ ...
		CMP	R0, #0
		BGE	loc_4C3C
		MOVS	R0, #0xB
		STRB	R0, [R5,#(UserInputs - KeyUpTimer)]
		B	loc_4C02
@ ---------------------------------------------------------------------------

loc_4C16:				@ ...
		LSLS	R6, R2,	#19
		BMI	loc_4C2A
		LDRB	R0, [R5,#(byte_20000048	- KeyUpTimer)]
		CBZ	R0, loc_4C22
		CMP	R0, #50
		BCC	loc_4C3C

loc_4C22:				@ ...
		MOVS	R0, #12

loc_4C24:				@ ...
		STRB	R0, [R5,#(UserInputs - KeyUpTimer)]
		STRB	R4, [R5,#(byte_20000048	- KeyUpTimer)]
		B	loc_4C60
@ ---------------------------------------------------------------------------

loc_4C2A:				@ ...
		LDR	R0, [R0]
		CBZ	R0, loc_4C3C
		LSLS	R0, R2,	#19
		BPL	loc_4C3C
		MOVS	R0, #13
		STRB	R0, [R5,#(UserInputs - KeyUpTimer)]
		STRB.W	R10, [R5,#(byte_20000048 - KeyUpTimer)]
		B	loc_4C60
@ ---------------------------------------------------------------------------

loc_4C3C:				@ ...
		LDRB	R0, [R5,#(UserInputs - KeyUpTimer)]
		CMP	R0, #14
		BCC	loc_4C60

loc_4C42:				@ ...
		CMP	R3, #1
		BNE	loc_4C4A
		BL	StopFire

loc_4C4A:				@ ...
		LDR.W	R1, [R9]
		MOVS	R0, #0xFF
		ORR.W	R1, R1,	#0x4000
		STR.W	R1, [R9]
		STRB	R0, [R5,#(LastInputs - KeyUpTimer)]
		STRH	R4, [R5,#(KeyPressTime - KeyUpTimer)]

locret_4C5C:				@ ...
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_4C60:				@ ...
		LDR	R6, =KeyUpTimer
		LDRB	R0, [R5,#(UserInputs - KeyUpTimer)]
		ADDS	R6, #(Flags64 -	KeyUpTimer)
		CMP	R0, R3
		LDR	R6, [R6]
		BIC.W	R8, R6,	#0x4000
		BEQ	loc_4C7A
		STRB	R0, [R5,#(LastInputs - KeyUpTimer)]
		STRH	R4, [R5,#(KeyPressTime - KeyUpTimer)]
		STR.W	R8, [R9]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4C7A:				@ ...
		LDRH	R3, [R5,#(KeyPressTime - KeyUpTimer)]
		ADDS	R3, R3,	#1
		UXTH	R6, R3
		LDR	R3, =KeyUpTimer
		STRH	R6, [R5,#(KeyPressTime - KeyUpTimer)]
		ADDS	R3, #(KeyPressTime - KeyUpTimer)
		LDRB.W	R12, [R3,#1]
		CMP.W	R12, #0
		BNE	loc_4C96
		LDRB	R3, [R3]
		CMP	R3, #210
		BCC	loc_4CE6

loc_4C96:				@ ...
		CMP	R0, #1
		BEQ	loc_4CA8
		MOV.W	R1, #500
		CMP	R0, #6
		BEQ	loc_4CC6
		CMP	R0, #5
		BEQ	loc_4CD2
		B	loc_4CE0
@ ---------------------------------------------------------------------------

loc_4CA8:				@ ...
		MOVW	R0, #1100
		CMP	R6, R0
		BLS	loc_4CBC
		STRH	R0, [R5,#(KeyPressTime - KeyUpTimer)]
		ORR.W	R1, R2,	#0x4000
		STR.W	R1, [R9]

loc_4CBA:				@ ...
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4CBC:				@ ...
		LDRH	R0, [R5,#(FireDuration - KeyUpTimer)]
		CMP	R0, #99
		BCC	locret_4C5C
		MOVS	R0, #24
		B	loc_4CDC
@ ---------------------------------------------------------------------------

loc_4CC6:				@ ...
		LSLS	R0, R7,	#31
		BEQ	loc_4CE0
		CMP	R6, R1
		BNE	locret_4C5C
		MOVS	R0, #34
		B	loc_4CDC
@ ---------------------------------------------------------------------------

loc_4CD2:				@ ...
		LSLS	R0, R7,	#31
		BEQ	loc_4CE0
		CMP	R6, R1
		BNE	locret_4C5C
		MOVS	R0, #39

loc_4CDC:				@ ...
		STRB	R0, [R5,#(Event	- KeyUpTimer)]

loc_4CDE:				@ ...
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4CE0:				@ ...
		MOVS	R0, #6
		STRH	R0, [R5,#(KeyPressTime - KeyUpTimer)]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4CE6:				@ ...
		LDR	R2, =KeyUpTimer
		LDR	R3, =dfData
		MOV	LR, R5
		LDRH.W	R12, [R2,#(EditModeTimer - KeyUpTimer)]
		LDR	R2, =EditItemIndex
		LDRB.W	R5, [R3,#(dfUIVersion -	dfData)]
		LDRB	R3, [R3,#(dfAPT	- dfData)]
		LDRB	R2, [R2]
		CMP	R6, #6
		BEQ	loc_4D1A
		MOV	R7, LR
		CMP	R6, #20
		BEQ	loc_4E02
		CMP	R6, #200
		BNE	locret_4C5C
		CMP.W	R12, #0
		BEQ	loc_4D12
		CMP	R0, #1
		BEQ	loc_4E0C

loc_4D12:				@ ...
		LDR	R5, =Screen
		CMP	R1, #59
		BEQ	loc_4DF8
		B	loc_4E66
@ ---------------------------------------------------------------------------

loc_4D1A:				@ ...
		MOV	R6, LR
		STR.W	R8, [R9]
		CMP	R0, #4
		BEQ	locret_4C5C
		CMP	R0, #5
		BEQ	locret_4C5C
		CMP	R0, #6
		BEQ	locret_4C5C
		CMP	R0, #7
		BEQ	locret_4C5C
		CMP	R0, #8
		BEQ	locret_4C5C
		CMP	R0, #9
		BEQ	locret_4C5C
		STRB	R0, [R6,#7]
		CMP	R0, #1
		BEQ	loc_4D54
		MOVS	R2, #30
		CMP	R0, #2
		BEQ	loc_4DC0
		CMP	R0, #3
		BNE	locret_4C5C
		LSLS	R0, R7,	#30
		BPL	loc_4DFA
		CMP.W	R12, #0
		BEQ	loc_4DDE
		B	loc_4DFA
@ ---------------------------------------------------------------------------

loc_4D54:				@ ...
		MOVS	R0, #0x28
		STRB	R0, [R6,#(FireClickTimer - KeyUpTimer)]
		LDRB	R0, [R6,#(FireClickCount - KeyUpTimer)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R6,#(FireClickCount - KeyUpTimer)]
		STRB	R4, [R6,#(FireClicksEvent - KeyUpTimer)]
		STRB	R4, [R6,#(Event	- KeyUpTimer)]
		CMP	R0, #5
		BEQ	loc_4DB4
		BGT	loc_4D76
		CMP	R0, #1
		BEQ	loc_4D82
@MODIF*************************
		.ifne	modifs
		CMP	R0, #3
		BNE	1f
		MOVS	R0, #16
		B	loc_4DBA
1:		CMP R0, #2
		BNE	loc_4CBA
		MOVS	R0, #100
		B	loc_4DBA
		.else
@*******************************
		CMP	R0, #3
		BNE	loc_4CBA
		MOVS	R0, #16
		B	loc_4DBA
		.endif
@*******************************

@ ---------------------------------------------------------------------------

loc_4D76:				@ ...
		CMP	R0, #10
		BEQ	loc_4DB8
		CMP	R0, #20
		BNE	loc_4CBA
		MOVS	R0, #29
		B	loc_4DFC
@ ---------------------------------------------------------------------------

loc_4D82:				@ ...
		MOVS	R0, #15
		STRB	R0, [R6,#(FireClicksEvent - KeyUpTimer)]
		CMP.W	R12, #0
		BEQ	loc_4D96
		CBZ	R5, loc_4D9C
		CMP	R5, #1
		BEQ	loc_4DAA
		CMP	R5, #2
		BEQ	loc_4DAA

loc_4D96:				@ ...
		STRB.W	R10, [LR,#(Event - KeyUpTimer)]

loc_4D9A:				@ ...
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4D9C:				@ ...
		CMP	R2, #6
		BNE	loc_4D96
		CMP	R3, #2
		BEQ	loc_4CBA
		CMP	R3, #3
		BEQ	loc_4CBA
		B	loc_4D96
@ ---------------------------------------------------------------------------

loc_4DAA:				@ ...
		CMP	R2, #4
		BEQ	loc_4CBA
		CMP	R2, #5
		BEQ	loc_4CDE
		B	loc_4D96
@ ---------------------------------------------------------------------------

loc_4DB4:				@ ...
		MOVS	R0, #17
		B	loc_4DFC
@ ---------------------------------------------------------------------------

loc_4DB8:				@ ...
		MOVS	R0, #31

loc_4DBA:				@ ...
		STRB.W	R0, [LR,#(FireClicksEvent - KeyUpTimer)]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4DC0:				@ ...
		LSLS	R0, R7,	#30
		BPL	loc_4DDA
		CMP.W	R12, #0
		BNE	loc_4DDA
		CMP	R1, #51
		BEQ	loc_4DDA
		CMP	R1, #59
		BEQ	loc_4DDA
		CMP	R1, #82
		BEQ	loc_4DDA
		CMP	R1, #83
		BNE	loc_4DEE

loc_4DDA:				@ ...
		MOVS	R0, #2
		B	loc_4DFC
@ ---------------------------------------------------------------------------

loc_4DDE:				@ ...
		CMP	R1, #51
		BEQ	loc_4DFA
		CMP	R1, #59
		BEQ	loc_4DFA
		CMP	R1, #82
		BEQ	loc_4DFA
		CMP	R1, #83
		BEQ	loc_4DFA

loc_4DEE:				@ ...
		STRB.W	R2, [LR,#(Event	- KeyUpTimer)]

loc_4DF2:				@ ...
		B	locret_4C5C
@ ---------------------------------------------------------------------------
		B	loc_4E02
@ ---------------------------------------------------------------------------
		B	loc_4E0C
@ ---------------------------------------------------------------------------

loc_4DF8:				@ ...
		B	loc_4E50
@ ---------------------------------------------------------------------------

loc_4DFA:				@ ...
		MOVS	R0, #3

loc_4DFC:				@ ...
		STRB.W	R0, [LR,#(Event	- KeyUpTimer)]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4E02:				@ ...
		CMP	R0, #1
		BNE	loc_4D9A
		STRB.W	R4, [LR,#(FireClicksEvent - KeyUpTimer)]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4E0C:				@ ...
		MOV.W	R0, #1000
		STRH	R0, [R7,#(EditModeTimer	- KeyUpTimer)]
		MOVS	R0, #22
		MOVS	R1, #23
		CBZ	R5, loc_4E22
		CMP	R5, #1
		BEQ	loc_4E38
		CMP	R5, #2
		BEQ	loc_4E42
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E22:				@ ...
		CMP	R2, #6
		BNE	loc_4E6C
		CMP	R3, #2
		BEQ	loc_4E30
		CMP	R3, #3
		BEQ	loc_4E34
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E30:				@ ...
		STRB	R0, [R7,#(Event	- KeyUpTimer)]
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E34:				@ ...
		STRB	R1, [R7,#(Event	- KeyUpTimer)]
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E38:				@ ...
		CMP	R2, #4
		BEQ	loc_4E30
		CMP	R2, #5
		BEQ	loc_4E34
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E42:				@ ...
		CMP	R2, #4
		BNE	loc_4E6C
		CMP	R3, #1
		BEQ	loc_4E30
		CMP	R3, #2
		BEQ	loc_4E34
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E50:				@ ...
		CMP	R0, #1
		BNE	loc_4E66
		BL	UpdateDataFlash
		LDR.W	R1, [R9]
		ORR.W	R1, R1,	#0x20000
		STR.W	R1, [R9]
		STRB	R4, [R5]

loc_4E66:				@ ...
		LDRB	R0, [R7,#(UserInputs - KeyUpTimer)]
		CMP	R0, #4
		BEQ	loc_4E7E

loc_4E6C:				@ ...
		LDR	R1, =MenuPage
		MOV	R4, R11
		STRB.W	R10, [R1]
		LDRB.W	R0, [R11,#(dfStatus - dfData)]
		LSLS	R0, R0,	#31
		BEQ	loc_4E8E
		B	loc_4EB4
@ ---------------------------------------------------------------------------

loc_4E7E:				@ ...
		LDRB.W	R0, [R11,#(dfStatus - dfData)]
		LSLS	R0, R0,	#31
		BEQ	loc_4E8A
		MOVS	R0, #18
		B	loc_4E30
@ ---------------------------------------------------------------------------

loc_4E8A:				@ ...
		MOVS	R0, #4
		B	loc_4E30
@ ---------------------------------------------------------------------------

loc_4E8E:				@ ...
		LDRB	R0, [R7,#(UserInputs - KeyUpTimer)]
		CMP	R0, #5
		BNE	loc_4EB4
		LDR	R1, =KeyUpTimer
		ADDS	R1, #(Flags68 -	KeyUpTimer)
		LDR	R0, [R1]
		LSLS	R2, R0,	#22
		BPL	loc_4EC8
		BIC.W	R0, R0,	#0x200
		STR	R0, [R1]
		MOVS	R0, #0xFF
		STRB	R0, [R7,#(Event	- KeyUpTimer)]
		LDR	R0, =fbCurrentTimeout
		LDRB	R0, [R0]
		BL	fbDeleteTimeout
		BL	MainView

loc_4EB4:				@ ...
		LDRB	R0, [R7,#(UserInputs - KeyUpTimer)]
		CMP	R0, #6
		BNE	loc_4DF2
		LDRB.W	R0, [R4,#(dfStatus - dfData)]
		LSLS	R0, R0,	#31
		BNE	loc_4DF2
		MOVS	R0, #6

loc_4EC4:				@ ...
		STRB	R0, [R7,#(Event	- KeyUpTimer)]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4EC8:				@ ...
		MOVS	R0, #40
		B	loc_4EC4
@ End of function GetUserInput

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ R0 Timeout #

fbDeleteTimeout:
		LDR	R2, =fbTimeoutMask
		MOVS	R1, #1
		LSLS	R1, R0
		LDRB	R3, [R2,#2]
		BICS	R3, R1
		STRB	R3, [R2,#2]
		LDR	R2, =TimeoutsTable
		MOVS	R1, #0
		STRB.W	R1, [R2,R0,LSL#3]
		BX	LR
@ End of function fbDeleteTimeout

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGoToSleep:
		PUSH	{R4-R6,LR}
		BL	ScreenOff
		LDR	R4, =Flags64
		LDR	R1, =BatReadTimer
		LDR	R0, [R4]
		BIC.W	R0, R0,	#0x100
		STR	R0, [R4]
		MOVS	R0, #0x32
		STRB	R0, [R1]
		MOVS	R0, #1
		BL	DevicesOnOff
		MOVS	R0, #250
		BL	CLK_SysTickDelay
		MOVS	R0, #250
		BL	CLK_SysTickDelay
		MOVS	R0, #250
		BL	CLK_SysTickDelay
		LDR	R0, =dfData
		MOV.W	R5, #0x500	@ 1.6s for watchdog
		LDRB.W	R0, [R0,#(dfStatus - dfData)]
		LSLS	R0, R0,	#31
		BNE	loc_4F5A
		LDR	R0, =0x40004900
		LDR	R0, [R0]
		CBNZ	R0, loc_4F5A
		LDR	R0, =KeyPressTime
		LDRH	R1, [R0]
		SUB.W	R2, R1,	#0x400
		SUBS	R2, #0x4C
		BNE	loc_4F6E

loc_4F5A:				@ ...
		BL	SYS_UnlockReg
		MOVS	R3, #0
		MOV	R2, R3
		MOVS	R1, #2
		MOV	R0, R5
		BL	WDT_Open	@ Disable WD reset
		BL	FlushAndSleep

loc_4F6E:				@ ...
		MOVS	R3, #0
		MOVS	R2, #1
		MOVS	R1, #2
		MOV	R0, R5
		BL	WDT_Open	@ Re-enable WD reset
		MOV.W	R0, #0x40000000
		MOVS	R1, #0
		STR.W	R1, [R0,#0x100]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x800
		STR	R0, [R4]
		MOV	R0, R1
		BL	DevicesOnOff
		POP.W	{R4-R6,LR}
		B.W	InitDisplay
@ End of function GoToSleep

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgModeChange:
		PUSH	{R4,LR}
		LDR	R3, =dfData
		LDR	R2, =Flags64
		LDR	R0, =AtoRez
		LDRB	R1, [R3,#(dfMode - dfData)]
		LDR	R2, [R2]
		LDRH	R0, [R0]
		CMP	R1, #1
		BEQ	loc_4FCE
		CBZ	R1, loc_4FE6
		CMP	R1, #2
		BEQ	loc_5006
		CMP	R1, #3
		BEQ	loc_501C
		B	loc_4FFE
@ ---------------------------------------------------------------------------

loc_4FCE:				@ ...
		MOVS	R1, #2
		STRB	R1, [R3,#(dfTempAlgo - dfData)]
		LDR	R1, =dfData
		LDRB.W	R4, [R3,#(dfRezLockedTI	- dfData)]
		LDRH	R1, [R1,#(dfRezTI - dfData)]
		CBZ	R4, loc_4FDE
		CBNZ	R1, loc_502E

loc_4FDE:				@ ...
		LSLS	R2, R2,	#4
		B	loc_4FF8
@ ---------------------------------------------------------------------------

loc_4FE2:				@ ...
		CBNZ	R1, loc_502E
		B	loc_4FFC
@ ---------------------------------------------------------------------------

loc_4FE6:				@ ...
		MOVS	R1, #1
		STRB	R1, [R3,#(dfTempAlgo - dfData)]
		LDR	R1, =dfData
		LDRB.W	R4, [R3,#(dfRezLockedNI	- dfData)]
		LDRH	R1, [R1,#(dfRezNI - dfData)]
		CBZ	R4, loc_4FF6
		CBNZ	R1, loc_502E

loc_4FF6:				@ ...
		LSLS	R2, R2,	#3

loc_4FF8:				@ ...
		CMP	R2, #0
		BGE	loc_4FE2

loc_4FFC:				@ ...
		STRH	R0, [R3,#(dfResistance - dfData)]

loc_4FFE:				@ ...
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #0x32
		STRB	R0, [R1]
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_5006:				@ ...
		MOVS	R1, #3
		STRB	R1, [R3,#(dfTempAlgo - dfData)]
		LDR	R1, =dfData
		LDRB.W	R4, [R3,#(dfRezLockedSS	- dfData)]
		LDRH.W	R1, [R1,#(dfRezSS - dfData)]
		CMP	R4, #0
		BEQ	loc_4FF8
		CBNZ	R1, loc_502E
		B	loc_4FF8
@ ---------------------------------------------------------------------------

loc_501C:				@ ...
		MOVS	R1, #4
		STRB	R1, [R3,#(dfTempAlgo - dfData)]
		LDR	R1, =dfData
		LDRB.W	R2, [R3,#(dfRezLockedTCR - dfData)]
		LDRH.W	R1, [R1,#(dfRezTCR - dfData)]
		CBZ	R2, loc_5032
		CBZ	R1, loc_5032

loc_502E:				@ ...
		STRH	R1, [R3,#(dfResistance - dfData)]
		B	loc_4FFE
@ ---------------------------------------------------------------------------

loc_5032:				@ ...
		LDR	R2, =Flags64
		ADDS	R2, R2,	#4
		LDRB	R2, [R2]
		LSLS	R2, R2,	#30
		B	loc_4FF8
@ End of function ModeChange

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================


fbBirdAnim:
		PUSH	{R3-R5,LR}
		LDR	R4, =fbBirdColumn
		MOV	R1, R0
		MOV	R0, R4
		LDRB	R2, [R4,#(fbBirdCycle -	fbBirdColumn)]
		LDR	R3, =fbBird0
		LDRB	R0, [R0]
		CMP	R2, #1
		BEQ	loc_5094
		CMP	R2, #2
		BEQ	loc_506C
		CMP	R2, #3
		BEQ	loc_508C
		CMP	R2, #4
		BNE	loc_507A
		B	loc_5094
@ ---------------------------------------------------------------------------

loc_506C:				@ ...
		LDR	R2, =fbBird0
		ADDS	R2, #(fbBird1 -	fbBird0)
		B	loc_5090
@ ---------------------------------------------------------------------------

loc_5072:				@ ...
		MOVS	R3, #16
		MOV	R2, R3
		BL	fbDrawSprite

loc_507A:				@ ...
		LDRB	R0, [R4,#(fbBirdCycle -	fbBirdColumn)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R4,#(fbBirdCycle -	fbBirdColumn)]
		CMP	R0, #5
		BNE	locret_508A
		MOVS	R0, #1
		STRB	R0, [R4,#(fbBirdCycle -	fbBirdColumn)]

locret_508A:				@ ...
		POP	{R3-R5,PC}
@ ---------------------------------------------------------------------------

loc_508C:				@ ...
		LDR	R2, =fbBird0
		ADDS	R2, #(fbBird2 -	fbBird0)

loc_5090:				@ ...
		STR	R2, [SP]
		B	loc_5072
@ ---------------------------------------------------------------------------

loc_5094:				@ ...
		STR	R3, [SP]
		B	loc_5072
@ End of function fbBirdAnim

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================


fbDrawColumn:

var_28		= -0x28

		PUSH.W	{R3-R11,LR}
		MOV	R5, R0
		MOV	R9, R1
		MOVS	R4, #0
		LDR	R6, =fbColumnBody
		AND.W	R10, R0, #0xFF
		UBFX.W	R7, R0,	#0x10, #8
		B	loc_50CA
@ ---------------------------------------------------------------------------

loc_50B6:				@ ...
		LSLS	R0, R4,	#0x1B
		LSRS	R1, R0,	#0x18
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		STR	R6, [SP]
		BL	fbDrawSprite
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_50CA:				@ ...
		CMP	R7, R4
		BHI	loc_50B6
		MOVS	R4, #0
		MOV.W	R8, #0x38
		AND.W	R7, R9,	#0xFF
		B	loc_50F0
@ ---------------------------------------------------------------------------

loc_50DA:				@ ...
		NEGS	R1, R4
		ADD.W	R0, R8,	R1,LSL#3
		UXTB	R1, R0
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		BL	fbDrawSprite
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_50F0:				@ ...
		CMP	R7, R4
		STR	R6, [SP]
		BHI	loc_50DA
		UBFX.W	R4, R5,	#8, #8
		SUB.W	R0, R4,	#8
		UXTB	R1, R0
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		BL	fbDrawSprite
		LDR	R0, =fbColumnBody
		MOVS	R3, #8
		ADDS	R0, #0x18
		STR	R0, [SP]
		MOVS	R2, #0x18
		MOV	R1, R4
		MOV	R0, R10
		BL	fbDrawSprite
		LDR	R0, =fbColumnBody
		LSRS	R4, R5,	#0x18
		ADDS	R0, #0x30
		STR	R0, [SP]
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R1, R4
		MOV	R0, R10
		BL	fbDrawSprite
		ADDS	R4, #8
		UXTB	R1, R4
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		STR	R6, [SP]
		BL	fbDrawSprite
		POP.W	{R3-R11,PC}
@ End of function fbDrawColumn

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_nvic

NVIC_EnableIRQ:
		AND.W	R2, R0,	#0x1F
		MOVS	R1, #1
		LSLS	R1, R2
		LSRS	R0, R0,	#5
		LSLS	R0, R0,	#2
		ADD.W	R0, R0,	#0xE000E000
		STR.W	R1, [R0,#0x100]
		BX	LR
@ End of function NVIC_EnableIRQ

@ ---------------------------------------------------------------------------
		.balign 4,0
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDisplaySendCommand:
		LDR	R1, =DisplayCmdByte
		MOV.W	R2, #1
		STRB	R0, [R1]
		LDR	R0, =DisplayModel
		LDRB	R0, [R0]
		CMP	R0, #0
		MOV.W	R0, #0
		BEQ	loc_5178
		B.W	SSD1327_WriteBytes
@ ---------------------------------------------------------------------------

loc_5178:				@ ...
		B.W	SSD1306_WriteBytes
@ End of function DisplaySendCommand

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDisplaySendData:
		MOV	R2, R1
		LDR	R1, =DisplayModel
		LDRB	R1, [R1]
		CBZ	R1, loc_5198
		CMP	R1, #1
		BNE	locret_51A0
		MOV	R1, R0
		MOVS	R0, #0x40
		B.W	SSD1327_WriteBytes
@ ---------------------------------------------------------------------------

loc_5198:				@ ...
		MOV	R1, R0
		MOVS	R0, #0x40
		B.W	SSD1306_WriteBytes
@ ---------------------------------------------------------------------------

locret_51A0:				@ ...
		BX	LR
@ End of function DisplaySendData

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetStrCenteredX:
		PUSH	{LR}
		MOV	R2, R0
		MOVS	R3, #0

loc_51AE:				@ ...
		LDRH	R0, [R2]
		BL	GetImageWidth
		ADD	R0, R3
		UXTB	R3, R0
		LDRH.W	R0, [R2,#2]!
		CMP	R0, #0
		BNE	loc_51AE
		RSB.W	R0, R3,	#0x40
		UBFX.W	R0, R0,	#1, #8
		POP	{PC}
@ End of function GetStrCenteredX

@ ---------------------------------------------------------------------------
		.balign 4,0
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgGetImageWidth:
		LDR	R1, =DisplayModel
		LDRB	R1, [R1]
		CBZ	R1, loc_51D8
		CMP	R1, #1
		BEQ	loc_51DC
		B	loc_51E6
@ ---------------------------------------------------------------------------

loc_51D8:				@ ...
		LDR	R1, =font1
		B	loc_51DE
@ ---------------------------------------------------------------------------

loc_51DC:				@ ...
		LDR	R1, =font2

loc_51DE:				@ ...
		ADD.W	R0, R1,	R0,LSL#2
		LDR.W	R0, [R0,#-4]

loc_51E6:				@ ...
		LDRB	R0, [R0]
		BX	LR
@ End of function GetImageWidth

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawHLine:
		PUSH.W	{R4-R10,LR}	@ (X1,Y,X2,Mode)
		MOV	R9, R1
		SUBS	R1, R2,	R0
		MOV	R8, R3
		UXTB	R6, R1
		MOV	R5, R0
		MOVS	R4, #0
		LDR	R7, =DisplayModel
		B	loc_5234
@ ---------------------------------------------------------------------------

loc_520C:				@ ...
		LDRB	R0, [R7]
		CBZ	R0, loc_5216
		CMP	R0, #1
		BEQ	loc_5224
		B	loc_5230
@ ---------------------------------------------------------------------------

loc_5216:				@ ...
		ADDS	R0, R4,	R5
		UXTB	R0, R0
		MOV	R2, R8
		MOV	R1, R9
		BL	SSD1306_Plot
		B	loc_5230
@ ---------------------------------------------------------------------------

loc_5224:				@ ...
		ADDS	R0, R4,	R5
		UXTB	R0, R0
		MOV	R2, R8		@ char
		MOV	R1, R9		@ int
		BL	SSD1327_Plot

loc_5230:				@ ...
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_5234:				@ ...
		CMP	R4, R6
		BLS	loc_520C
		POP.W	{R4-R10,PC}
@ End of function DrawHLine

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitDisplay:
		LDR	R0, =DisplayModel
		LDRB	R0, [R0]
		CBZ	R0, loc_524E
		CMP	R0, #1
		BNE	locret_5252
		B.W	SSD1327_Init
@ ---------------------------------------------------------------------------

loc_524E:				@ ...
		B.W	SSD1306_Init
@ ---------------------------------------------------------------------------

locret_5252:				@ ...
		BX	LR
@ End of function InitDisplay

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

@ void __cdecl SSD1327_Plot(int, int, char)
orgSSD1327_Plot:				@ ...
		PUSH	{R4,R5,LR}
		AND.W	R3, R0,	#7
		RSB.W	R5, R3,	#7
		MOVS	R3, #1
		LSLS	R3, R5
		LDR	R4, =ScreenBuffer
		LSLS	R1, R1,	#3
		ADD.W	R1, R1,	R0,LSR#3
		LDRB	R0, [R4,R1]
		CBZ	R2, loc_5276
		ORRS	R0, R3
		B	loc_5278
@ ---------------------------------------------------------------------------

loc_5276:				@ ...
		BICS	R0, R3

loc_5278:				@ ...
		STRB	R0, [R4,R1]
		POP	{R4,R5,PC}
@ End of function SSD1327_Plot

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1327_Init:
		PUSH	{R4-R6,LR}
		BL	SSD1327_PowerOn
		LDR	R5, =SSD1327_InitSeq
		MOVS	R4, #0

loc_528A:				@ ...
		LDRB	R0, [R5,R4]
		BL	DisplaySendCommand
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #28
		BCC	loc_528A
		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfStatus - dfData)]
		LSLS	R0, R0,	#0x1D
		BPL	loc_52BA
		MOVS	R0, #0xA2
		BL	DisplaySendCommand
		MOVS	R0, #0x80
		BL	DisplaySendCommand
		MOVS	R0, #0xA0
		BL	DisplaySendCommand
		MOVS	R0, #0x53
		BL	DisplaySendCommand

loc_52BA:				@ ...
		BL	SSD1327_ClearScreen
		LDR	R1, =0x40004890
		MOVS	R0, #1
		STR	R0, [R1]
		BL	WaitOnTMR2
		MOVS	R0, #0xAF
		BL	DisplaySendCommand
		POP.W	{R4-R6,LR}
		MOVS	R0, #20
		B.W	WaitOnTMR2
@ End of function SSD1327_Init

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1327_ClearScreen:
		PUSH	{R4,LR}
		BL	SSD1327_CLS
		POP.W	{R4,LR}
		B.W	SSD1327_Refresh
@ End of function SSD1327_ClearScreen

@ ---------------------------------------------------------------------------
		.balign 4,0
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1327_PowerOn:
		PUSH	{R4-R6,LR}
		LDR	R0, =0x40004804
		MOVS	R4, #1
		STR	R4, [R0]
		MOV	R0, R4
		BL	WaitOnTMR2
		LDR	R5, =0x40004804
		MOVS	R0, #0
		SUBS	R5, R5,	#4
		STR	R0, [R5]
		MOVS	R0, #10
		BL	WaitOnTMR2
		STR	R4, [R5]
		POP.W	{R4-R6,LR}
		MOVS	R0, #1
		B.W	WaitOnTMR2
@ End of function SSD1327_PowerOn

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1327_CLS:
		MOVS	R0, #0
		LDR	R2, =ScreenBuffer
		MOV	R1, R0
		MOV.W	R3, #0x400

loc_532A:				@ ...
		STRB	R1, [R2,R0]
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		CMP	R0, R3
		BCC	loc_532A
		BX	LR
@ End of function SSD1327_CLS

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1327_Image:
		PUSH	{R4}
		CMP	R2, #0x91
		BEQ	loc_534E
		CMP	R2, #0x88
		BEQ	loc_534E
		CMP	R2, #0x9A
		BEQ	loc_534E
		CMP	R2, #0x92
		BNE	loc_5352	@ 0x8B is missing!

loc_534E:				@ ...
		ADDS	R1, R1,	#2
		UXTB	R1, R1

loc_5352:				@ ...
		LDR	R4, =font2
		ADD.W	R2, R4,	R2,LSL#2
		LDR.W	R2, [R2,#-4]
		POP	{R4}
		B.W	SSD1327_Bitmap
@ End of function SSD1327_Image

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

SSD1327_Bitmap:
		PUSH.W	{R0-R11,LR}
		SUB	SP, SP,	#0x10
		ADDS	R4, R2,	#2
		STR	R4, [SP,#0xC]
		LDRB	R4, [R2]
		STR	R4, [SP,#4]
		ADDS	R4, R4,	#7
		AND.W	R9, R0,	#7
		LSLS	R1, R1,	#3
		LDRB	R2, [R2,#1]
		ADD.W	R0, R1,	R0,LSR#3
		RSB.W	R3, R9,	#8
		MOV.W	R11, R4,LSR#3
		MOVS	R6, #0
		LDR.W	LR, =ScreenBuffer
		STR	R2, [SP,#8]
		STR	R0, [SP]
		B	loc_5496
@ ---------------------------------------------------------------------------

loc_5398:				@ ...
		SUB.W	R1, R11, #1
		LDR	R0, [SP]
		CMP	R6, R1
		BNE	loc_53AA
		LDR	R1, [SP,#4]
		ANDS.W	R2, R1,	#7
		BNE	loc_53AC

loc_53AA:				@ ...
		MOVS	R2, #8

loc_53AC:				@ ...
		MOVS	R5, #0
		B	loc_5484
@ ---------------------------------------------------------------------------

loc_53B0:				@ ...
		SMULBB.W R4, R5, R11
		LDR	R1, [SP,#0xC]
		ADD	R1, R6
		LDRB	R1, [R4,R1]
		LDR	R4, [SP,#0x1C]
		CBZ	R4, loc_53C2
		MVNS	R1, R1
		UXTB	R1, R1

loc_53C2:				@ ...
		ADDS	R4, R0,	#1
		UXTH	R4, R4
		CMP.W	R9, #0
		BEQ	loc_53E4
		CMP	R2, R3
		BHI	loc_541A
		LDR	R4, [SP,#0x1C]
		CBZ	R4, loc_53EA
		LDR	R7, =SSD1327_MaskLeft
		LDRB.W	R4, [LR,R0]
		LDRB	R7, [R7,R3]
		ANDS	R4, R7
		STRB.W	R4, [LR,R0]
		B	loc_5406
@ ---------------------------------------------------------------------------

loc_53E4:				@ ...
		STRB.W	R1, [LR,R0]
		B	loc_547C
@ ---------------------------------------------------------------------------

loc_53EA:				@ ...
		LDR	R4, =SSD1327_MaskLeft
		SUB.W	R12, R0, R2
		LDRB	R7, [R4,R3]
		SUBS	R4, #8
		LDRB.W	R4, [R4,R12]
		LDRB.W	R12, [LR,R0]
		ORRS	R7, R4
		AND.W	R7, R7,	R12
		STRB.W	R7, [LR,R0]

loc_5406:				@ ...
		LDR	R4, =SSD1327_MaskLeft
		LSR.W	R1, R1,	R9
		SUBS	R4, #8
		LDRB.W	R7, [LR,R0]
		LDRB	R4, [R4,R3]
		ANDS	R1, R4
		ORRS	R1, R7
		B	loc_53E4
@ ---------------------------------------------------------------------------

loc_541A:				@ ...
		LDR	R7, =SSD1327_MaskLeft
		LDRB.W	R12, [LR,R0]
		LDRB.W	R10, [R7,R3]
		AND.W	R8, R12, R10
		LSR.W	R12, R1, R9
		SUBS	R7, #8
		CMP	R2, #8
		LDRB	R7, [R7,R3]
		AND.W	R12, R12, R7
		ORR.W	R12, R12, R8
		STRB.W	R12, [LR,R0]
		BCS	loc_5466
		RSB.W	R12, R2, #8
		ADD.W	R8, R12, R3
		LDR.W	R12, =SSD1327_MaskLeft
		LDRB.W	R7, [LR,R4]
		SUB.W	R12, R12, #8
		LSLS	R1, R3
		LDRB.W	R12, [R12,R8]
		AND.W	R1, R1,	R10
		AND.W	R7, R7,	R12
		ORRS	R1, R7
		B	loc_5478
@ ---------------------------------------------------------------------------

loc_5466:				@ ...
		LDRB.W	R12, [LR,R4]
		LSLS	R1, R3
		AND.W	R12, R12, R7
		AND.W	R1, R1,	R10
		ORR.W	R1, R1,	R12

loc_5478:				@ ...
		STRB.W	R1, [LR,R4]

loc_547C:				@ ...
		ADDS	R0, #8
		ADDS	R5, R5,	#1
		UXTH	R0, R0
		UXTB	R5, R5

loc_5484:				@ ...
		LDR	R1, [SP,#8]
		CMP	R5, R1
		BCC	loc_53B0
		LDR	R0, [SP]
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		ADDS	R6, R6,	#1
		UXTB	R6, R6
		STR	R0, [SP]

loc_5496:				@ ...
		CMP	R6, R11
		BCC.W	loc_5398
		LDR	R0, [SP,#4]
		ADD	SP, SP,	#0x20
		POP.W	{R4-R11,PC}
@ End of function SSD1327_Bitmap

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1327_ScreenOff:
		PUSH	{R4,LR}
		MOVS	R0, #0xAE
		BL	DisplaySendCommand
		LDR	R0, =0x40004890
		MOVS	R4, #0
		STR	R4, [R0]	@ PC4 =	low
		MOVS	R0, #100
		BL	WaitOnTMR2
		LDR	R0, =0x40004890
		SUBS	R0, #0x8C
		STR	R4, [R0]	@ PA1 =	low
		MOVS	R0, #100
		BL	WaitOnTMR2
		LDR	R0, =0x40004890
		SUBS	R0, #0x90
		STR	R4, [R0]	@ PA0 =	low
		POP.W	{R4,LR}
		MOVS	R0, #100
		B.W	WaitOnTMR2
@ End of function SSD1327_ScreenOff

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgSSD1327_Refresh:
		PUSH	{R4,LR}
		MOVS	R3, #0x7F
		MOVS	R2, #0
		MOVS	R1, #0x2F
		MOVS	R0, #0x10
		BL	SSD1327_SetColsRowsAddrs
		POP.W	{R4,LR}
		MOV.W	R1, #0x400
		LDR	R0, =ScreenBuffer
		B.W	DisplaySendData
@ End of function SSD1327_Refresh

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_Plot:
		PUSH	{R4-R6,LR}
		LSRS	R4, R1,	#3
		AND.W	R3, R1,	#7
		MOVS	R6, #1
		LSLS	R6, R3
		LDR	R5, =ScreenBuffer
		ADD.W	R4, R0,	R4,LSL#6
		LSRS	R1, R1,	#3
		ADD.W	R0, R0,	R1,LSL#6
		MOV	R1, R5
		UXTB	R3, R6
		LDRB	R0, [R0,R1]
		ADD	R4, R5
		CBZ	R2, loc_5526
		ORRS	R0, R3
		B	loc_5528
@ ---------------------------------------------------------------------------

loc_5526:				@ ...
		BICS	R0, R3

loc_5528:				@ ...
		STRB	R0, [R4]
		POP	{R4-R6,PC}
@ End of function SSD1306_Plot

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_Init:
		PUSH	{R4-R6,LR}
		BL	SSD1306_PowerOn
		LDR	R5, =SSD1306_InitSeq
		MOVS	R4, #0

loc_553A:				@ ...
		LDRB	R0, [R5,R4]
		BL	DisplaySendCommand
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #0x16
		BCC	loc_553A
		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfStatus - dfData)] @	dfStatus
		LSLS	R0, R0,	#29
		BPL	loc_5576
		MOVS	R0, #0xC0
		BL	DisplaySendCommand
		MOVS	R0, #0xD3
		BL	DisplaySendCommand
		MOVS	R0, #0x60
		BL	DisplaySendCommand
		MOVS	R0, #0xDC
		BL	DisplaySendCommand
		MOVS	R0, #0x20
		BL	DisplaySendCommand
		MOVS	R0, #0xA0
		BL	DisplaySendCommand

loc_5576:				@ ...
		BL	SSD1306_ClearScreen
		MOVS	R0, #0xAF
		BL	DisplaySendCommand
		POP.W	{R4-R6,LR}
		MOVS	R0, #20
		B.W	WaitOnTMR2
@ End of function SSD1306_Init

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_ClearScreen:
		PUSH	{R4,LR}
		BL	SSD1306_CLS
		POP.W	{R4,LR}
		B.W	SSD1306_Refresh
@ End of function SSD1306_ClearScreen

@ ---------------------------------------------------------------------------
		.balign 4,0
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_PowerOn:
		PUSH	{R4-R6,LR}
		LDR	R0, =0x40004804
		MOVS	R4, #1
		STR	R4, [R0]	@ PA1 =	high (display Vdd)
		LDR	R0, =0x40004804
		ADDS	R0, #0x8C
		STR	R4, [R0]	@ PC4 =	high (display Vcc)
		MOV	R0, R4
		BL	WaitOnTMR2
		LDR	R5, =0x40004804
		MOVS	R0, #0
		SUBS	R5, R5,	#4
		STR	R0, [R5]	@ PA0 =	low (display reset)
		MOVS	R0, #1
		BL	WaitOnTMR2
		STR	R4, [R5]	@ PA0 =	high
		POP.W	{R4-R6,LR}
		MOVS	R0, #10
		B.W	WaitOnTMR2
@ End of function SSD1306_PowerOn

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_CLS:
		LDR	R1, =ScreenBuffer
		MOVS	R2, #0
		MOV	R3, R2

loc_55DE:				@ ...
		MOVS	R0, #0

loc_55E0:				@ ...
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R3, [R1],#1
		CMP	R0, #64
		BCC	loc_55E0
		ADDS	R2, R2,	#1
		UXTB	R2, R2
		CMP	R2, #16
		BCC	loc_55DE
		BX	LR
@ End of function SSD1306_CLS

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_Image:
		PUSH	{R4}
		CMP	R2, #0x91	@ "p"
		BEQ	loc_560E
		CMP	R2, #0x88	@ "g"
		BEQ	loc_560E
		CMP	R2, #0x9A	@ "y"
		BEQ	loc_560E
		CMP	R2, #0x92	@ "q"
		BNE	loc_5612	@ 0x8B ("j") is missing!

loc_560E:				@ ...
		ADDS	R1, R1,	#2
		UXTB	R1, R1

loc_5612:				@ ...
		LDR	R4, =font1
		ADD.W	R2, R4,	R2,LSL#2
		LDR.W	R2, [R2,#-4]
		POP	{R4}
		B.W	SSD1306_Bitmap
@ End of function SSD1306_Image

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_Bitmap:
		PUSH.W	{R0-R11,LR}
		SUB	SP, SP,	#0xC
		LSRS	R0, R1,	#3
		AND.W	R1, R1,	#7
		STR	R0, [SP,#4]
		RSB.W	R0, R1,	#8
		STR	R0, [SP]
		LDRB	R0, [R2,#1]
		LDRB.W	R11, [R2]
		LSRS	R0, R0,	#3
		MOVS	R5, #0
		ADD.W	LR, R2,	#2
		MOV	R6, R5
		STR	R0, [SP,#8]
		B	loc_56CA
@ ---------------------------------------------------------------------------

loc_5650:				@ ...
		LDR	R0, [SP,#4]
		LDR	R2, =ScreenBuffer
		ADD	R0, R6
		ADD.W	R2, R2,	R0,LSL#6
		LDR	R0, [SP,#0xC]
		ADDS	R3, R2,	R0
		ADD.W	R4, R3,	#0x40
		MOVS	R0, #0
		B	loc_56C2
@ ---------------------------------------------------------------------------

loc_5666:				@ ...
		LDRB.W	R2, [LR,R5]
		LDR	R7, [SP,#0x18]
		CBZ	R7, loc_5672
		MVNS	R2, R2
		UXTB	R2, R2

loc_5672:				@ ...
		CBZ	R1, loc_56B8
		LDR.W	R10, =SSD1306_MaskLeft
		LDRB	R7, [R4,R0]
		SUB.W	R9, R10, #8
		LDRB.W	R12, [R10,R1]
		AND.W	R7, R7,	R12
		STRB	R7, [R4,R0]
		LDR.W	R12, [SP]
		LDRB.W	R8, [R9,R1]
		LSR.W	R12, R2, R12
		AND.W	R12, R12, R8
		ORR.W	R12, R12, R7
		STRB.W	R12, [R4,R0]
		LDRB	R7, [R3,R0]
		LDRB.W	R12, [R9,R1]
		LSLS	R2, R1
		AND.W	R7, R7,	R12
		STRB	R7, [R3,R0]
		LDRB.W	R12, [R10,R1]
		AND.W	R2, R2,	R12
		ORRS	R2, R7

loc_56B8:				@ ...
		STRB	R2, [R3,R0]
		ADDS	R0, R0,	#1
		ADDS	R5, R5,	#1
		UXTB	R0, R0
		UXTH	R5, R5

loc_56C2:				@ ...
		CMP	R0, R11
		BCC	loc_5666
		ADDS	R6, R6,	#1
		UXTB	R6, R6

loc_56CA:				@ ...
		LDR	R0, [SP,#8]
		CMP	R6, R0
		BCC	loc_5650
		ADD	SP, SP,	#0x1C
		MOV	R0, R11
		POP.W	{R4-R11,PC}
@ End of function SSD1306_Bitmap

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_ScreenOff:
		PUSH	{R4,LR}
		MOVS	R0, #0xAE
		BL	DisplaySendCommand
		LDR	R0, =0x40004890
		MOVS	R4, #0
		STR	R4, [R0]	@ PC4_PDIO = 0
		MOVS	R0, #100
		BL	WaitOnTMR2
		LDR	R0, =0x40004890
		SUBS	R0, #0x8C
		STR	R4, [R0]	@ PA1_PDIO = 0
		MOVS	R0, #100
		BL	WaitOnTMR2
		LDR	R0, =0x40004890
		SUBS	R0, #0x90
		STR	R4, [R0]	@ PA0_PDIO = 0
		POP.W	{R4,LR}
		MOVS	R0, #100
		B.W	WaitOnTMR2
@ End of function SSD1306_ScreenOff

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSSD1306_Refresh:
		PUSH	{R4-R6,LR}
		LDR	R5, =ScreenBuffer
		LDR	R6, =dfData
		MOVS	R4, #0

loc_571C:				@ ...
		ADD.W	R0, R4,	#0xB0
		UXTB	R0, R0
		BL	DisplaySendCommand
		MOVS	R0, #0
		BL	DisplaySendCommand
		LDRB.W	R0, [R6,#(dfStatus - dfData)]
		LSLS	R0, R0,	#29
		BPL	loc_5738
		MOVS	R0, #0x12
		B	loc_573A
@ ---------------------------------------------------------------------------

loc_5738:				@ ...
		MOVS	R0, #0x10

loc_573A:				@ ...
		BL	DisplaySendCommand
		CBZ	R4, loc_5742
		ADDS	R5, #0x40

loc_5742:				@ ...
		MOVS	R1, #0x40
		MOV	R0, R5
		BL	DisplaySendData
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #0x10
		BCC	loc_571C
		POP	{R4-R6,PC}
@ End of function SSD1306_Refresh

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawFillRect:
		PUSH.W	{R4-R8,LR}
		MOV	R5, R3
		MOV	R7, R2
		MOV	R4, R1
		MOV	R8, R0
		LDR	R6, [SP,#0x18]
		B	loc_577C
@ ---------------------------------------------------------------------------

loc_576C:				@ ...
		MOV	R3, R6
		MOV	R2, R7
		MOV	R1, R4
		MOV	R0, R8
		BL	DrawHLine
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_577C:				@ ...
		CMP	R4, R5
		BLS	loc_576C
		POP.W	{R4-R8,PC}
@ End of function DrawFillRect

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgClearScreenBuffer:
		LDR	R0, =DisplayModel
		LDRB	R0, [R0]
		CBZ	R0, loc_5792
		CMP	R0, #1
		BNE	locret_5796
		B.W	SSD1327_CLS
@ ---------------------------------------------------------------------------

loc_5792:				@ ...
		B.W	SSD1306_CLS
@ ---------------------------------------------------------------------------

locret_5796:				@ ...
		BX	LR
@ End of function ClearScreenBuffer

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawImage:
		LDR	R3, =DisplayModel
		LDRB	R3, [R3]
		CBZ	R3, loc_57AC
		CMP	R3, #1
		BNE	locret_57B2
		MOVS	R3, #0
		B.W	SSD1327_Image
@ ---------------------------------------------------------------------------

loc_57AC:				@ ...
		MOVS	R3, #0
		B.W	SSD1306_Image
@ ---------------------------------------------------------------------------

locret_57B2:				@ ...
		BX	LR
@ End of function DrawImage

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawImageInv:
		LDR	R3, =DisplayModel
		LDRB	R3, [R3]
		CBZ	R3, loc_57C6
		CMP	R3, #1
		BNE	locret_57CC
		B.W	SSD1327_Image
@ ---------------------------------------------------------------------------

loc_57C6:				@ ...
		MOVS	R3, #1
		B.W	SSD1306_Image
@ ---------------------------------------------------------------------------

locret_57CC:				@ ...
		BX	LR
@ End of function DrawImageInv

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawLOGO:
		PUSH.W	{R4-R10,LR}
		SUB.W	SP, SP,	#0x200
		MOV	R9, R1
		MOV	R10, R0
		MOV.W	R1, #0x200
		MOV	R0, SP
		BL	MemClear
		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfStatus - dfData)]
		LSLS	R0, R0,	#28
		BMI	loc_584C
		LDR	R0, =DisplayModel
		MOVS	R6, #0
		MOV.W	R7, #0x40000000
		LDRB	R0, [R0]
		MOV	R5, SP
		CBZ	R0, loc_5854
		CMP	R0, #1
		BNE	loc_584C
		BL	SYS_UnlockReg
		BL	FMCEnableISP
		MOVS	R4, #0
		MOV.W	R8, #0x19000

loc_5814:				@ ...
		ADD.W	R1, R5,	R4,LSL#8
		ADD.W	R0, R8,	R4,LSL#8
		BL	FMCRead100
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #2
		BCC	loc_5814
		BL	FMCDisableISP
		STR.W	R6, [R7,#0x100]
		LDRB.W	R0, [SP]
		CMP	R0, #0x40
		BNE	loc_584C
		LDRB.W	R0, [SP,#1]
		CMP	R0, #0x28
		BNE	loc_584C
		MOVS	R3, #0
		MOV	R2, SP
		MOV	R1, R9
		MOV	R0, R10
		BL	SSD1327_Bitmap

loc_584C:				@ ...
		ADD.W	SP, SP,	#0x200
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_5854:				@ ...
		BL	SYS_UnlockReg
		BL	FMCEnableISP
		MOVS	R4, #0
		MOV.W	R8, #0x19200

loc_5862:				@ ...
		ADD.W	R1, R5,	R4,LSL#8
		ADD.W	R0, R8,	R4,LSL#8
		BL	FMCRead100
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #2
		BCC	loc_5862
		BL	FMCDisableISP
		STR.W	R6, [R7,#0x100]
		LDRB.W	R0, [SP]
		CMP	R0, #64
		BNE	loc_584C
		LDRB.W	R0, [SP,#1]
		CMP	R0, #40
		BNE	loc_584C
		MOVS	R3, #0
		MOV	R2, SP
		MOV	R1, R9
		MOV	R0, R10
		BL	SSD1306_Bitmap
		B	loc_584C
@ End of function DrawLOGO

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawValue:

anonymous_0	=  0

		PUSH.W	{R4-R10,LR}
		SUB	SP, SP,	#0x18
		MOV	R10, R1
		LDRD.W	R5, R4,	[SP,#0x38]
		CBNZ	R4, loc_58DA
		MOVW	R1, #10000
		CMP	R2, R1
		BCC	loc_58BE
		MOVS	R4, #5
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58BE:				@ ...
		CMP.W	R2, #1000
		BCC	loc_58C8
		MOVS	R4, #4
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58C8:				@ ...
		CMP	R2, #100
		BCC	loc_58D0
		MOVS	R4, #3
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58D0:				@ ...
		CMP	R2, #10
		BCC	loc_58D8
		MOVS	R4, #2
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58D8:				@ ...
		MOVS	R4, #1

loc_58DA:				@ ...
		MOVS	R6, #0
		MOV	R8, SP
		MOV.W	R12, #10
		B	loc_5902
@ ---------------------------------------------------------------------------

loc_58E4:				@ ...
		UDIV.W	R1, R2,	R12
		MLS.W	R1, R12, R1, R2
		UDIV.W	R2, R2,	R12
		SUB.W	R9, R4,	R6
		ADDS	R7, R1,	R5
		ADD.W	R9, R8,	R9,LSL#1
		ADDS	R6, R6,	#1
		STRH.W	R7, [R9,#-2]
		UXTB	R6, R6

loc_5902:				@ ...
		CMP	R6, R4
		BCC	loc_58E4
		MOVS	R1, #0
		STRH.W	R1, [R8,R6,LSL#1]
		CBZ	R3, loc_596E
		CMP	R4, R3
		BLS	loc_5978
		SUBS	R1, R4,	R3
		B	loc_5924
@ ---------------------------------------------------------------------------

loc_5916:				@ ...
		LDRH.W	R2, [R8,R4,LSL#1]
		ADD.W	R3, R8,	R4,LSL#1
		SUBS	R4, R4,	#1
		STRH	R2, [R3,#2]
		UXTB	R4, R4

loc_5924:				@ ...
		CMP	R1, R4
		BLE	loc_5916
		CMP	R5, #0xB
		BEQ	loc_594E
		CMP	R5, #0x15
		BEQ	loc_5952
		CMP	R5, #0x1F
		BEQ	loc_5956
		CMP	R5, #0x29
		BEQ	loc_595A
		CMP	R5, #0x33
		BEQ	loc_595E
		CMP	R5, #0x3D
		BEQ	loc_5962
		CMP	R5, #0x48
		BEQ	loc_5966
		CMP	R5, #0x52
		BEQ	loc_596A
		CMP	R5, #0x5C
		BEQ	loc_5970
		B	loc_5978
@ ---------------------------------------------------------------------------

loc_594E:				@ ...
		MOVS	R1, #0xC1
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5952:				@ ...
		MOVS	R1, #0xD8
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5956:				@ ...
		MOVS	R1, #0xDC
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_595A:				@ ...
		MOVS	R1, #0xDF
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_595E:				@ ...
		MOVS	R1, #0xF1
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5962:				@ ...
		MOVS	R1, #0x47
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5966:				@ ...
		MOVS	R1, #0xF7
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_596A:				@ ...
		MOVS	R1, #0xF9
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_596E:				@ ...
		B	loc_5978
@ ---------------------------------------------------------------------------

loc_5970:				@ ...
		MOVS	R1, #0x66

loc_5972:				@ ...
		ADD.W	R2, R8,	R4,LSL#1
		STRH	R1, [R2,#2]

loc_5978:				@ ...
		MOV	R1, R0
		MOV	R2, R10
		MOV	R0, R8
		BL	DrawString
		ADD	SP, SP,	#0x18
		POP.W	{R4-R10,PC}
@ End of function DrawValue

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawValueInv:

anonymous_0	=  0

		PUSH.W	{R4-R10,LR}
		SUB	SP, SP,	#0x18
		MOV	R10, R1
		LDRD.W	R6, R4,	[SP,#0x38]
		CBNZ	R4, loc_59BE
		MOVW	R1, #10000
		CMP	R2, R1
		BCC	loc_59A2
		MOVS	R4, #5
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59A2:				@ ...
		CMP.W	R2, #1000
		BCC	loc_59AC
		MOVS	R4, #4
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59AC:				@ ...
		CMP	R2, #100
		BCC	loc_59B4
		MOVS	R4, #3
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59B4:				@ ...
		CMP	R2, #10
		BCC	loc_59BC
		MOVS	R4, #2
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59BC:				@ ...
		MOVS	R4, #1

loc_59BE:				@ ...
		MOVS	R5, #0
		MOV	R8, SP
		MOV.W	R12, #10
		B	loc_59E6
@ ---------------------------------------------------------------------------

loc_59C8:				@ ...
		UDIV.W	R1, R2,	R12
		MLS.W	R1, R12, R1, R2
		UDIV.W	R2, R2,	R12
		SUB.W	R9, R4,	R5
		ADDS	R7, R1,	R6
		ADD.W	R9, R8,	R9,LSL#1
		ADDS	R5, R5,	#1
		STRH.W	R7, [R9,#-2]
		UXTB	R5, R5

loc_59E6:				@ ...
		CMP	R5, R4
		BCC	loc_59C8
		MOVS	R1, #0
		STRH.W	R1, [R8,R5,LSL#1]
		CBZ	R3, loc_5A42
		CMP	R4, R3
		BLS	loc_5A42
		SUBS	R1, R4,	R3
		B	loc_5A08
@ ---------------------------------------------------------------------------

loc_59FA:				@ ...
		LDRH.W	R2, [R8,R4,LSL#1]
		ADD.W	R3, R8,	R4,LSL#1
		SUBS	R4, R4,	#1
		STRH	R2, [R3,#2]
		UXTB	R4, R4

loc_5A08:				@ ...
		CMP	R1, R4
		BLE	loc_59FA
		CMP	R6, #0x52
		BEQ	loc_5A26
		CMP	R6, #0x33
		BEQ	loc_5A2A
		CMP	R6, #0x29
		BEQ	loc_5A2E
		CMP	R6, #0x15
		BEQ	loc_5A32
		CMP	R6, #0x1F
		BEQ	loc_5A36
		CMP	R6, #0xB
		BEQ	loc_5A3A
		B	loc_5A42
@ ---------------------------------------------------------------------------

loc_5A26:				@ ...
		MOVS	R1, #0xF9
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A2A:				@ ...
		MOVS	R1, #0xF1
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A2E:				@ ...
		MOVS	R1, #0xDF
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A32:				@ ...
		MOVS	R1, #0xD8
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A36:				@ ...
		MOVS	R1, #0xDC
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A3A:				@ ...
		MOVS	R1, #0xC1

loc_5A3C:				@ ...
		ADD.W	R2, R8,	R4,LSL#1
		STRH	R1, [R2,#2]

loc_5A42:				@ ...
		MOV	R1, R0
		MOV	R2, R10
		MOV	R0, R8
		BL	DrawStringInv
		ADD	SP, SP,	#0x18
		POP.W	{R4-R10,PC}
@ End of function DrawValueInv

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawString:	
		PUSH	{R4-R6,LR}
		MOV	R6, R2
		MOV	R5, R1
		MOV	R4, R0

loc_5A5A:				@ ...
		MOV	R1, R6
		LDRH	R2, [R4]
		MOV	R0, R5
		BL	DrawImage
		ADD	R0, R5
		UXTB	R5, R0
		LDRH.W	R0, [R4,#2]!
		CMP	R0, #0
		BNE	loc_5A5A
		POP	{R4-R6,PC}
@ End of function DrawString


@ =============== S U B	R O U T	I N E =======================================


orgDrawStringInv:
		PUSH	{R4-R6,LR}
		MOV	R6, R2
		MOV	R5, R1
		MOV	R4, R0

loc_5A7A:				@ ...
		MOV	R1, R6
		LDRH	R2, [R4]
		MOV	R0, R5
		BL	DrawImageInv
		ADD	R0, R5
		UXTB	R5, R0
		LDRH.W	R0, [R4,#2]!
		CMP	R0, #0
		BNE	loc_5A7A
		POP	{R4-R6,PC}
@ End of function DrawStringInv


@ =============== S U B	R O U T	I N E =======================================


orgDrawStringCentered:
		PUSH	{R4-R6,LR}
		MOV	R4, R1
		MOV	R5, R0
		BL	GetStrCenteredX
		MOV	R1, R0
		MOV	R2, R4
		MOV	R0, R5
		POP.W	{R4-R6,LR}
		B.W	DrawString
@ End of function DrawStringCentered

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

ScreenOff:
		LDR	R0, =DisplayModel
		LDRB	R0, [R0]
		CBZ	R0, loc_5ABA
		CMP	R0, #1
		BNE	locret_5ABE
		B.W	SSD1327_ScreenOff
@ ---------------------------------------------------------------------------

loc_5ABA:				@ ...
		B.W	SSD1306_ScreenOff
@ ---------------------------------------------------------------------------

locret_5ABE:				@ ...
		BX	LR
@ End of function ScreenOff

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

DisplayRefresh:
		LDR	R0, =DisplayModel
		LDRB	R0, [R0]
		CBZ	R0, loc_5AD2
		CMP	R0, #1
		BNE	locret_5AD6
		B.W	SSD1327_Refresh
@ ---------------------------------------------------------------------------

loc_5AD2:				@ ...
		B.W	SSD1306_Refresh
@ ---------------------------------------------------------------------------

locret_5AD6:				@ ...
		BX	LR
@ End of function DisplayRefresh

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================


fbSetTimeoutValue:
		LDR	R2, =fbTimeoutMask
		LDR	R1, =TimeoutsTable
		LDRB	R2, [R2,#(fbCurrentTimeout - fbTimeoutMask)]
		STRB.W	R0, [R1,R2,LSL#3]
		BX	LR
@ End of function fbSetTimeoutValue

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgNextMode:
		LDR	R1, =dfData
		MOV	R0, R1
		LDRB.W	R2, [R1,#(dfTiOn - dfData)]
		LDRB	R0, [R0,#(dfMode - dfData)]
		CBNZ	R2, loc_5AFE
		CBZ	R0, loc_5B0E

loc_5AFE:				@ ...
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R1,#(dfMode - dfData)]
		CMP	R0, #7
		BCC	loc_5B12
		MOVS	R0, #0
		STRB	R0, [R1,#(dfMode - dfData)]
		B	loc_5B1E
@ ---------------------------------------------------------------------------

loc_5B0E:				@ ...
		MOVS	R0, #4
		B	loc_5B26
@ ---------------------------------------------------------------------------

loc_5B12:				@ ...
		CBZ	R0, loc_5B1E
		CMP	R0, #1
		BEQ	loc_5B24
		CMP	R0, #2
		BEQ	loc_5B24
		B	loc_5B28
@ ---------------------------------------------------------------------------

loc_5B1E:				@ ...
		LDRB.W	R0, [R1,#(dfLastTCMode - dfData)]
		B	loc_5B26
@ ---------------------------------------------------------------------------

loc_5B24:				@ ...
		MOVS	R0, #3

loc_5B26:				@ ...
		STRB	R0, [R1,#(dfMode - dfData)]

loc_5B28:				@ ...
		B.W	ModeChange
@ End of function NextMode

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_pwm

@ void __fastcall PWM_ConfigOutputChannel(int *pwmbase, int chan, int freq)
PWM_ConfigOutputChannel:				@ ...
		PUSH.W	{R4-R12,LR}
		MOV	R4, R0
		MOVS	R5, #1
		MOV	R6, R1
		LSLS	R0, R5,	#30
		LDR	R1, =0x40058000
		LDR.W	R0, [R0,#0x218]
		MOV	R9, R3
		MOV	R8, R2
		MOVW	R7, #0xFFFF
		CMP	R4, R1
		BNE	loc_5B54
		AND.W	R0, R0,	#1
		B	loc_5B58
@ ---------------------------------------------------------------------------

loc_5B54:				@ ...
		AND.W	R0, R0,	#2

loc_5B58:				@ ...
		CBZ	R0, loc_5B7A
		BL	SystemCoreClockUpdate
		LDR	R0, =SystemCoreClock
		LDR	R0, [R0]

loc_5B62:				@ ...
		MOV.W	R2, #0x10000
		MOVW	R3, #0xFFF

loc_5B6A:				@ ...
		UDIV.W	R1, R0,	R8
		UDIV.W	R1, R1,	R5
		CMP	R1, R2
		BHI	loc_5B80
		UXTH	R7, R1
		B	loc_5B88
@ ---------------------------------------------------------------------------

loc_5B7A:				@ ...
		BL	CLKGetPLLClockFreq
		B	loc_5B62
@ ---------------------------------------------------------------------------

loc_5B80:				@ ...
		ADDS	R5, R5,	#1
		UXTH	R5, R5
		CMP	R5, R3
		BCC	loc_5B6A

loc_5B88:				@ ...
		ADDS	R1, R5,	#1
		MULS	R1, R7
		UDIV.W	R12, R0, R1
		SUBS	R5, R5,	#1
		LSRS	R1, R6,	#1
		ADD.W	R1, R4,	R1,LSL#2
		UXTH	R0, R5
		STR	R0, [R1,#0x14]
		LDR	R0, [R4,#4]
		LSLS	R1, R6,	#1
		MOVS	R3, #3
		LSLS	R3, R1
		BICS	R0, R3
		MOV.W	R10, #1
		LSL.W	R3, R10, R1
		ORRS	R0, R3
		STR	R0, [R4,#4]
		LDR	R0, [R4,#4]
		LSLS	R2, R6
		BICS	R0, R2
		STR	R0, [R4,#4]
		SUBS	R7, R7,	#1
		ADD.W	R2, R4,	R6,LSL#2
		UXTH	R5, R7
		STR	R5, [R2,#0x30]
		MOV.W	R8, #0x10
		ADD.W	R8, R8,	R6,LSL#1
		MOV.W	R11, #0x30003
		MOVS	R0, #2
		LSL.W	R0, R0,	R8
		LSL.W	R6, R11, R1
		CMP.W	R9, #0
		BEQ	loc_5C04
		ADDS	R5, R5,	#1
		MUL.W	R1, R9,	R5
		MOVS	R3, #0x64
		UDIV.W	R1, R1,	R3
		SUBS	R1, R1,	#1
		STR	R1, [R2,#0x50]
		LDR.W	R1, [R4,#0xB0]!
		BICS	R1, R6
		STR	R1, [R4]
		LDR	R2, [R4]
		LSL.W	R1, R10, R8
		ORRS	R2, R1
		STR	R2, [R4]
		B	loc_5C16
@ ---------------------------------------------------------------------------

loc_5C04:				@ ...
		MOVS	R1, #0
		STR	R1, [R2,#0x50]
		LDR.W	R1, [R4,#0xB0]!
		BICS	R1, R6
		STR	R1, [R4]
		LDR	R1, [R4]
		ORRS	R1, R3
		STR	R1, [R4]

loc_5C16:				@ ...
		LDR	R1, [R4,#4]
		BICS	R1, R6
		STR	R1, [R4,#4]
		LDR	R1, [R4,#4]
		ORRS	R1, R0
		STR	R1, [R4,#4]
		MOV	R0, R12
		POP.W	{R4-R12,PC}
@ End of function PWM_ConfigOutputChannel

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_pwm
		
PWM_EnableOutput:				@ ...
		LDR.W	R2, [R0,#0xD8]!
		ORRS	R2, R1
		STR	R2, [R0]
		BX	LR
@ End of function PWM_EnableOutput

		.endif


@ =============== S U B	R O U T	I N E =======================================


		.ifne	keeporglibs_pwm
		
PWM_EnablePeriodInt:				@ ...
		LDR.W	R2, [R0,#0xE0]!
		MOV.W	R3, #0x100
		LSLS	R3, R1
		ORRS	R2, R3
		STR	R2, [R0]
		BX	LR
@ End of function PWM_EnablePeriodInt

		.balign 4,0

		.endif

@ ---------------------------------------------------------------------------

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitPWM:
		PUSH	{R4-R6,LR}
		LDR	R5, =150000
		LDR	R4, =0x40058000
		MOVS	R3, #0
		MOV	R2, R5		@ freq
		MOV	R1, R3		@ chan
		MOV	R0, R4		@ pwmbase
		BL	PWM_ConfigOutputChannel
		MOVS	R3, #0
		MOV	R2, R5		@ freq
		MOVS	R1, #2		@ chan
		MOV	R0, R4		@ pwmbase
		BL	PWM_ConfigOutputChannel
		MOVS	R1, #1
		MOV	R0, R4
		BL	PWM_EnableOutput
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R4
		BL	PWM_EnablePeriodInt
		MOVS	R1, #4
		MOV	R0, R4
		BL	PWM_EnableOutput
		MOVS	R2, #0
		MOVS	R1, #2
		MOV	R0, R4
		BL	PWM_EnablePeriodInt
		MOVS	R1, #1
		MOV	R0, R4
		BL	PWM_Start
		MOVS	R1, #4
		MOV	R0, R4
		BL	PWM_Start
		LDR	R2, =BoostDuty
		MOVS	R1, #0
		STRH	R1, [R2]
		STR	R1, [R4,#0x58]
		LDR	R0, =BuckDuty
		STRH	R1, [R0]
		STR	R1, [R4,#0x50]
		POP	{R4-R6,PC}
@ End of function InitPWM

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgBBC_Configure:
		LDR	R3, =0x40004080	@ PC_MODE
		MOV.W	R2, #0x40000000
		CBZ	R0, loc_5CE0
		CMP	R0, #2
		BNE	locret_5CDE
		LDR	R0, [R2,#0x40]
		BIC.W	R0, R0,	#0xF00
		STR	R0, [R2,#0x40]
		LDR	R0, [R2,#0x40]
		CBZ	R1, loc_5CFA
		ORR.W	R0, R0,	#0x600	@ PC2 =	PWM0 output/capture input

loc_5CDC:				@ ...
		STR	R0, [R2,#0x40]

locret_5CDE:				@ ...
		BX	LR
@ ---------------------------------------------------------------------------

loc_5CE0:				@ ...
		LDR	R0, [R2,#0x40]
		BIC.W	R0, R0,	#0xF
		STR	R0, [R2,#0x40]
		LDR	R0, [R2,#0x40]
		CBZ	R1, loc_5CF2
		ORR.W	R0, R0,	#6	@ PC0 =	PWM0 output/capture input
		B	loc_5CDC
@ ---------------------------------------------------------------------------

loc_5CF2:				@ ...
		STR	R0, [R2,#0x40]
		MOVS	R2, #1
		MOV	R1, R2		@ PC0 =	push-pull output
		B	loc_5D00
@ ---------------------------------------------------------------------------

loc_5CFA:				@ ...
		STR	R0, [R2,#0x40]
		MOVS	R2, #1
		MOVS	R1, #4		@ PC2 =	push-pull output

loc_5D00:				@ ...
		MOV	R0, R3
		B.W	GPIO_SetMode
@ End of function BBC_Configure

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================


		.ifne	keeporglibs_pwm
		
PWM_Start:				@ ...
		LDR	R2, [R0,#0x20]
		ORRS	R2, R1
		STR	R2, [R0,#0x20]
		BX	LR
@ End of function PWM_Start

		.endif


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgFlushAndSleep:
		LDR	R0, =0x40070000

loc_5D16:				@ ...
		LDR	R1, [R0,#0x18]
		LSLS	R1, R1,	#3	@ UART0	TXEMPTYF
		BPL	loc_5D16
		B.W	CLK_PowerDown
@ End of function FlushAndSleep

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDevicesOnOff:
		PUSH.W	{R4-R12,LR}
		LDR	R5, =0x40050000
		LDR.W	R8, =0x40051000
		LDR	R4, =0x40050000
		ADDS	R5, #0x20
		LDR	R7, =0x40051000
		LDR.W	R10, =0x4000485C
		LDR.W	R9, =0x400040C0
		LDR	R6, =0x400C0000
		MOV.W	R11, #0
		ADD.W	R8, R8,	#0x20
		CMP	R0, #0
		BEQ	loc_5E48
		LDR	R0, [R4]
		BIC.W	R0, R0,	#0x20000000
		STR	R0, [R4]	@ TMR0_CTL.INTEN = 0
		LDR	R0, [R5]
		BIC.W	R0, R0,	#0x20000000
		STR	R0, [R5]	@ TMR1_CTL.INTEN = 0
		LDR	R0, [R7]
		BIC.W	R0, R0,	#0x20000000
		STR	R0, [R7]	@ TMR2_CTL.INTEN = 0
		LDR.W	R1, [R8]
		BIC.W	R1, R1,	#0x20000000
		STR.W	R1, [R8]	@ TMR3_CTL.INTEN = 0
		LDR	R0, =0x40043000
		BL	EADC_Close
		MOVS	R1, #0
		MOVS	R0, #1
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #2
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #0xE
		BL	SetADCState
		LDR	R0, =0x4000485C
		MOV	R4, R11
		ADDS	R0, #0x28
		STR.W	R11, [R0]
		SUBS	R0, R0,	#4
		STR.W	R11, [R0]
		MOVS	R1, #0
		MOV	R0, R1
		BL	BBC_Configure
		LDR	R0, =0x4000485C
		ADDS	R0, #0x30
		STR	R4, [R0]
		SUBS	R0, R0,	#4
		STR	R4, [R0]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	BBC_Configure
		STR.W	R4, [R10]
		MOVS	R1, #0		@ num
		MOV	R0, R9		@ pinbase
		BL	GPIO_DisableInt
		LDR	R0, =0x4000485C
		ADDS	R0, #0x64
		STR	R4, [R0]
		MOVS	R2, #1
		MOV	R1, R2
		MOV	R0, R9
		BL	GPIO_SetMode
		MOVS	R1, #7		@ num
		MOV	R0, R9		@ pinbase
		BL	GPIO_DisableInt
		LDR	R0, =0x4000485C
		ADDS	R0, #0x80
		STR	R4, [R0]
		MOVS	R2, #1
		MOVS	R1, #0x80
		MOV	R0, R9
		BL	GPIO_SetMode
		LSLS	R5, R5,	#0x19
		LDR	R0, [R5,#0x54]
		LDR	R1, =0xFF000FFF
		ANDS	R0, R1
		STR	R0, [R5,#0x54]
		LDR	R0, [R5,#0x54]
		STR	R0, [R5,#0x54]
		LDR	R0, =0x4000485C
		ADDS	R0, #0xD0
		STR	R4, [R0]
		LDR	R7, =0x400040C0
		ASRS	R1, R0,	#0x13
		ADDS	R7, #0x40
		MOVS	R2, #1
		MOV	R0, R7
		BL	GPIO_SetMode
		LDR	R0, =0x4000485C
		ADDS	R0, #0xD4
		STR	R4, [R0]
		ASRS	R1, R0,	#0x12
		MOVS	R2, #1
		MOV	R0, R7
		BL	GPIO_SetMode
		LDR	R0, =0x4000485C
		ADDS	R0, #0xD8
		STR	R4, [R0]
		MOVS	R2, #1
		MOVS	R1, #8
		MOV	R0, R7
		BL	GPIO_SetMode
		LDR	R0, =0x4000485C
		ADDS	R0, #0xCC
		STR	R4, [R0]
		MOV.W	R8, #0x10001
		MOV	R2, R8
		MOVS	R1, #0
		MOV	R0, R7
		BL	GPIO_EnableInt
		MOV	R2, R8
		MOVS	R1, #2
		MOV	R0, R9
		B	loc_5E4A
@ ---------------------------------------------------------------------------

loc_5E48:				@ ...
		B	loc_5E88
@ ---------------------------------------------------------------------------

loc_5E4A:				@ ...
		BL	GPIO_EnableInt
		MOV	R2, R8
		MOVS	R1, #3
		MOV	R0, R9
		BL	GPIO_EnableInt
		BL	SYS_UnlockReg
		LDR	R0, [R5,#0x2C]
		BIC.W	R0, R0,	#0x100
		STR	R0, [R5,#0x2C]
		LDR	R0, [R5,#0x1C]
		BIC.W	R0, R0,	#2
		STR	R0, [R5,#0x1C]
		BL	SYS_DisableBOD
		STR	R4, [R5,#0x28]
		STR.W	R4, [R5,#0x100]
		MOV.W	R0, #0x108
		STR	R0, [R6,#4]
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x108
		STR	R0, [R6]

locret_5E84:				@ ...
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_5E88:				@ ...
		MOV.W	R0, #0x108
		STR	R0, [R6,#4]
		BL	SYS_UnlockReg
		MOV.W	R0, #0x100
		LSLS	R6, R0,	#0x16
		STR	R0, [R6,#0x2C]
		LDR	R0, [R6,#0x1C]
		ORR.W	R0, R0,	#2
		STR	R0, [R6,#0x1C]
		MOVS	R0, #3
		STR	R0, [R6,#0x28]
		MOVS	R1, #0
		MOVS	R0, #8
		BL	SYS_EnableBOD
		STR.W	R11, [R6,#0x100]
		LDR	R0, =0x400040C0
		MOVS	R1, #0		@ num
		ADDS	R0, #0x40	@ pinbase
		BL	GPIO_DisableInt
		MOVS	R1, #2		@ num
		MOV	R0, R9		@ pinbase
		BL	GPIO_DisableInt
		MOVS	R1, #3		@ num
		MOV	R0, R9		@ pinbase
		BL	GPIO_DisableInt
		LDR	R0, [R6,#0x54]
		LDR	R1, =0xFF000FFF
		ANDS	R0, R1
		STR	R0, [R6,#0x54]
		LDR	R0, [R6,#0x54]
		LDR	R1, =0x222000
		ORRS	R0, R1
		STR	R0, [R6,#0x54]
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R9
		BL	GPIO_SetMode
		MOVS	R2, #1
		MOVS	R1, #0
		MOV	R0, R9
		BL	GPIO_EnableInt
		MOVS	R2, #0
		MOVS	R1, #0x80
		MOV	R0, R9
		BL	GPIO_SetMode
		ASRS	R2, R6,	#0xE
		MOVS	R1, #7
		MOV	R0, R9
		BL	GPIO_EnableInt
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0xD4]!
		ORR.W	R1, R1,	#0x80
		STR	R1, [R0]
		MOVS	R1, #1
		STR.W	R1, [R10]
		MOV	R0, R1
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #2
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #0xE
		BL	SetADCState
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R4]
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R5]
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R7]
		LDR.W	R1, [R8]
		ORR.W	R1, R1,	#0x20000000
		STR.W	R1, [R8]
		B	locret_5E84
@ End of function DevicesOnOff

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orghidProcessCommand:
		PUSH	{R4-R6,LR}
		MOV	R6, R1
		MOV	R2, R1
		MOV	R1, R0
		LDR	R0, =hidRequest
		BL	USBD_MemCopy
		LDR	R4, =hidRequest
		MOV.W	R5, #-1
		LDRB	R1, [R4,#(hidRQLen - hidRequest)]
		CMP	R1, #0x12
		BHI	loc_5FC8
		CMP	R1, R6
		BHI	loc_5FC8
		LDR.W	R0, [R4,#(hidRQhidc - hidRequest)]
		LDR	R2, =0x43444948
		CMP	R0, R2
		BNE	loc_5FC8
		MOV	R0, R4
		BL	Checksum
		LDR.W	R1, [R4,#(hidRQchk - hidRequest)]
		CMP	R1, R0
		BNE	loc_5FC8
		LDRB	R0, [R4]
		CMP	R0, #0x7C	@ Reset	Dataflash
		BEQ	loc_5FF2
		BGT	loc_5FC0
		CMP	R0, #0x35	@ Get info
		BEQ	loc_5FCC
		CMP	R0, #0x3C	@ Update LDROM
		BEQ	loc_5FE2
		CMP	R0, #0x53	@ Write	Dataflash
		BNE	loc_5FC8
		B	loc_5FD4
@ ---------------------------------------------------------------------------

loc_5FC0:				@ ...
		CMP	R0, #0xA5	@ Set boot logo
		BEQ	loc_5FDC
		CMP	R0, #0xB4	@ Reset	system
		BEQ	loc_5FEA

loc_5FC8:				@ ...
		MOV	R0, R5
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_5FCC:				@ ...
		LDR	R0, =hidRequest
		BL	hidGetInfoCmd
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FD4:				@ ...
		LDR	R0, =hidRequest
		BL	hidSetParamCmd
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FDC:				@ ...
		LDR	R0, =hidRequest
		BL	hidBootLogoCmd

loc_5FE2:				@ ...
		LDR	R0, =hidRequest
		BL	hidLDUpdateCmd
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FEA:				@ ...
		LDR	R0, =hidRequest
		BL	hidResetSysCmd
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FF2:				@ ...
		LDR	R0, =hidRequest
		BL	hidResetParamCmd

loc_5FF8:				@ ...
		MOVS	R0, #0
		POP	{R4-R6,PC}
@ End of function hidProcessCommand

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgOvertemp:
		PUSH	{R4,LR}
		BL	StopFire
		LDR	R0, =Flags64
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x20000
		STR	R1, [R0]
		LDR	R0, =ScreenDuration
		MOVS	R1, #29
		STRB	R1, [R0,#(Screen - ScreenDuration)]
		MOVS	R1, #2
		STRB	R1, [R0]
		LDR	R0, =KeyPressTime
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]
		POP	{R4,PC}
@ End of function Overtemp

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgProbeAtomizer:
		PUSH.W	{R4-R8,LR}
		MOVS	R1, #1
		MOV	R0, R1
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #2
		BL	SetADCState
		MOVS	R0, #2
		BL	WaitOnTMR2
		LDR	R4, =AtoProbeCount
		MOVS	R7, #100
		LDR	R6, =TargetVolts
		LDRB	R0, [R4]
		LDR	R5, =Flags64
		CMP	R0, #8
		BEQ	loc_6068
		LDRH	R1, [R5]
		LSLS	R1, R1,	#23
		BMI	loc_606E
		B	loc_6084
@ ---------------------------------------------------------------------------

loc_6068:				@ ...
		LDRH	R0, [R5]
		LSLS	R0, R0,	#23
		BPL	loc_6076

loc_606E:				@ ...
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x4000000
		STR	R0, [R5]

loc_6076:				@ ...
		MOVS	R0, #50
		BL	GetVoltsForPower
		STR	R0, [R6]
		CBNZ	R0, loc_6094

loc_6080:				@ ...
		STR	R7, [R6]
		B	loc_60A0
@ ---------------------------------------------------------------------------

loc_6084:				@ ...
		CMP	R0, #9
		BEQ	loc_6122
		CMP	R0, #10
		BNE	loc_6080
		MOVS	R0, #150

loc_608E:				@ ...
		BL	GetVoltsForPower
		STR	R0, [R6]

loc_6094:				@ ...
		MOV	R1, R0
		MOV.W	R0, #600
		CMP	R1, R0
		BLS	loc_60A0
		STR	R0, [R6]

loc_60A0:				@ ...
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x2000
		STR	R0, [R5]
		BL	ReachTargetVoltage
		MOVS	R0, #2
		BL	WaitOnTMR2
		BL	ReadAtoTemp
		LDR	R0, [R5]
		MOV.W	R7, #0
		BIC.W	R0, R0,	#0x2000
		STR	R0, [R5]
		LSLS	R0, R0,	#23
		BMI	loc_60EE
		LDR	R0, =0x40004884
		STR	R7, [R0]
		LDR	R0, =0x40004884
		ADDS	R0, #8
		STR	R7, [R0]
		MOVS	R1, #0
		MOVS	R0, #1
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #2
		BL	SetADCState
		LDR	R0, =BoostDuty
		STRH	R7, [R0]
		LDR	R0, =0x40058000
		STR	R7, [R0,#0x58]
		LDR	R1, =BuckDuty
		STRH	R7, [R1]
		STR	R7, [R0,#0x50]

loc_60EE:				@ ...
		LDR.W	R12, =AtoStatus
		LDR	R1, =AtoError
		MOVS	R6, #1
		LDRB.W	R0, [R12]
		CBZ	R0, loc_612A
		CMP	R0, #1
		BEQ	loc_6126
		CMP	R0, #2
		BEQ	loc_612E
		CMP	R0, #3
		BEQ	loc_612A
		STRB	R7, [R1]

loc_610A:				@ ...
		LDRB	R2, [R4]
		MOV	R3, R4
		CMP	R2, #0xC
		BCS	loc_6116
		ADDS	R2, R2,	#1
		STRB	R2, [R3]

loc_6116:				@ ...
		MOV	R4, R12
		CMP	R0, #4
		BEQ	loc_6138
		STRH	R7, [R4,#(AtoRez - AtoStatus)]
		CBZ	R0, loc_6134
		B	loc_614A
@ ---------------------------------------------------------------------------

loc_6122:				@ ...
		MOVS	R0, #100
		B	loc_608E
@ ---------------------------------------------------------------------------

loc_6126:				@ ...
		MOVS	R2, #2
		B	loc_6130
@ ---------------------------------------------------------------------------

loc_612A:				@ ...
		STRB	R6, [R1]
		B	loc_610A
@ ---------------------------------------------------------------------------

loc_612E:				@ ...
		MOVS	R2, #3

loc_6130:				@ ...
		STRB	R2, [R1]
		B	loc_610A
@ ---------------------------------------------------------------------------

loc_6134:				@ ...
		STRB	R7, [R3]
		B	loc_614A
@ ---------------------------------------------------------------------------

loc_6138:				@ ...
		LDRB	R0, [R3]
		CMP	R0, #0xB
		BNE	locret_61D4
		LDR	R0, =AtoRezMilli
		MOVS	R2, #10
		LDR	R0, [R0]
		UDIV.W	R0, R0,	R2
		STRH	R0, [R4,#(AtoRez - AtoStatus)]

loc_614A:				@ ...
		LDR.W	LR, =byte_20000082
		LDRB	R1, [R1]
		LDRB.W	R2, [LR]
		CMP	R1, R2
		BNE	loc_6178
		LDRH	R0, [R4,#(AtoRez - AtoStatus)]
		MOVS	R3, #20
		UDIV.W	R7, R0,	R3
		LDRH.W	R12, [R4,#(word_200000B6 - AtoStatus)]
		ADD	R7, R0
		CMP	R7, R12
		BCC	loc_6178
		UDIV.W	R3, R0,	R3
		SUBS	R0, R0,	R3
		CMP	R0, R12
		BGT	loc_6178
		STRH.W	R12, [R4,#(AtoRez - AtoStatus)]

loc_6178:				@ ...
		LDRH	R0, [R4,#(AtoRez - AtoStatus)]
		LDRH	R3, [R4,#(word_200000B6	- AtoStatus)]
		CMP	R0, R3
		BNE	loc_6184
		CMP	R1, R2
		BEQ	loc_61A0

loc_6184:				@ ...
		CBNZ	R3, loc_6188
		STRB	R6, [R4,#(byte_200000B3	- AtoStatus)]

loc_6188:				@ ...
		STRH	R0, [R4,#(word_200000B6	- AtoStatus)]
		STRB.W	R1, [LR]
		BL	SetAtoLimits
		LDR	R0, [R5]
		MOVS	R1, #0x1E
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R5]
		LDR	R0, =ScreenDuration
		STRB	R1, [R0]

loc_61A0:				@ ...
		LDRB	R0, [R4,#(byte_200000B3	- AtoStatus)]
		CMP	R0, #0
		BEQ	locret_61D4
		CMP	R0, #2
		BNE	loc_61AC
		STRB	R6, [R4,#(byte_200000B3	- AtoStatus)]

loc_61AC:				@ ...
		LDR	R1, =dfData
		LDRH	R0, [R1,#(dfResistance - dfData)]
		CBNZ	R0, loc_61BE
		LDRH	R0, [R4,#(AtoRez - AtoStatus)]
		CBZ	R0, loc_61BE
		STRH	R0, [R1,#(dfResistance - dfData)]
		LDR	R1, =UpdateDFTimer
		MOVS	R0, #50
		STRB	R0, [R1]

loc_61BE:				@ ...
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x18800000
		ORR.W	R0, R0,	#0x80000000
		STR	R0, [R5]
		LDR	R0, =Flags68
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]

locret_61D4:				@ ...
		POP.W	{R4-R8,PC}
@ End of function ProbeAtomizer

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_spi
		
SPI_EnableAutoSS:
		LDR	R3, [R0,#8]
		ORRS	R1, R2
		BIC.W	R3, R3,	#0xD
		ORRS	R3, R1
		ORR.W	R1, R3,	#8
		STR	R1, [R0,#8]
		BX	LR
@ End of function SPI_EnableAutoSS

@ ---------------------------------------------------------------------------
		.balign 4,0
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitSPI0:				@ ...
		PUSH	{R3-R5,LR}
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x54]
		LDR	R2, =0xFF000FFF
		ANDS	R1, R2
		STR	R1, [R0,#0x54]
		LDR	R1, [R0,#0x54]
		LDR	R2, =0x222000
		ORRS	R1, R2
		STR	R1, [R0,#0x54]	@ PE11-PE13 = SPI0 MOSI0/SS/CLK
		LDR	R0, =4000000
		LDR	R4, =0x40060000
		STR	R0, [SP]
		MOVS	R3, #8
		MOVS	R2, #4
		MOVS	R1, #0
		MOV	R0, R4
		BL		SPI_Open
		MOV	R0, R4
		POP.W	{R3-R5,LR}
		MOVS	R2, #0
		MOVS	R1, #1
		B.W		SPI_EnableAutoSS
@ End of function orgInitSPI0

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_spi

SPI_Open:				@ ...
		PUSH.W	{R4-R10,LR}
		LDR.W	R8, =0x40061000
		LDR	R6, [SP,#0x20]
		MOV	R7, R3
		MOV	R10, R2
		MOV	R9, R1
		MOV	R4, R0
		CMP	R0, R8
		BEQ	loc_628C
		LDR	R0, =0x40062000
		CMP	R4, R0
		BNE	loc_6294

loc_628C:				@ ...
		LDR	R0, [R4,#0x60]
		BIC.W	R0, R0,	#1
		STR	R0, [R4,#0x60]

loc_6294:				@ ...
		CMP	R7, #0x20
		BNE	loc_629A
		MOVS	R7, #0

loc_629A:				@ ...
		BL	CLK_GetHCLKFreq
		MOV	R5, R0
		MOVS	R2, #0
		LDR	R3, =0x40060000
		MOV.W	R0, #0x40000000
		CMP.W	R9, #0
		BEQ	loc_62D2
		STR	R2, [R4,#8]
		ORR.W	R1, R9,	R7,LSL#8
		ORR.W	R1, R1,	R10
		ORR.W	R1, R1,	#1
		STR	R1, [R4]
		STR	R2, [R4,#4]
		CMP	R4, R3
		BNE	loc_63A4
		LDR.W	R1, [R0,#0x218]
		BIC.W	R1, R1,	#0xC
		ORR.W	R1, R1,	#8
		B	loc_641E
@ ---------------------------------------------------------------------------

loc_62D2:				@ ...
		MOV	R9, R2
		STR	R2, [R4,#8]
		ORR.W	R1, R2,	R7,LSL#8
		ORR.W	R1, R1,	R10
		ORR.W	R1, R1,	#1
		STR	R1, [R4]
		CMP	R6, R5
		BCC	loc_6318
		CMP	R4, R3
		BNE	loc_62FA
		LDR.W	R1, [R0,#0x218]
		BIC.W	R1, R1,	#0xC
		ORR.W	R1, R1,	#8
		B	loc_6314
@ ---------------------------------------------------------------------------

loc_62FA:				@ ...
		LDR.W	R1, [R0,#0x218]
		CMP	R4, R8
		BNE	loc_630C
		BIC.W	R1, R1,	#0x30
		ORR.W	R1, R1,	#0x20
		B	loc_6314
@ ---------------------------------------------------------------------------

loc_630C:				@ ...
		BIC.W	R1, R1,	#0xC0
		ORR.W	R1, R1,	#0x80

loc_6314:				@ ...
		STR.W	R1, [R0,#0x218]

loc_6318:				@ ...
		LDR	R1, =12000000
		LDR	R2, =22118400
		CMP	R4, R3
		BNE	loc_6340
		LDR.W	R3, [R0,#0x218]
		TST.W	R3, #0xC
		BEQ	loc_63A6
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#2, #2
		CMP	R1, #1
		BEQ	loc_63AA
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#2, #2
		B	loc_638E
@ ---------------------------------------------------------------------------

loc_6340:				@ ...
		LDR.W	R3, [R0,#0x218]
		CMP	R4, R8
		BNE	loc_6374
		TST.W	R3, #0x30
		BEQ	loc_63A6
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#4, #2
		CMP	R1, #1
		BEQ	loc_63AA
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#4, #2
		CMP	R1, #2
		BNE	loc_6392
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#0x18

loc_636C:				@ ...
		CMP	R0, #0
		BGE	loc_63B8
		LSRS	R0, R5,	#1
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_6374:				@ ...
		TST.W	R3, #0xC0
		BEQ	loc_63A6
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#6, #2
		CMP	R1, #1
		BEQ	loc_63AA
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#6, #2

loc_638E:				@ ...
		CMP	R1, #2
		BEQ	loc_63B0

loc_6392:				@ ...
		MOV	R0, R2

loc_6394:				@ ...
		CMP	R6, R5
		BCS	loc_639C
		CMP	R6, R0
		BCC	loc_63BC

loc_639C:				@ ...
		STR.W	R9, [R4,#4]

locret_63A0:				@ ...
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_63A4:				@ ...
		B	loc_63F4
@ ---------------------------------------------------------------------------

loc_63A6:				@ ...
		MOV	R0, R1
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_63AA:				@ ...
		BL	CLKGetPLLClockFreq
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_63B0:				@ ...
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#0x19
		B	loc_636C
@ ---------------------------------------------------------------------------

loc_63B8:				@ ...
		MOV	R0, R5
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_63BC:				@ ...
		CBZ	R6, loc_63D6
		ADD.W	R1, R0,	R0,LSL#2
		LSLS	R1, R1,	#1
		UDIV.W	R1, R1,	R6
		MOVS	R2, #0xA
		ADDS	R1, R1,	#5
		UDIV.W	R1, R1,	R2
		SUBS	R1, R1,	#1
		CMP	R1, #0xFF
		BLS	loc_63E2

loc_63D6:				@ ...
		LDR	R1, [R4,#4]
		ORR.W	R1, R1,	#0xFF
		STR	R1, [R4,#4]
		LSRS	R0, R0,	#8
		B	locret_63A0
@ ---------------------------------------------------------------------------

loc_63E2:				@ ...
		LDR	R2, [R4,#4]
		BIC.W	R2, R2,	#0xFF
		ORRS	R2, R1
		STR	R2, [R4,#4]
		ADDS	R1, R1,	#1
		UDIV.W	R0, R0,	R1
		B	locret_63A0
@ ---------------------------------------------------------------------------

loc_63F4:				@ ...
		LDR.W	R1, [R0,#0x218]
		CMP	R4, R8
		BNE	loc_6416
		BIC.W	R1, R1,	#0x30
		ORR.W	R1, R1,	#0x20
		STR.W	R1, [R0,#0x218]
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#0x18

loc_640E:				@ ...
		CMP	R0, #0
		BGE	loc_642A
		LSRS	R0, R5,	#1
		B	locret_63A0
@ ---------------------------------------------------------------------------

loc_6416:				@ ...
		BIC.W	R1, R1,	#0xC0
		ORR.W	R1, R1,	#0x80

loc_641E:				@ ...
		STR.W	R1, [R0,#0x218]
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#25
		B	loc_640E
@ ---------------------------------------------------------------------------

loc_642A:				@ ...
		MOV	R0, R5
		B	locret_63A0
@ End of function SPI_Open

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool

			.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

SSD1327_WriteBytes:

@ FUNCTION CHUNK AT 00000FCC SIZE 0000001C BYTES

		PUSH.W	{R4-R9,LR}
		MOV	R9, R2
		LDR	R2, =0x40004928
		MOV.W	R8, #1
		CMP	R0, #0x40
		BEQ	loc_6460
		MOVS	R3, #0
		STR	R3, [R2]

loc_6458:				@ ...
		MOVS	R6, #0
		LDR.W	R12, =0x40060000
		B	loc_647E
@ ---------------------------------------------------------------------------

loc_6460:				@ ...
		STR.W	R8, [R2]
		B	loc_6458
@ ---------------------------------------------------------------------------

loc_6466:				@ ...
		CMP	R0, #0x40
		BEQ	loc_6486
		LDRB	R2, [R1]
		STR.W	R2, [R12,#0x20]

loc_6470:				@ ...
		LDR.W	R2, [R12,#0x14]
		LSLS	R2, R2,	#0x1F
		BNE	loc_6470

loc_6478:				@ ...
		ADDS	R6, R6,	#1
		UXTH	R6, R6
		ADDS	R1, R1,	#1

loc_647E:				@ ...
		CMP	R6, R9
		BCC	loc_6466
		POP.W	{R4-R9,PC}
@ ---------------------------------------------------------------------------

loc_6486:				@ ...
		MOVS	R3, #0

loc_6488:				@ ...
		LSLS	R4, R3,	#0x19
		LSRS	R4, R4,	#0x18
		RSB.W	R4, R4,	#7
		LSL.W	R4, R8,	R4
		UXTB	R4, R4
		LDRB	R5, [R1]
		MOVS	R2, #0
		LSRS	R7, R4,	#1
		TST	R5, R4
		BEQ	loc_64A2
		MOVS	R2, #0xF

loc_64A2:				@ ...
		TST	R5, R7
		BEQ	loc_64AA
		ORR.W	R2, R2,	#0xF0

loc_64AA:				@ ...
		STR.W	R2, [R12,#0x20]

loc_64AE:				@ ...
		LDR.W	R2, [R12,#0x14]
		LSLS	R2, R2,	#0x1F
		BNE	loc_64AE
		ADDS	R3, R3,	#1
		UXTB	R3, R3
		CMP	R3, #4
		BCC	loc_6488
		B	loc_6478
@ End of function SSD1327_WriteBytes

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

SSD1306_WriteBytes:
		PUSH	{R4,LR}
		LDR	R3, =0x40004928
		CMP	R0, #0x40
		BEQ	loc_64DA
		MOVS	R0, #0

loc_64D2:				@ ...
		STR	R0, [R3]
		MOVS	R0, #0
		LDR	R3, =0x40060000
		B	loc_64EE
@ ---------------------------------------------------------------------------

loc_64DA:				@ ...
		MOVS	R0, #1
		B	loc_64D2
@ ---------------------------------------------------------------------------

loc_64DE:				@ ...
		LDRB	R4, [R1]
		STR	R4, [R3,#0x20]

loc_64E2:				@ ...
		LDR	R4, [R3,#0x14]
		LSLS	R4, R4,	#31
		BNE	loc_64E2
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		ADDS	R1, R1,	#1

loc_64EE:				@ ...
		CMP	R0, R2
		BCC	loc_64DE
		POP	{R4,PC}
@ End of function SSD1306_WriteBytes

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_sys

SYS_DisableBOD:
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x18]
		BIC.W	R1, R1,	#1
		STR	R1, [R0,#0x18]
		BX	LR
@ End of function SYS_DisableBOD


@ =============== S U B	R O U T	I N E =======================================


SYS_EnableBOD:
		MOV.W	R2, #0x40000000
		LDR	R3, [R2,#0x18]
		ORR.W	R3, R3,	#1
		STR	R3, [R2,#0x18]	@ BODEN	= 1
		LDR	R3, [R2,#0x18]
		BIC.W	R3, R3,	#8
		ORRS	R3, R0
		STR	R3, [R2,#0x18]	@ BODIF	= R0
		LDR	R0, [R2,#0x18]
		BIC.W	R0, R0,	#6
		ORRS	R0, R1
		STR	R0, [R2,#0x18]	@ BODVL	= R1
		BX	LR
@ End of function SYS_EnableBOD

		.endif


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgInitDevices:
		PUSH.W	{R4-R10,LR}
		MOVS	R0, #4
		BL	CLK_EnableXtalRC @ 22.1184 MHz internal high speed RC	oscillator (HIRC) Enabled
		MOVS	R0, #0x10	@ HIRCSTB bit
		BL	CLK_WaitClockReady
		MOVS	R1, #0		@ HCLKDIV = 0
		MOVS	R0, #7		@ HCLKSEL = HIRC
		BL	CLK_SetHCLK
		MOVS	R0, #3
		BL	CLK_EnableXtalRC @ LXT (32.768 kHz external) & LXT (4-20 MHz external) enabled
		MOVS	R0, #3		@ HTXSTB | LTXSTB bits
		BL	CLK_WaitClockReady
		LDR	R0, =0x4000C000	@ FMC_BA
		LDR	R1, [R0,#0x18]	@ FMC_FTCTL
		ORR.W	R1, R1,	#0x70
		STR	R1, [R0,#0x18]
		LDR	R0, =72000000
		BL	CLK_SetCoreClock
		MOVS	R0, #4		@ PLLSTB
		BL	CLK_WaitClockReady
		LDR	R4, =0xA2000010
		MOV	R0, R4
		BL	CLK_EnableModuleClock	@ PWM0CKEN = 1
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R4
		BL	CLK_SetModuleClock	@ PWM0SEL = PCLK0
		LDR	R0, =0x8000010
		BL	SYS_ResetModule	@ PWM0 reset
		LDR	R4, =0x57803D10
		MOV	R0, R4
		BL	CLK_EnableModuleClock	@ UART0CKEN = 1
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R4
		BL	CLK_SetModuleClock	@ UARTDIV = 0 (HXT/1)
		LDR	R4, =0x40003C9B
		MOV	R0, R4
		BL	CLK_EnableModuleClock	@ USBDCKEN = 1
		MOVS	R2, #0x20
		MOVS	R1, #0
		MOV	R0, R4
		BL	CLK_SetModuleClock	@ USBDIV = 2 (PLL/3)
		ASRS	R0, R4,	#22
		LSLS	R4, R0,	#22
		STR	R0, [R4,#0x2C]	@ USB LDO33EN =	1
		MOV.W	R5, #0x56000000
		MOV	R0, R5
		BL	CLK_EnableModuleClock	@ WDTCKEN = 1
		MOVS	R2, #0
		MOVS	R1, #3
		MOV	R0, R5
		BL	CLK_SetModuleClock	@ WDTSEL = LIRC	10kHz
		LDR	R0, =0x6620000C
		BL	CLK_EnableModuleClock	@ SPI0CKEN = 1
		LDR	R6, =0x4003FE1C
		MOV	R0, R6
		BL	CLK_EnableModuleClock	@ EADCCKEN = 1
		MOV.W	R5, #0x70000
		MOV	R2, R5
		MOVS	R1, #0
		MOV	R0, R6
		BL	CLK_SetModuleClock	@ EADCDIV = 7 (PCLK1/8)
		LDR	R6, =0x5E800002
		MOV	R0, R6
		BL	CLK_EnableModuleClock	@ TMR0CKEN = 1
		LDR	R7, =0x5EC00003
		MOV	R0, R7
		BL	CLK_EnableModuleClock	@ TMR1CKEN = 1
		LDR.W	R8, =0x5F000004
		MOV	R0, R8
		BL	CLK_EnableModuleClock	@ TMR2CKEN = 1
		LDR.W	R9, =0x5F400005
		MOV	R0, R9
		BL	CLK_EnableModuleClock	@ TMR3CKEN = 1
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R6
		BL	CLK_SetModuleClock	@ TMR0SEL = HXT
		MOVS	R2, #0
		ASRS	R1, R4,	#17
		MOV	R0, R7
		BL	CLK_SetModuleClock	@ TMR1SEL = PCLK0
		MOVS	R2, #0
		MOV	R1, R5
		MOV	R0, R8
		BL	CLK_SetModuleClock	@ TMR2SEL = HIRC
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R9
		BL	CLK_SetModuleClock	@ TMR3SEL = HXT
		LDR	R0, [R4,#0x1C]
		ORR.W	R0, R0,	#2
		STR	R0, [R4,#0x1C]	@ VBATUGEN = 1
		MOVS	R0, #3
		STR	R0, [R4,#0x28]	@ VREFCTL = 3 (Vref = internal 2.56V)
		MOVS	R1, #0
		MOVS	R0, #8
		BL	SYS_EnableBOD	@ Brown-Out Detector at	2.2V
		POP.W	{R4-R10,LR}
		B.W	SystemCoreClockUpdate
@ End of function InitDevices

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool

			.endif
			
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_sys

SYS_ResetChip:
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#8]
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		BX	LR
@ End of function SYS_ResetChip

		.endif

@ =============== S U B	R O U T	I N E =======================================


		.ifne	keeporglibs_sys
		
SYS_ResetModule:
		LSRS	R1, R0,	#24
		ADD.W	R1, R1,	#0x40000000
		LDR	R3, [R1,#8]
		MOVS	R2, #1
		LSLS	R2, R0
		ORRS	R3, R2
		STR	R3, [R1,#8]
		LDR	R0, [R1,#8]
		BICS	R0, R2
		STR	R0, [R1,#8]
		BX	LR
@ End of function SYS_ResetModule

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_sys

	
SYS_UnlockReg:
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_66A0:				@ ...
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_66A0
		POP	{R4,PC}
@ End of function SYS_UnlockReg

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

SYS_UnlockReg2:			@ ...
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_66C0:				@ ...
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_66C0
		POP	{R4,PC}
@ End of function SYS_UnlockReg


@ =============== S U B	R O U T	I N E =======================================


SYS_UnlockReg3:			@ ...
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_66E0:				@ ...
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_66E0
		POP	{R4,PC}
@ End of function SYS_UnlockReg


@ =============== S U B	R O U T	I N E =======================================


SYS_UnlockReg4:			@ ...
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_6700:				@ ...
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_6700
		POP	{R4,PC}
@ End of function SYS_UnlockReg


@ =============== S U B	R O U T	I N E =======================================


SYS_UnlockReg5:			@ ...
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_6720:				@ ...
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_6720
		POP	{R4,PC}
@ End of function SYS_UnlockReg

@ ---------------------------------------------------------------------------
		.balign 4,0

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgUART0_Cout:
		LDR	R1, =0x40070000

loc_673A:				@ ...
		LDR	R2, [R1,#0x18]
		LSLS	R2, R2,	#8
		BMI	loc_673A
		STR	R0, [R1]
		CMP	R0, #0xA
		BNE	locret_6750

loc_6746:				@ ...
		LDR	R0, [R1,#0x18]
		LSLS	R0, R0,	#8
		BMI	loc_6746
		MOVS	R0, #0xD
		STR	R0, [R1]

locret_6750:				@ ...
		BX	LR
@ End of function UART0_Cout

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================


fbSetBirdColumn:
		LDR	R1, =fbBirdColumn
		STRB	R0, [R1]
		BX	LR
@ End of function fbSetBirdColumn

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

ShowBatCharging:

var_8		= -8

		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfUIVersion -	dfData)]
		CMP	R0, #2
		BNE	locret_6772
		B.W	loc_6778
@ ---------------------------------------------------------------------------

locret_6772:				@ ...
		BX	LR
@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool
@ ---------------------------------------------------------------------------

loc_6778:				@ ...
		PUSH	{R3,LR}
		MOVS	R2, #0xC4
		MOVS	R1, #115
		MOVS	R0, #8
		BL	DrawImage
		LDR	R0, =BatteryTenth
		MOVS	R1, #1
		MOVS	R2, #9
		LDRB	R0, [R0]
		CMP	R0, #10
		BEQ	loc_67AC
		LDR	R0, =BatAnimLevel
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	locret_67AA
		ADD.W	R0, R2,	R0,LSL#2
		UXTB	R2, R0
		STR	R1, [SP]

loc_67A0:				@ ...
		MOVS	R3, #124
		MOVS	R1, #118
		MOVS	R0, #10
		BL	DrawFillRect

locret_67AA:				@ ...
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_67AC:				@ ...
		LDR	R0, =Flags64
		LDR	R0, [R0]
		LSLS	R0, R0,	#10
		BPL	locret_67AA
		MOVS	R2, #49
		STR	R1, [SP]
		B	loc_67A0
@ End of function ShowBatCharging

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowBattery:

var_8		= -8

		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfUIVersion -	dfData)]
		CMP	R0, #2
		BNE	locret_67D6
		B.W	loc_67DC
@ ---------------------------------------------------------------------------

locret_67D6:				@ ...
		BX	LR
@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool
@ ---------------------------------------------------------------------------

loc_67DC:				@ ...
		LDR	R0, =Flags64
		PUSH	{R3,LR}
		LDR	R0, [R0]
		LSLS	R1, R0,	#12
		BPL	loc_67F2
		LSLS	R1, R0,	#19
		BMI	loc_67F2
		LSLS	R0, R0,	#11
		BPL	locret_6830
		MOVS	R2, #0xC4
		B	loc_67FC
@ ---------------------------------------------------------------------------

loc_67F2:				@ ...
		LSLS	R1, R0,	#10
		BPL	loc_6808
		LSLS	R0, R0,	#19
		BPL	loc_6808
		MOVS	R2, #0xC5

loc_67FC:				@ ...
		MOVS	R1, #112
		POP.W	{R3,LR}
		MOVS	R0, #8
		B.W	DrawImage
@ ---------------------------------------------------------------------------

loc_6808:				@ ...
		MOVS	R2, #0xC4
		MOVS	R1, #112
		MOVS	R0, #8
		BL	DrawImage
		LDR	R0, =BatteryTenth
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	locret_6830
		MOVS	R1, #1
		STR	R1, [SP]
		MOVS	R1, #9
		ADD.W	R0, R1,	R0,LSL#2
		UXTB	R2, R0
		MOVS	R3, #121
		MOVS	R1, #115
		MOVS	R0, #10
		BL	DrawFillRect

locret_6830:				@ ...
		POP	{R3,PC}
@ End of function ShowBattery

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool

			.endif
			
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowBattVolts:
		PUSH	{R2-R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Battery
		BL	DrawStringCentered
		MOVS	R1, #3
		MOVS	R0, #0x29
		STRD.W	R0, R1,	[SP]
		LDR	R0, =BatteryVoltage
		MOVS	R3, #2
		MOVS	R1, #102
		LDRH	R2, [R0]
		MOVS	R0, #6
		BL	DrawValue
		ADD	SP, SP,	#8
		MOVS	R2, #0xB8
		MOVS	R1, #102
		POP.W	{R4,LR}
		MOVS	R0, #46
		B.W	DrawImage
@ End of function ShowBattVolts

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool
			
			.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowBoardTemp:
		PUSH	{R2-R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Temp
		BL	DrawStringCentered
		MOVS	R1, #2
		MOVS	R0, #0x52
		STRD.W	R0, R1,	[SP]
		LDR	R0, =BoardTemp
		MOVS	R3, #0
		MOVS	R1, #102
		LDRB	R2, [R0]
		MOVS	R0, #16
		BL	DrawValue
		POP	{R2-R4,PC}
@ End of function ShowBoardTemp

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool
			
			.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgDrawBFLine:
		PUSH.W	{R4-R8,LR}
		MOVS	R4, #0
		MOV	R8, R0
		ADDS	R7, R0,	#1

loc_68AA:				@ ...
		ADD.W	R5, R4,	R4,LSL#2
		ADDS	R6, R5,	#2
		UXTB	R2, R6
		UXTB	R0, R5
		MOVS	R3, #1
		MOV	R1, R8
		BL	DrawHLine
		UXTB	R2, R6
		UXTB	R1, R7
		UXTB	R0, R5
		MOVS	R3, #1
		BL	DrawHLine
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #0xD
		BCC	loc_68AA
		POP.W	{R4-R8,PC}
@ End of function DrawBFLine

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowNewCoil:
		PUSH	{R2-R6,LR}
		MOVS	R1, #0x32
		LDR	R0, =String_NewCoil
		BL	DrawStringCentered
		MOVS	R4, #3
		MOVS	R5, #0xB
		LDR	R6, =dfData
		STRD.W	R5, R4,	[SP]
		LDRH	R2, [R6,#(dfResistance-dfData)]
		MOVS	R3, #2
		MOVS	R1, #62
		MOVS	R0, #16
		BL	DrawValue
		MOVS	R2, #0xC0
		MOVS	R1, #62
		MOVS	R0, #40
		BL	DrawImage
		LDR	R0, =String_NewCoil
		MOVS	R1, #74
		ADDS	R0, #(String_Right - String_NewCoil)
		BL	DrawStringCentered
		LDR	R0, =String_NewCoil
		MOVS	R1, #90
		ADDS	R0, #(String_SameCoil -	String_NewCoil)
		BL	DrawStringCentered
		LDRB	R0, [R6,#(dfMode-dfData)]
		CMP	R0, #1
		BEQ	loc_6924
		CBZ	R0, loc_692C
		CMP	R0, #2
		BEQ	loc_6934
		CMP	R0, #3
		BEQ	loc_693E
		B	loc_6950
@ ---------------------------------------------------------------------------

loc_6924:				@ ...
		STRD.W	R5, R4,	[SP]
		LDRH	R2, [R6,#(dfRezTI - dfData)]
		B	loc_6946
@ ---------------------------------------------------------------------------

loc_692C:				@ ...
		STRD.W	R5, R4,	[SP]
		LDRH	R2, [R6,#(dfRezNI - dfData)]
		B	loc_6946
@ ---------------------------------------------------------------------------

loc_6934:				@ ...
		STRD.W	R5, R4,	[SP]
		LDRH.W	R2, [R6,#(dfRezSS - dfData)]
		B	loc_6946
@ ---------------------------------------------------------------------------

loc_693E:				@ ...
		STRD.W	R5, R4,	[SP]
		LDRH.W	R2, [R6,#(dfRezTCR - dfData)]

loc_6946:				@ ...
		MOVS	R3, #2
		MOVS	R1, #102
		MOVS	R0, #16
		BL	DrawValue

loc_6950:				@ ...
		MOVS	R2, #192
		MOVS	R1, #102
		MOVS	R0, #40
		BL	DrawImage
		POP.W	{R2-R6,LR}
		LDR	R0, =String_NewCoil
		MOVS	R1, #114
		ADDS	R0, #(String_Left - String_NewCoil)
		B.W	DrawStringCentered
@ End of function ShowNewCoil

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowMainView:

var_30		= -0x30
var_2C		= -0x2C

		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfUIVersion -	dfData)]
		CMP	R0, #2
		BNE	locret_697E
		B.W	loc_6984
@ ---------------------------------------------------------------------------

locret_697E:				@ ...
		BX	LR
@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool
@ ---------------------------------------------------------------------------

loc_6984:				@ ...
		PUSH.W	{R2-R12,LR}
		LDR	R4, =dfData
		LDR.W	R10, =Flags64
		LDRB	R0, [R4,#(dfMode - dfData)] @ dfMode
		LDRH	R2, [R4,#(dfPower - dfData)] @ dfPower
		CMP	R0, #5
		BNE	loc_69B6
		LDRH.W	R0, [R10]
		LSLS	R0, R0,	#23
		BPL	loc_69AA
		LDR	R0, =AtoVolts
		LDRH	R0, [R0]
		UXTH	R0, R0
		BL	AtoPower
		B	loc_69B4
@ ---------------------------------------------------------------------------

loc_69AA:				@ ...
		LDR	R0, =BatteryVoltage
		MOVS	R1, #0
		LDRH	R0, [R0]
		BL	ClampPower

loc_69B4:				@ ...
		MOV	R2, R0

loc_69B6:				@ ...
		LDR.W	R8, =Screen
		LDRB.W	R3, [R8]
		CMP	R3, #2
		BNE	loc_69CE
		LDR	R0, =PowerScale
		LDR	R0, [R0]
		MULS	R2, R0
		MOVS	R0, #100
		UDIV.W	R2, R2,	R0

loc_69CE:				@ ...
		MOV	R9, R4
		LDRB	R0, [R4,#(dfMode - dfData)]
		MOVS	R1, #72
		LDR	R6, =EditItemIndex
		MOVS	R5, #3
		MOVS	R4, #31
		MOV.W	R11, #1
		CMP	R0, #1
		BEQ	loc_69FC
		MOV	R7, R9
		CBZ	R0, loc_69FC
		CMP	R0, #2
		BEQ	loc_69FC
		CMP	R0, #3
		BEQ	loc_69FC
		CMP	R0, #4
		BEQ	loc_6AF0
		CMP	R0, #5
		BEQ	loc_6AF2
		CMP	R0, #6
		BEQ	loc_6AF4
		B	loc_6F74
@ ---------------------------------------------------------------------------

loc_69FC:				@ ...
		CMP	R3, #2
		BEQ	loc_6AF6
		STRD.W	R1, R5,	[SP]
		MOVS	R3, #0
		MOV	R7, R9
		LDRH.W	R2, [R9,#(dfTemp - dfData)] @ dfTemp
		MOVS	R1, #13
		MOV	R0, R3
		BL	DrawValue
		LDRB	R0, [R7,#(dfIsCelsius -	dfData)]
		CBZ	R0, loc_6A68
		MOVS	R2, #224

loc_6A1A:				@ ...
		MOVS	R1, #20
		MOVS	R0, #48
		BL	DrawImage
		LDR.W	R0, [R10]
		MOV.W	R8, #11
		LSLS	R0, R0,	#13
		BMI	loc_6A38
		LDRB	R0, [R6]
		CMP	R0, #0
		BEQ	loc_6A66
		CMP	R0, #1
		BEQ	loc_6B02

loc_6A38:				@ ...
		LDRB	R0, [R7,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_6A6C
		CMP	R0, #2
		BEQ	loc_6A80
		CMP	R0, #3
		MOV.W	R2, #2
		MOV.W	R1, #0
		BEQ	loc_6AB6
		LDR	R0, =String_TEMP
		BL	DrawString
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #32
		SUBS	R0, #(String_TEMP - String_NI)

loc_6A5C:				@ ...
		BL	DrawString

loc_6A60:				@ ...
		LDRB	R0, [R6]
		CMP	R0, #1
		BEQ	loc_6B02

loc_6A66:				@ ...
		B	loc_6B4A
@ ---------------------------------------------------------------------------

loc_6A68:				@ ...
		MOVS	R2, #0xE1
		B	loc_6A1A
@ ---------------------------------------------------------------------------

loc_6A6C:				@ ...
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, =String_TEMP
		BL	DrawString
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #32
		SUBS	R0, #(String_TEMP - String_TI)
		B	loc_6A5C
@ ---------------------------------------------------------------------------

loc_6A80:				@ ...
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, =String_TEMP
		BL	DrawString
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #32
		SUBS	R0, #(String_TEMP - String_SS)
		BL	DrawString
		MOVS	R2, #4
		MOVS	R1, #3
		MOVS	R0, #48
		BL	DrawImage
		MOVS	R2, #2
		MOVS	R1, #3
		MOVS	R0, #54
		BL	DrawImage
		MOVS	R2, #7
		MOVS	R1, #3
		MOVS	R0, #59
		BL	DrawImage
		B	loc_6A60
@ ---------------------------------------------------------------------------

loc_6AB6:				@ ...
		LDR	R0, =String_TEMP
		SUBS	R0, #(String_TEMP-String_TCR)
		BL	DrawString
		STRD.W	R8, R5,	[SP]
		LDRB.W	R0, [R7,#(dfTCRIndex - dfData)]
		MOVS	R3, #0
		ADD.W	R0, R7,	R0,LSL#1
		MOVS	R1, #2
		LDRH.W	R2, [R0,#(dfTCRM1 - dfData)]
		MOVS	R0, #25
		BL	DrawValue
		MOVS	R2, #0xA8
		MOVS	R1, #2
		MOVS	R0, #49
		BL	DrawImage
		STRD.W	R8, R11, [SP]
		MOVS	R3, #0
		LDRB.W	R2, [R7,#(dfTCRIndex - dfData)]
		MOVS	R1, #2
		B	loc_6AF8
@ ---------------------------------------------------------------------------

loc_6AF0:				@ ...
		B	loc_6C04
@ ---------------------------------------------------------------------------

loc_6AF2:				@ ...
		B	loc_6C92
@ ---------------------------------------------------------------------------

loc_6AF4:				@ ...
		B	loc_6D5A
@ ---------------------------------------------------------------------------

loc_6AF6:				@ ...
		B	loc_6D54
@ ---------------------------------------------------------------------------

loc_6AF8:				@ ...
		MOVS	R0, #57
		ADDS	R2, R2,	#1
		BL	DrawValue
		B	loc_6A60
@ ---------------------------------------------------------------------------

loc_6B02:				@ ...
		LDRB	R0, [R7,#(dfMode - dfData)]
		CMP	R0, #3
		BNE	loc_6B34
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #0
		SUBS	R0, #(String_TEMP - String_TCR)
		BL	DrawString
		STRD.W	R8, R5,	[SP]
		LDRB.W	R0, [R7,#(dfTCRIndex - dfData)]
		MOVS	R3, #0
		ADD.W	R0, R7,	R0,LSL#1
		MOVS	R1, #2
		LDRH.W	R2, [R0,#(dfTCRM1 - dfData)]
		MOVS	R0, #25
		BL	DrawValue
		LDRB	R0, [R6]
		CMP	R0, #1
		BNE	loc_6B4A

loc_6B34:				@ ...
		LDRB	R0, [R7,#(dfMode - dfData)]
		CBZ	R0, loc_6B40
		CMP	R0, #1
		BEQ	loc_6B40
		CMP	R0, #2
		BNE	loc_6B4A

loc_6B40:				@ ...
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, =String_TEMP
		BL	DrawString

loc_6B4A:				@ ...
		LDR	R0, =HideLogo
		LDRH	R0, [R0]
		CBNZ	R0, loc_6B58
		MOVS	R1, #0
		MOV	R0, R1
		BL	DrawLOGO

loc_6B58:				@ ...
		LDR.W	R0, [R10]
		LSLS	R0, R0,	#0xD
		BMI	loc_6B78
		LDRB	R0, [R6]
		CMP	R0, #2
		BNE	loc_6B78
		LDR	R0, =0x400048C8
		LDR	R0, [R0]
		CMP	R0, #1
		BNE	loc_6B78
		LDR	R0, =0x400048C8
		ADDS	R0, R0,	#4
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_6BD0

loc_6B78:				@ ...
		LDR	R0, =String_TEMP
		MOVS	R2, #0x36
		MOVS	R1, #0
		SUBS	R0, #(String_TEMP - String_PWR_s)
		BL	DrawString
		LDRH	R2, [R7,#(dfTCPower - dfData)]
		CMP	R2, #0x63
		BHI	loc_6BA2
		MOVS	R0, #2
		STRD.W	R4, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DrawValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x30
		B	loc_6D4E
@ ---------------------------------------------------------------------------

loc_6BA2:				@ ...
		CMP.W	R2, #0x3E8
		BCC	loc_6BEE
		LDRB	R0, [R6]
		CMP	R0, #2
		BNE	loc_6BD2
		LDR	R0, =0x400048C8
		LDR	R0, [R0]
		CMP	R0, #1
		BNE	loc_6BC0
		LDR	R0, =0x400048C8
		ADDS	R0, R0,	#4
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_6BD2

loc_6BC0:				@ ...
		MOVS	R0, #4
		STRD.W	R4, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		BL	DrawValue

loc_6BD0:				@ ...
		B	loc_6F6C
@ ---------------------------------------------------------------------------

loc_6BD2:				@ ...
		MOVS	R0, #0xA
		UDIV.W	R2, R2,	R0
		MOVS	R3, #0
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		STRD.W	R4, R5,	[SP]
		BL	DrawValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x35
		B	loc_6D4E
@ ---------------------------------------------------------------------------

loc_6BEE:				@ ...
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		STRD.W	R4, R5,	[SP]
		BL	DrawValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOV	R0, R1
		B	loc_6D4E
@ ---------------------------------------------------------------------------

loc_6C04:				@ ...
		CMP	R2, #0x63
		BHI	loc_6C20
		MOVS	R0, #2
		STRD.W	R1, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0xD
		MOVS	R0, #5
		BL	DrawValue
		MOVS	R2, #0xB9
		MOVS	R1, #0x12
		MOVS	R0, #0x2D
		B	loc_6C48
@ ---------------------------------------------------------------------------

loc_6C20:				@ ...
		CMP.W	R2, #0x3E8
		BCC	loc_6C34
		MOVS	R1, #4
		MOVS	R0, #0x29
		MOVS	R3, #1
		STRD.W	R0, R1,	[SP]
		MOVS	R1, #0x12
		B	loc_6C3C
@ ---------------------------------------------------------------------------

loc_6C34:				@ ...
		STRD.W	R1, R5,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0xD

loc_6C3C:				@ ...
		MOVS	R0, #0
		BL	DrawValue
		MOVS	R2, #0x98
		MOVS	R1, #0x1A
		MOVS	R0, #0x36

loc_6C48:				@ ...
		BL	DrawImage
		LDR.W	R0, [R10]
		LDRB	R1, [R6]
		UBFX.W	R0, R0,	#0x12, #1
		ORRS	R0, R1
		BEQ	loc_6C66
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #0
		ADDS	R0, #(String_POWER - String_TEMP)
		BL	DrawString

loc_6C66:				@ ...
		LDR	R0, =HideLogo
		LDRH	R0, [R0]
		CBNZ	R0, loc_6C74
		MOVS	R1, #0
		MOV	R0, R1
		BL	DrawLOGO

loc_6C74:				@ ...
		LDRB.W	R0, [R8]
		CMP	R0, #2
		BEQ	loc_6D54
		LDR	R0, =String_TEMP
		MOVS	R2, #0x36
		MOVS	R1, #0
		ADDS	R0, #(String_VOLT_s - String_TEMP)
		BL	DrawString
		STRD.W	R4, R5,	[SP]
		LDRH	R2, [R7,#0x16]
		MOVS	R3, #2
		B	loc_6D40
@ ---------------------------------------------------------------------------

loc_6C92:				@ ...
		LDRH.W	R0, [R10]
		MOV	R7, R10
		LSLS	R0, R0,	#0x17
		BMI	loc_6D04
		CMP	R2, #0x63
		BHI	loc_6CB8
		MOVS	R0, #2
		STRD.W	R1, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0xD
		MOVS	R0, #5
		BL	DrawValue
		MOVS	R2, #0xB9
		MOVS	R1, #0x12
		MOVS	R0, #0x2D
		B	loc_6CE0
@ ---------------------------------------------------------------------------

loc_6CB8:				@ ...
		CMP.W	R2, #1000
		BCC	loc_6CCC
		MOVS	R1, #4
		MOVS	R0, #41
		MOVS	R3, #1
		STRD.W	R0, R1,	[SP]
		MOVS	R1, #0x12
		B	loc_6CD4
@ ---------------------------------------------------------------------------

loc_6CCC:				@ ...
		STRD.W	R1, R5,	[SP]
		MOVS	R3, #1
		MOVS	R1, #13

loc_6CD4:				@ ...
		MOVS	R0, #0
		BL	DrawValue
		MOVS	R2, #0x98

loc_6CDC:				@ ...
		MOVS	R1, #26
		MOVS	R0, #54

loc_6CE0:				@ ...
		BL	DrawImage
		LDR	R0, [R7]
		LDRB	R1, [R6]
		UBFX.W	R0, R0,	#0x12, #1
		ORRS	R0, R1
		BEQ	loc_6CFC
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #0
		ADDS	R0, #(String_BYPASS - String_TEMP)
		BL	DrawString

loc_6CFC:				@ ...
		LDR	R0, =HideLogo
		LDRH	R0, [R0]
		CBZ	R0, loc_6D1A
		B	loc_6D22
@ ---------------------------------------------------------------------------

loc_6D04:				@ ...
		STRD.W	R1, R5,	[SP]
		LDR	R0, =AtoVolts
		MOVS	R3, #2
		MOVS	R1, #0xD
		LDR	R2, [R0]
		MOVS	R0, #0
		BL	DrawValue
		MOVS	R2, #0x97
		B	loc_6CDC
@ ---------------------------------------------------------------------------

loc_6D1A:				@ ...
		MOVS	R1, #0
		MOV	R0, R1
		BL	DrawLOGO

loc_6D22:				@ ...
		LDRB.W	R0, [R8]
		CMP	R0, #2
		BEQ	loc_6D54
		LDR	R0, =String_TEMP
		MOVS	R2, #0x36
		MOVS	R1, #0
		ADDS	R0, #(String_VOLT_s - String_TEMP)
		BL	DrawString
		LDR	R0, =BatteryVoltage
		STRD.W	R4, R5,	[SP]
		MOVS	R3, #2
		LDRH	R2, [R0]

loc_6D40:				@ ...
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DrawValue
		MOVS	R2, #0x97
		MOVS	R1, #0x36
		MOVS	R0, #0x39

loc_6D4E:				@ ...
		BL	DrawImage
		B	loc_6F6C
@ ---------------------------------------------------------------------------

loc_6D54:				@ ...
		BL	ShowMainFiring
		B	loc_6F6C
@ ---------------------------------------------------------------------------

loc_6D5A:				@ ...
		LDR.W	R0, [R10]
		LDRB	R1, [R6]
		UBFX.W	R0, R0,	#0x12, #1
		ORRS	R0, R1
		BEQ	loc_6D74
		LDR	R0, =String_TEMP
		MOVS	R2, #4
		MOVS	R1, #0xD
		ADDS	R0, #0x6C
		BL	DrawString

loc_6D74:				@ ...
		LDR	R0, =String_TEMP
		MOVS	R2, #0xF
		MOVS	R1, #0x17
		SUBS	R0, #0x30
		BL	DrawString
		MOVS	R2, #0x61
		B	loc_6DAC
@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool
@ ---------------------------------------------------------------------------

loc_6DAC:				@ ...
		MOVS	R1, #0x17
		LDR	R0, =String_MIN_s
		BL	DrawString
		MOVS	R3, #1
		MOVS	R2, #0x15
		MOVS	R1, #0x12
		MOVS	R0, #0
		BL	DrawHLine
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x12
		MOVS	R0, #0x2B
		BL	DrawHLine
		MOVS	R3, #1
		MOVS	R2, #0x15
		MOVS	R1, #0x64
		MOVS	R0, #0
		BL	DrawHLine
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x64
		MOVS	R0, #0x2B
		BL	DrawHLine
		LDR	R1, =ConfigIndex
		MOV	R9, R7
		LDRB	R1, [R1]
		ADD.W	R0, R7,	R1,LSL#1
		LDRH.W	R0, [R0,#(dfSavedCfgRez	- dfData)]
		BL	SearchSTARTRez
		LDR	R1, =MaxPower
		MOVS	R2, #0xF
		CBZ	R0, loc_6E0E
		CMP	R0, #1
		BEQ	loc_6E0E
		CMP	R0, #2
		BEQ	loc_6E0E
		CMP	R0, #3
		BEQ	loc_6E0E
		MOVS	R7, #0
		MOV	R8, R2
		B	loc_6F0A
@ ---------------------------------------------------------------------------

loc_6E0E:				@ ...
		LDR	R3, [R1]
		UDIV.W	R7, R3,	R2
		LDR	R3, =STARTPowers
		ADD.W	R0, R3,	R0,LSL#2
		STR	R0, [SP,#0x30+var_2C]
		LDRH	R0, [R0,#(STARTPowers+2	- STARTPowers)]
		UDIV.W	R0, R0,	R7
		NEGS	R0, R0
		ADD.W	R0, R0,	R0,LSL#2
		ADDS	R0, #99
		UXTH.W	R8, R0
		MOVS	R7, #0
		B	loc_6E88
@ ---------------------------------------------------------------------------

loc_6E32:				@ ...
		UDIV.W	R3, R0,	R2
		UDIV.W	R3, R1,	R3
		UDIV.W	R12, R0, R2
		LDR	R1, [SP,#0x30+var_2C]
		LDRH	R1, [R1,#2]
		UDIV.W	R12, R1, R12
		CMP	R3, R12
		BCC	loc_6E58
		UDIV.W	R0, R0,	R2
		UDIV.W	R0, R1,	R0
		SUBS	R0, R0,	#1
		CMP	R0, R7
		BLS	loc_6E76

loc_6E58:				@ ...
		NEGS	R0, R7
		ADD.W	R0, R0,	R0,LSL#2
		ADD.W	R1, R0,	#95
		UXTB	R3, R1
		ADDS	R0, #94
		UXTB	R1, R0
		MOVS	R2, #63
		MOVS	R0, #0
		STR.W	R11, [SP]
		BL	DrawFillRect
		B	loc_6E84
@ ---------------------------------------------------------------------------

loc_6E76:				@ ...
		NEGS	R0, R7
		ADD.W	R0, R0,	R0,LSL#2
		ADDS	R0, #0x5E
		UXTB	R0, R0
		BL	DrawBFLine

loc_6E84:				@ ...
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_6E88:				@ ...
		LDR	R0, =MaxPower
		LDR.W	R12, =ConfigIndex
		MOVS	R2, #0xF
		LDR	R0, [R0]
		LDRB.W	R12, [R12]
		UDIV.W	R3, R0,	R2
		ADD.W	R1, R9,	R12,LSL#1
		LDRH.W	R1, [R1,#0xAA]
		UDIV.W	R3, R1,	R3
		CMP	R3, R7
		BHI	loc_6E32
		CBNZ	R7, loc_6EB2
		MOVS	R0, #0x5E
		BL	DrawBFLine

loc_6EB2:				@ ...
		AND.W	R0, R8,	#0xFF
		BL	DrawBFLine
		AND.W	R1, R8,	#0xFF
		MOVS	R3, #0
		MOVS	R2, #0x28
		MOVS	R0, #0x19
		BL	DrawHLine
		ADD.W	R0, R8,	#1
		UXTB	R1, R0
		MOVS	R3, #0
		MOVS	R2, #0x28
		MOVS	R0, #0x19
		BL	DrawHLine
		SUB.W	R0, R8,	#3
		UXTB	R2, R0
		LDR	R0, =String_MIN_s
		MOVS	R1, #0x1D
		SUBS	R0, #(String_MIN_s - String_BF_s)
		BL	DrawString
		B	loc_6F2E
@ ---------------------------------------------------------------------------

loc_6EEA:				@ ...
		NEGS	R0, R7
		ADD.W	R0, R0,	R0,LSL#2
		ADD.W	R1, R0,	#0x5F
		UXTB	R3, R1
		ADDS	R0, #0x5E
		UXTB	R1, R0
		MOVS	R2, #0x3F
		MOVS	R0, #0
		STR.W	R11, [SP]
		BL	DrawFillRect
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_6F0A:				@ ...
		LDR	R0, =MaxPower
		LDR	R1, [R0]
		LDR	R0, =ConfigIndex
		UDIV.W	R2, R1,	R8
		LDRB	R0, [R0]
		ADD.W	R0, R9,	R0,LSL#1
		LDRH.W	R0, [R0,#(dfSavedCfgPwr	- dfData)]
		UDIV.W	R0, R0,	R2
		CMP	R0, R7
		BHI	loc_6EEA
		CBNZ	R7, loc_6F2E
		MOVS	R0, #94
		BL	DrawBFLine

loc_6F2E:				@ ...
		LDRH.W	R0, [R10]
		LSLS	R0, R0,	#0x17
		BPL	loc_6F56
		MOVS	R1, #2
		MOVS	R0, #0x29
		STRD.W	R0, R1,	[SP]
		LDR	R0, =FireDuration
		MOVS	R3, #1
		MOVS	R1, #0x6E
		LDRH	R2, [R0]
		MOVS	R0, #0xA
		BL	DrawValue
		MOVS	R2, #0xB7
		MOVS	R1, #0x6E
		MOVS	R0, #0x28
		BL	DrawImage

loc_6F56:				@ ...
		LDR	R0, =ShowWeakBatFlag
		LDRB	R0, [R0]
		CBZ	R0, loc_6F6C
		MOVS	R0, #0
		STR	R0, [SP]
		MOVS	R3, #0x7F
		MOVS	R2, #0x34
		MOVS	R1, #0x6E
		MOVS	R0, #0xA
		BL	DrawFillRect

loc_6F6C:				@ ...
		LDRB.W	R0, [R9,#(dfMode - dfData)]
		CMP	R0, #6
		BEQ	loc_7070

loc_6F74:				@ ...
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x2B
		MOVS	R0, #0
		BL	DrawHLine
		LDR	R0, =ShowWeakBatFlag
		LDRB	R0, [R0]
		CBNZ	R0, loc_6F92
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x6B
		MOVS	R0, #0
		BL	DrawHLine

loc_6F92:				@ ...
		LDR.W	R0, [R10]
		MOV	R7, R10
		LSLS	R0, R0,	#0xD
		BMI	loc_6FA2
		LDRB	R0, [R6]
		CMP	R0, #3
		BEQ	loc_705C

loc_6FA2:				@ ...
		LDR	R0, =String_MIN_s
		MOVS	R2, #0x48
		MOVS	R1, #0
		ADDS	R0, #0x76
		BL	DrawString
		LDRB.W	R0, [R9,#0xE]
		LDR	R2, =AtoRezMilli
		LDR	R1, =AtoRez
		CMP	R0, #1
		BEQ	loc_6FCA
		CBZ	R0, loc_6FCA
		CMP	R0, #2
		BEQ	loc_6FCA
		CMP	R0, #3
		BEQ	loc_6FCA
		CMP	R0, #5
		BEQ	loc_701E
		B	loc_7024
@ ---------------------------------------------------------------------------

loc_6FCA:				@ ...
		LDR	R0, =byte_200000B3
		LDRB	R0, [R0]
		CBNZ	R0, loc_7024
		LDRH	R0, [R1]
		CBZ	R0, loc_7024
		LDRH	R0, [R7]
		LSLS	R0, R0,	#0x17
		BPL	loc_6FEE

loc_6FDA:				@ ...
		LDR	R1, [R2]
		MOVS	R0, #0xA
		UDIV.W	R2, R1,	R0
		MOVS	R3, #2
		MOVS	R1, #0x47
		MOVS	R0, #0x1B
		STRD.W	R4, R5,	[SP]
		B	loc_6FFC
@ ---------------------------------------------------------------------------

loc_6FEE:				@ ...
		STRD.W	R4, R5,	[SP]
		LDRH.W	R2, [R9,#0x1C]
		MOVS	R3, #2

loc_6FF8:				@ ...
		MOVS	R1, #0x47
		MOVS	R0, #0x1B

loc_6FFC:				@ ...
		BL	DrawValue
		MOVS	R2, #0xC0
		MOVS	R1, #0x49
		MOVS	R0, #0x38
		BL	DrawImage
		LDRB.W	R0, [R9,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_702E
		CBZ	R0, loc_7034
		CMP	R0, #2
		BEQ	loc_703A
		CMP	R0, #3
		BEQ	loc_7040
		B	loc_7050
@ ---------------------------------------------------------------------------

loc_701E:				@ ...
		LDRH	R0, [R7]
		LSLS	R0, R0,	#23
		BMI	loc_6FDA

loc_7024:				@ ...
		STRD.W	R4, R5,	[SP]
		MOVS	R3, #2
		LDRH	R2, [R1]
		B	loc_6FF8
@ ---------------------------------------------------------------------------

loc_702E:				@ ...
		LDRB.W	R0, [R9,#(dfRezLockedTI	- dfData)]
		B	loc_7044
@ ---------------------------------------------------------------------------

loc_7034:				@ ...
		LDRB.W	R0, [R9,#(dfRezLockedNI	- dfData)]
		B	loc_7044
@ ---------------------------------------------------------------------------

loc_703A:				@ ...
		LDRB.W	R0, [R9,#(dfRezLockedSS	- dfData)]
		B	loc_7044
@ ---------------------------------------------------------------------------

loc_7040:				@ ...
		LDRB.W	R0, [R9,#(dfRezLockedTCR - dfData)]

loc_7044:				@ ...
		CBZ	R0, loc_7050
		MOVS	R2, #0xC3
		MOVS	R1, #0x49
		MOVS	R0, #0x38
		BL	DrawImage

loc_7050:				@ ...
		LDR	R0, [R7]
		LSLS	R0, R0,	#0xD
		BMI	loc_705C
		LDRB	R0, [R6]
		CMP	R0, #4
		BEQ	loc_70FE

loc_705C:				@ ...
		LDRB.W	R0, [R9,#0x18]
		MOV	R6, R9
		CBZ	R0, loc_7080
		LDRH	R1, [R7]
		LSLS	R1, R1,	#0x13
		BPL	loc_7074
		LDR	R1, =EditModeTimer
		LDRH	R1, [R1]
		B	loc_7072
@ ---------------------------------------------------------------------------

loc_7070:				@ ...
		B	loc_70FE
@ ---------------------------------------------------------------------------

loc_7072:				@ ...
		CBZ	R1, loc_7080

loc_7074:				@ ...
		MOVS	R7, #5
		CMP	R0, #1
		BEQ	loc_70BE
		CMP	R0, #2
		BEQ	loc_70DA
		B	loc_70FE
@ ---------------------------------------------------------------------------

loc_7080:				@ ...
		LDR	R0, =String_MIN_s
		MOVS	R2, #0x5B
		MOVS	R1, #0
		SUBS	R0, #(String_MIN_s - String_AMP_s)
		BL	DrawString
		LDRH	R0, [R7]
		MOV.W	R3, #1
		LSLS	R0, R0,	#0x17
		BPL	loc_70A4
		LDR	R0, =AtoCurrent
		STRD.W	R4, R5,	[SP]
		MOVS	R1, #0x5A
		LDRH	R2, [R0]
		MOVS	R0, #0x1B
		B	loc_70AE
@ ---------------------------------------------------------------------------

loc_70A4:				@ ...
		MOVS	R2, #0
		MOVS	R1, #0x5A
		MOVS	R0, #0x1B
		STRD.W	R4, R5,	[SP]

loc_70AE:				@ ...
		BL	DrawValue
		MOVS	R2, #0x9C
		MOVS	R1, #0x5C
		MOVS	R0, #0x38
		BL	DrawImage
		B	loc_70FE
@ ---------------------------------------------------------------------------

loc_70BE:				@ ...
		LDR	R0, =String_MIN_s
		MOVS	R2, #0x5B
		MOVS	R1, #0
		ADDS	R0, #(String_PUFF_s - String_MIN_s)
		BL	DrawString
		STRD.W	R4, R7,	[SP]
		MOVS	R3, #0
		MOVS	R1, #90
		MOVS	R0, #24
		LDR.W	R2, [R6,#(dfPuffCount -	dfData)]
		B	loc_70FA
@ ---------------------------------------------------------------------------

loc_70DA:				@ ...
		LDR	R0, =String_MIN_s
		MOVS	R2, #91
		MOVS	R1, #0
		ADDS	R0, #(String_TIME_s - String_MIN_s)
		BL	DrawString
		LDR.W	R1, [R6,#(dfTimeCount -	dfData)]
		MOVS	R0, #10
		UDIV.W	R2, R1,	R0
		STRD.W	R4, R7,	[SP]
		MOVS	R3, #0
		MOVS	R1, #90
		MOVS	R0, #24

loc_70FA:				@ ...
		BL	DrawValue

loc_70FE:				@ ...
		LDR	R0, =ShowWeakBatFlag
		LDRB	R0, [R0]
		CBZ	R0, loc_710C
		POP.W	{R2-R12,LR}
		B.W	ShowWeakBat
@ ---------------------------------------------------------------------------

loc_710C:				@ ...
		LDRB.W	R1, [R9,#(dfMode - dfData)]
		CMP	R1, #6
		BNE	loc_7168
		LDRH.W	R1, [R10]
		LSLS	R1, R1,	#23
		BMI	locret_7170
		LDR	R1, =0x400048C8
		LDR	R1, [R1]
		CMP	R1, #1
		BNE	loc_712E
		LDR	R1, =0x400048C8
		ADDS	R1, R1,	#4
		LDR	R1, [R1]
		CMP	R1, #1
		BEQ	loc_7168

loc_712E:				@ ...
		LDR	R1, =ConfigIndex
		LDRB	R1, [R1]
		ADD.W	R0, R9,	R1,LSL#1
		LDRH.W	R2, [R0,#(dfSavedCfgPwr	- dfData)]
		CMP.W	R2, #1000
		BCS	loc_7144
		MOVS	R3, #1
		B	loc_714C
@ ---------------------------------------------------------------------------

loc_7144:				@ ...
		MOVS	R0, #0xA
		UDIV.W	R2, R2,	R0
		MOVS	R3, #0

loc_714C:				@ ...
		MOVS	R1, #0x70
		MOVS	R0, #0xB
		STRD.W	R4, R5,	[SP]
		BL	DrawValue
		ADD	SP, SP,	#8
		MOVS	R2, #0xB2
		POP.W	{R4-R12,LR}
		MOVS	R1, #0x72
		MOVS	R0, #0x2A
		B.W	DrawImage
@ ---------------------------------------------------------------------------

loc_7168:				@ ...
		POP.W	{R2-R12,LR}
		B.W	ShowBattery
@ ---------------------------------------------------------------------------

locret_7170:				@ ...
		POP.W	{R2-R12,PC}
@ End of function ShowMainView

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool

			.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowLOGOMenu:

var_10		= -0x10

		PUSH	{R3-R5,LR}
		BL	ClearScreenBuffer
		MOVS	R2, #6
		MOVS	R1, #4
		LDR	R0, =String_LOGO
		BL	DrawString
		MOVS	R3, #1
		MOVS	R2, #63
		MOVS	R1, #16
		MOVS	R0, #0
		BL	DrawHLine
		LDR	R4, =dfData
		MOVS	R1, #18
		MOVS	R2, #63
		LDRB.W	R0, [R4,#(dfStatus - dfData)]!
		UBFX.W	R0, R0,	#3, #1
		RSB.W	R0, R0,	R0,LSL#3
		ADD.W	R1, R1,	R0,LSL#1
		MOVS	R0, #1
		STR	R0, [SP]
		ADD.W	R0, R1,	#0xC
		UXTB	R3, R0
		MOVS	R0, #0
		BL	DrawFillRect
		LDRB	R0, [R4]
		UBFX.W	R0, R0,	#3, #1
		CBZ	R0, loc_720C
		CMP	R0, #0
		BEQ	locret_7226
		MOVS	R2, #20
		MOVS	R1, #4
		LDR	R0, =String_On
		BL	DrawString
		POP.W	{R3-R5,LR}
		LDR	R0, =String_On
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Off - String_On)
		B.W	DrawStringInv
@ ---------------------------------------------------------------------------

loc_720C:				@ ...
		MOVS	R2, #20
		MOVS	R1, #4
		LDR	R0, =String_On
		BL	DrawStringInv
		POP.W	{R3-R5,LR}
		LDR	R0, =String_On
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Off - String_On)
		B.W	DrawString
@ ---------------------------------------------------------------------------

locret_7226:				@ ...
		POP	{R3-R5,PC}
@ End of function ShowLOGOMenu

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowGameMenu:

var_10		= -0x10

		PUSH	{R3-R5,LR}
		BL	ClearScreenBuffer
		MOVS	R2, #6
		MOVS	R1, #4
		LDR	R0, =String_Game
		BL	DrawString
		MOVS	R3, #1
		MOVS	R2, #63
		MOVS	R1, #16
		MOVS	R0, #0
		BL	DrawHLine
		LDR	R0, =String_Game
		MOVS	R2, #20
		MOVS	R1, #4
		ADDS	R0, #(String_Easy - String_Game)
		BL	DrawString
		LDR	R0, =String_Game
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Normal - String_Game)
		BL	DrawString
		LDR	R0, =String_Game
		MOVS	R2, #48
		MOVS	R1, #4
		ADDS	R0, #(String_Hard - String_Game)
		BL	DrawString
		LDR	R0, =String_Game
		MOVS	R2, #62
		MOVS	R1, #4
		ADDS	R0, #(String_Exit - String_Game)
		BL	DrawString
		LDR	R4, =dfData
		MOVS	R1, #18
		MOVS	R2, #63
		LDRB.W	R0, [R4,#(dfFBSpeed - dfData)]!
		RSB.W	R0, R0,	R0,LSL#3
		ADD.W	R0, R1,	R0,LSL#1
		UXTB	R1, R0
		MOVS	R0, #1
		STR	R0, [SP]
		ADD.W	R0, R1,	#12
		UXTB	R3, R0
		MOVS	R0, #0
		BL	DrawFillRect
		LDRB	R0, [R4]
		CBZ	R0, loc_72C4
		CMP	R0, #1
		BEQ	loc_72CE
		CMP	R0, #2
		BEQ	loc_72D8
		CMP	R0, #3
		BNE	locret_72E2
		LDR	R0, =String_Game
		MOVS	R2, #62
		MOVS	R1, #4
		ADDS	R0, #(String_Exit - String_Game)

loc_72BC:				@ ...
		POP.W	{R3-R5,LR}
		B.W	DrawStringInv
@ ---------------------------------------------------------------------------

loc_72C4:				@ ...
		LDR	R0, =String_Game
		MOVS	R2, #20
		MOVS	R1, #4
		ADDS	R0, #(String_Easy - String_Game)
		B	loc_72BC
@ ---------------------------------------------------------------------------

loc_72CE:				@ ...
		LDR	R0, =String_Game
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Normal - String_Game)
		B	loc_72BC
@ ---------------------------------------------------------------------------

loc_72D8:				@ ...
		LDR	R0, =String_Game
		MOVS	R2, #48
		MOVS	R1, #4
		ADDS	R0, #(String_Hard - String_Game)
		B	loc_72BC
@ ---------------------------------------------------------------------------

locret_72E2:				@ ...
		POP	{R3-R5,PC}
@ End of function ShowGameMenu

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowTCRSet:

var_28		= -0x28

		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfUIVersion -	dfData)]
		CMP	R0, #2
		BNE	locret_72FA
		B.W	loc_7300
@ ---------------------------------------------------------------------------

locret_72FA:				@ ...
		BX	LR
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ ---------------------------------------------------------------------------

loc_7300:				@ ...
		PUSH.W	{R2-R10,LR}
		MOVS	R2, #6
		MOVS	R1, #7
		LDR	R0, =String_TCRSet
		BL	DrawString
		MOVS	R3, #1
		MOVS	R2, #63
		MOVS	R1, #22
		MOVS	R0, #0
		BL	DrawHLine
		LDR	R0, =Flags68
		LDR	R1, =EditTCRIndex
		LDR	R6, =dfData
		LDRB	R0, [R0]
		MOV.W	R7, #4
		LSLS	R0, R0,	#31
		MOV.W	R5, #0x1F
		MOV.W	R4, #0
		BEQ	loc_73C2
		MOV	R9, R1
		MOV	R8, R7

loc_7336:				@ ...
		LDRB.W	R0, [R9]
		CMP	R0, R4
		BNE	loc_7376
		MOVS	R0, #1
		STR	R0, [SP]
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R7, R0,	R4,LSL#4
		ADD.W	R0, R7,	#52
		UXTB	R3, R0
		SUBS	R0, #22
		UXTB	R1, R0
		MOVS	R2, #62
		MOVS	R0, #28
		BL	DrawFillRect
		STRD.W	R5, R8,	[SP]
		ADD.W	R0, R6,	R4,LSL#1
		ADDS	R7, #36
		LDRH.W	R2, [R0,#(dfTCRM1 - dfData)]
		UXTB	R1, R7
		MOVS	R3, #0
		MOVS	R0, #30
		BL	DrawValueInv
		B	loc_7396
@ ---------------------------------------------------------------------------

loc_7376:				@ ...
		STRD.W	R5, R8,	[SP]
		ADD.W	R0, R6,	R4,LSL#1
		MOVS	R3, #0
		LDRH.W	R2, [R0,#(dfTCRM1 - dfData)]
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R0, R0,	R4,LSL#4
		ADDS	R0, #36
		UXTB	R1, R0
		MOVS	R0, #30
		BL	DrawValue

loc_7396:				@ ...
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R7, R0,	R4,LSL#4
		ADDS	R7, #33
		UXTB	R1, R7
		MOVS	R2, #0xED
		MOVS	R0, #0
		BL	DrawImage
		UXTB	R1, R7
		ADD.W	R2, R4,	#0xEE
		MOVS	R0, #15
		BL	DrawImage
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #3
		BCC	loc_7336

locret_73BE:				@ ...
		POP.W	{R2-R10,PC}
@ ---------------------------------------------------------------------------

loc_73C2:				@ ...
		MOV	R10, R1
		MOV	R9, R5
		MOV	R8, R6

loc_73C8:				@ ...
		LDRB.W	R0, [R10]
		CMP	R0, R4
		ADD.W	R0, R4,	R4,LSL#3
		BNE	loc_7406
		ADD.W	R6, R0,	R4,LSL#4
		ADD.W	R5, R6,	#33
		UXTB	R1, R5
		MOVS	R2, #0xED
		MOVS	R0, #0
		BL	DrawImageInv
		UXTB	R1, R5
		ADD.W	R2, R4,	#0xEE
		MOVS	R0, #15
		BL	DrawImageInv
		MOVS	R0, #0
		ADDS	R6, #49
		STR	R0, [SP]
		UXTB	R3, R6
		UXTB	R1, R5
		MOVS	R2, #30
		MOVS	R0, #25
		BL	DrawFillRect
		B	loc_7422
@ ---------------------------------------------------------------------------

loc_7406:				@ ...
		ADD.W	R5, R0,	R4,LSL#4
		ADDS	R5, #33
		UXTB	R1, R5
		MOVS	R2, #0xED
		MOVS	R0, #0
		BL	DrawImage
		UXTB	R1, R5
		ADD.W	R2, R4,	#0xEE
		MOVS	R0, #15
		BL	DrawImage

loc_7422:				@ ...
		STRD.W	R9, R7,	[SP]
		ADD.W	R0, R8,	R4,LSL#1
		MOVS	R3, #0
		LDRH.W	R2, [R0,#(dfTCRM1 - dfData)]
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R0, R0,	R4,LSL#4
		ADDS	R0, #36
		UXTB	R1, R0
		MOVS	R0, #30
		BL	DrawValue
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #3
		BCC	loc_73C8
		B	locret_73BE
@ End of function ShowTCRSet

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowMainFiring:
		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfUIVersion -	dfData)]
		CMP	R0, #2
		BNE	locret_746A
		B.W	loc_7470
@ ---------------------------------------------------------------------------

locret_746A:				@ ...
		BX	LR
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ ---------------------------------------------------------------------------

loc_7470:				@ ...
		PUSH.W	{R2-R8,LR}
		LDR	R5, =dfData
		MOVS	R6, #2
		LDRB	R0, [R5,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_74A4
		CBZ	R0, loc_74A4
		CMP	R0, #2
		BEQ	loc_74A4
		CMP	R0, #3
		BEQ	loc_74A4
		MOVS	R0, #0x29
		STRD.W	R0, R6,	[SP]
		LDR	R0, =FireDuration
		MOVS	R3, #1
		MOVS	R1, #0x31
		LDRH	R2, [R0]
		MOVS	R0, #10
		BL	DrawValue
		MOVS	R2, #0xB7
		MOVS	R1, #49
		MOVS	R0, #40
		B	loc_7658
@ ---------------------------------------------------------------------------

loc_74A4:				@ ...
		LDR	R1, =Flags64
		LDR.W	R8, =EditItemIndex
		MOV.W	R4, #3
		LDR	R1, [R1]
		LDRB.W	R2, [R8]
		UBFX.W	R1, R1,	#0x12, #1
		ORRS	R1, R2
		BEQ	loc_74E2
		CMP	R0, #1
		BEQ	loc_7506
		CMP	R0, #2
		BEQ	loc_751A
		CMP	R0, #3
		MOV.W	R2, #2
		MOV.W	R1, #0
		BEQ	loc_7552
		LDR	R0, =String_TEMP
		BL	DrawString
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #0x20
		SUBS	R0, #0x60

loc_74DE:				@ ...
		BL	DrawString

loc_74E2:				@ ...
		LDRB	R1, [R5,#(dfIsCelsius -	dfData)]
		LDR	R0, =AtoTemp
		MOVS	R7, #0x48
		CBZ	R1, loc_7550
		LDRH	R0, [R0]
		BL	FarenheitToC
		MOV	R2, R0
		LDRH	R0, [R5,#(dfTemp - dfData)]
		CMP	R0, R2
		BHI	loc_75B2

loc_74F8:				@ ...
		LDR	R0, =String_TEMP
		MOVS	R2, #0x14
		MOVS	R1, #2
		SUBS	R0, #0x20
		BL	DrawString
		B	loc_75CA
@ ---------------------------------------------------------------------------

loc_7506:				@ ...
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, =String_TEMP
		BL	DrawString
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #0x20
		SUBS	R0, #0x5A
		B	loc_74DE
@ ---------------------------------------------------------------------------

loc_751A:				@ ...
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, =String_TEMP
		BL	DrawString
		LDR	R0, =String_TEMP
		MOVS	R2, #2
		MOVS	R1, #0x20
		SUBS	R0, #0x54
		BL	DrawString
		MOVS	R2, #4
		MOVS	R1, #3
		MOVS	R0, #0x30
		BL	DrawImage
		MOVS	R2, #2
		MOVS	R1, #3
		MOVS	R0, #0x36
		BL	DrawImage
		MOVS	R2, #7
		MOVS	R1, #3
		MOVS	R0, #0x3B
		BL	DrawImage
		B	loc_74E2
@ ---------------------------------------------------------------------------

loc_7550:				@ ...
		B	loc_7598
@ ---------------------------------------------------------------------------

loc_7552:				@ ...
		LDR	R0, =String_TEMP
		SUBS	R0, #0x48
		BL	DrawString
		MOVS	R7, #0xB
		STRD.W	R7, R4,	[SP]
		LDRB.W	R0, [R5,#(dfTCRIndex - dfData)]
		MOVS	R3, #0
		ADD.W	R0, R5,	R0,LSL#1
		MOVS	R1, #2
		LDRH.W	R2, [R0,#(dfTCRM1 - dfData)]
		MOVS	R0, #0x19
		BL	DrawValue
		MOVS	R2, #0xA8
		MOVS	R1, #2
		MOVS	R0, #0x31
		BL	DrawImage
		MOVS	R0, #1
		STRD.W	R7, R0,	[SP]
		LDRB.W	R2, [R5,#(dfTCRIndex - dfData)]
		MOVS	R3, #0
		MOVS	R1, #2
		MOVS	R0, #0x39
		ADDS	R2, R2,	#1
		BL	DrawValue
		B	loc_74E2
@ ---------------------------------------------------------------------------

loc_7598:				@ ...
		LDRH	R1, [R5,#0x12]
		LDRH	R2, [R0]
		CMP	R1, R2
		BLS	loc_74F8
		STRD.W	R7, R4,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0xD
		MOV	R0, R3
		BL	DrawValue
		MOVS	R2, #0xE1
		B	loc_75C2
@ ---------------------------------------------------------------------------

loc_75B2:				@ ...
		STRD.W	R7, R4,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0xD
		MOV	R0, R3
		BL	DrawValue
		MOVS	R2, #0xE0

loc_75C2:				@ ...
		MOVS	R1, #0x14
		MOVS	R0, #0x30
		BL	DrawImage

loc_75CA:				@ ...
		LDR	R0, =String_TEMP
		MOVS	R2, #0x36
		MOVS	R1, #0
		SUBS	R0, #0x40
		BL	DrawString
		LDR	R0, =TargetVolts
		LDRH	R0, [R0]
		UXTH	R0, R0
		BL	AtoPower
		MOVS	R1, #0x1F
		MOV	R2, R0
		CMP	R0, #0x63
		BHI	loc_75FE
		STRD.W	R1, R6,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DrawValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x30
		B	loc_7658
@ ---------------------------------------------------------------------------

loc_75FE:				@ ...
		CMP.W	R2, #0x3E8
		BCC	loc_7644
		LDR	R0, =0x400048C8
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_7614
		LDRB.W	R0, [R8]
		CMP	R0, #2
		BEQ	loc_7630

loc_7614:				@ ...
		MOVS	R0, #0xA
		UDIV.W	R2, R2,	R0
		STRD.W	R1, R4,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DrawValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x35
		B	loc_7658
@ ---------------------------------------------------------------------------

loc_7630:				@ ...
		MOVS	R0, #4
		STRD.W	R1, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		BL	DrawValue
		POP.W	{R2-R8,PC}
@ ---------------------------------------------------------------------------

loc_7644:				@ ...
		STRD.W	R1, R4,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		BL	DrawValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOV	R0, R1

loc_7658:				@ ...
		ADD	SP, SP,	#8
		POP.W	{R4-R8,LR}
		B.W	DrawImage
@ End of function ShowMainFiring

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowVersion:
		PUSH	{R2-R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Version
		BL	DrawStringCentered
		MOVS	R1, #3
		MOVS	R0, #0x52
		STRD.W	R0, R1,	[SP]
		MOVS	R3, #2
		MOVW	R2, #303
		MOVS	R1, #102
		MOVS	R0, #6
		BL	DrawValue
		POP	{R2-R4,PC}
@ End of function ShowVersion

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowStealthMode:
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Stealth
		BL	DrawStringCentered
		LDR	R0, =dfData
		MOV.W	R1, #102
		LDRB.W	R0, [R0,#(dfStealthOn -	dfData)]
		CBZ	R0, loc_76C8
		LDR	R0, =String_Stealth
		SUBS	R0, #(String_Stealth - String_ON)
		B	loc_76CC
@ ---------------------------------------------------------------------------

loc_76C8:				@ ...
		LDR	R0, =String_Stealth
		SUBS	R0, #(String_Stealth - String_OFF)

loc_76CC:				@ ...
		POP.W	{R4,LR}
		B.W	DrawStringCentered
@ End of function ShowStealthMode

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowDevTooHot:
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Device
		BL	DrawStringCentered
		LDR	R0, =String_Device
		MOVS	R1, #102
		POP.W	{R4,LR}
		ADDS	R0, #(String_TooHot - String_Device)
		B.W	DrawStringCentered
@ End of function ShowDevTooHot

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowTiOnOff:
		LDR	R0, =dfData
		MOV.W	R1, #88
		LDRB.W	R0, [R0,#(dfTiOn - dfData)]
		CBZ	R0, loc_7708
		LDR	R0, =String_TiON
		B	loc_770C
@ ---------------------------------------------------------------------------

loc_7708:				@ ...
		LDR	R0, =String_TiON
		ADDS	R0, #(String_TiOFF - String_TiON)

loc_770C:				@ ...
		B.W	DrawStringCentered
@ End of function ShowTiOnOff

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowAtoLow:
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Atomizer
		BL	DrawStringCentered
		LDR	R0, =String_Atomizer
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Atomizer -	String_Low)
		B.W	DrawStringCentered
@ End of function ShowAtoLow

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowAtoShort:
		PUSH	{R4,LR}
		MOVS	R1, #0x58
		LDR	R0, =String_Atomizer
		BL	DrawStringCentered
		LDR	R0, =String_Atomizer
		MOVS	R1, #102
		POP.W	{R4,LR}
		ADDS	R0, #(String_Short - String_Atomizer)
		B.W	DrawStringCentered
@ End of function ShowAtoShort

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowBatLow:
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Battery
		BL	DrawStringCentered
		LDR	R0, =String_Battery
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Battery - String_Low)
		B.W	DrawStringCentered
@ End of function ShowBatLow

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowBatLowLock:
		PUSH	{R4,LR}
		MOVS	R1, #82
		LDR	R0, =String_Battery
		BL	DrawStringCentered
		LDR	R0, =String_Battery
		MOVS	R1, #92
		SUBS	R0, #(String_Battery - String_Low)
		BL	DrawStringCentered
		LDR	R0, =String_Battery
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Battery - String_Lock)
		B.W	DrawStringCentered
@ End of function ShowBatLowLock

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowKeyLock:
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Key
		BL	DrawStringCentered
		LDR	R0, =String_Key
		MOVS	R1, #102
		POP.W	{R4,LR}
		ADDS	R0, #(String_Lock - String_Key)
		B.W	DrawStringCentered
@ End of function ShowKeyLock

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowKeyUnLock:
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Key
		BL	DrawStringCentered
		LDR	R0, =String_Key
		MOVS	R1, #102
		POP.W	{R4,LR}
		ADDS	R0, #(String_UnLock - String_Key)
		B.W	DrawStringCentered
@ End of function ShowKeyUnLock

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowNoAtoFound:
		PUSH	{R4,LR}
		MOVS	R1, #82
		LDR	R0, =String_No
		BL	DrawStringCentered
		LDR	R0, =String_No
		MOVS	R1, #92
		ADDS	R0, #(String_Atomizer -	String_No)
		BL	DrawStringCentered
		LDR	R0, =String_No
		MOVS	R1, #102
		POP.W	{R4,LR}
		ADDS	R0, #(String_Found - String_No)
		B.W	DrawStringCentered
@ End of function ShowNoAtoFound

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShow10sProtec:
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, =String_Over10s
		BL	DrawStringCentered
		LDR	R0, =String_Over10s
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Over10s - String_Protec)
		B.W	DrawStringCentered
@ End of function Show10sProtec

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgShowWeakBat:
		PUSH	{R4,LR}
		MOVS	R1, #106
		LDR	R0, =String_Weak
		BL	DrawStringCentered
		LDR	R0, =String_Weak
		MOVS	R1, #118
		POP.W	{R4,LR}
		ADDS	R0, #(String_Battery -	String_Weak)
		B.W	DrawStringCentered
@ End of function ShowWeakBat

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSleepIfIdle:
		PUSH.W	{R4-R8,LR}
		LDR	R6, =Flags64
		LDR	R4, =BatRefreshTmr
		LDR	R0, [R6]
		LDRB	R2, [R4]
		UBFX.W	R1, R0,	#8, #1
		ORRS	R1, R2
		BNE	locret_7898
		LDR	R5, =Screen
		LDR	R2, =SleepTimer
		LDRB	R1, [R5]
		LDRH	R2, [R2]
		ORRS	R1, R2
		BNE	loc_7894
		LSLS	R0, R0,	#0x11
		BPL	loc_7894
		BL	GoToSleep
		LDR	R1, =byte_200000B3
		MOVS	R0, #2
		MOVS	R7, #0
		STRB	R0, [R1]
		LDR	R0, =AtoProbeCount
		STRB	R7, [R0]
		LDR	R0, =AtoRezMilli
		STR	R7, [R0]
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x8000
		STR	R0, [R6]
		BL	ReadBatteryVoltage
		LDR	R0, =BatteryVoltage
		LDRH	R0, [R0]
		CMP.W	R0, #300
		BHI	loc_788C
		LDRH	R0, [R6]
		LSLS	R0, R0,	#21
		BMI	loc_788C
		LDR	R0, =dfData
		LDR	R1, [R0,#(dfStatus - dfData)]
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#(dfStatus - dfData)]
		STRB	R7, [R5]

loc_788C:				@ ...
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x10000
		STR	R0, [R6]

loc_7894:				@ ...
		MOVS	R0, #200
		STRB	R0, [R4]

locret_7898:				@ ...
		POP.W	{R4-R8,PC}
@ End of function SleepIfIdle

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_sys

SystemCoreClockUpdate:

var_C		= -0xC

		PUSH	{R3,R4,LR}
		ADR	R0, dword_7940
		MOV.W	R4, #0x40000000
		LDR	R0, [R0]
		STR	R0, [SP]
		LDR.W	R0, [R4,#0x240]	@ CLK_PLLCTL
		TST.W	R0, #0x50000
		BEQ	loc_78DA
		MOVS	R1, #0
		B	loc_790A
@ ---------------------------------------------------------------------------

loc_78DA:				@ ...
		LSLS	R1, R0,	#12
		BPL	loc_78E2
		LDR	R1, =22118400
		B	loc_78E4
@ ---------------------------------------------------------------------------

loc_78E2:				@ ...
		LDR	R1, =12000000

loc_78E4:				@ ...
		LSLS	R2, R0,	#14
		BMI	loc_790A
		UBFX.W	R2, R0,	#0, #9	@ FBDIV
		UBFX.W	R3, R0,	#14, #2	@ OUTDIV
		LSRS	R1, R1,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R0, R0,	#9, #5	@ INDIV
		MULS	R1, R2
		ADDS	R0, R0,	#2
		SMULBB.W R0, R0, R3
		UDIV.W	R0, R1,	R0
		LSLS	R1, R0,	#2

loc_790A:				@ ...
		LDR	R2, =SystemCoreClock

		LDR R0,	=PllClock
		STR R1, [R0]
@MODIF	STR	R1, [R2,#(PllClock - SystemCoreClock)]	@ = PLLFOUT

		LDR.W	R0, [R4,#0x210]	@ CLK_CLKSEL0
		AND.W	R0, R0,	#7
		CMP	R0, #2		@ Source from PLL?
		BEQ	loc_7922
		LDR		R1, =gau32ClkSrcTbl
@MODIF	ADD.W	R1, R2,	#(gau32ClkSrcTbl - SystemCoreClock)
		LDR.W	R1, [R1,R0,LSL#2]

loc_7922:				@ ...
		LDR.W	R0, [R4,#0x220]	@ CLK_CLKDIV0
		AND.W	R0, R0,	#0xF	@ HCLKDIV
		ADDS	R0, R0,	#1
		UDIV.W	R0, R1,	R0
		LDR	R1, =500000
		STR	R0, [R2]	@ = CPUCLK
		ADD	R0, R1
		LSLS	R1, R1,	#1
		UDIV.W	R0, R0,	R1
		STR	R0, [R2,#4]	@ = CPUCLK en MHz (arrondi)
		POP	{R3,R4,PC}
@ End of function SystemCoreClockUpdate

@ ---------------------------------------------------------------------------
			.balign 4,0
dword_7940:	.long	0x04020201
			.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

EnableFPU:
		LDR		R0, =0xE000ED88
		LDR		R1, [R0]	@ CPACR
		ORR.W	R1, R1,	#0x00F00000
		STR		R1, [R0]	@ Full access to coprocessors 10 & 11
		BX		LR
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ End of function EnableFPU
@ ---------------------------------------------------------------------------
@ =============== S U B	R O U T	I N E =======================================


		.ifne	keeporglibs_tmr
		
TIMER_GetModuleClock:			@ ...
		PUSH	{R4,LR}
		SUB	SP, SP,	#0x20
		MOV	R4, R0
		MOVS	R2, #0x20
		LDR	R1, =TMRSourceFreq
		MOV	R0, SP
		BL	MemCpy
		LDR	R1, =0x40050000
		LSLS	R0, R1,	#14
		CMP	R4, R1
		BNE	loc_7986
		LDR.W	R0, [R0,#0x214]
		UBFX.W	R0, R0,	#8, #3
		B	loc_79AC
@ ---------------------------------------------------------------------------

loc_7986:				@ ...
		LDR	R1, =0x40050000
		ADDS	R1, #0x20
		CMP	R4, R1
		BNE	loc_7998
		LDR.W	R0, [R0,#0x214]
		UBFX.W	R0, R0,	#0xC, #3
		B	loc_79AC
@ ---------------------------------------------------------------------------

loc_7998:				@ ...
		LDR	R1, =0x40051000
		LDR.W	R0, [R0,#0x214]
		CMP	R4, R1
		BNE	loc_79A8
		UBFX.W	R0, R0,	#0x10, #3
		B	loc_79AC
@ ---------------------------------------------------------------------------

loc_79A8:				@ ...
		UBFX.W	R0, R0,	#20, #3

loc_79AC:				@ ...
		CMP	R0, #2
		BEQ	loc_79B8
		LDR.W	R0, [SP,R0,LSL#2]

loc_79B4:				@ ...
		ADD	SP, SP,	#0x20
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_79B8:				@ ...
		LDR	R0, =SystemCoreClock
		LDR	R0, [R0]
		B	loc_79B4
@ End of function TIMER_GetModuleClock

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_tmr
		
TIMER_Open:			@ ...
		PUSH	{R4-R6,LR}
		MOV	R4, R2
		MOV	R6, R1
		MOV	R5, R0
		BL	TIMER_GetModuleClock
		MOVS	R1, #0
		CMP.W	R4, R0,LSR#1
		BLS	loc_79E8
		MOVS	R2, #2
		B	loc_7A0E
@ ---------------------------------------------------------------------------

loc_79E8:				@ ...
		LDR	R2, =64000000
		CMP	R0, R2
		BLS	loc_79F4
		MOVS	R1, #7
		LSRS	R0, R0,	#3
		B	loc_7A0A
@ ---------------------------------------------------------------------------

loc_79F4:				@ ...
		LDR	R2, =32000000
		CMP	R0, R2
		BLS	loc_7A00
		MOVS	R1, #3
		LSRS	R0, R0,	#2
		B	loc_7A0A
@ ---------------------------------------------------------------------------

loc_7A00:				@ ...
		LDR	R2, =16000000
		CMP	R0, R2
		BLS	loc_7A0A
		MOVS	R1, #1
		LSRS	R0, R0,	#1

loc_7A0A:				@ ...
		UDIV.W	R2, R0,	R4

loc_7A0E:				@ ...
		ORRS	R6, R1
		STR	R6, [R5]
		STR	R2, [R5,#4]
		ADDS	R1, R1,	#1
		MULS	R2, R1
		UDIV.W	R0, R0,	R2
		POP	{R4-R6,PC}
@ End of function TIMER_Open

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

TMR0_IRQHandler:			@ ...
		LDR	R0, =0x40050000
		LDR	R1, [R0,#8]
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	locret_7A52
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		LDR	R1, =TMR0Counter2
		LDR	R0, [R1]
		CMP.W	R0, #2000
		BCS	locret_7A52
		ADDS	R0, R0,	#1
		STR	R0, [R1]

locret_7A52:				@ ...
		BX	LR
@ End of function TMR0_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

@ 5000Hz Timer (PCLK0)

		.ifne	keeporgcode
		
TMR1_IRQHandler:			@ ...
		LDR	R0, =0x40050020
		LDR	R1, [R0,#8]	@ TIMER1_INTSTS
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	locret_7A86
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		LDR	R0, =Flags64
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		LDR	R0, =TMR0Counter
		LDR	R1, [R0,#4]
		ADDS	R1, R1,	#1
		STR	R1, [R0,#4]

locret_7A86:				@ ...
		BX	LR
@ End of function TMR1_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
			
@ =============== S U B	R O U T	I N E =======================================

@ Millisecond timer (1000Hz)

		.ifne	keeporgcode

TMR2_IRQHandler:			@ ...
		LDR	R0, =0x40051000
		PUSH	{R4,R5}
		LDR	R1, [R0,#8]	@ TIMER2_INTSTS
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	loc_7B0C	@ not me!
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]	@ Clear	interrupt flag
		LDR	R3, =Flags64
		LDR	R4, =TMR0Counter
		LDR	R0, [R3]
		ORR.W	R0, R0,	#6
		STR	R0, [R3]
		LDR	R1, [R4,#(TMR2Counter -	TMR0Counter)]
		ADDS	R1, R1,	#1
		STR	R1, [R4,#(TMR2Counter -	TMR0Counter)]
		LDR	R2, [R4,#(TMR2Counter -	TMR0Counter)]
		MOVS	R1, #10
		UDIV.W	R5, R2,	R1
		MLS.W	R2, R1,	R5, R2
		CBNZ	R2, loc_7AD4
		ORR.W	R0, R0,	#8
		STR	R0, [R3]

loc_7AD4:				@ ...
		LDR	R0, [R4,#(TMR2Counter -	TMR0Counter)]
		LSLS	R2, R0,	#28
		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfFBSpeed - dfData)]
		BNE	loc_7AE2
		CBZ	R0, loc_7B06

loc_7AE2:				@ ...
		LDR	R2, [R4,#(TMR2Counter -	TMR0Counter)]
		MOVS	R3, #13
		UDIV.W	R5, R2,	R3
		MLS.W	R2, R3,	R5, R2
		CBNZ	R2, loc_7AF4
		CMP	R0, #1
		BEQ	loc_7B06

loc_7AF4:				@ ...
		LDR	R2, [R4,#(TMR2Counter -	TMR0Counter)]
		UDIV.W	R3, R2,	R1
		MLS.W	R1, R1,	R3, R2
		CMP	R1, #0
		BNE	loc_7B0C
		CMP	R0, #2
		BNE	loc_7B0C

loc_7B06:				@ ...
		POP	{R4,R5}
		B.W	fbTickTimeouts
@ ---------------------------------------------------------------------------

loc_7B0C:				@ ...
		POP	{R4,R5}
		BX	LR
@ End of function TMR2_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

@ 10 Hz	Timer (HXT)

		.ifne	keeporgcode
		
TMR3_IRQHandler:			@ ...
		LDR	R0, =0x40051020
		PUSH	{R4,LR}
		LDR	R1, [R0,#8]
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	locret_7B88
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		LDR	R2, =Flags64
		LDR	R3, =TMR0Counter
		LDR	R0, [R2]
		ORR.W	R0, R0,	#0x10
		STR	R0, [R2]
		LDR	R1, [R3,#(TMR3Counter -	TMR0Counter)]
		ADDS	R1, R1,	#1
		STR	R1, [R3,#(TMR3Counter -	TMR0Counter)]
		LDR	R1, [R3,#(TMR3Counter -	TMR0Counter)]
		LSLS	R1, R1,	#31
		BNE	loc_7B58
		ORR.W	R0, R0,	#0x20
		STR	R0, [R2]

loc_7B58:				@ ...
		LDR	R0, [R3,#(TMR3Counter -	TMR0Counter)]
		MOVS	R1, #5
		UDIV.W	R4, R0,	R1
		MLS.W	R0, R1,	R4, R0
		CBNZ	R0, loc_7B6E
		LDR	R0, [R2]
		ORR.W	R0, R0,	#0x40
		STR	R0, [R2]

loc_7B6E:				@ ...
		LDR	R0, [R3,#(TMR3Counter -	TMR0Counter)]
		MOVS	R1, #10
		UDIV.W	R2, R0,	R1
		MLS.W	R0, R1,	R2, R0
		CMP	R0, #0
		BNE	locret_7B88
		LDR	R0, =Flags68
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x100
		STR	R1, [R0]

locret_7B88:				@ ...
		POP	{R4,PC}
@ End of function TMR3_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================


fbCallTimeouts:
		PUSH	{R4-R6,LR}
		LDR	R4, =fbTimeoutMask
		MOVS	R0, #1
		LDR	R5, =TimeoutsTable
		STRB	R0, [R4]
		MOVS	R0, #0
		STRB	R0, [R4,#(fbCurrentTimeout - fbTimeoutMask)]

loc_7BAA:				@ ...
		LDRB	R0, [R4,#(fbUsedTimeouts - fbTimeoutMask)]
		LDRB	R1, [R4]
		TST	R0, R1
		BEQ	loc_7BC2
		LDRB	R0, [R4,#(fbCurrentTimeout - fbTimeoutMask)]
		LDRB.W	R1, [R5,R0,LSL#3]
		CBNZ	R1, loc_7BC2
		ADD.W	R0, R5,	R0,LSL#3
		LDR	R0, [R0,#4]
		BLX	R0

loc_7BC2:				@ ...
		LDRB	R0, [R4]
		LSLS	R0, R0,	#1
		STRB	R0, [R4]
		LDRB	R0, [R4,#(fbCurrentTimeout - fbTimeoutMask)]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R4,#(fbCurrentTimeout - fbTimeoutMask)]
		CMP	R0, #3
		BCC	loc_7BAA
		POP	{R4-R6,PC}
@ End of function fbCallTimeouts

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgReadBoardTemp:
		PUSH.W	{R4-R8,LR}
		LDR	R5, =Flags64
		SUB.W	R4, R5,	#(Flags64 - KeyUpTimer)

loc_7BEA:				@ ...
		LDRB	R0, [R4,#(BTempSampleCnt - KeyUpTimer)]
		CMP	R0, #16
		BCS	loc_7C0C
		MOVS	R0, #14
		BL	ADC_Read
		LDR	R1, [R4,#(BTempSampleSum - KeyUpTimer)]
		ADD	R0, R1
		STR	R0, [R4,#(BTempSampleSum - KeyUpTimer)]
		LDRB	R0, [R4,#(BTempSampleCnt - KeyUpTimer)]
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#(BTempSampleCnt - KeyUpTimer)]
		LDR	R0, [R5]
		LSLS	R0, R0,	#15
		BMI	loc_7BEA

locret_7C08:				@ ...
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_7C0C:				@ ...
		LDR	R0, [R5]
		MOVS	R6, #0
		BIC.W	R0, R0,	#0x10000
		STR	R0, [R5]
		LDR	R0, [R4,#(BTempSampleSum - KeyUpTimer)]
		MOVW	R1, #0x87F0
		LSRS	R0, R0,	#4
		STR	R0, [R4,#(BTempSampleSum - KeyUpTimer)]
		CMP.W	R0, #0x1000
		BEQ	loc_7C4A
		CBZ	R0, loc_7C4A
		MOV.W	R2, #2000
		MULS	R2, R0
		RSB.W	R0, R0,	#5280
		UDIV.W	R0, R2,	R0
		ADD.W	R0, R0,	R0,LSL#2
		LSLS	R2, R0,	#1
		MOVW	R0, #630
		STR	R2, [R4,#(BTempSampleSum - KeyUpTimer)]
		CMP	R2, R0
		BHI	loc_7C4E
		MOVS	R0, #99
		B	loc_7CC2
@ ---------------------------------------------------------------------------

loc_7C4A:				@ ...
		STR	R1, [R4,#(BTempSampleSum - KeyUpTimer)]
		B	loc_7C52
@ ---------------------------------------------------------------------------

loc_7C4E:				@ ...
		CMP	R2, R1
		BCC	loc_7C56

loc_7C52:				@ ...
		STRB	R6, [R4,#(BoardTemp - KeyUpTimer)]
		B	loc_7CC4
@ ---------------------------------------------------------------------------

loc_7C56:				@ ...
		LDR	R0, =BoardTempTable
		MOVS	R1, #1

loc_7C5A:				@ ...
		LDR.W	R3, [R0,R1,LSL#2]
		CMP	R3, R2
		BLS	loc_7C6A
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		CMP	R1, #20
		BCC	loc_7C5A

loc_7C6A:				@ ...
		ADD.W	R3, R0,	R1,LSL#2
		LDR.W	R5, [R0,R1,LSL#2]
		LDR.W	R3, [R3,#-4]
		ADD.W	R2, R2,	R2,LSL#2
		ADD.W	R3, R3,	R3,LSL#2
		LSLS	R3, R3,	#1
		NEGS	R0, R5
		ADD.W	R0, R0,	R0,LSL#2
		ADD.W	R0, R3,	R0,LSL#1
		MOVS	R3, #5
		UDIV.W	R0, R0,	R3
		UXTH	R3, R0
		MOVS	R0, #0
		ADD.W	R5, R5,	R5,LSL#2

loc_7C98:				@ ...
		MUL.W	R7, R3,	R0
		ADD.W	R7, R7,	R5,LSL#1
		CMP.W	R7, R2,LSL#1
		BHI	loc_7CB4
		ADDS	R7, R0,	#1
		MULS	R7, R3
		ADD.W	R7, R7,	R5,LSL#1
		CMP.W	R7, R2,LSL#1
		BHI	loc_7CBC

loc_7CB4:				@ ...
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #5
		BCC	loc_7C98

loc_7CBC:				@ ...
		ADD.W	R1, R1,	R1,LSL#2
		SUBS	R0, R1,	R0

loc_7CC2:				@ ...
		STRB	R0, [R4,#(BoardTemp - KeyUpTimer)]

loc_7CC4:				@ ...
		STRB	R6, [R4,#(BTempSampleCnt - KeyUpTimer)]
		STR	R6, [R4,#(BTempSampleSum - KeyUpTimer)]
		B	locret_7C08
@ End of function ReadBoardTemp

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitTimers:				@ ...
		PUSH.W	{R4-R8,LR}

		LDR	R4, =0x40050000
		MOV.W	R7, #0x8000000	@ OPMODE = periodic
		LDR	R2, =100000
		MOV	R1, R7
		MOV	R0, R4
		BL	TIMER_Open @ TMR0: 100kHz
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R4]	@ INTEN	= 1
		LDR	R5, =0x40050000

		MOVW	R2, #5000
		ADDS	R5, #0x20
		MOV	R1, R7
		MOV	R0, R5
		BL	TIMER_Open @ TMR1: 5000Hz
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R5]	@ INTEN	= 1

		LDR	R6, =0x40051000
		MOV.W	R2, #1000
		MOV	R1, R7
		MOV	R0, R6
		BL	TIMER_Open @ TMR2: 1000Hz
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R6]	@ INTEN	= 1
		MOV	R1, R7

		LDR	R7, =0x40051000
		MOVS	R2, #10
		ADDS	R7, #0x20
		MOV	R0, R7
		BL	TIMER_Open @ TMR3: 10Hz
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R7]	@ INTEN	= 1

		MOVS	R0, #0x20
		BL	NVIC_EnableIRQ
		MOVS	R0, #0x21
		BL	NVIC_EnableIRQ
		MOVS	R0, #0x22
		BL	NVIC_EnableIRQ
		MOVS	R0, #0x23
		BL	NVIC_EnableIRQ	@ Enable all 4 IRQs

		LDR	R1, =TMR0Counter
		MOVS	R0, #0
		STR	R0, [R1,#0xC]
		STR	R0, [R1,#8]
		STR	R0, [R1,#4]
		STR	R0, [R1]	@ Reset	soft counters

		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R4]
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R5]
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R6]
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R7]

		POP.W	{R4-R8,PC}

@ End of function InitTimers
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgTimedItems:				@ ...
		PUSH.W	{R4-R8,LR}
		LDR	R5, =Screen
		LDRB	R0, [R5]
		CBNZ	R0, loc_7DA0
		LDR	R1, =SleepTimer
		LDRH	R0, [R1]
		CBZ	R0, loc_7DA0
		SUBS	R0, R0,	#1
		STRH	R0, [R1]

loc_7DA0:				@ ...
		LDR	R0, =0x400048DC	@ PD7_PDIO
		LDR	R0, [R0]
		LDR	R6, =KeyUpTimer
		CBNZ	R0, loc_7DB6
		LDRB	R0, [R6,#(byte_20000048	- KeyUpTimer)]
		CMP	R0, #2
		BCC	loc_7DB6
		CMP	R0, #50
		BCS	loc_7DB6
		ADDS	R0, R0,	#1
		STRB	R0, [R6,#(byte_20000048	- KeyUpTimer)]

loc_7DB6:				@ ...
		LDRB	R0, [R6,#(BatRefreshTmr	- KeyUpTimer)]
		CBZ	R0, loc_7DBE
		SUBS	R0, R0,	#1
		STRB	R0, [R6,#(BatRefreshTmr	- KeyUpTimer)]

loc_7DBE:				@ ...
		LDR	R4, =KeyUpTimer
		LDRH	R0, [R6,#(EditModeTimer	- KeyUpTimer)]
		MOVS	R7, #30
		LDR.W	R8, =ScreenDuration
		ADDS	R4, #40
		CBZ	R0, loc_7E1C
		SUBS	R0, R0,	#1
		LSLS	R0, R0,	#16
		LSRS	R0, R0,	#16
		MOV	R1, R4
		STRH	R0, [R6,#(EditModeTimer	- KeyUpTimer)]
		LDR	R2, [R1]
		MOV.W	R3, #50
		ORR.W	R1, R2,	#0x40000
		BEQ	loc_7DEE
		UDIV.W	R12, R0, R3
		MLS.W	R0, R3,	R12, R0
		CBZ	R0, loc_7E0A
		B	loc_7E1C
@ ---------------------------------------------------------------------------

loc_7DEE:				@ ...
		LDR	R0, =KeyUpTimer
		ADDS	R0, #44
		LDR	R2, [R0]
		BIC.W	R2, R2,	#0x10
		STR	R2, [R0]
		ORR.W	R0, R1,	#0x20000
		STR	R0, [R4]
		LDR	R0, =UpdateDFTimer
		STRB.W	R7, [R8]
		STRB	R3, [R0]
		B	loc_7E1C
@ ---------------------------------------------------------------------------

loc_7E0A:				@ ...
		LSLS	R0, R2,	#13
		BPL	loc_7E16
		BIC.W	R0, R2,	#0x40000
		STR	R0, [R4]
		B	loc_7E18
@ ---------------------------------------------------------------------------

loc_7E16:				@ ...
		STR	R1, [R4]

loc_7E18:				@ ...
		BL	MainView

loc_7E1C:				@ ...
		LDRB	R0, [R6,#(BatReadTimer - KeyUpTimer)]
		CBZ	R0, loc_7E32
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R6,#(BatReadTimer - KeyUpTimer)]
		BNE	loc_7E32
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x800
		STR	R0, [R4]

loc_7E32:				@ ...
		LDRB	R0, [R6,#(FireClickTimer - KeyUpTimer)]
		MOVS	R2, #0
		CBZ	R0, loc_7E44
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R6,#(FireClickTimer - KeyUpTimer)]
		BNE	loc_7E44
		STRB	R2, [R6,#(FireClickCount - KeyUpTimer)]

loc_7E44:				@ ...
		LDR	R1, =BatAnimTimer
		LDRB	R0, [R1]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R1]
		CMP	R0, #100
		BCC	locret_7EB4
		STRB	R2, [R1]
		LDR	R0, [R4]
		LSLS	R1, R0,	#19
		BPL	loc_7E94
		LSLS	R1, R0,	#10
		BMI	loc_7E64
		ORR.W	R1, R0,	#0x200000
		B	loc_7E68
@ ---------------------------------------------------------------------------

loc_7E64:				@ ...
		BIC.W	R1, R0,	#0x200000

loc_7E68:				@ ...
		STR	R1, [R4]
		LDRB	R0, [R5]
		CMP	R0, #1
		BEQ	loc_7E78
		CMP	R0, #3
		BEQ	loc_7E78
		CMP	R0, #5
		BNE	locret_7EB4

loc_7E78:				@ ...
		LDRB	R2, [R6,#(BatAnimLevel - KeyUpTimer)]
		CMP	R2, #10
		BCC	loc_7E82
		LDRB	R2, [R6,#(BatteryTenth - KeyUpTimer)]
		B	loc_7E84
@ ---------------------------------------------------------------------------

loc_7E82:				@ ...
		ADDS	R2, R2,	#1

loc_7E84:				@ ...
		STRB	R2, [R6,#(BatAnimLevel - KeyUpTimer)]
		CMP	R0, #3
		BEQ	loc_7ED0
		CMP	R0, #1
		BEQ	loc_7ED0
		STRB.W	R7, [R8]
		B	loc_7ED0
@ ---------------------------------------------------------------------------

loc_7E94:				@ ...
		LSLS	R1, R0,	#12
		BPL	loc_7EB8
		LSLS	R1, R0,	#11
		BMI	loc_7EA2
		ORR.W	R0, R0,	#0x100000
		B	loc_7EA6
@ ---------------------------------------------------------------------------

loc_7EA2:				@ ...
		BIC.W	R0, R0,	#0x100000

loc_7EA6:				@ ...
		STR	R0, [R4]
		LDRB	R1, [R5]
		CMP	R1, #1
		BNE	locret_7EB4
		ORR.W	R0, R0,	#0x20000

loc_7EB2:				@ ...
		STR	R0, [R4]

locret_7EB4:				@ ...
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_7EB8:				@ ...
		LSLS	R1, R0,	#10
		BMI	loc_7EC0
		LSLS	R1, R0,	#11
		BPL	locret_7EB4

loc_7EC0:				@ ...
		BIC.W	R1, R0,	#0x300000
		STR	R1, [R4]
		LDRB	R0, [R5]
		CMP	R0, #1
		BEQ	loc_7ED0
		CMP	R0, #3
		BNE	locret_7EB4

loc_7ED0:				@ ...
		ORR.W	R0, R1,	#0x20000
		B	loc_7EB2
@ End of function TimedItems

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitUART0:				@ ...

var_24		= -0x24

		PUSH	{R4,LR}
		LDR	R0, =0x4000010	@ UART0RST
		BL	SYS_ResetModule
		POP.W	{R4,LR}
		MOV.W	R1, #115200
		LDR	R0, =0x40070000
		B.W	UART_Open
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
@ ---------------------------------------------------------------------------


		.ifne	keeporglibs_uart

UART_Open:				@ ...
		PUSH.W	{R0-R8,LR}
		MOV	R4, R0
		LDR	R0, =dword_DAAC
		MOV	R5, R1
		LDMIA	R0, {R0-R3}
		STMEA.W	SP, {R0-R3}
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x214]	@ CLK_CLKSEL
		LDR.W	R0, [R0,#0x220]	@ CLK_CLKDIV0
		UBFX.W	R7, R1,	#24, #2	@ UARTSEL
		UBFX.W	R6, R0,	#8, #4	@ UARTDIV
		MOVS	R0, #0
		STR	R0, [R4,#0x30]	@ UART0_FUNCSEL	= UART
		MOVS	R0, #3
		STR	R0, [R4,#0xC]	@ UART0_LINE.WLS = 3 (8	bits word length)
		LDR	R0, [R4,#8]
		LDR	R1, =0xFFF0FF0F
		ANDS	R0, R1
		STR	R0, [R4,#8]	@ FIFO trigger level for INT and flow control =	1 byte
		MOV	R8, SP
		CMP	R7, #1
		BNE	loc_7F54
		BL	CLKGetPLLClockFreq
		STR	R0, [SP,#4]

loc_7F54:				@ ...
		CMP	R5, #0
		BEQ	locret_7F8E
		LDR.W	R1, [R8,R7,LSL#2]
		ADDS	R6, R6,	#1
		UDIV.W	R0, R1,	R6
		ADD.W	R0, R0,	R5,LSR#1
		UDIV.W	R0, R0,	R5
		SUBS	R0, R0,	#2
		CMP.W	R0, #0x10000
		BCC	loc_7F88
		UDIV.W	R0, R1,	R6
		ADD.W	R0, R0,	R5,LSL#3
		UDIV.W	R0, R0,	R5
		MVN.W	R1, #1
		ADD.W	R0, R1,	R0,LSR#4
		B	loc_7F8C
@ ---------------------------------------------------------------------------

loc_7F88:				@ ...
		ORR.W	R0, R0,	#0x30000000

loc_7F8C:				@ ...
		STR	R0, [R4,#0x24]	@ UART_BAUD

locret_7F8E:				@ ...
		POP.W	{R0-R8,PC}
@ End of function InitUART0

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
@ =============== S U B	R O U T	I N E =======================================


fbDrawChar:

var_8		= -8

		PUSH	{R3,LR}
		SUBS	R2, #0x20
		LDR	R3, =fbFont
		UXTB	R2, R2
		ADD.W	R2, R3,	R2,LSL#4
		STR	R2, [SP]
		MOVS	R3, #0x10
		MOVS	R2, #8
		BL	fbDrawSprite
		POP	{R3,PC}
@ End of function fbDrawChar

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================


fbDrawNumber:
		PUSH.W	{R4-R11,LR}
		MOV	R4, R3
		MOV	R5, R2
		MOV	R11, R1
		MOV	R6, R0
		MOVW	R7, #10000
		MOV.W	R8, #1000
		MOV.W	R9, #100
		MOV.W	R10, #10
		B	loc_800A
@ ---------------------------------------------------------------------------

loc_7FD6:				@ ...
		CMP	R5, #6		@ switch 6 cases
		BCS	def_7FDA
		TBB.W	[PC,R5]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_7FDA:
		.byte (def_7FDA - jpt_7FDA)/2
		.byte (loc_802E - jpt_7FDA)/2
		.byte (loc_8020 - jpt_7FDA)/2
		.byte (loc_8012 - jpt_7FDA)/2
		.byte (loc_7FEA - jpt_7FDA)/2
		.byte (loc_7FE4 - jpt_7FDA)/2
		.balign 2,0
@ ---------------------------------------------------------------------------

loc_7FE4:				@ ...
		UDIV.W	R0, R4,	R7
		B	loc_7FF6
@ ---------------------------------------------------------------------------

loc_7FEA:				@ ...
		UDIV.W	R0, R4,	R7
		MLS.W	R1, R7,	R0, R4
		UDIV.W	R0, R1,	R8

loc_7FF6:				@ ...
		ADDS	R0, #0x30
		UXTB	R2, R0
		MOV	R1, R11
		MOV	R0, R6

loc_7FFE:				@ ...
		BL	fbDrawChar

def_7FDA:				@ ...
		ADDS	R6, #8
		SUBS	R5, R5,	#1
		UXTB	R6, R6
		UXTB	R5, R5

loc_800A:				@ ...
		CMP	R5, #0
		BNE	loc_7FD6
		POP.W	{R4-R11,PC}
@ ---------------------------------------------------------------------------

loc_8012:				@ ...
		UDIV.W	R1, R4,	R8
		MLS.W	R1, R8,	R1, R4
		UDIV.W	R0, R1,	R9
		B	loc_7FF6
@ ---------------------------------------------------------------------------

loc_8020:				@ ...
		UDIV.W	R1, R4,	R9
		MLS.W	R1, R9,	R1, R4
		UDIV.W	R2, R1,	R10
		B	loc_8036
@ ---------------------------------------------------------------------------

loc_802E:				@ ...
		UDIV.W	R1, R4,	R10
		MLS.W	R2, R10, R1, R4

loc_8036:				@ ...
		MOV	R1, R11
		MOV	R0, R6
		ADDS	R2, #0x30
		B	loc_7FFE
@ End of function fbDrawNumber


@ =============== S U B	R O U T	I N E =======================================


fbDrawText:
		PUSH	{R4-R6,LR}
		MOV	R4, R2
		MOV	R6, R1
		MOV	R5, R0
		B	loc_8056
@ ---------------------------------------------------------------------------

loc_8048:				@ ...
		MOV	R1, R6
		MOV	R0, R5
		ADDS	R4, R4,	#1
		BL	fbDrawChar
		ADDS	R5, #8
		UXTB	R5, R5

loc_8056:				@ ...
		LDRB	R2, [R4]
		CMP	R2, #0
		BNE	loc_8048
		POP	{R4-R6,PC}
@ End of function fbDrawText


@ =============== S U B	R O U T	I N E =======================================


fbDrawSprite:

var_28		= -0x28
arg_0		=  0

		PUSH.W	{R3-R11,LR}
		MOV	R9, R3
		LDR.W	R8, [SP,#0x28]
		MOV	R10, R1
		MOV	R6, R0
		MOV.W	R11, R2,LSR#3
		STR	R0, [SP]
		B	loc_80AC
@ ---------------------------------------------------------------------------

loc_8074:				@ ...
		MOVS	R7, #0
		B	loc_809E
@ ---------------------------------------------------------------------------

loc_8078:				@ ...
		LDRB.W	R5, [R8],#1
		MOVS	R4, #0

loc_807E:				@ ...
		LSLS	R0, R5,	#0x1F
		BEQ	loc_808C
		MOVS	R2, #1
		MOV	R1, R10
		MOV	R0, R6
		BL	fbPlot

loc_808C:				@ ...
		ADDS	R6, R6,	#1
		ADDS	R4, R4,	#1
		LSRS	R5, R5,	#1
		UXTB	R4, R4
		UXTB	R6, R6
		CMP	R4, #8
		BCC	loc_807E
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_809E:				@ ...
		CMP	R7, R11
		BCC	loc_8078
		ADD.W	R0, R10, #1
		LDR	R6, [SP]
		AND.W	R10, R0, #0xFF

loc_80AC:				@ ...
		SUBS.W	R1, R9,	#1
		AND.W	R9, R1,	#0xFF
		BCS	loc_8074
		POP.W	{R3-R11,PC}
@ End of function fbDrawSprite


@ =============== S U B	R O U T	I N E =======================================


fbDrawRect:

anonymous_0	=  0

		PUSH.W	{R4-R10,LR}
		MOV	R4, R0
		LDRD.W	R10, R0, [SP,#0x20]
		MOV	R6, R3
		MOV	R8, R2
		MOV	R5, R1
		CBZ	R0, loc_8110
		CMP	R5, R6
		BLS	loc_80D6
		MOV	R7, R3
		MOV	R6, R1
		B	loc_80D8
@ ---------------------------------------------------------------------------

loc_80D6:				@ ...
		MOV	R7, R1

loc_80D8:				@ ...
		CMP	R8, R4
		BCS	loc_80E2
		SUB.W	R0, R4,	R8
		B	loc_80E6
@ ---------------------------------------------------------------------------

loc_80E2:				@ ...
		SUB.W	R0, R8,	R4

loc_80E6:				@ ...
		AND.W	R8, R0,	#0xFF
		B	loc_8108
@ ---------------------------------------------------------------------------

loc_80EC:				@ ...
		MOVS	R5, #0
		B	loc_8100
@ ---------------------------------------------------------------------------

loc_80F0:				@ ...
		ADDS	R0, R4,	R5
		UXTB	R0, R0
		MOV	R2, R10
		MOV	R1, R7
		BL	fbPlot
		ADDS	R5, R5,	#1
		UXTB	R5, R5

loc_8100:				@ ...
		CMP	R5, R8
		BCC	loc_80F0
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_8108:				@ ...
		CMP	R7, R6
		BLS	loc_80EC

locret_810C:				@ ...
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_8110:				@ ...
		MOV	R0, R2
		CMP	R4, R8
		BLS	loc_811A
		MOV	R8, R4
		MOV	R4, R0

loc_811A:				@ ...
		CMP	R5, R6
		BLS	loc_8122
		MOV	R6, R1
		MOV	R5, R3

loc_8122:				@ ...
		SUB.W	R9, R8,	R4
		AND.W	R7, R9,	#0xFF
		B	loc_8138
@ ---------------------------------------------------------------------------

loc_812C:				@ ...
		ADDS	R0, R4,	R7
		UXTB	R0, R0
		MOV	R2, R10
		MOV	R1, R5
		BL	fbPlot

loc_8138:				@ ...
		SUBS	R7, R7,	#1
		UXTB	R7, R7
		BCS	loc_812C
		AND.W	R7, R9,	#0xFF
		B	loc_8150
@ ---------------------------------------------------------------------------

loc_8144:				@ ...
		ADDS	R0, R4,	R7
		UXTB	R0, R0
		MOV	R2, R10
		MOV	R1, R6
		BL	fbPlot

loc_8150:				@ ...
		SUBS	R7, R7,	#1
		UXTB	R7, R7
		BCS	loc_8144
		SUBS	R7, R6,	R5
		UXTB	R6, R7
		B	loc_8168
@ ---------------------------------------------------------------------------

loc_815C:				@ ...
		ADDS	R0, R5,	R6
		UXTB	R1, R0
		MOV	R2, R10
		MOV	R0, R4
		BL	fbPlot

loc_8168:				@ ...
		SUBS	R6, R6,	#1
		UXTB	R6, R6
		BCS	loc_815C
		ADDS	R7, R7,	#1
		UXTB	R4, R7
		B	loc_8180
@ ---------------------------------------------------------------------------

loc_8174:				@ ...
		ADDS	R0, R5,	R4
		UXTB	R1, R0
		MOV	R2, R10
		MOV	R0, R8
		BL	fbPlot

loc_8180:				@ ...
		SUBS	R4, R4,	#1
		UXTB	R4, R4
		BCS	loc_8174
		B	locret_810C
@ End of function fbDrawRect


@ =============== S U B	R O U T	I N E =======================================


fbPlot:
		PUSH	{R4,R5,LR}
		LDR	R4, =ScreenBuffer
		CMP	R0, #0x7F
		BHI	locret_81DC
		CMP	R1, #0x3F
		BHI	locret_81DC
		LDR	R3, =DisplayModel
		RSB.W	R0, R0,	#0x7F
		UXTB	R0, R0
		LDRB	R5, [R3]
		MOVS	R3, #1
		CBZ	R5, loc_81C0
		MOV.W	R0, R0,LSL#3
		ADD.W	R0, R0,	R1,LSR#3
		CMP	R2, #0
		AND.W	R1, R1,	#7
		LDRB	R2, [R4,R0]
		RSB.W	R1, R1,	#7
		LSL.W	R3, R3,	R1
		BEQ	loc_81DE
		ORRS	R2, R3
		B	loc_81E0
@ ---------------------------------------------------------------------------

loc_81C0:				@ ...
		LSRS	R5, R0,	#3
		AND.W	R0, R0,	#7
		LSLS	R3, R0
		ADD.W	R0, R1,	R5,LSL#6
		ADD	R0, R4
		UXTB	R3, R3
		LDRB	R1, [R0]
		CBZ	R2, loc_81D8
		ORRS	R1, R3
		B	loc_81DA
@ ---------------------------------------------------------------------------

loc_81D8:				@ ...
		BICS	R1, R3

loc_81DA:				@ ...
		STRB	R1, [R0]

locret_81DC:				@ ...
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_81DE:				@ ...
		BICS	R2, R3

loc_81E0:				@ ...
		STRB	R2, [R4,R0]
		POP	{R4,R5,PC}
@ End of function fbPlot

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_CtrlIn:
		PUSH.W	{R4-R8,LR}
		LDR	R4, =g_usbd_RemoteWakeupEn
		LDR	R0, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		LDR	R5, =0x400C0504
		MOVS	R6, #0
		CBZ	R0, loc_823C
		LDR	R3, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		LDR	R7, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		SUBS	R2, R5,	#4
		MOV	R1, R4
		LDR	R0, =0x400C0100
		LDR	R1, [R1,#(g_usbd_CtrlInPointer	- g_usbd_RemoteWakeupEn)]
		LDR	R2, [R2]
		CMP	R3, R7
		ADD	R0, R2
		BLS	loc_822C
		LDR	R2, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		BL	USBD_MemCopy
		LDR	R0, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		STR	R0, [R5]
		LDR	R1, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		LDR	R0, [R4,#(g_usbd_CtrlInPointer	- g_usbd_RemoteWakeupEn)]
		ADD	R0, R1
		STR	R0, [R4,#(g_usbd_CtrlInPointer	- g_usbd_RemoteWakeupEn)]
		LDR	R0, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		LDR	R1, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		SUBS	R0, R0,	R1
		STR	R0, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]

locret_8228:				@ ...
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_822C:				@ ...
		LDR	R2, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		BL	USBD_MemCopy
		LDR	R0, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		STR	R0, [R5]
		STR	R6, [R4,#(g_usbd_CtrlInPointer	- g_usbd_RemoteWakeupEn)]
		STR	R6, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		B	locret_8228
@ ---------------------------------------------------------------------------

loc_823C:				@ ...
		LDR	R0, =g_usbd_RemoteWakeupEn
		ADDS	R0, #(g_usbd_SetupPacket - g_usbd_RemoteWakeupEn)
		LDRB	R1, [R0]
		CBNZ	R1, loc_825C
		LDRB	R0, [R0,#(usbdSetupRq -	g_usbd_SetupPacket)]
		CMP	R0, #5
		BNE	loc_825C
		LDR	R0, =0x400C0000
		LDR	R1, [R0,#8]
		LDR	R2, [R4,#(g_usbd_UsbAddr -	g_usbd_RemoteWakeupEn)]
		CMP	R1, R2
		BEQ	loc_825C
		LDR	R1, [R0,#8]
		CBNZ	R1, loc_825C
		LDR	R1, [R4,#(g_usbd_UsbAddr -	g_usbd_RemoteWakeupEn)]
		STR	R1, [R0,#8]

loc_825C:				@ ...
		STR	R6, [R5]
		B	locret_8228
@ End of function USBD_CtrlIn

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_CtrlOut:
		PUSH	{R4-R6,LR}
		LDR	R4, =g_usbd_RemoteWakeupEn
		LDR	R0, [R4,#(g_usbd_CtrlOutSize - g_usbd_RemoteWakeupEn)]
		LDR	R1, [R4,#(g_usbd_CtrlOutSizeLimit	- g_usbd_RemoteWakeupEn)]
		CMP	R0, R1
		BCS	locret_82A8
		LDR	R6, =0x400C0514
		LDR	R5, [R6]
		SUBS	R0, R6,	#4
		LDR	R0, [R0]
		LDR	R1, =0x400C0100
		MOV	R2, R5
		ADD	R1, R0
		LDR	R0, [R4,#(g_usbd_CtrlOutPointer - g_usbd_RemoteWakeupEn)]
		BL	USBD_MemCopy
		LDR	R0, [R4,#(g_usbd_CtrlOutPointer - g_usbd_RemoteWakeupEn)]
		ADD	R0, R5
		STR	R0, [R4,#(g_usbd_CtrlOutPointer - g_usbd_RemoteWakeupEn)]
		LDR	R0, [R4,#(g_usbd_CtrlOutSize - g_usbd_RemoteWakeupEn)]
		ADD	R0, R5
		STR	R0, [R4,#(g_usbd_CtrlOutSize - g_usbd_RemoteWakeupEn)]
		LDR	R0, [R4,#(g_usbd_CtrlOutSize - g_usbd_RemoteWakeupEn)]
		LDR	R1, [R4,#(g_usbd_CtrlOutSizeLimit	- g_usbd_RemoteWakeupEn)]
		CMP	R0, R1
		BCS	locret_82A8
		LDR	R0, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		STR	R0, [R6]

locret_82A8:				@ ...
		POP	{R4-R6,PC}
@ End of function USBD_CtrlOut

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_GetDescriptor:

@ FUNCTION CHUNK AT 00008508 SIZE 00000012 BYTES

		PUSH	{R4-R6,LR}
		LDR	R3, =g_usbd_SetupPacket
		LDR	R5, =0x400C050C
		LDR	R4, =0x400C050C
		LDRB	R0, [R3,#(usbdSetupLenH	- g_usbd_SetupPacket)]
		LDRB	R1, [R3,#(usbdSetupLen - g_usbd_SetupPacket)]
		LDRB	R2, [R3,#(usbdSetupValH	- g_usbd_SetupPacket)]
		ADD.W	R1, R1,	R0,LSL#8
		SUB.W	R0, R3,	#(g_usbd_SetupPacket - g_usbd_RemoteWakeupEn)
		ADDS	R5, #0x10
		LDR	R0, [R0,#(g_usbd_sInfo - g_usbd_RemoteWakeupEn)]
		CMP	R2, #3
		BEQ	loc_8318
		BGT	loc_82E2
		CMP	R2, #1
		BEQ	loc_82EC
		CMP	R2, #2
		BNE	loc_833A
		B	loc_82F6
@ ---------------------------------------------------------------------------

loc_82E2:				@ ...
		CMP	R2, #33
		BEQ	loc_8308
		CMP	R2, #34
		BNE	loc_833A
		B	loc_8314
@ ---------------------------------------------------------------------------

loc_82EC:				@ ...
		CMP	R1, #18
		BCC	loc_82F2
		MOVS	R1, #18

loc_82F2:				@ ...
		LDR	R0, [R0]
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_82F6:				@ ...
		LDR	R0, [R0,#4]
		LDRB	R2, [R0,#3]
		LDRB	R3, [R0,#2]
		ADD.W	R2, R3,	R2,LSL#8
		CMP	R1, R2
		BCC	loc_832A

loc_8304:				@ ...
		MOV	R1, R2
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_8308:				@ ...
		CMP	R1, #9
		BCC	loc_830E
		MOVS	R1, #9

loc_830E:				@ ...
		LDR	R0, [R0,#4]
		ADDS	R0, #0x12
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_8314:				@ ...
		LDR	R0, [R0,#0xC]
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_8318:				@ ...
		LDRB	R2, [R3,#2]
		CMP	R2, #4
		BCS	loc_833A
		LDR	R0, [R0,#8]
		LDR.W	R0, [R0,R2,LSL#2]
		LDRB	R2, [R0]
		CMP	R2, R1
		BLS	loc_8304

loc_832A:				@ ...
		BL	USBD_PrepareCtrlIn
		POP.W	{R4-R6,LR}
		MOVS	R1, #0
		MOV	R0, R1
		B.W	loc_8508
@ ---------------------------------------------------------------------------

loc_833A:				@ ...
		LDR	R0, [R4]
		ORR.W	R0, R0,	#2
		STR	R0, [R4]
		LDR	R0, [R5]
		ORR.W	R0, R0,	#2
		STR	R0, [R5]
		POP	{R4-R6,PC}
@ End of function USBD_GetDescriptor

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_GetSetupPacket:				@ ...
		MOVS	R2, #8
		LDR	R1, =g_usbd_SetupPacket
		B.W	USBD_MemCopy
@ End of function USBD_GetSetupPacket

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orgUSBD_IRQHandler:
		PUSH	{R4-R6,LR}
		LDR	R5, =0x400C0000
		LDR	R4, [R5,#4]
		LDR	R0, [R5,#0x10]
		AND.W	R6, R0,	#0xF
		LSLS	R0, R4,	#0x1D
		BPL	loc_8388
		MOVS	R0, #4
		STR	R0, [R5,#4]
		LDR	R0, [R5,#0x14]
		LSLS	R0, R0,	#0x1F
		LDR	R0, [R5,#0x10]
		BEQ	loc_8382
		ORR.W	R0, R0,	#0x90
		B	loc_8386
@ ---------------------------------------------------------------------------

loc_8382:				@ ...
		BIC.W	R0, R0,	#0x80

loc_8386:				@ ...
		STR	R0, [R5,#0x10]

loc_8388:				@ ...
		LSLS	R0, R4,	#0x1F
		BEQ	loc_83B8
		MOVS	R0, #1
		STR	R0, [R5,#4]
		LSLS	R0, R6,	#0x1F
		BEQ	loc_83A0
		LDR	R0, [R5,#0x10]
		ORR.W	R0, R0,	#0x90
		STR	R0, [R5,#0x10]
		BL	USBD_SwReset

loc_83A0:				@ ...
		LSLS	R0, R6,	#0x1E
		BPL	loc_83AC
		LDR	R0, [R5,#0x10]
		BIC.W	R0, R0,	#0x10
		STR	R0, [R5,#0x10]

loc_83AC:				@ ...
		LSLS	R0, R6,	#0x1D
		BPL	loc_83B8
		LDR	R0, [R5,#0x10]
		ORR.W	R0, R0,	#0x90
		STR	R0, [R5,#0x10]

loc_83B8:				@ ...
		LSLS	R0, R4,	#0x1E
		BPL	loc_8440
		CMP	R4, #0
		BGE	loc_83E0
		MOV.W	R0, #0x80000000
		STR	R0, [R5,#4]
		LDR	R0, =0x400C050C
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		LDR	R0, =0x400C050C
		ADDS	R0, #0x10
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		BL	USBD_ProcessSetupPacket

loc_83E0:				@ ...
		LSLS	R0, R4,	#15
		BPL	loc_83EE
		MOV.W	R0, #0x10000
		STR	R0, [R5,#4]
		BL	USBD_CtrlIn

loc_83EE:				@ ...
		LSLS	R0, R4,	#14
		BPL	loc_83FC
		MOV.W	R0, #0x20000
		STR	R0, [R5,#4]
		BL	USBD_CtrlOut

loc_83FC:				@ ...
		LSLS	R0, R4,	#13
		BPL	loc_840A
		MOV.W	R0, #0x40000
		STR	R0, [R5,#4]
		BL	usbdEP2Handler

loc_840A:				@ ...
		LSLS	R0, R4,	#12
		BPL	loc_8418
		MOV.W	R0, #0x80000
		STR	R0, [R5,#4]
		BL	usbdEP3Handler

loc_8418:				@ ...
		LSLS	R0, R4,	#11
		BPL	loc_8422
		MOV.W	R0, #0x100000
		STR	R0, [R5,#4]

loc_8422:				@ ...
		LSLS	R0, R4,	#10
		BPL	loc_842C
		MOV.W	R0, #0x200000
		STR	R0, [R5,#4]

loc_842C:				@ ...
		LSLS	R0, R4,	#9
		BPL	loc_8436
		MOV.W	R0, #0x400000
		STR	R0, [R5,#4]

loc_8436:				@ ...
		LSLS	R0, R4,	#8
		BPL	loc_8440
		MOV.W	R0, #0x800000
		STR	R0, [R5,#4]

loc_8440:				@ ...
		STR	R4, [R5,#4]
		POP	{R4-R6,PC}
@ End of function USBD_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

@ Copy R2 bytes	from R1	to R0

USBD_MemCopy:
		B	loc_8456
@ ---------------------------------------------------------------------------

loc_844E:				@ ...
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_8456:				@ ...
		SUBS	R2, R2,	#1
		BCS	loc_844E
		BX	LR
@ End of function USBD_MemCopy

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

@ Copy R2 bytes	from R1	to R0

USBD_MemCopy2:
		B	loc_8466
@ ---------------------------------------------------------------------------

loc_845E:				@ ...
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_8466:				@ ...
		SUBS	R2, R2,	#1
		BCS	loc_845E
		BX	LR
@ End of function USBD_MemCopy

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_Open:
		LDR	R3, =g_usbd_RemoteWakeupEn
		STR	R0, [R3,#(g_usbd_sInfo - g_usbd_RemoteWakeupEn)]
		STRD.W	R1, R2,	[R3,#(g_usbd_pfnClassRequest - g_usbd_RemoteWakeupEn)]
		LDR	R0, [R0]
		LDRB	R0, [R0,#7]
		STR	R0, [R3,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		LDR	R0, =0x400C0000
		MOV.W	R1, #0x7D0
		STR	R1, [R0,#0x10]
		LDR.W	R1, [R0,#0x90]
		ORR.W	R1, R1,	#1
		STR.W	R1, [R0,#0x90]
		BX	LR
@ End of function USBD_Open

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_PrepareCtrlIn:
		PUSH.W	{R4-R8,LR}
		LDR	R4, =g_usbd_RemoteWakeupEn
		MOV	R5, R1
		LDR	R7, [R4,#0x20]
		LDR	R1, =0x400C0508
		LDR	R2, =0x400C0508
		LDR	R3, =0x400C0100
		SUBS	R2, #8
		SUBS	R6, R1,	#4
		CMP	R5, R7
		BLS	loc_84DA
		LDR	R7, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		ADD	R7, R0
		STR	R7, [R4,#(g_usbd_CtrlInPointer	- g_usbd_RemoteWakeupEn)]
		LDR	R7, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		SUBS	R5, R5,	R7
		STR	R5, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		LDR	R5, [R1]
		ORR.W	R5, R5,	#0x80
		STR	R5, [R1]
		LDR	R1, [R2]
		LDR	R2, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		ADD	R3, R1
		MOV	R1, R0
		MOV	R0, R3
		BL	USBD_MemCopy
		LDR	R0, [R4,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		STR	R0, [R6]

locret_84D6:				@ ...
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_84DA:				@ ...
		MOVS	R7, #0
		STR	R7, [R4,#(g_usbd_CtrlInPointer	- g_usbd_RemoteWakeupEn)]
		STR	R7, [R4,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		LDR	R4, [R1]
		ORR.W	R4, R4,	#0x80
		STR	R4, [R1]
		LDR	R1, [R2]
		MOV	R2, R5
		ADD	R3, R1
		MOV	R1, R0
		MOV	R0, R3
		BL	USBD_MemCopy
		STR	R5, [R6]
		B	locret_84D6
@ End of function USBD_PrepareCtrlIn

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR USBD_GetDescriptor

		.ifne	keeporglibs_usbd

loc_8508:
		LDR	R2, =g_usbd_RemoteWakeupEn
		STR	R0, [R2,#(g_usbd_CtrlOutPointer - g_usbd_RemoteWakeupEn)]
		MOVS	R0, #0
		STR	R0, [R2,#(g_usbd_CtrlOutSize - g_usbd_RemoteWakeupEn)]
		STR	R1, [R2,#(g_usbd_CtrlOutSizeLimit	- g_usbd_RemoteWakeupEn)]
		LDR	R0, [R2,#(g_usbd_CtrlMaxPktSize - g_usbd_RemoteWakeupEn)]
		LDR	R1, =0x400C0514
		STR	R0, [R1]
		BX	LR
@ END OF FUNCTION CHUNK	FOR USBD_GetDescriptor
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_ProcessSetupPacket:
		PUSH	{R4,LR}
		MOVS	R2, #8
		LDR	R1, =0x400C0100
		LDR	R0, =g_usbd_SetupPacket
		BL	USBD_MemCopy
		LDR	R0, =g_usbd_SetupPacket
		LDRB	R0, [R0]
		ANDS.W	R0, R0,	#0x60
		BEQ	loc_855E
		LDR	R1, =g_usbd_SetupPacket
		SUBS	R1, #(g_usbd_SetupPacket - g_usbd_RemoteWakeupEn)
		CMP	R0, #0x20
		BEQ	loc_8566
		CMP	R0, #0x40
		BEQ	loc_856A
		LDR	R0, =0x400C050C
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]
		LDR	R0, =0x400C050C
		ADDS	R0, #0x10
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]

locret_855C:				@ ...
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_855E:				@ ...
		POP.W	{R4,LR}
		B.W	USBD_StandardRequest
@ ---------------------------------------------------------------------------

loc_8566:				@ ...
		LDR	R0, [R1,#(g_usbd_pfnClassRequest	- g_usbd_RemoteWakeupEn)]
		B	loc_856C
@ ---------------------------------------------------------------------------

loc_856A:				@ ...
		LDR	R0, [R1,#(g_usbd_pfnVendorRequest - g_usbd_RemoteWakeupEn)]

loc_856C:				@ ...
		CMP	R0, #0
		BEQ	locret_855C
		POP.W	{R4,LR}
		BX	R0
@ End of function USBD_ProcessSetupPacket

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd
@ inline

@ void __fastcall USBD_SetStall(int ept)
USBD_SetStall:
		LDR	R3, =0x400C0508
		MOVS	R1, #0

loc_8588:				@ ...
		ADD.W	R2, R3,	R1,LSL#4
		LDR	R2, [R2]
		AND.W	R2, R2,	#0xF
		CMP	R2, R0
		BNE	loc_85A8
		LDR	R0, =0x400C0508
		ADDS	R0, R0,	#4
		ADD.W	R0, R0,	R1,LSL#4
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]
		BX	LR
@ ---------------------------------------------------------------------------

loc_85A8:				@ ...
		ADDS	R1, R1,	#1
		CMP	R1, #8
		BLT	loc_8588
		BX	LR
@ End of function USBD_SetStall

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_StandardRequest:
		PUSH.W	{R4-R10,LR}
		LDR	R1, =g_usbd_RemoteWakeupEn
		MOVS	R5, #0
		STR	R5, [R1,#(g_usbd_CtrlInPointer	- g_usbd_RemoteWakeupEn)]
		STR	R5, [R1,#(g_usbd_CtrlInSize	- g_usbd_RemoteWakeupEn)]
		ADD.W	R3, R1,	#0x40
		ADD.W	R0, R1,	#0x40
		LDRB	R2, [R3,#(usbdSetupIdx - g_usbd_SetupPacket)]
		LDRB	R0, [R0]
		LDR	R6, =0x400C0504
		AND.W	R12, R2, #0xF
		LDR.W	R8, =0x400C050C
		LDR.W	R10, =0x400C051C
		LDRB	R3, [R3,#(usbdSetupRq -	g_usbd_SetupPacket)]
		LDR	R2, =0x400C0000
		LSLS	R7, R0,	#0x18
		MOV.W	R9, #1
		ADD.W	R4, R6,	#4
		BPL	loc_86E4
		SUBS	R7, R6,	#4
		CBZ	R3, loc_8644
		CMP	R3, #6
		BEQ	loc_8626
		CMP	R3, #8
		BEQ	loc_85FC
		CMP	R3, #0xA
		BNE	loc_86C8
		B	loc_862E
@ ---------------------------------------------------------------------------

loc_85FC:				@ ...
		LDR	R0, [R1,#(g_usbd_UsbConfig	- g_usbd_RemoteWakeupEn)]
		LDR	R1, [R7]
		ADD	R1, R2
		STRB.W	R0, [R1,#0x100]
		LDR	R0, =0x400C051C
		SUBS	R0, R0,	#4
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x80
		STR	R1, [R0]
		SUBS	R0, R0,	#4
		STR	R5, [R0]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		STR.W	R9, [R6]

locret_8622:				@ ...
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_8626:				@ ...
		POP.W	{R4-R10,LR}
		B.W	USBD_GetDescriptor
@ ---------------------------------------------------------------------------

loc_862E:				@ ...
		LDR	R0, [R1,#(g_usbd_UsbAltInterface	- g_usbd_RemoteWakeupEn)]
		LDR	R1, [R7]
		ADD	R1, R2
		STRB.W	R0, [R1,#0x100]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		MOV	R0, R9
		B	loc_86BA
@ ---------------------------------------------------------------------------

loc_8644:				@ ...
		CMP	R0, #0x80
		BEQ	loc_8652
		CMP	R0, #0x81
		BEQ	loc_8670
		CMP	R0, #0x82
		BEQ	loc_867A
		B	loc_86A8
@ ---------------------------------------------------------------------------

loc_8652:				@ ...
		LDR	R3, [R1,#(g_usbd_sInfo - g_usbd_RemoteWakeupEn)]
		MOVS	R0, #0
		LDR	R3, [R3,#4]
		LDRB	R3, [R3,#7]
		MOVS.W	R12, R3,LSL#25
		BPL	loc_8662
		MOVS	R0, #1

loc_8662:				@ ...
		LSLS	R3, R3,	#0x1A
		BPL	loc_86A0
		LDRB	R1, [R1]
		ORR.W	R0, R0,	R1,LSL#1
		UXTB	R0, R0
		B	loc_86A0
@ ---------------------------------------------------------------------------

loc_8670:				@ ...
		LDR	R0, [R7]
		ADD	R0, R2
		STRB.W	R5, [R0,#0x100]
		B	loc_86A8
@ ---------------------------------------------------------------------------

loc_867A:				@ ...
		MOVS	R0, #0

loc_867C:				@ ...
		ADD.W	R1, R4,	R0,LSL#4
		LDR	R3, [R1]
		AND.W	R3, R3,	#0xF
		CMP	R3, R12
		BNE	loc_8690
		ADD.W	R1, R8,	R0,LSL#4
		B	loc_8696
@ ---------------------------------------------------------------------------

loc_8690:				@ ...
		ADDS	R0, R0,	#1
		CMP	R0, #8
		BLT	loc_867C

loc_8696:				@ ...
		LDR	R0, [R1]
		ANDS.W	R0, R0,	#2
		BEQ	loc_86A0
		MOVS	R0, #1

loc_86A0:				@ ...
		LDR	R1, [R7]
		ADD	R1, R2
		STRB.W	R0, [R1,#0x100]

loc_86A8:				@ ...
		LDR	R0, [R7]
		ADD	R0, R2
		STRB.W	R5, [R0,#0x101]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		MOVS	R0, #2

loc_86BA:				@ ...
		STR	R0, [R6]
		POP.W	{R4-R10,LR}
		MOVS	R1, #0
		MOV	R0, R1
		B.W	loc_8508
@ ---------------------------------------------------------------------------

loc_86C8:				@ ...
		LDR.W	R0, [R8]
		ORR.W	R0, R0,	#2
		STR.W	R0, [R8]
		LDR.W	R1, [R10]
		ORR.W	R1, R1,	#2
		STR.W	R1, [R10]
		B	locret_8622
@ ---------------------------------------------------------------------------
		B	loc_86E4
@ ---------------------------------------------------------------------------

loc_86E4:				@ ...
		LDR	R0, =g_usbd_RemoteWakeupEn
		ADDS	R0, #(g_usbd_SetupPacket - g_usbd_RemoteWakeupEn)
		CMP	R3, #5
		LDRB	R0, [R0,#(usbdSetupVal - g_usbd_SetupPacket)]
		BEQ	loc_875E
		BGT	loc_8700
		CMP	R3, #1
		BEQ	loc_8712
		CMP	R3, #3
		BNE	loc_86C8
		CBZ	R0, loc_875C
		CMP	R0, #1
		BEQ	loc_878C
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8700:				@ ...
		CMP	R3, #9
		BEQ	loc_8762
		CMP	R3, #0xB
		BNE	loc_86C8
		STR	R0, [R1,#(g_usbd_UsbAltInterface	- g_usbd_RemoteWakeupEn)]
		LDR	R0, [R1,#(g_usbd_pfnSetInterface - g_usbd_RemoteWakeupEn)]

loc_870C:				@ ...
		CBZ	R0, loc_8750
		BLX	R0 @ Default_Handler
@ ---------------------------------------------------------------------------
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8712:				@ ...
		CBZ	R0, loc_871A
		CMP	R0, #1
		BEQ	loc_874E
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_871A:				@ ...
		LDR	R7, [R1,#0x38]
		MOVS	R0, #0
		MOV	R3, R9

loc_8720:				@ ...
		ADD.W	R1, R2,	R0,LSL#4
		LDR.W	R8, [R1,#0x508]
		AND.W	R8, R8,	#0xF
		CMP	R8, R12
		BNE	loc_8746
		LSL.W	R8, R3,	R0
		TST.W	R8, R7
		BNE	loc_8746
		LDR.W	R8, [R1,#0x50C]
		BIC.W	R8, R8,	#2
		STR.W	R8, [R1,#0x50C]

loc_8746:				@ ...
		ADDS	R0, R0,	#1
		CMP	R0, #8
		BLT	loc_8720
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_874E:				@ ...
		STRB	R5, [R1]

loc_8750:				@ ...
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		STR	R5, [R6]
		B	locret_8622
@ ---------------------------------------------------------------------------

loc_875C:				@ ...
		B	loc_8768
@ ---------------------------------------------------------------------------

loc_875E:				@ ...
		STR	R0, [R1,#0x18]
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8762:				@ ...
		STR	R0, [R1,#0x1C]
		LDR	R0, [R1,#0x34]
		B	loc_870C
@ ---------------------------------------------------------------------------

loc_8768:				@ ...
		ADD.W	R1, R4,	R0,LSL#4
		LDR	R1, [R1]
		AND.W	R1, R1,	#0xF
		CMP	R1, R12
		BNE	loc_8784
		ADD.W	R0, R8,	R0,LSL#4
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8784:				@ ...
		ADDS	R0, R0,	#1
		CMP	R0, #8
		BLT	loc_8768
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_878C:				@ ...
		STRB.W	R9, [R1]
		B	loc_8750
@ End of function USBD_StandardRequest

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporglibs_usbd

USBD_Start:
		LDR	R0, =CyclesPerUs
		LDR	R1, [R0]
		LDR	R0, =100000
		MULS	R1, R0
		MOV.W	R0, #0xE000E000
		STR	R1, [R0,#0x14]
		MOVS	R1, #0
		STR	R1, [R0,#0x18]
		MOVS	R1, #5
		STR	R1, [R0,#0x10]

loc_87BE:				@ ...
		LDR	R1, [R0,#0x10]
		LSLS	R1, R1,	#0xF
		BPL	loc_87BE
		LDR	R0, =0x400C0000
		LDR.W	R1, [R0,#0x90]
		BIC.W	R1, R1,	#1
		STR.W	R1, [R0,#0x90]
		MOVW	R1, #0x10F
		STR	R1, [R0,#4]
		LDR	R2, [R0]
		ORRS	R2, R1
		STR	R2, [R0]
		BX	LR
@ End of function USBD_Start

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne keeporglibs_usbd

USBD_SwReset:
		LDR	R1, =g_usbd_RemoteWakeupEn
		MOVS	R0, #0
		STR	R0, [R1,#4]
		STR	R0, [R1,#8]
		STR	R0, [R1,#0xC]
		STR	R0, [R1,#0x10]
		STR	R0, [R1,#0x14]
		STR	R0, [R1,#0x40]
		STR	R0, [R1,#0x44]
		LDR	R1, =0x400C0000
		STR	R0, [R1,#8]	@ USBD_FADDR
		BX	LR
@ End of function USBD_SwReset

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode_usbd

orgInitUSB:
		PUSH	{R4,LR}
		MOVS	R2, #0
		LDR	R1, =(orgusbdRQClass+1)
		LDR	R0, =usbdDescriptors
		BL	USBD_Open
		BL	orgusbdInitEndpoints
		BL	USBD_Start
		POP.W	{R4,LR}
		MOVS	R0, #0x35
		B.W	NVIC_EnableIRQ	@ USB IRQ enabled
@ End of function InitUSB

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgfbCheckFire:
		PUSH	{R4,LR}
		LDR	R4, =fbBirdLine
		LDRB	R0, [R4,#2]
		CBZ	R0, loc_8848
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#2]
		LDR	R0, =fbCurrentTimeout
		LDRB	R0, [R0]
		BL	fbDeleteTimeout

loc_8848:				@ ...
		LDRSB.W	R0, [R4]
		CMP	R0, #0
		BLT	locret_887C
		LDR	R0, =0x40004900
		LDR	R0, [R0]
		CMP	R0, #0
		BNE	locret_887C
		LDR	R0, =dfData
		LDRB.W	R0, [R0,#(dfFBSpeed - dfData)]
		CMP	R0, #2
		BEQ	loc_8874
		CMP	R0, #1
		BEQ	loc_8878
		MOVS	R0, #0xF2

loc_8868:				@ ...
		STRB	R0, [R4,#(fbBirdDisp - fbBirdLine)]
		POP.W	{R4,LR}
		MOVS	R0, #0xA
		B.W	fbSetTimeoutValue
@ ---------------------------------------------------------------------------

loc_8874:				@ ...
		MOVS	R0, #0xEC
		B	loc_8868
@ ---------------------------------------------------------------------------

loc_8878:				@ ...
		MOVS	R0, #0xEF
		B	loc_8868
@ ---------------------------------------------------------------------------

locret_887C:				@ ...
		POP	{R4,PC}
@ End of function fbCheckFire

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
		
		.endif

@ =============== S U B	R O U T	I N E =======================================

@ Attributes: thunk

j_DisplayRefresh:
		B.W	DisplayRefresh
@ End of function j_DisplayRefresh


@ =============== S U B	R O U T	I N E =======================================


fbTickTimeouts:
		LDR	R2, =TimeoutsTable
		MOVS	R0, #0

loc_8898:				@ ...
		LDRB.W	R1, [R2,R0,LSL#3]
		CBZ	R1, loc_88A4
		SUBS	R1, R1,	#1
		STRB.W	R1, [R2,R0,LSL#3]

loc_88A4:				@ ...
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #3
		BCC	loc_8898
		BX	LR
@ End of function fbTickTimeouts

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSwitchRezLock:
		PUSH	{R4,R5,LR}
		LDR	R5, =dfData
		LDR	R0, =AtoRez
		MOV	R1, R5
		LDRB	R2, [R5,#(dfMode - dfData)]
		MOVS	R3, #0
		MOVS	R4, #1
		LDRH	R0, [R0]
		LDRH	R1, [R1,#(dfResistance - dfData)]
		CMP	R2, #1
		BEQ	loc_88E0
		CBZ	R2, loc_88FE
		CMP	R2, #2
		BEQ	loc_891C
		CMP	R2, #3
		BNE	locret_88DE
		LDRB.W	R2, [R5,#(dfRezLockedTCR - dfData)]
		CBZ	R2, loc_893C
		STRB.W	R3, [R5,#(dfRezLockedTCR - dfData)]

locret_88DE:				@ ...
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_88E0:				@ ...
		LDRB.W	R2, [R5,#(dfRezLockedTI	- dfData)]
		CBZ	R2, loc_88EC
		STRB.W	R3, [R5,#(dfRezLockedTI	- dfData)]

locret_88EA:				@ ...
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_88EC:				@ ...
		CMP	R0, #0
		BEQ	locret_88EA
		STRB.W	R4, [R5,#(dfRezLockedTI	- dfData)]
		CBNZ	R1, loc_88F8
		STRH	R0, [R5,#(dfResistance - dfData)]

loc_88F8:				@ ...
		LDRH	R0, [R5,#(dfResistance - dfData)]
		STRH	R0, [R5,#(dfRezTI - dfData)]
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_88FE:				@ ...
		LDRB.W	R2, [R5,#(dfRezLockedNI	- dfData)]
		CBZ	R2, loc_890A
		STRB.W	R3, [R5,#(dfRezLockedNI	- dfData)]

locret_8908:				@ ...
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_890A:				@ ...
		CMP	R0, #0
		BEQ	locret_8908
		STRB.W	R4, [R5,#(dfRezLockedNI	- dfData)]
		CBNZ	R1, loc_8916
		STRH	R0, [R5,#(dfResistance - dfData)]

loc_8916:				@ ...
		LDRH	R0, [R5,#(dfResistance - dfData)]
		STRH	R0, [R5,#(dfRezNI - dfData)]
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_891C:				@ ...
		LDRB.W	R2, [R5,#(dfRezLockedSS	- dfData)]
		CBZ	R2, loc_8928
		STRB.W	R3, [R5,#(dfRezLockedSS	- dfData)]

locret_8926:				@ ...
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_8928:				@ ...
		CMP	R0, #0
		BEQ	locret_8926
		STRB.W	R4, [R5,#(dfRezLockedSS	- dfData)]
		CBNZ	R1, loc_8934
		STRH	R0, [R5,#(dfResistance - dfData)]

loc_8934:				@ ...
		LDRH	R0, [R5,#(dfResistance - dfData)]
		STRH.W	R0, [R5,#(dfRezSS - dfData)]

locret_893A:				@ ...
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_893C:				@ ...
		B	loc_893E
@ ---------------------------------------------------------------------------

loc_893E:				@ ...
		CMP	R0, #0
		BEQ	locret_893A
		STRB.W	R4, [R5,#(dfRezLockedTCR - dfData)]
		CBNZ	R1, loc_894A
		STRH	R0, [R5,#(dfResistance - dfData)]

loc_894A:				@ ...
		LDRH	R0, [R5,#(dfResistance - dfData)]
		STRH.W	R0, [R5,#(dfRezTCR - dfData)]
		B	locret_893A
@ End of function SwitchRezLock

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgInitVariables:
		PUSH	{R4,LR}
		BL	InitDataFlash
		LDR	R0, =KeyPressTime
		LDR	R3, =word_200000B6
		MOVW	R2, #0xFFFF
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]
		LDR	R0, =LastInputs
		LDRB	R1, [R0]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0]
		LDR	R1, =Flags64
		LDR	R0, [R1]
		STRH	R2, [R3]
		LDR	R3, =byte_200000B3
		MOVS	R2, #1
		ORR.W	R0, R0,	#0x880
		STRB	R2, [R3]
		LDR	R3, =BatRefreshTmr
		MOVS	R2, #0xFF
		ORR.W	R0, R0,	#0x40000
		STRB	R2, [R3]
		STR	R0, [R1]
		LDR	R1, =EditItemIndex
		MOVS	R0, #0
		STRB	R0, [R1]
		POP	{R4,PC}
@ End of function InitVariables

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================


		.ifne	keeporglibs_wdt

WDT_Open:				@ ...
		PUSH	{R4,LR}
		LDR	R4, =0x40040000
		STR	R1, [R4,#4]	@ WDT_ALTCTL.RSTDSEL = R1 (reset delay)
		ORR.W	R0, R0,	R2,LSL#1 @ RSTEN = R2
		ORR.W	R0, R0,	R3,LSL#4 @ WKEN	= R3
		ORR.W	R0, R0,	#0x80	@ WDTEN	= 1
		STR	R0, [R4]
		POP	{R4,PC}
@ End of function WDT_Open

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================


PutTextf:				@ ...

var_14		= -0x14
varg_r0		= -0x10
varg_r1		= -0xC
varg_r2		= -8
varg_r3		= -4

		PUSH	{R0-R3}
		LDR	R3, =(PutChar+1)
		PUSH	{R4,LR}
		ADD	R1, SP,	#0xC
		LDR	R2, =StdOut
		LDR	R0, [SP,#8]
		BL	FormatAndPutText
		POP	{R4}
		LDR.W	PC, [SP],#0x14
@ End of function PutTextf

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

sqrtd:

var_20		= -0x20

		PUSH	{LR}
		VPUSH	{D8-D9}
		FCPYS	S18, S0
		FCPYS	S19, S1
		SUB	SP, SP,	#0xC
		FMRRD	R0, R1,	D9
		BL	sub_3B8
		FMDRR	D8, R0,	R1
		FMRS	R0, S16
		FMRS	R1, S17
		FSTD	D8, [SP]
		CMP	R0, #0
		IT ne
		MOVNE	R0, #1
		ORRS	R0, R1
		BIC.W	R0, R0,	#0x80000000
		RSB.W	R0, R0,	#0xFF00000
		ADD.W	R0, R0,	#0x70000000
		LSRS	R0, R0,	#0x1F
		BEQ	loc_8A62
		FMRS	R1, S18
		FMRS	R0, S19
		FSTD	D9, [SP]
		CMP	R1, #0
		IT ne
		MOVNE	R1, #1
		ORRS	R0, R1
		BIC.W	R0, R0,	#0x80000000
		RSB.W	R0, R0,	#0xFF00000
		ADD.W	R0, R0,	#0x70000000
		LSRS	R0, R0,	#0x1F
		ITT eq
		MOVEQ	R0, #1		@ int
		BLEQ	sub_8A90

loc_8A62:				@ ...
		FCPYS	S0, S16
		ADD	SP, SP,	#0xC
		FCPYS	S1, S17
		VPOP	{D8-D9}
		POP	{PC}
@ End of function sqrtd

		.endif

@ =============== S U B	R O U T	I N E =======================================


MemCpy2:
		B	loc_8A7A
@ ---------------------------------------------------------------------------

loc_8A74:				@ ...
		LDMIA	R0!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R1!, {R3}

loc_8A7A:				@ ...
		CMP	R2, #0
		BNE	loc_8A74
		BX	LR
@ End of function MemCpy2


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

nullsub_1:
		BX	LR
@ End of function nullsub_1

		.endif

@ =============== S U B	R O U T	I N E =======================================


MemClear2:
		MOVS	R0, #0
		B	loc_8A8A
@ ---------------------------------------------------------------------------

loc_8A86:				@ ...
		STMIA	R1!, {R0}
		SUBS	R2, R2,	#4

loc_8A8A:				@ ...
		CMP	R2, #0
		BNE	loc_8A86
		BX	LR
@ End of function MemClear2


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
@ used by sqrtd()
sub_8A90:
		LDR	R1, =dword_20000168
		STR	R0, [R1]
		BX	LR
@ End of function sub_8A90

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================


FormatAndPutText:

var_68		= -0x68
var_67		= -0x67
var_48		= -0x48
var_44		= -0x44
var_43		= -0x43
var_40		= -0x40
var_3C		= -0x3C
anonymous_0	= -0x2C

		PUSH.W	{R0-R11,LR}
		SUB	SP, SP,	#0x34
		MOV	R7, R1
		MOV	R5, R0
		MOVS	R6, #0
		B	loc_8AB8
@ ---------------------------------------------------------------------------

loc_8AAA:				@ ...
		CMP	R0, #0x25
		BEQ	loc_8AC6
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R5, R5,	#1
		ADDS	R6, R6,	#1

loc_8AB8:				@ ...
		LDRB	R0, [R5]
		CMP	R0, #0
		BNE	loc_8AAA

loc_8ABE:				@ ...
		ADD	SP, SP,	#0x44
		MOV	R0, R6
		POP.W	{R4-R11,PC}
@ ---------------------------------------------------------------------------

loc_8AC6:				@ ...
		MOVS	R4, #0
		MOV	R10, R4
		MOV	R9, R4
		MOVS	R2, #1
		LDR	R1, =0x12809
		B	loc_8AD4
@ ---------------------------------------------------------------------------

loc_8AD2:				@ ...
		ORRS	R4, R0

loc_8AD4:				@ ...
		LDRB.W	R3, [R5,#1]!
		SUBS	R3, #0x20
		LSL.W	R0, R2,	R3
		TST	R0, R1
		BNE	loc_8AD2
		LDRB	R0, [R5]
		CMP	R0, #0x2A
		BEQ	loc_8B0A
		MVN.W	R2, #0x2F

loc_8AEC:				@ ...
		LDRB	R0, [R5]
		SUB.W	R1, R0,	#0x30
		CMP	R1, #9
		BHI	loc_8B20
		ADD.W	R1, R10, R10,LSL#2
		ADD.W	R1, R2,	R1,LSL#1
		ORR.W	R4, R4,	#2
		ADD.W	R10, R0, R1
		ADDS	R5, R5,	#1
		B	loc_8AEC
@ ---------------------------------------------------------------------------

loc_8B0A:				@ ...
		LDMIA	R7!, {R0}
		MOVS.W	R10, R0
		BPL	loc_8B1A
		ORR.W	R4, R4,	#0x2000
		RSB.W	R10, R10, #0

loc_8B1A:				@ ...
		ORR.W	R4, R4,	#2
		ADDS	R5, R5,	#1

loc_8B20:				@ ...
		LDRB	R0, [R5]
		CMP	R0, #0x2E
		BNE	loc_8B56
		LDRB.W	R0, [R5,#1]!
		ORR.W	R4, R4,	#4
		CMP	R0, #0x2A
		BEQ	loc_8B50
		MVN.W	R2, #0x2F

loc_8B36:				@ ...
		LDRB	R0, [R5]
		SUB.W	R1, R0,	#0x30
		CMP	R1, #9
		BHI	loc_8B56
		ADD.W	R1, R9,	R9,LSL#2
		ADD.W	R1, R2,	R1,LSL#1
		ADD.W	R9, R0,	R1
		ADDS	R5, R5,	#1
		B	loc_8B36
@ ---------------------------------------------------------------------------

loc_8B50:				@ ...
		LDR.W	R9, [R7],#4
		ADDS	R5, R5,	#1

loc_8B56:				@ ...
		LDRB	R0, [R5]
		CMP	R0, #0x6C
		BEQ	loc_8B7C
		BGT	loc_8B6C
		CMP	R0, #0x4C
		BEQ	loc_8B92
		CMP	R0, #0x68
		BEQ	loc_8B82
		CMP	R0, #0x6A
		BNE	loc_8B94
		B	loc_8B76
@ ---------------------------------------------------------------------------

loc_8B6C:				@ ...
		CMP	R0, #0x74
		BEQ	loc_8B92
		CMP	R0, #0x7A
		BNE	loc_8B94
		B	loc_8B92
@ ---------------------------------------------------------------------------

loc_8B76:				@ ...
		ORR.W	R4, R4,	#0x200000
		B	loc_8B92
@ ---------------------------------------------------------------------------

loc_8B7C:				@ ...
		ORR.W	R4, R4,	#0x100000
		B	loc_8B86
@ ---------------------------------------------------------------------------

loc_8B82:				@ ...
		ORR.W	R4, R4,	#0x300000

loc_8B86:				@ ...
		LDRB	R1, [R5,#1]
		CMP	R1, R0
		BNE	loc_8B92
		ADD.W	R4, R4,	#0x100000
		ADDS	R5, R5,	#1

loc_8B92:				@ ...
		ADDS	R5, R5,	#1

loc_8B94:				@ ...
		LDRB	R2, [R5]
		CMP	R2, #0x6E
		BEQ	loc_8BDA
		BGT	loc_8BB6
		CMP	R2, #0x63
		BEQ	loc_8C04
		BGT	loc_8BAC
		CMP	R2, #0
		BEQ	loc_8ABE
		CMP	R2, #0x58
		BNE	loc_8BCE
		B	loc_8CF4
@ ---------------------------------------------------------------------------

loc_8BAC:				@ ...
		CMP	R2, #0x64
		BEQ	loc_8C82
		CMP	R2, #0x69
		BNE	loc_8BCE
		B	loc_8C82
@ ---------------------------------------------------------------------------

loc_8BB6:				@ ...
		CMP	R2, #0x73
		BEQ	loc_8C18
		BGT	loc_8BC6
		CMP	R2, #0x6F
		BEQ	loc_8CA8
		CMP	R2, #0x70
		BNE	loc_8BCE
		B	loc_8CFE
@ ---------------------------------------------------------------------------

loc_8BC6:				@ ...
		CMP	R2, #0x75
		BEQ	loc_8CAA
		CMP	R2, #0x78
		BEQ	loc_8CAC

loc_8BCE:				@ ...
		MOV	R0, R2
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R6, R6,	#1
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BDA:				@ ...
		UBFX.W	R0, R4,	#0x14, #3
		CMP	R0, #2
		BEQ	loc_8BF0
		CMP	R0, #3
		BEQ	loc_8BFA
		CMP	R0, #4
		LDMIA	R7!, {R0}
		BEQ	loc_8C00
		STR	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BF0:				@ ...
		LDMIA	R7!, {R0}
		ASRS	R1, R6,	#0x1F
		STRD.W	R6, R1,	[R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BFA:				@ ...
		LDMIA	R7!, {R0}
		STRH	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8C00:				@ ...
		STRB	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8C04:				@ ...
		LDRB.W	R0, [R7],#4
		STRB.W	R0, [SP]
		MOVS	R0, #0
		STRB.W	R0, [SP,#1]
		MOV	R11, SP
		MOVS	R0, #1
		B	loc_8C20
@ ---------------------------------------------------------------------------

loc_8C18:				@ ...
		LDR.W	R11, [R7],#4
		MOV.W	R0, #0xFFFFFFFF

loc_8C20:				@ ...
		LSLS	R1, R4,	#0x1D
		MOV.W	R1, #0
		BMI	loc_8C2E
		B	loc_8C46
@ ---------------------------------------------------------------------------

loc_8C2A:				@ ...
		ADD.W	R1, R8,	#1

loc_8C2E:				@ ...
		MOV	R8, R1
		CMP	R1, R9
		BGE	loc_8C54
		CMP	R8, R0
		BLT	loc_8C2A
		LDRB.W	R1, [R11,R8]
		CMP	R1, #0
		BNE	loc_8C2A
		B	loc_8C54
@ ---------------------------------------------------------------------------

loc_8C42:				@ ...
		ADD.W	R1, R8,	#1

loc_8C46:				@ ...
		MOV	R8, R1
		CMP	R1, R0
		BLT	loc_8C42
		LDRB.W	R1, [R11,R8]
		CMP	R1, #0
		BNE	loc_8C42

loc_8C54:				@ ...
		LDRD.W	R2, R3,	[SP,#0x3C]
		SUB.W	R0, R10, R8
		MOV	R9, R0
		MOV	R1, R4
		BL	sub_8ED0
		ADD	R0, R6
		ADD.W	R6, R0,	R8
		B	loc_8C76
@ ---------------------------------------------------------------------------

loc_8C6C:				@ ...
		LDRD.W	R1, R2,	[SP,#0x3C]
		LDRB.W	R0, [R11],#1
		BLX	R2

loc_8C76:				@ ...
		SUBS.W	R8, R8,	#1
		BCS	loc_8C6C
		MOV	R1, R4
		MOV	R0, R9
		B	loc_8E72
@ ---------------------------------------------------------------------------

loc_8C82:				@ ...
		MOVS	R1, #0xA
		UBFX.W	R3, R4,	#0x14, #3
		MOV.W	R11, #0
		STR	R1, [SP,#0x20]
		CMP	R3, #2
		BEQ	loc_8C9C
		LDMIA	R7!, {R0}
		ASRS	R1, R0,	#0x1F
		CMP	R3, #3
		BEQ	loc_8CAE
		B	loc_8CB2
@ ---------------------------------------------------------------------------

loc_8C9C:				@ ...
		ADDS	R7, R7,	#7
		BIC.W	R7, R7,	#7
		LDRD.W	R0, R1,	[R7],#8
		B	loc_8CBA
@ ---------------------------------------------------------------------------

loc_8CA8:				@ ...
		B	loc_8D10
@ ---------------------------------------------------------------------------

loc_8CAA:				@ ...
		B	loc_8CEC
@ ---------------------------------------------------------------------------

loc_8CAC:				@ ...
		B	loc_8CF0
@ ---------------------------------------------------------------------------

loc_8CAE:				@ ...
		SXTH	R0, R0
		ASRS	R1, R0,	#0x1F

loc_8CB2:				@ ...
		CMP	R3, #4
		BNE	loc_8CBA
		SXTB	R0, R0
		ASRS	R1, R0,	#0x1F

loc_8CBA:				@ ...
		SUBS	R3, R0,	#0
		SBCS.W	R3, R1,	#0
		BGE	loc_8CD2
		MOV.W	R12, #0
		RSBS.W	R0, R0,	R12
		SBC.W	R1, R12, R1
		MOVS	R3, #0x2D
		B	loc_8CD8
@ ---------------------------------------------------------------------------

loc_8CD2:				@ ...
		LSLS	R3, R4,	#0x14
		BPL	loc_8CE0
		MOVS	R3, #0x2B

loc_8CD8:				@ ...
		STRB.W	R3, [SP,#0x24]
		MOVS	R3, #1
		B	loc_8CE8
@ ---------------------------------------------------------------------------

loc_8CE0:				@ ...
		LSLS	R3, R4,	#0x1F
		BEQ	loc_8CE8
		MOVS	R3, #0x20
		B	loc_8CD8
@ ---------------------------------------------------------------------------

loc_8CE8:				@ ...
		MOV	R8, R3
		B	loc_8D9E
@ ---------------------------------------------------------------------------

loc_8CEC:				@ ...
		MOVS	R1, #0xA
		B	loc_8D12
@ ---------------------------------------------------------------------------

loc_8CF0:				@ ...
		MOVS	R1, #0x10
		B	loc_8D12
@ ---------------------------------------------------------------------------

loc_8CF4:				@ ...
		MOVS	R0, #0x10
		MOV.W	R11, #0
		STR	R0, [SP,#0x20]
		B	loc_8D18
@ ---------------------------------------------------------------------------

loc_8CFE:				@ ...
		MOVS	R1, #0x10
		MOV.W	R11, #0
		ORR.W	R4, R4,	#4
		MOV.W	R9, #8
		STR	R1, [SP,#0x20]
		B	loc_8D18
@ ---------------------------------------------------------------------------

loc_8D10:				@ ...
		MOVS	R1, #8

loc_8D12:				@ ...
		MOV.W	R11, #0
		STR	R1, [SP,#0x20]

loc_8D18:				@ ...
		UBFX.W	R3, R4,	#0x14, #3
		CMP	R3, #2
		BEQ	loc_8D2A
		LDMIA	R7!, {R0}
		MOVS	R1, #0
		CMP	R3, #3
		BEQ	loc_8D36
		B	loc_8D38
@ ---------------------------------------------------------------------------

loc_8D2A:				@ ...
		ADDS	R7, R7,	#7
		BIC.W	R7, R7,	#7
		LDRD.W	R0, R1,	[R7],#8
		B	loc_8D3E
@ ---------------------------------------------------------------------------

loc_8D36:				@ ...
		UXTH	R0, R0

loc_8D38:				@ ...
		CMP	R3, #4
		BNE	loc_8D3E
		UXTB	R0, R0

loc_8D3E:				@ ...
		MOV.W	R8, #0
		LSLS	R3, R4,	#0x1C
		BPL	loc_8D9E
		CMP	R2, #0x70
		BEQ	loc_8D5A
		LDR.W	R12, [SP,#0x20]
		EOR.W	R12, R12, #0x10
		ORRS.W	R12, R12, R11
		BEQ	loc_8D64
		B	loc_8D78
@ ---------------------------------------------------------------------------

loc_8D5A:				@ ...
		MOVS	R3, #0x40
		STRB.W	R3, [SP,#0x68+var_44]
		MOVS	R3, #1
		B	loc_8D76
@ ---------------------------------------------------------------------------

loc_8D64:				@ ...
		ORRS.W	R3, R0,	R1
		BEQ	loc_8D78
		MOVS	R3, #0x30
		STRB.W	R3, [SP,#0x24]
		STRB.W	R2, [SP,#0x25]
		MOVS	R3, #2

loc_8D76:				@ ...
		MOV	R8, R3

loc_8D78:				@ ...
		LDR.W	R12, [SP,#0x20]
		EOR.W	R12, R12, #8
		ORRS.W	R12, R12, R11
		BNE	loc_8D9E
		ORRS.W	R3, R0,	R1
		BNE	loc_8D90
		LSLS	R3, R4,	#0x1D
		BPL	loc_8D9E

loc_8D90:				@ ...
		MOVS	R3, #0x30
		STRB.W	R3, [SP,#0x24]
		MOV.W	R8, #1
		SUB.W	R9, R9,	#1

loc_8D9E:				@ ...
		CMP	R2, #0x58
		BEQ	loc_8DAC
		ADR	R2, a0123456789abcd

loc_8DA4:				@ ...
		STR	R2, [SP,#0x2C]
		ADD	R2, SP,	#0x20
		STR	R2, [SP,#0x28]
		B	loc_8DC4
@ ---------------------------------------------------------------------------

loc_8DAC:				@ ...
		ADR	R2, a0123456789ab_0
		B	loc_8DA4
@ ---------------------------------------------------------------------------

loc_8DB0:				@ ...
		MOV	R3, R11
		LDR	R2, [SP,#0x20]
		BL	sub_2C8
		LDR	R3, [SP,#0x2C]
		LDRB	R3, [R3,R2]
		LDR	R2, [SP,#0x28]
		SUBS	R2, R2,	#1
		STR	R2, [SP,#0x28]
		STRB	R3, [R2]

loc_8DC4:				@ ...
		ORRS.W	R2, R0,	R1
		BNE	loc_8DB0
		LDR	R0, [SP,#0x28]
		SUB.W	R0, SP,	R0
		ADD.W	R11, R0, #0x20
		LSLS	R0, R4,	#0x1D
		BPL	loc_8DDE
		BIC.W	R4, R4,	#0x10000
		B	loc_8DE2
@ ---------------------------------------------------------------------------

loc_8DDE:				@ ...
		MOV.W	R9, #1

loc_8DE2:				@ ...
		CMP	R9, R11
		BLE	loc_8DEC
		SUB.W	R0, R9,	R11
		B	loc_8DEE
@ ---------------------------------------------------------------------------

loc_8DEC:				@ ...
		MOVS	R0, #0

loc_8DEE:				@ ...
		ADD.W	R1, R0,	R11
		ADD	R1, R8
		STR	R0, [SP,#0x20]
		SUB.W	R10, R10, R1
		LSLS	R0, R4,	#0xF
		BMI	loc_8E0C
		LDRD.W	R2, R3,	[SP,#0x3C]
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_8ED0
		ADD	R6, R0

loc_8E0C:				@ ...
		MOV.W	R9, #0
		B	loc_8E24
@ ---------------------------------------------------------------------------

loc_8E12:				@ ...
		ADD	R1, SP,	#0x24
		LDRB.W	R0, [R1,R9]
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADD.W	R9, R9,	#1
		ADDS	R6, R6,	#1

loc_8E24:				@ ...
		CMP	R9, R8
		BLT	loc_8E12
		LSLS	R0, R4,	#0xF
		BPL	loc_8E46
		LDRD.W	R2, R3,	[SP,#0x3C]
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_8ED0
		ADD	R6, R0
		B	loc_8E46
@ ---------------------------------------------------------------------------

loc_8E3C:				@ ...
		LDRD.W	R1, R2,	[SP,#0x3C]
		MOVS	R0, #0x30
		BLX	R2
		ADDS	R6, R6,	#1

loc_8E46:				@ ...
		LDR	R1, [SP,#0x20]
		SUBS	R0, R1,	#1
		STR	R0, [SP,#0x20]
		CMP	R1, #0
		BGT	loc_8E3C
		B	loc_8E64
@ ---------------------------------------------------------------------------

loc_8E52:				@ ...
		LDR	R0, [SP,#0x28]
		LDR	R1, [SP,#0x28]
		LDRB	R0, [R0]
		ADDS	R1, R1,	#1
		STR	R1, [SP,#0x28]
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R6, R6,	#1

loc_8E64:				@ ...
		SUBS.W	R1, R11, #0
		SUB.W	R11, R11, #1
		BGT	loc_8E52
		MOV	R1, R4
		MOV	R0, R10

loc_8E72:				@ ...
		LDRD.W	R2, R3,	[SP,#0x3C]
		BL	sub_8EAC
		ADD	R6, R0

loc_8E7C:				@ ...
		ADDS	R5, R5,	#1
		B	loc_8AB8
@ End of function FormatAndPutText

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
a0123456789abcd:.ascii "0123456789abcdef" @ ...
		.byte 0
		.balign 4,0
a0123456789ab_0:.ascii "0123456789ABCDEF" @ ...
		.byte 0
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


sub_8EAC:				@ ...
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOVS	R5, #0
		MOV	R6, R3
		MOV	R7, R2
		LSLS	R0, R1,	#0x12
		BMI	loc_8EC6
		B	loc_8ECA
@ ---------------------------------------------------------------------------

loc_8EBE:				@ ...
		MOV	R1, R7
		MOVS	R0, #0x20
		BLX	R6
		ADDS	R5, R5,	#1

loc_8EC6:				@ ...
		SUBS	R4, R4,	#1
		BPL	loc_8EBE

loc_8ECA:				@ ...
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function sub_8EAC


@ =============== S U B	R O U T	I N E =======================================


sub_8ED0:				@ ...
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOVS	R5, #0
		MOV	R6, R3
		MOV	R8, R2
		LSLS	R0, R1,	#0xF
		BPL	loc_8EE4
		MOVS	R7, #0x30
		B	loc_8EE6
@ ---------------------------------------------------------------------------

loc_8EE4:				@ ...
		MOVS	R7, #0x20

loc_8EE6:				@ ...
		LSLS	R0, R1,	#0x12
		BPL	loc_8EF4
		B	loc_8EF8
@ ---------------------------------------------------------------------------

loc_8EEC:				@ ...
		MOV	R1, R8
		MOV	R0, R7
		BLX	R6
		ADDS	R5, R5,	#1

loc_8EF4:				@ ...
		SUBS	R4, R4,	#1
		BPL	loc_8EEC

loc_8EF8:				@ ...
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function sub_8ED0

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode
		
orgClampPowers:
		LDR	R0, =AtoMinPower
		LDR	R1, [R0]
		CMP	R1, #0xA
		BCS	loc_8F0C
		MOVS	R1, #0xA
		STR	R1, [R0]

loc_8F0C:				@ ...
		LDR	R1, =AtoMaxPower
		LDR	R0, =MaxPower
		LDR	R2, [R1]
		LDR	R0, [R0]
		CMP	R2, R0
		BLS	locret_8F1A
		STR	R0, [R1]

locret_8F1A:				@ ...
		BX	LR
@ End of function ClampPowers

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgClampAtoVolts:
		LDR	R0, =AtoMinVolts
		LDR	R1, [R0]
		CMP	R1, #0x32
		BCS	loc_8F34
		MOVS	R1, #0x32
		STR	R1, [R0]

loc_8F34:				@ ...
		LDR	R1, =AtoMaxVolts
		LDR	R0, =MaxVWVolts
		LDR	R2, [R1]
		LDR	R0, [R0]
		CMP	R2, R0
		BLS	locret_8F42
		STR	R0, [R1]

locret_8F42:				@ ...
		BX	LR
@ End of function ClampAtoVolts

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================


PutChar:
		PUSH	{LR}
		MOV		R3, R0
		BL		UART0_Cout
		MOV		R0, R3
		POP		{PC}
@ End of function PutChar


@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSearchSTARTRez:
		PUSH	{R4,R5,LR}
		MOV	R2, R0
		MOVS	R0, #0
		LDR	R4, =STARTRezValues
		MOVS	R3, #0xA

loc_8F66:				@ ...
		LDRH.W	R1, [R4,R0,LSL#1]
		UDIV.W	R5, R1,	R3
		ADD	R5, R1
		CMP	R5, R2
		BCC	loc_8F7E
		UDIV.W	R5, R1,	R3
		SUBS	R1, R1,	R5
		CMP	R1, R2
		BLE	locret_8F88

loc_8F7E:				@ ...
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #4
		BCC	loc_8F66
		MOVS	R0, #4

locret_8F88:				@ ...
		POP	{R4,R5,PC}
@ End of function SearchSTARTRez

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif
		
@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSetMinMaxPower:
		PUSH	{R4,R5}
		LDR	R0, =AtoError
		LDR	R5, =AtoMinPower
		LDR	R4, =AtoMaxPower
		LDRB	R0, [R0]
		MOVS	R3, #10
		CBNZ	R0, loc_8FDA
		LDR	R0, =AtoRez
		LDRH	R1, [R0]
		CBZ	R1, loc_8FDA
		LDR	R2, =MaxVWVolts
		ADD.W	R0, R1,	R1,LSL#3
		ADD.W	R0, R0,	R1,LSL#4
		LDR	R2, [R2]
		UXTH	R0, R0
		CMP	R0, R2
		BLS	loc_8FB8
		UXTH	R0, R2

loc_8FB8:				@ ...
		MULS	R0, R0
		SDIV.W	R0, R0,	R1
		ADDS	R0, R0,	#5
		UDIV.W	R0, R0,	R3
		STR	R0, [R4]
		MOVW	R0, #2500
		UDIV.W	R0, R0,	R1
		UDIV.W	R0, R0,	R3
		STR	R0, [R5]
		POP	{R4,R5}
		B.W	ClampPowers
@ ---------------------------------------------------------------------------

loc_8FDA:				@ ...
		LDR	R0, =MaxPower
		STR	R3, [R5]
		LDR	R0, [R0]
		STR	R0, [R4]
		POP	{R4,R5}
		BX	LR
@ End of function SetMinMaxPower

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSetMinMaxVolts:				@ ...
		PUSH	{R4-R6,LR}
		LDR	R0, =AtoError
		LDR	R4, =AtoMinVolts
		LDR	R5, =AtoMaxVolts
		VPUSH	{D8}
		LDRB	R0, [R0]
		CBNZ	R0, loc_908A
		LDR	R6, =AtoRez
		LDRH	R0, [R6]
		CBZ	R0, loc_908A
		LDR	R1, =MaxPower	@ int
		CDP	p10, 0xB, c8,c2,c4, 0
		FLDS	S0, [R1]
		FUITOS	S1, S0
		FMSR	S0, R0
		FUITOS	S0, S0
		FMULS	S0, S1,	S0
		FMULS	S0, S0,	S16
		FMRS	R0, S0
		BL	float2double
		FMDRR	D0, R0,	R1
		BL	sqrtd
		FMRRD	R0, R1,	D0
		BL	double2int64
		UXTH	R0, R0
		FMSR	S0, R0
		FUITOS	S0, S0
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		STR	R0, [R5]
		LDRH	R0, [R6]
		FMSR	S0, R0
		FUITOS	S0, S0
		FMULS	S0, S0,	S16
		FMULS	S0, S0,	S16
		FMRS	R0, S0
		BL	float2double
		FMDRR	D0, R0,	R1
		BL	sqrtd
		FMRRD	R0, R1,	D0
		B	loc_908C
@ ---------------------------------------------------------------------------

loc_908A:				@ ...
		B	loc_90B2
@ ---------------------------------------------------------------------------

loc_908C:				@ ...
		BL	double2int64
		UXTH	R0, R0
		FMSR	S0, R0
		FUITOS	S0, S0
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		STR	R0, [R4]
		VPOP	{D8}
		POP.W	{R4-R6,LR}
		B.W	ClampAtoVolts
@ ---------------------------------------------------------------------------

loc_90B2:				@ ...
		MOVS	R0, #0x32
		STR	R0, [R4]
		LDR	R0, =MaxVWVolts
		LDR	R0, [R0]
		STR	R0, [R5]
		VPOP	{D8}
		POP	{R4-R6,PC}
@ End of function SetMinMaxVolts

@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

orgSetAtoLimits:
		PUSH	{R4-R6,LR}
		BL	SetMinMaxVolts
		BL	SetMinMaxPower
		LDR	R0, =AtoError
		LDRB	R0, [R0]
		CMP	R0, #0
		BNE	locret_9128
		LDR	R0, =AtoRez
		LDRH	R0, [R0]
		CMP	R0, #0
		BEQ	locret_9128
		BL	SetAtoSTARTParams
		LDR	R5, =dfData
		LDRB	R0, [R5,#(dfMode - dfData)]
		CMP	R0, #6
		BEQ	loc_912A
		LDRH	R4, [R5,#0x10]

loc_9104:				@ ...
		LDR	R0, =AtoMinPower
		LDR	R0, [R0]
		CMP	R4, R0
		BCS	loc_910E
		UXTH	R4, R0

loc_910E:				@ ...
		LDR	R0, =AtoMaxPower
		LDR	R0, [R0]
		CMP	R4, R0
		BLS	loc_9118
		UXTH	R4, R0

loc_9118:				@ ...
		MOV	R0, R4
		BL	GetAtoVWVolts
		STRH	R0, [R5,#(dfVWVolts - dfData)]
		LDRB	R1, [R5,#(dfMode - dfData)]
		CMP	R1, #6
		BEQ	loc_9138
		STRH	R4, [R5,#(dfPower - dfData)]

locret_9128:				@ ...
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_912A:				@ ...
		LDR	R0, =ConfigIndex
		LDRB	R0, [R0]
		ADD.W	R0, R5,	R0,LSL#1
		LDRH.W	R4, [R0,#(dfSavedCfgPwr	- dfData)]
		B	loc_9104
@ ---------------------------------------------------------------------------

loc_9138:				@ ...
		MOVS	R1, #1
		BL	ClampPower
		STRH	R0, [R5,#(dfPower - dfData)]
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ End of function SetAtoLimits

		.endif

@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR GotoMain

		.ifne	keeporgcode

orgMain:
		BL	InitHardware
		BL	InitVariables
		LDR	R6, =Flags64
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x8000
		STR	R0, [R6]
		BL	ReadBatteryVoltage
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x10000
		STR	R0, [R6]
		BL	ReadBoardTemp
		BL	InitDisplay
		BL	MainView
@MODIF*******************************
		.ifne	modifs
		BL	CustomStartup
		.endif
@************************************
		LDR.W	R9, =ShowWeakBatFlag
		LDR	R4, =dfData
		LDR.W	R8, =Screen
		ADDS	R7, R6,	#(Flags68 - Flags64)
		SUB.W	R5, R6,	#(Flags64 - KeyUpTimer)

loc_9196:				@ ...
		LDRH	R0, [R7]
		LSLS	R0, R0,	#22
		BPL	loc_91DC
		BL	fbCallTimeouts
		LDR	R0, [R6]
		LSLS	R1, R0,	#28
		BPL	loc_91CA
		BIC.W	R0, R0,	#8
		STR	R0, [R6]
		BL	ResetWatchDog
		BL	TimedItems
		BL	SleepIfIdle
		BL	GetUserInput
		LDR	R0, =0x40004900	@ PE0 (fire button)
		LDR	R0, [R0]
		CBNZ	R0, loc_91CA
		LDR	R1, =SleepTimer
		MOVW	R0, #3000
		STRH	R0, [R1]

loc_91CA:				@ ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#27
		BPL	loc_9196
		BIC.W	R0, R0,	#0x10
		STR	R0, [R6]
		BL	UpdateFlash
		B	loc_9196
@ ---------------------------------------------------------------------------

loc_91DC:				@ ...
		LDRH	R0, [R6]
		LSLS	R0, R0,	#23
		BPL	loc_91E6
		BL	GetAtoCurrent

loc_91E6:				@ ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#31
		BEQ	loc_91FA
		BIC.W	R0, R0,	#1
		STR	R0, [R6]
		LSLS	R0, R0,	#23
		BPL	loc_91FA
		BL	RegulateBuckBoost

loc_91FA:				@ ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#30
		BPL	loc_924E
		BIC.W	R0, R0,	#2
		STR	R0, [R6]
		LSLS	R0, R0,	#23
		BPL	loc_924E
		BL	ReadAtoTemp
		LDR	R0, [R6]
		LSLS	R0, R0,	#8
		BPL	loc_9228
		LDRB	R0, [R4,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_9224
		CBZ	R0, loc_9224
		CMP	R0, #2
		BEQ	loc_9224
		CMP	R0, #3
		BNE	loc_9238

loc_9224:				@ ...
		BL	CheckMode

loc_9228:				@ ...
		LDRB	R0, [R4,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_9244
		CBZ	R0, loc_9244
		CMP	R0, #2
		BEQ	loc_9244
		CMP	R0, #3
		BEQ	loc_9244

loc_9238:				@ ...
		UXTB	R0, R0
		CMP	R0, #4
		BEQ	loc_924A
		CMP	R0, #6
		BEQ	loc_924A
		B	loc_924E
@ ---------------------------------------------------------------------------

loc_9244:				@ ...
		BL	TweakTargetVoltsTC
		B	loc_924E
@ ---------------------------------------------------------------------------

loc_924A:				@ ...
		BL	TweakTargetVoltsVW

loc_924E:				@ ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#28
		BPL	loc_9298
		BIC.W	R0, R0,	#8
		STR	R0, [R6]
		BL	ResetWatchDog
		LDR	R0, [R6]
		LSLS	R1, R0,	#24
		BPL	loc_926A
		BIC.W	R0, R0,	#0x80
		STR	R0, [R6]

loc_926A:				@ ...
		BL	TimedItems
		BL	SleepIfIdle
		BL	ReadBatteryVoltage
		BL	ReadBoardTemp
		LDRH	R0, [R6]
		LSLS	R0, R0,	#23
		BPL	loc_928A
		LDRB	R0, [R5,#(BoardTemp - KeyUpTimer)]
		CMP	R0, #70
		BCC	loc_928A
		BL	Overtemp

loc_928A:				@ ...
		LDRH	R0, [R5,#(word_20000054	- KeyUpTimer)]
		CMP	R0, #5
		BCC	loc_9294
		BL	KeyRepeat

loc_9294:				@ ...
		BL	GetUserInput

loc_9298:				@ ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#27
		BPL	loc_92D6
		BIC.W	R0, R0,	#0x10
		STR	R0, [R6]
		BL	UpdateFlash
		LDR	R1, [R6]
		LSLS	R0, R1,	#23
		BPL	loc_92B4
		LDRH	R0, [R5,#(FireDuration - KeyUpTimer)]
		ADDS	R0, R0,	#1
		STRH	R0, [R5,#(FireDuration - KeyUpTimer)]

loc_92B4:				@ ...
		LDRB.W	R0, [R9]
		CBZ	R0, loc_92C0
		SUBS	R0, R0,	#1
		STRB.W	R0, [R9]

loc_92C0:				@ ...
		LSLS	R0, R1,	#23
		BPL	loc_92D2
		LDRB	R0, [R4,#(dfMode - dfData)]
		CMP	R0, #4
		BEQ	loc_92D2
		CMP	R0, #5
		BEQ	loc_92D2
		CMP	R0, #6
		BNE	loc_92D6

loc_92D2:				@ ...
		BL	DrawScreen

loc_92D6:				@ ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#26
		BPL	loc_931C
		BIC.W	R0, R0,	#0x20
		STR	R0, [R6]
		LSLS	R0, R0,	#23
		BMI	loc_9308
		LDRB.W	R0, [R4,#(dfStatus - dfData)]
		LSLS	R0, R0,	#31
		BNE	loc_9312
		LDRB	R0, [R5,#(Event	- KeyUpTimer)]
		CMP	R0, #0xFF
		BNE	loc_9312
		LDRB.W	R0, [R8]
		CMP	R0, #1
		BEQ	loc_930E
		CBZ	R0, loc_930E
		CMP	R0, #3
		BEQ	loc_930E
		CMP	R0, #5
		BEQ	loc_930E
		B	loc_9312
@ ---------------------------------------------------------------------------

loc_9308:				@ ...
		LDR	R0, =TargetVolts
		LDR	R0, [R0]
		CBNZ	R0, loc_9312

loc_930E:				@ ...
		BL	ProbeAtomizer

loc_9312:				@ ...
		LDRH	R0, [R5,#(word_20000054	- KeyUpTimer)]
		CMP	R0, #5
		BCS	loc_931C
		BL	KeyRepeat

loc_931C:				@ ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#25
		BPL	loc_9340
		BIC.W	R0, R0,	#0x40
		STR	R0, [R6]
		LSLS	R0, R0,	#23
		BPL	loc_9340
		LDRB	R0, [R4,#(dfMode - dfData)]
		CMP	R0, #1
		BEQ	loc_933C
		CBZ	R0, loc_933C
		CMP	R0, #2
		BEQ	loc_933C
		CMP	R0, #3
		BNE	loc_9340

loc_933C:				@ ...
		BL	DrawScreen

loc_9340:				@ ...
		LDR	R0, [R7]
		LSLS	R1, R0,	#23
		BPL	loc_937A
		BIC.W	R0, R0,	#0x100
		STR	R0, [R7]
		LDR	R1, [R6]
		LSLS	R0, R1,	#23
		BMI	loc_937A
		LDRB.W	R0, [R4,#(dfStatus - dfData)]
		LSLS	R0, R0,	#31
		BNE	loc_937A
		LDRH	R0, [R5,#(EditModeTimer	- KeyUpTimer)]
		CBNZ	R0, loc_937A
		LDRH	R0, [R5,#(HideLogo - KeyUpTimer)]
		CBZ	R0, loc_937A
		LDRB.W	R2, [R8]
		CMP	R2, #1
		BNE	loc_937A
		SUBS	R0, R0,	#1
		LSLS	R0, R0,	#16
		LSRS	R0, R0,	#16
		STRH	R0, [R5,#(HideLogo - KeyUpTimer)]
		BNE	loc_937A

loc_9374:
		ORR.W	R0, R1,	#0x20000
		STR	R0, [R6]

loc_937A:				@ ...
		BL	EventHandler
		B	loc_9196
@ ---------------------------------------------------------------------------
		.balign 4,0
		.pool
@ END OF FUNCTION CHUNK	FOR GotoMain

		.endif

@ =============== S U B	R O U T	I N E =======================================

		.ifne	keeporgcode

DumpRegisters:				@ ...
		PUSH	{R4,LR}
		MOV	R4, R0
		LDR	R1, [R0]
		ADR	R0, aR00xX
		BL	PutTextf
		ADR	R0, aR10xX
		LDR	R1, [R4,#4]
		BL	PutTextf
		ADR	R0, aR20xX
		LDR	R1, [R4,#8]
		BL	PutTextf
		ADR	R0, aR30xX
		LDR	R1, [R4,#0xC]
		BL	PutTextf
		ADR	R0, aR120xX
		LDR	R1, [R4,#0x10]
		BL	PutTextf
		ADR	R0, aLr0xX
		LDR	R1, [R4,#0x14]
		BL	PutTextf
		ADR	R0, aPc0xX
		LDR	R1, [R4,#0x18]
		BL	PutTextf
		LDR	R1, [R4,#0x1C]
		POP.W	{R4,LR}
		ADR	R0, aPsr0xX
		B.W	PutTextf

@ ---------------------------------------------------------------------------

aR00xX:		.ascii "r0  = 0x%x\n"     @ ...
			.byte 0
aR10xX:		.ascii "r1  = 0x%x\n"     @ ...
			.byte 0
aR20xX:		.ascii "r2  = 0x%x\n"     @ ...
			.byte 0
aR30xX:		.ascii "r3  = 0x%x\n"     @ ...
			.byte 0
aR120xX:	.ascii "r12 = 0x%x\n"     @ ...
			.byte 0
aLr0xX:		.ascii "lr  = 0x%x\n"     @ ...
			.byte 0
aPc0xX:		.ascii "pc  = 0x%x\n"     @ ...
			.byte 0
aPsr0xX:	.ascii "psr = 0x%x\n"     @ ...
			.byte  0

			.endif

@ End of function DumpRegisters
@ ===========================================================================

		.section	.myevic

DrawHexDigit:
		and		r2, #0xF
		add		r2, #1
		cmp		r2, #0xB
		blt		1f
		add		r2, #0x5D
1:		mov		r3, #1
		b		DrawImage

DrawHexDigit2:
		and		r2, #0xF
		add		r2, #0x1F
		cmp		r2, #0x29
		blt		1f
		add		r2, #0x73
		add		r1, #2
1:		mov		r3, #1
		b		DrawImage

DrawHexLong:
		push	{r4-r8,lr}
		mov		r5, r0
		mov		r6, r1
		mov		r7, r2
		mov		r8, r3
		movs	r4, #28
1:		lsr		r2, r4
		mov		r3, r8
		cbz		r3, 2f
		bl		DrawHexDigit2
		add		r5, #8
		b		3f
2:		bl		DrawHexDigit
		add		r5, #6
3:		mov		r0, r5
		mov		r1, r6
		mov		r2, r7
		subs	r4, #4
		bpl		1b
		pop		{r4-r8,pc}


@ ---------------------------------------------------------------------------
@ BSOD

Plantage:
		mov		r0, #4
		mov		r1, lr
		tst		r0, r1
		beq		2f
		mrs		r6, psp
		b		3f
2:		mrs		r6, msp
3:
		mrs		r4, xpsr

		mov		r0, r4
		mov		r1, r6
		bl		Plantouille
		b		.


@ ---------------------------------------------------------------------------
@ ul sqrtul( ul )

sqrtul:
		fmsr	s0, r0
		fuitos	s0, s0
		fsqrts	s0, s0
		ftouis	s0, s0
		fmrs	r0, s0
		bx		lr

@ ---------------------------------------------------------------------------

		.end

