@
@ +-------------------------------------------------------------------------+
@ |   This file	has been generated by The Interactive Disassembler (IDA)    |
@ |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
@ |			 License info: 48-B611-7234-BB			    |
@ |		Doskey Lee, Kingsoft Internet Security Software		    |
@ +-------------------------------------------------------------------------+
@
@ Input	MD5   :	5366F56114EBD4C7FC252D3D56164D9D
@ Input	CRC32 :	ACCB3046

@ File Name   :	H:\Users\Ferox\Downloads\UpdateFirmware\eVic_VTC_Mini_V3.03_dec.bin
@ Format      :	Binary file
@ Base Address:	0000h Range: 20000000h - 2000E398h Loaded length: E398h

@ Processor	  : ARM
@ ARM architecture: ARMv7-M
@ Target assembler: GNU	assembler
@ Byte sex	  : Little endian
.syntax	unified

@ ===========================================================================

		.section .isr_vectors
		.org 0

		.long Stack_Top
		.long Reset_Handler+1
		.long NMI_Handler+1
		.long HardFault_Handler+1
		.long MemManage_Handler+1
		.long BusFault_Handler+1
		.long UsageFault_Handler+1
		.long 0
		.long 0
		.long 0
		.long 0
		.long SVC_Handler+1
		.long DebugMon_Handler+1
		.long 0
		.long PendSV_Handler+1
		.long SysTick_Handler+1
		.long Default_Handler+1	@  0 : Brown-Out Detector
		.long Default_Handler+1	@  1 : Internal	RC
		.long Default_Handler+1	@  2 : Power down wake up
		.long Default_Handler+1	@  3 : RAM parity error
		.long Default_Handler+1	@  4 : Clock detection fail
		.long Default_Handler+1	@  5 : Reserved
		.long Default_Handler+1	@  6 : Real Time Clock
		.long Default_Handler+1	@  7 : Tamper detection
		.long Default_Handler+1	@  8 : Watchdog	timer
		.long Default_Handler+1	@  9 : Window watchdog timer
		.long Default_Handler+1	@ 10 : External	Input 0
		.long Default_Handler+1	@ 11 : External	Input 1
		.long Default_Handler+1	@ 12 : External	Input 2
		.long Default_Handler+1	@ 13 : External	Input 3
		.long Default_Handler+1	@ 14 : External	Input 4
		.long Default_Handler+1	@ 15 : External	Input 5
		.long Default_Handler+1	@ 16 : GPIO Port A
		.long Default_Handler+1	@ 17 : GPIO Port B
		.long Default_Handler+1	@ 18 : GPIO Port C
		.long GPD_IRQHandler+1	@ 19 : GPIO Port D
		.long GPE_IRQHandler+1	@ 20 : GPIO Port E
		.long GPF_IRQHandler+1	@ 21 : GPIO Port F
		.long Default_Handler+1	@ 22 : SPI0
		.long Default_Handler+1	@ 23 : SPI1
		.long Default_Handler+1	@ 24 : PWM0 brake
		.long Default_Handler+1	@ 25 : PWM0 pair 0
		.long Default_Handler+1	@ 26 : PWM0 pair 1
		.long Default_Handler+1	@ 27 : PWM0 pair 2
		.long Default_Handler+1	@ 28 : PWM1 brake
		.long Default_Handler+1	@ 29 : PWM1 pair 0
		.long Default_Handler+1	@ 30 : PWM1 pair 1
		.long Default_Handler+1	@ 31 : PWM1 pair 2
		.long TMR0_IRQHandler+1	@ 32 : Timer 0
		.long TMR1_IRQHandler+1	@ 33 : Timer 1
		.long TMR2_IRQHandler+1	@ 34 : Timer 2
		.long TMR3_IRQHandler+1	@ 35 : Timer 3
		.long Default_Handler+1	@ 36 : UART0
		.long Default_Handler+1	@ 37 : UART1
		.long Default_Handler+1	@ 38 : I2C0
		.long Default_Handler+1	@ 39 : I2C1
		.long Default_Handler+1	@ 40 : Peripheral DMA
		.long Default_Handler+1	@ 41 : DAC
		.long ADC_IRQ0_Handler+1 @ 42 :	ADC0 interrupt source 0
		.long Default_Handler+1	@ 43 : ADC0 interrupt source 1
		.long Default_Handler+1	@ 44 : ACMP0 and ACMP1
		.long Default_Handler+1	@ 45 : Reserved
		.long Default_Handler+1	@ 46 : ADC0 interrupt source 2
		.long Default_Handler+1	@ 47 : ADC0 interrupt source 3
		.long Default_Handler+1	@ 48 : UART2
		.long Default_Handler+1	@ 49 : UART3
		.long Default_Handler+1	@ 50 : Reserved
		.long Default_Handler+1	@ 51 : SPI2
		.long Default_Handler+1	@ 52 : Reserved
		.long USBD_IRQHandler+1	@ 53 : USB device
		.long Default_Handler+1	@ 54 : USB host
		.long Default_Handler+1	@ 55 : USB OTG
		.long Default_Handler+1	@ 56 : CAN0
		.long Default_Handler+1	@ 57 : Reserved
		.long Default_Handler+1	@ 58 : Smart card host 0 interrupt
		.long Default_Handler+1	@ 59 : Reserved
		.long Default_Handler+1	@ 60 : Reserved
		.long Default_Handler+1	@ 61 : Reserved
		.long Default_Handler+1	@ 62 : Reserved
		.long Default_Handler+1	@ 63 : Touch key interrupt

		.include "rodata.s"
		.include "sram.s"

		.text
		.thumb

@ =============== S U B	R O U T	I N E =======================================


Startup:				@ CODE XREF: Reset_Handler+30j
					@ DATA XREF: Reset_Handler+2Eo	...

@ FUNCTION CHUNK AT 0000045C SIZE 0000001C BYTES

		LDR.W	SP, off_150
		BL	InitRAM
@ End of function Startup


@ =============== S U B	R O U T	I N E =======================================


GotoMain:				@ CODE XREF: Startup+334p

@ FUNCTION CHUNK AT 0000915C SIZE 00000224 BYTES

		LDR	R0, off_14C
		BX	R0 @ Main
@ End of function GotoMain

@ ---------------------------------------------------------------------------
off_14C:	.long Main+1		@ DATA XREF: GotoMainr
off_150:	.long Stack_Top		@ DATA XREF: Startupr

@ =============== S U B	R O U T	I N E =======================================


HardFault_Handler:			@ DATA XREF: ROM:0000000Co

@ FUNCTION CHUNK AT 00002CB0 SIZE 00000010 BYTES

		MOVS	R0, #4
		MOV	R1, LR
		TST	R0, R1
		BEQ	loc_162
		MRS.W	R0, PSP
		B	loc_166
@ ---------------------------------------------------------------------------

loc_162:				@ CODE XREF: HardFault_Handler+6j
		MRS.W	R0, MSP

loc_166:				@ CODE XREF: HardFault_Handler+Cj
		MOV	R1, LR
		LDR	R2, off_16C
		BX	R2 @ loc_2CB0
@ End of function HardFault_Handler

@ ---------------------------------------------------------------------------
off_16C:	.long loc_2CB0+1	@ DATA XREF: HardFault_Handler+14r

@ =============== S U B	R O U T	I N E =======================================

		.global Reset_Handler

Reset_Handler:				@ DATA XREF: ROM:00000004o
		LDR	R0, off_1B8	@ SYS_REGLCTL
		MOV.W	R1, #0x59	@ Unlock sequence
		STR	R1, [R0]
		MOV.W	R1, #0x16
		STR	R1, [R0]
		MOV.W	R1, #0x88
		STR	R1, [R0]
		LDR	R2, off_1BC	@ SYS_PORCTL
		MOVW	R1, #0x5AA5	@ POROFF
		STR	R1, [R2]	@ (disable Power-On-Reset)
		LDR	R2, off_1C0
		LDR	R1, [R2]	@ CLK_PWRCTL
		BIC.W	R1, R1,	#0x1000	@ HTX Crystal type INV
		STR	R1, [R2]
		MOVS	R1, #0		@ Lock registers
		STR	R1, [R0]
		LDR	R0, off_1C4
		BLX	R0 @ EnableCopros
		LDR	R0, off_1C8
		BX	R0 @ Startup
@ End of function Reset_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

NMI_Handler:				@ CODE XREF: NMI_Handlerj
					@ DATA XREF: ROM:00000008o
		B	NMI_Handler
@ End of function NMI_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

sub_1A4:				@ CODE XREF: sub_1A4j
		B	sub_1A4
@ End of function sub_1A4


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

MemManage_Handler:			@ CODE XREF: MemManage_Handlerj
					@ DATA XREF: ROM:00000010o
		B	MemManage_Handler
@ End of function MemManage_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

BusFault_Handler:			@ CODE XREF: BusFault_Handlerj
					@ DATA XREF: ROM:00000014o
		B	BusFault_Handler
@ End of function BusFault_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

UsageFault_Handler:			@ CODE XREF: UsageFault_Handlerj
					@ DATA XREF: ROM:00000018o
		B	UsageFault_Handler
@ End of function UsageFault_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

SVC_Handler:				@ CODE XREF: SVC_Handlerj
					@ DATA XREF: ROM:0000002Co
		B	SVC_Handler
@ End of function SVC_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

DebugMon_Handler:			@ CODE XREF: DebugMon_Handlerj
					@ DATA XREF: ROM:00000030o
		B	DebugMon_Handler
@ End of function DebugMon_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

PendSV_Handler:				@ CODE XREF: PendSV_Handlerj
					@ DATA XREF: ROM:00000038o
		B	PendSV_Handler
@ End of function PendSV_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

SysTick_Handler:			@ CODE XREF: SysTick_Handlerj
					@ DATA XREF: ROM:0000003Co
		B	SysTick_Handler
@ End of function SysTick_Handler


@ =============== S U B	R O U T	I N E =======================================

@ Attributes: noreturn

Default_Handler:			@ CODE XREF: Default_Handlerj
					@ sub_85B4+15Ap
					@ DATA XREF: ...
		B	Default_Handler
@ End of function Default_Handler

@ ---------------------------------------------------------------------------
		.balign 4,0
off_1B8:	.long 0x40000100	@ DATA XREF: Reset_Handlerr
off_1BC:	.long 0x40000024	@ DATA XREF: Reset_Handler+14r
off_1C0:	.long 0x40000200	@ DATA XREF: Reset_Handler+1Cr
off_1C4:	.long EnableCopros+1	@ DATA XREF: Reset_Handler+2Ar
off_1C8:	.long Startup+1		@ DATA XREF: Reset_Handler+2Er

@ =============== S U B	R O U T	I N E =======================================


Random:					@ CODE XREF: sub_13A4+Ap
		LDR	R1, RNGSeedPtr
		LDR	R2, RNGFactor
		LDR	R0, [R1]
		MULS	R0, R2
		MOVW	R2, #12345
		ADD	R0, R2
		STR	R0, [R1]
		LSRS	R0, R0,	#1
		BX	LR
@ End of function Random


@ =============== S U B	R O U T	I N E =======================================


SetRandSeed:				@ CODE XREF: sub_9B0+5Ep
		LDR	R1, RNGSeedPtr
		STR	R0, [R1]
		BX	LR
@ End of function SetRandSeed

@ ---------------------------------------------------------------------------
		.balign 4,0
RNGSeedPtr:	.long RNGSeed		@ DATA XREF: Randomr SetRandSeedr
RNGFactor:	.long 0x41C64E6D	@ DATA XREF: Random+2r

@ =============== S U B	R O U T	I N E =======================================


MemCpy:					@ CODE XREF: InitDataFlash+22Cp
					@ UpdateDataFlash+46p ...
		ORR.W	R3, R0,	R1
		LSLS	R3, R3,	#30
		BEQ	loc_200
		B	loc_20E
@ ---------------------------------------------------------------------------

loc_1FA:				@ CODE XREF: MemCpy+12j
		LDMIA	R1!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R0!, {R3}

loc_200:				@ CODE XREF: MemCpy+6j
		CMP	R2, #4
		BCS	loc_1FA
		B	loc_20E
@ ---------------------------------------------------------------------------

loc_206:				@ CODE XREF: MemCpy+20j
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_20E:				@ CODE XREF: MemCpy+8j	MemCpy+14j
		SUBS	R2, R2,	#1
		BCS	loc_206
		BX	LR
@ End of function MemCpy


@ =============== S U B	R O U T	I N E =======================================


MemSet:					@ CODE XREF: MemClear+2j sub_226+Ap
		UXTB	R2, R2
		B	loc_21C
@ ---------------------------------------------------------------------------

loc_218:				@ CODE XREF: MemSet+Aj
		STRB.W	R2, [R0],#1

loc_21C:				@ CODE XREF: MemSet+2j
		SUBS	R1, R1,	#1
		BCS	loc_218
		BX	LR
@ End of function MemSet


@ =============== S U B	R O U T	I N E =======================================


MemClear:				@ CODE XREF: InitDataFlash+12p
					@ ResetDataFlash+Cp ...
		MOVS	R2, #0
		B	MemSet
@ End of function MemClear


@ =============== S U B	R O U T	I N E =======================================


sub_226:
		PUSH	{R4,LR}
		MOV	R3, R2
		MOV	R2, R1
		MOV	R4, R0
		MOV	R1, R3
		BL	MemSet
		MOV	R0, R4
		POP	{R4,PC}
@ End of function sub_226


@ =============== S U B	R O U T	I N E =======================================


sub_238:				@ CODE XREF: SetMinMaxVolts+48p
					@ SetMinMaxVolts:loc_908Cp
		UBFX.W	R2, R1,	#20, #11
		PUSH	{R4,LR}
		UBFX.W	R1, R1,	#0, #20
		MOVW	R3, #0x3FF
		ORR.W	R1, R1,	#0x100000
		CMP	R2, R3
		BGE	loc_252
		MOVS	R0, #0
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_252:				@ CODE XREF: sub_238+14j
		MOVW	R3, #0x433
		CMP	R2, R3
		SUBW	R2, R2,	#0x433
		BGT	loc_266
		NEGS	R2, R2
		BL	sub_32A
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_266:				@ CODE XREF: sub_238+24j
		LSLS	R0, R2
		POP	{R4,PC}
@ End of function sub_238


@ =============== S U B	R O U T	I N E =======================================


sub_26A:				@ CODE XREF: GetAtoVWVolts+2Ep
					@ GetVoltsForPower+1Cp	...
		AND.W	R2, R0,	#0x80000000
		BICS.W	R0, R0,	#0x80000000
		BEQ	loc_28A
		LSRS	R1, R0,	#0x17
		ADD.W	R1, R1,	#0x380
		UBFX.W	R0, R0,	#0, #0x17
		ORR.W	R1, R2,	R1,LSL#20
		LSRS	R2, R0,	#3
		LSLS	R0, R0,	#0x1D
		ORRS	R1, R2
		BX	LR
@ ---------------------------------------------------------------------------

loc_28A:				@ CODE XREF: sub_26A+8j
		MOVS	R0, #0
		MOV	R1, R0
		BX	LR
@ End of function sub_26A


@ =============== S U B	R O U T	I N E =======================================


sub_290:				@ CODE XREF: GetAtoVWVolts+3Ep
					@ GetVoltsForPower+2Cp

@ FUNCTION CHUNK AT 0000034A SIZE 00000012 BYTES

		AND.W	R3, R1,	#0x80000000
		PUSH	{R4,R5}
		BIC.W	R1, R1,	#0x80000000
		ORRS.W	R2, R0,	R1
		BEQ	loc_2AE
		LSRS	R2, R1,	#20
		SUB.W	R2, R2,	#0x380
		UBFX.W	R1, R1,	#0, #20
		CMP	R2, #0
		BGT	loc_2B4

loc_2AE:				@ CODE XREF: sub_290+Ej
		POP	{R4,R5}
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_2B4:				@ CODE XREF: sub_290+1Cj
		LSRS	R4, R0,	#29
		ORR.W	R4, R4,	R1,LSL#3
		LSLS	R1, R0,	#3
		ADDS	R0, R4,	R3
		POP	{R4,R5}
		ADD.W	R0, R0,	R2,LSL#23
		B.W	loc_34A
@ End of function sub_290


@ =============== S U B	R O U T	I N E =======================================


sub_2C8:				@ CODE XREF: FormatAndPutText+318p
		PUSH.W	{R4-R12,LR}
		MOV	R5, R0
		MOVS	R0, #0
		MOV	R10, R2
		MOV	R11, R3
		MOV	R8, R1
		MOV	R6, R0
		MOV	R9, R0
		MOVS	R4, #0x40
		B	loc_316
@ ---------------------------------------------------------------------------

loc_2DE:				@ CODE XREF: sub_2C8+54j
		MOV	R0, R5
		MOV	R1, R8
		MOV	R7, R8
		MOV	R2, R4
		BL	sub_32A
		MOV	R3, R10
		MOV	R2, R11
		SUBS	R0, R0,	R3
		SBCS	R1, R2
		BCC	loc_316
		MOV	R1, R2
		MOV	R0, R3
		MOV	R2, R4
		BL	sub_480
		SUBS	R5, R5,	R0
		SBC.W	R8, R7,	R1
		MOV	R7, R9
		MOV	R2, R4
		MOVS	R0, #1
		MOVS	R1, #0
		BL	sub_480
		ADDS.W	R9, R7,	R0
		ADCS	R6, R1

loc_316:				@ CODE XREF: sub_2C8+14j sub_2C8+2Aj
		SUBS	R0, R4,	#0
		SUB.W	R4, R4,	#1
		BGT	loc_2DE
		MOV	R0, R9
		MOV	R1, R6
		MOV	R2, R5
		MOV	R3, R8
		POP.W	{R4-R12,PC}
@ End of function sub_2C8


@ =============== S U B	R O U T	I N E =======================================


sub_32A:				@ CODE XREF: sub_238+28p sub_2C8+1Ep ...
		CMP	R2, #0x20
		BLT	loc_338
		SUBS	R2, #0x20
		LSR.W	R0, R1,	R2
		MOVS	R1, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_338:				@ CODE XREF: sub_32A+2j
		LSR.W	R3, R1,	R2
		LSRS	R0, R2
		RSB.W	R2, R2,	#0x20
		LSLS	R1, R2
		ORRS	R0, R1
		MOV	R1, R3
		BX	LR
@ End of function sub_32A

@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR sub_290

loc_34A:				@ CODE XREF: sub_290+34j
		CMP	R1, #0
		IT ge
		BXGE	LR
		ADDS	R0, R0,	#1
		LSLS	R1, R1,	#1
		IT eq
		BICEQ.W	R0, R0,	#1
		BX	LR
@ END OF FUNCTION CHUNK	FOR sub_290

@ =============== S U B	R O U T	I N E =======================================


sub_35C:
		PUSH	{R4}
		CLZ.W	R12, R0
		LSL.W	R0, R0,	R12
		ORRS.W	R4, R0,	R1
		ITT eq
		POPEQ	{R4}
		BXEQ	LR
		CBZ	R1, loc_386
		RSB.W	R4, R12, #0x20
		LSR.W	R4, R1,	R4
		LSLS.W	R1, R1,	R12
		IT ne
		MOVNE	R1, #1
		ORRS	R1, R4
		ORRS	R0, R1

loc_386:				@ CODE XREF: sub_35C+14j
		SUB.W	R1, R3,	R12
		ADDS	R3, R1,	#7
		MOV.W	R1, R0,LSL#24
		MOV.W	R0, R0,LSR#8
		ITTT mi
		MOVMI	R0, #0
		POPMI	{R4}
		BXMI	LR
		ADD.W	R0, R0,	R3,LSL#23
		ADD	R0, R2
		CMP	R1, #0
		ITT ge
		POPGE	{R4}
		BXGE	LR
		ADDS	R0, R0,	#1
		LSLS	R1, R1,	#1
		IT eq
		BICEQ.W	R0, R0,	#1
		POP	{R4}
		BX	LR
@ End of function sub_35C


@ =============== S U B	R O U T	I N E =======================================


sub_3B8:				@ CODE XREF: sub_89F8+14p
		PUSH.W	{R4-R8,R10,R11,LR}
		MOVS	R3, #0
		MOV	R2, R3
		SUBS	R3, R3,	R0
		SBCS	R2, R1
		BLT	loc_3CE
		MOVS	R0, #0
		MOV	R1, R0
		POP.W	{R4-R8,R10,R11,PC}
@ ---------------------------------------------------------------------------

loc_3CE:				@ CODE XREF: sub_3B8+Cj
		UBFX.W	R2, R1,	#20, #11
		UBFX.W	R1, R1,	#0, #20
		ORR.W	R5, R1,	#0x100000
		MOV.W	R11, #0
		LSLS	R1, R2,	#31
		BNE	loc_3E8
		ADDS	R0, R0,	R0
		ADCS	R5, R5
		SUBS	R2, R2,	#1

loc_3E8:				@ CODE XREF: sub_3B8+28j
		MOVS	R7, #0
		MOV	R4, R0
		MOVW	R1, #0x1FF
		MOV	R0, R7
		ADD.W	R10, R1, R2,ASR#1
		MOV	R6, R7
		MOV	R8, R0

loc_3FA:				@ CODE XREF: sub_3B8+78j
		MOV	R2, R0
		MOVS	R0, #0
		MOV.W	R1, #0x100000
		BL	sub_32A
		ADDS	R2, R0,	R7
		ADCS	R1, R6
		ADDS	R3, R7,	R2
		ADC.W	R0, R6,	R1
		SUBS.W	R12, R4, R3
		SBCS.W	R12, R5, R0
		BCC	loc_424
		SUBS	R4, R4,	R3
		SBC.W	R5, R5,	R0
		MOV	R7, R2
		MOV	R6, R1

loc_424:				@ CODE XREF: sub_3B8+60j
		ADDS	R4, R4,	R4
		ADD.W	R0, R8,	#1
		ADCS	R5, R5
		MOV	R8, R0
		CMP	R0, #0x34
		BLE	loc_3FA
		ADDS	R1, R7,	R7
		ADC.W	R0, R6,	R6
		SUBS	R1, R1,	R4
		SBCS	R0, R5
		BCS	loc_446
		MOV.W	R2, #0xFFFFFFFF
		MOV	R3, R2
		B	loc_44A
@ ---------------------------------------------------------------------------

loc_446:				@ CODE XREF: sub_3B8+84j
		MOVS	R2, #0
		MOV	R3, R2

loc_44A:				@ CODE XREF: sub_3B8+8Cj
		ADDS.W	R0, R11, R7
		ADC.W	R1, R6,	R10,LSL#20
		POP.W	{R4-R8,R10,R11,LR}
		B.W	sub_49E
@ End of function sub_3B8

@ ---------------------------------------------------------------------------
		.balign 4,0
@ START	OF FUNCTION CHUNK FOR Startup

InitRAM:				@ CODE XREF: Startup+4j
		LDR	R4, off_478
		LDR	R5, off_47C
		B	loc_470
@ ---------------------------------------------------------------------------

loc_462:				@ CODE XREF: Startup+332j
		LDR	R0, [R4,#0xC]
		ORR.W	R3, R0,	#1
		LDMIA.W	R4, {R0-R2}
		BLX	R3
		ADDS	R4, #0x10

loc_470:				@ CODE XREF: Startup+320j
		CMP	R4, R5
		BCC	loc_462
		BL	GotoMain
@ END OF FUNCTION CHUNK	FOR Startup
@ ---------------------------------------------------------------------------
off_478:	.long RAMInitCalls	@ DATA XREF: Startup:InitRAMr
off_47C:	.long RAMInitData	@ DATA XREF: Startup+31Er

@ =============== S U B	R O U T	I N E =======================================


sub_480:				@ CODE XREF: sub_2C8+32p sub_2C8+44p ...
		CMP	R2, #0x20
		BLT	loc_48E
		SUBS	R2, #0x20
		LSL.W	R1, R0,	R2
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_48E:				@ CODE XREF: sub_480+2j
		LSLS	R1, R2
		RSB.W	R3, R2,	#0x20
		LSR.W	R3, R0,	R3
		ORRS	R1, R3
		LSLS	R0, R2
		BX	LR
@ End of function sub_480


@ =============== S U B	R O U T	I N E =======================================


sub_49E:				@ CODE XREF: sub_3B8+9Ep sub_4BC+9Ap
		PUSH	{R4,LR}
		SUBS	R4, R2,	#0
		SBCS.W	R4, R3,	#0
		BGE	locret_4BA
		ADDS	R0, R0,	#1
		ADC.W	R1, R1,	#0
		ADDS	R2, R2,	R2
		ADCS	R3, R3
		ORRS	R2, R3
		BNE	locret_4BA
		BIC.W	R0, R0,	#1

locret_4BA:				@ CODE XREF: sub_49E+8j sub_49E+16j
		POP	{R4,PC}
@ End of function sub_49E


@ =============== S U B	R O U T	I N E =======================================


sub_4BC:

anonymous_0	=  0
arg_8		=  8

		PUSH.W	{R4-R8,R10,R11,LR}
		MOV	R10, R2
		MOV	R11, R3
		CBZ	R1, loc_4CC
		CLZ.W	R2, R1
		B	loc_4D2
@ ---------------------------------------------------------------------------

loc_4CC:				@ CODE XREF: sub_4BC+8j
		CLZ.W	R2, R0
		ADDS	R2, #0x20

loc_4D2:				@ CODE XREF: sub_4BC+Ej
		MOV	R8, R2
		BL	sub_480
		MOV	R4, R0
		MOV	R7, R1
		ORR.W	R0, R0,	R10
		ORR.W	R1, R1,	R11
		MOV	R3, R10
		MOV	R2, R11
		ORRS	R0, R1
		BEQ	loc_514
		MOV	R1, R2
		ORRS.W	R0, R3,	R1
		BEQ	loc_528
		RSB.W	R2, R8,	#0x40
		MOV	R0, R10
		BL	sub_32A
		MOV	R5, R0
		MOV	R6, R1
		MOV	R0, R10
		MOV	R1, R11
		MOV	R2, R8
		BL	sub_480
		ORRS	R0, R1
		BEQ	loc_51C
		MOVS	R0, #1
		B	loc_51E
@ ---------------------------------------------------------------------------

loc_514:				@ CODE XREF: sub_4BC+2Ej
		MOV	R0, R4
		MOV	R1, R7

locret_518:				@ CODE XREF: sub_4BC+86j
		POP.W	{R4-R8,R10,R11,PC}
@ ---------------------------------------------------------------------------

loc_51C:				@ CODE XREF: sub_4BC+52j
		MOVS	R0, #0

loc_51E:				@ CODE XREF: sub_4BC+56j
		ORRS	R5, R0
		ORR.W	R6, R6,	R0,ASR#31
		ORRS	R4, R5
		ORRS	R7, R6

loc_528:				@ CODE XREF: sub_4BC+36j
		LDR	R0, [SP,#0x20+arg_8]
		LSLS	R3, R4,	#0x15
		LSRS	R4, R4,	#0xB
		SUB.W	R0, R0,	R8
		MOVS	R2, #0
		LSRS	R5, R7,	#0xB
		ORR.W	R4, R4,	R7,LSL#21
		ADDS	R0, #0xA
		BPL	loc_544
		MOVS	R0, #0
		MOV	R1, R0
		B	locret_518
@ ---------------------------------------------------------------------------

loc_544:				@ CODE XREF: sub_4BC+80j
		LSLS	R1, R0,	#0x14
		ADDS	R0, R2,	R4
		ADCS	R1, R5
		LDRD.W	R4, R5,	[SP,#0x20]
		ADDS	R0, R0,	R4
		ADCS	R1, R5
		POP.W	{R4-R8,R10,R11,LR}
		B	sub_49E
@ End of function sub_4BC


@ =============== S U B	R O U T	I N E =======================================


ADC_IRQ0_Handler:			@ DATA XREF: ROM:000000E8o
		LDR	R1, off_568
		MOVS	R0, #1
		STR	R0, [R1]
		LDR	R1, dword_56C
		STR.W	R0, [R1,#0xF8]
		BX	LR
@ End of function ADC_IRQ0_Handler

@ ---------------------------------------------------------------------------
		.balign 4,0
off_568:	.long ADC_IRQ0_flag	@ DATA XREF: ADC_IRQ0_Handlerr
dword_56C:	.long 0x40043000	@ DATA XREF: ADC_IRQ0_Handler+6r

@ =============== S U B	R O U T	I N E =======================================


SetADCState:				@ CODE XREF: StopFire+86p StopFire+8Ep ...
		PUSH	{R4,R5}
		MOV	R3, R0
		MOVS	R4, #0
		LDR	R0, dword_600
		MOV.W	R2, #0x40000000
		CMP	R3, #1
		BEQ	loc_5A0
		CMP	R3, #2
		BEQ	loc_5C4
		CMP	R3, #0xE
		BNE	loc_5FC
		CMP	R1, #0
		LDR	R1, [R2,#0x38]
		BIC.W	R1, R1,	#0xF000000
		STR	R1, [R2,#0x38]
		LDR	R1, [R2,#0x38]
		BEQ	loc_5EA
		ORR.W	R1, R1,	#0x1000000
		STR	R1, [R2,#0x38]
		MOVS	R2, #0
		B	loc_5F4
@ ---------------------------------------------------------------------------

loc_5A0:				@ CODE XREF: SetADCState+Ej
		CMP	R1, #0
		LDR	R1, [R2,#0x38]
		BIC.W	R1, R1,	#0xF0
		STR	R1, [R2,#0x38]
		LDR	R1, [R2,#0x38]
		BEQ	loc_5B8
		ORR.W	R1, R1,	#0x10
		STR	R1, [R2,#0x38]
		MOVS	R2, #0
		B	loc_5C0
@ ---------------------------------------------------------------------------

loc_5B8:				@ CODE XREF: SetADCState+3Cj
		STR	R1, [R2,#0x38]
		LDR	R1, dword_604
		STR	R4, [R1]
		MOVS	R2, #1

loc_5C0:				@ CODE XREF: SetADCState+46j
		MOVS	R1, #2
		B	loc_5F6
@ ---------------------------------------------------------------------------

loc_5C4:				@ CODE XREF: SetADCState+12j
		CMP	R1, #0
		LDR	R1, [R2,#0x38]
		BIC.W	R1, R1,	#0xF00
		STR	R1, [R2,#0x38]
		LDR	R1, [R2,#0x38]
		BEQ	loc_5DC
		ORR.W	R1, R1,	#0x100
		STR	R1, [R2,#0x38]
		MOVS	R2, #0
		B	loc_5E6
@ ---------------------------------------------------------------------------

loc_5DC:				@ CODE XREF: SetADCState+60j
		STR	R1, [R2,#0x38]
		LDR	R1, dword_604
		ADDS	R1, R1,	#4
		STR	R4, [R1]
		MOVS	R2, #1

loc_5E6:				@ CODE XREF: SetADCState+6Aj
		MOVS	R1, #4
		B	loc_5F6
@ ---------------------------------------------------------------------------

loc_5EA:				@ CODE XREF: SetADCState+24j
		STR	R1, [R2,#0x38]
		LDR	R1, dword_604
		ADDS	R1, #0x14
		STR	R4, [R1]
		MOVS	R2, #1

loc_5F4:				@ CODE XREF: SetADCState+2Ej
		MOVS	R1, #0x40

loc_5F6:				@ CODE XREF: SetADCState+52j
					@ SetADCState+78j
		POP	{R4,R5}
		B.W	SetGPIOMode
@ ---------------------------------------------------------------------------

loc_5FC:				@ CODE XREF: SetADCState+16j
		POP	{R4,R5}
		BX	LR
@ End of function SetADCState

@ ---------------------------------------------------------------------------
dword_600:	.long 0x40004040	@ DATA XREF: SetADCState+6r
dword_604:	.long 0x40004844	@ DATA XREF: SetADCState+4Ar
					@ SetADCState+6Er ...

@ =============== S U B	R O U T	I N E =======================================


BatteryVoltsToPercent:			@ CODE XREF: NewBatteryVoltage+6p
		CMP.W	R0, #310
		BHI	loc_612
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_612:				@ CODE XREF: BatteryVoltsToPercent+4j
		CMP.W	R0, #410
		BCC	loc_61C
		MOVS	R0, #100
		BX	LR
@ ---------------------------------------------------------------------------

loc_61C:				@ CODE XREF: BatteryVoltsToPercent+Ej
		LDR	R2, off_658
		MOVS	R1, #1

loc_620:				@ CODE XREF: BatteryVoltsToPercent+26j
		LDRH.W	R3, [R2,R1,LSL#1]
		CMP	R3, R0
		BCS	loc_630
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		CMP	R1, #11
		BCC	loc_620

loc_630:				@ CODE XREF: BatteryVoltsToPercent+1Ej
		LDRH.W	R3, [R2,R1,LSL#1]
		ADD.W	R2, R2,	R1,LSL#1
		ADD.W	R1, R1,	R1,LSL#2
		LDRH.W	R2, [R2,#-2]
		SUBS	R0, R0,	R2
		ADD.W	R0, R0,	R0,LSL#2
		SUBS	R3, R3,	R2
		LSLS	R0, R0,	#1
		SDIV.W	R0, R0,	R3
		ADD.W	R0, R0,	R1,LSL#1
		SUBS	R0, #10
		UXTB	R0, R0
		BX	LR
@ End of function BatteryVoltsToPercent

@ ---------------------------------------------------------------------------
off_658:	.long BatteryVoltsTable	@ DATA XREF: BatteryVoltsToPercent:loc_61Cr

@ =============== S U B	R O U T	I N E =======================================


NewBatteryVoltage:			@ CODE XREF: ReadBatteryVoltage:loc_73Cp
		PUSH	{R4,R5,LR}
		LDR	R4, off_6D8
		LDRH	R0, [R4,#0x20]
		BL	BatteryVoltsToPercent
		ADD.W	R5, R4,	#0x28
		STRB	R0, [R4,#0xD]
		LDR	R0, [R5]
		LSLS	R1, R0,	#19
		BMI	loc_67A
		LSLS	R1, R0,	#21
		BPL	loc_67A
		MOVS	R1, #100
		STRB	R1, [R4,#0xD]

loc_67A:				@ CODE XREF: NewBatteryVoltage+14j
					@ NewBatteryVoltage+18j
		LDRB	R2, [R4,#0xE]
		LDRB	R1, [R4,#0xD]
		CMP	R2, R1
		BEQ	loc_68E
		LDRB	R3, [R4,#0x10]
		ADDS	R3, R3,	#1
		UXTB	R3, R3
		STRB	R3, [R4,#0x10]
		CMP	R3, #3
		BCS	loc_692

loc_68E:				@ CODE XREF: NewBatteryVoltage+24j
		LSLS	R3, R0,	#0x18
		BPL	loc_6B6

loc_692:				@ CODE XREF: NewBatteryVoltage+30j
		LDRH	R2, [R4,#0x20]
		MOVS	R3, #0
		STRH	R2, [R4,#0x22]
		STRB	R3, [R4,#0x10]
		STRB	R1, [R4,#0xE]
		CMP.W	R2, #300
		BLS	loc_6B8
		LDR	R1, off_6DC	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDRB	R1, [R1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R1, #1
		BEQ	loc_6AE
		CMP	R1, #3
		BNE	loc_6B8

loc_6AE:				@ CODE XREF: NewBatteryVoltage+4Cj
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R5]
		B	loc_6B8
@ ---------------------------------------------------------------------------

loc_6B6:				@ CODE XREF: NewBatteryVoltage+34j
		STRB	R2, [R4,#0xD]

loc_6B8:				@ CODE XREF: NewBatteryVoltage+44j
					@ NewBatteryVoltage+50j ...
		LDRB	R0, [R4,#0xD]
		LDR	R1, [R5]
		CMP	R0, #0xA
		BCS	loc_6C6
		ORR.W	R1, R1,	#0x80000
		B	loc_6CA
@ ---------------------------------------------------------------------------

loc_6C6:				@ CODE XREF: NewBatteryVoltage+62j
		BIC.W	R1, R1,	#0x80000

loc_6CA:				@ CODE XREF: NewBatteryVoltage+68j
		STR	R1, [R5]
		MOVS	R1, #10
		UDIV.W	R0, R0,	R1
		STRB	R0, [R4,#0xF]
		POP	{R4,R5,PC}
@ End of function NewBatteryVoltage

@ ---------------------------------------------------------------------------
		.balign 4,0
off_6D8:	.long byte_2000003C	@ DATA XREF: NewBatteryVoltage+2r
off_6DC:	.long Screen		@ DATA XREF: NewBatteryVoltage+46r
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

@ =============== S U B	R O U T	I N E =======================================


ReadBatteryVoltage:			@ CODE XREF: EventHandler+84Cp
					@ EventHandler+F54p ...
		PUSH	{R4-R6,LR}
		LDR	R5, off_748
		LDRH	R0, [R5]
		LSLS	R0, R0,	#0x17
		BMI	locret_70C
		SUB.W	R4, R5,	#0x28

loc_6EE:				@ CODE XREF: ReadBatteryVoltage+2Aj
		LDRB	R0, [R4,#0x12]
		CMP	R0, #0x10
		BCS	loc_70E
		MOVS	R0, #0x12	@ VBAT
		BL	ADC_Read	@ R0: Channel
		LDR	R1, [R4,#0x40]
		ADD	R0, R1
		STR	R0, [R4,#0x40]
		LDRB	R0, [R4,#0x12]
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#0x12]
		LDRH	R0, [R5]
		LSLS	R0, R0,	#0x10
		BMI	loc_6EE

locret_70C:				@ CODE XREF: ReadBatteryVoltage+8j
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_70E:				@ CODE XREF: ReadBatteryVoltage+12j
		LDR	R0, [R5]
		BIC.W	R0, R0,	#0x8000
		STR	R0, [R5]
		LDR	R0, [R4,#0x40]
		LSRS	R0, R0,	#7
		STR	R0, [R4,#0x40]
		UXTH	R0, R0
		STRH	R0, [R4,#0x20]
		LDRB	R1, [R4,#0x13]
		CMP	R1, #0x64
		BHI	loc_740
		LDRH	R1, [R4,#0x22]
		CMP	R1, R0
		BLS	loc_732
		SUBS	R2, R1,	R0
		CMP	R2, #3
		BGT	loc_73C

loc_732:				@ CODE XREF: ReadBatteryVoltage+4Aj
		CMP	R0, R1
		BLS	loc_740
		SUBS	R0, R0,	R1
		CMP	R0, #3
		BLE	loc_740

loc_73C:				@ CODE XREF: ReadBatteryVoltage+50j
		BL	NewBatteryVoltage

loc_740:				@ CODE XREF: ReadBatteryVoltage+44j
					@ ReadBatteryVoltage+54j ...
		MOVS	R0, #0
		STRB	R0, [R4,#0x12]
		STR	R0, [R4,#0x40]
		POP	{R4-R6,PC}
@ End of function ReadBatteryVoltage

@ ---------------------------------------------------------------------------
off_748:	.long dword_20000064	@ DATA XREF: ReadBatteryVoltage+2r

@ =============== S U B	R O U T	I N E =======================================


CheckBattery:				@ CODE XREF: RegulateBuckBoost+Cp
		PUSH.W	{R4-R10,LR}
		LDR		R6, =dfData	@off_83C
		MOVS	R4, #0
		LDRB.N	R0, [R6,#(dfMode-dfData)]
		CMP	R0, #6
		BEQ	loc_79C
		LDRH.N	R5, [R6,#(dfPower-dfData)]

loc_75C:				@ CODE XREF: CheckBattery+5Cj
		MOVS	R7, #0
		MOV.W	R8, #280	@ corresponds to 2.8V

loc_762:				@ CODE XREF: CheckBattery+28j
		MOVS	R0, #0x12	@ Vbat channel
		BL	ADC_Read	@ R0: Channel
		LSRS	R2, R0,	#3
		CMP	R2, R8
		BHI	loc_776
		ADDS	R7, R7,	#1
		UXTB	R7, R7
		CMP	R7, #3
		BCC	loc_762

loc_776:				@ CODE XREF: CheckBattery+20j
		CMP	R7, #3
		BEQ	loc_7AA
		LDR	R7, off_840
		LDR	R0, [R7]
		LSLS	R1, R0,	#23
		BPL	loc_836
		LDRB.N	R1, [R6,#(dfMode-dfData)]
		CMP	R1, #4
		BEQ	loc_7BE
		CMP	R1, #6
		BEQ	loc_7BE
		CBZ	R1, loc_7BA
		CMP	R1, #1
		BEQ	loc_7BA
		CMP	R1, #2
		BEQ	loc_7BA
		CMP	R1, #3
		BEQ	loc_7BA
		B	loc_836
@ ---------------------------------------------------------------------------

loc_79C:				@ CODE XREF: CheckBattery+Cj
		LDR	R0, off_844	@ Saved	config # in start mode
		LDRB	R0, [R0]	@ Saved	config # in start mode
		ADD.W	R0, R6,	R0,LSL#1
		LDRH.W	R5, [R0,#(dfSavedCfgPwr-dfData)]
		B	loc_75C
@ ---------------------------------------------------------------------------

loc_7AA:				@ CODE XREF: CheckBattery+2Cj
		BL	StopFire
		LDR	R1, off_848
		MOVS	R0, #28
		STRB	R0, [R1]
		MOVS	R0, #1

locret_7B6:				@ CODE XREF: CheckBattery+E8j
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_7BA:				@ CODE XREF: CheckBattery+40j
					@ CheckBattery+44j ...
		LSLS	R3, R0,	#8
		BMI	loc_836

loc_7BE:				@ CODE XREF: CheckBattery+3Aj
					@ CheckBattery+3Ej
		LDR	R6, off_84C
		MOV.W	R9, #290
		LDRH.N	R3, [R6,#(LowBatVolts-BBCNextMode)]
		CBZ	R3, loc_7F6
		CMP.W	R5, #600	@ TODO:	should be 750 (pwr)
		BLS	loc_7F6
		LDR.W	R12, [R6,#(dword_200000D8-BBCNextMode)]
		CMP.W	R12, #100
		BNE	loc_7F6
		CMP	R2, R9
		BCC	loc_7F6
		SUB.W	R12, R2, #290
		MOV.W	R8, #100
		MUL.W	R12, R12, R8
		SUB.W	R3, R3,	#290
		UDIV.W	R3, R12, R3
		CMP	R3, #10
		BCS	loc_7F6
		MOVS	R4, #1

loc_7F6:				@ CODE XREF: CheckBattery+7Aj
					@ CheckBattery+80j ...
		LSLS	R3, R0,	#2
		BMI	loc_802
		CMP	R2, R9
		BCC	loc_802
		CBNZ	R4, loc_804
		B	loc_836
@ ---------------------------------------------------------------------------

loc_802:				@ CODE XREF: CheckBattery+ACj
					@ CheckBattery+B0j
		CBZ	R4, loc_80E

loc_804:				@ CODE XREF: CheckBattery+B2j
		MOVW	R2, #60000	@ TODO:	should be 75000
		UDIV.W	R2, R2,	R5
		STR.N	R2, [R6,#(dword_200000D8-BBCNextMode)]

loc_80E:				@ CODE XREF: CheckBattery:loc_802j
		ORR.W	R2, R0,	#0x400000
		LDR	R3, off_850
		MOVS	R0, #5
		STR	R2, [R7]
		STRB	R0, [R3]
		CMP	R1, #4
		BEQ	loc_822
		CMP	R1, #6
		BNE	loc_82C

loc_822:				@ CODE XREF: CheckBattery+D0j
		LDR.N	R0, [R6,#(dword_200000D8-BBCNextMode)]
		CMP	R0, #5
		BLS	loc_82C
		SUBS	R0, R0,	#1
		STR.N	R0, [R6,#(dword_200000D8-BBCNextMode)]

loc_82C:				@ CODE XREF: CheckBattery+D4j
					@ CheckBattery+DAj
		BIC.W	R0, R2,	#0x20000000

loc_830:				@ CODE XREF: CheckBattery:loc_83Aj
		STR	R0, [R7]
		MOVS	R0, #0
		B	locret_7B6
@ ---------------------------------------------------------------------------

loc_836:				@ CODE XREF: CheckBattery+34j
					@ CheckBattery+4Ej ...
		BIC.W	R0, R0,	#0x400000

loc_83A:
		B	loc_830
@ End of function CheckBattery

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool
@off_83C:	.long dfData		@ DATA XREF: CheckBattery+4r
off_840:	.long dword_20000064	@ DATA XREF: CheckBattery+2Er
off_844:	.long ConfigIndex	@ DATA XREF: CheckBattery:loc_79Cr
					@ Saved	config # in start mode
off_848:	.long Event		@ DATA XREF: CheckBattery+62r
off_84C:	.long BBCNextMode	@ DATA XREF: CheckBattery:loc_7BEr
off_850:	.long ShowWeakBatFlag	@ DATA XREF: CheckBattery+C6r

@ =============== S U B	R O U T	I N E =======================================


sub_854:				@ DATA XREF: sub_A94+2Co ROM:off_C44o

var_14		= -0x14

		PUSH	{R2-R6,LR}
		LDR	R4, off_988
		MOVS	R6, #1
		LDR	R0, dword_98C
		LDRB	R1, [R4,#3]
		MOVS	R5, #0
		CMP	R1, #5		@ switch 5 cases
		BCS	def_864		@ jumptable 00000864 default case
		TBB.W	[PC,R1]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_864:	.byte 3			@ jump table for switch	statement
		.byte 0xC
		.byte 0x2E
		.byte 0x15
		.byte 0x1F
		.balign 2,0

loc_86E:				@ CODE XREF: sub_854+10j
		MOVS	R0, #0xFF	@ jumptable 00000864 case 0
		BL	sub_22B8
		BL	j_DisplayRefresh
		BL	sub_1348
		MOVS	R0, #5
		B	loc_886
@ ---------------------------------------------------------------------------

loc_880:				@ CODE XREF: sub_854+10j
		BL	j_DisplayRefresh @ jumptable 00000864 case 1
		MOVS	R0, #10

loc_886:				@ CODE XREF: sub_854+2Aj
		BL	SetTimeoutValue
		LDRB	R0, [R4,#3]
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#3]

locret_890:				@ CODE XREF: sub_854+42j sub_854+56j
		POP	{R2-R6,PC}
@ ---------------------------------------------------------------------------

loc_892:				@ CODE XREF: sub_854+10j
		LDR	R0, [R0]	@ jumptable 00000864 case 3
		CMP	R0, #0
		BNE	locret_890
		MOVS	R0, #4
		STRB	R0, [R4,#3]
		POP.W	{R2-R6,LR}
		MOVS	R0, #100
		B.W	SetTimeoutValue
@ ---------------------------------------------------------------------------

loc_8A6:				@ CODE XREF: sub_854+10j
		LDR	R0, [R0]	@ jumptable 00000864 case 4
		CMP	R0, #0
		BEQ	locret_890
		STRB	R6, [R4]
		STRB	R5, [R4,#3]
		STRH	R5, [R4,#6]
		LDR	R0, off_990
		BL	CreateTimeout	@ in R0	Callback fct
					@ out R0 Timeout # or 255
		LDR	R0, off_994
		LDRB	R0, [R0]
		POP.W	{R2-R6,LR}
		B.W	DeleteTimeout	@ R0 Timeout #
@ ---------------------------------------------------------------------------

def_864:				@ CODE XREF: sub_854+Ej sub_854+10j
		LDRSB.W	R0, [R4]	@ jumptable 00000864 default case
		CMP	R0, #0x30
		BGE	loc_8D2
		ADDS	R0, R0,	#4
		STRB	R0, [R4]
		B	loc_8E2
@ ---------------------------------------------------------------------------

loc_8D2:				@ CODE XREF: sub_854+76j
		LDRB	R0, [R4,#2]
		CMP	R0, #3
		BNE	loc_8DC
		STRB	R5, [R4,#2]
		STRB	R0, [R4,#3]

loc_8DC:				@ CODE XREF: sub_854+82j
		MOVS	R0, #200
		BL	SetTimeoutValue

loc_8E2:				@ CODE XREF: sub_854+7Cj
		LDRB	R0, [R4]
		BL	sub_1798
		LDR	R0, [R4,#8]
		LDRH	R1, [R4,#0xC]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	sub_50A0
		LDRB	R2, [R4,#0x11]
		LDR.W	R0, [R4,#0xD]
		BFI.W	R1, R2,	#0, #8
		BL	sub_50A0
		LDR.W	R0, [R4,#0x12]
		LDRH	R1, [R4,#0x16]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	sub_50A0
		STRD.W	R5, R6,	[SP]
		MOVS	R3, #0x34
		MOVS	R2, #0x62
		MOVS	R1, #0x10
		MOVS	R0, #0x1A
		BL	sub_80BA
		STRD.W	R6, R5,	[SP]
		MOVS	R3, #0x34
		MOVS	R2, #0x62
		MOVS	R1, #0x10
		MOVS	R0, #0x1A
		BL	sub_80BA
		ADR	R2, aScore	@ "SCORE"
		MOVS	R1, #18
		MOVS	R0, #27
		BL	DisplayTextXY
		ADR	R2, aBest	@ "BEST"
		MOVS	R1, #36
		MOVS	R0, #27
		BL	DisplayTextXY
		LDRH	R0, [R4,#6]
		BL	sub_24DC
		MOV	R2, R0
		LDRH	R3, [R4,#6]
		MOVS	R1, #18
		MOVS	R0, #71
		BL	sub_7FB8
		LDR	R4, off_9A8
		LDRH.W	R0, [R4,#0xBE]!
		BL	sub_24DC
		MOV	R2, R0
		LDRH	R3, [R4]
		MOVS	R1, #36
		MOVS	R0, #71
		BL	sub_7FB8
		BL	j_DisplayRefresh
		BL	sub_1348
		MOVS	R0, #4
		BL	SetTimeoutValue
		LDR	R1, off_9AC
		MOVS	R0, #50
		STRB	R0, [R1]
		POP	{R2-R6,PC}
@ End of function sub_854

@ ---------------------------------------------------------------------------
		.balign 4,0
off_988:	.long byte_2000014A	@ DATA XREF: sub_854+2r
dword_98C:	.long 0x40004900	@ DATA XREF: sub_854+6r
off_990:	.long sub_9B0+1		@ DATA XREF: sub_854+5Er
off_994:	.long CurrentTimeout	@ DATA XREF: sub_854+64r
aScore:		.ascii "SCORE"          @ DATA XREF: sub_854+E0o
		.byte 0
		.balign 4,0
aBest:		.ascii "BEST"           @ DATA XREF: sub_854+EAo
		.byte 0
		.balign 4,0
off_9A8:	.long dfData		@ DATA XREF: sub_854+106r
off_9AC:	.long UpdateDFTimer	@ DATA XREF: sub_854+12Ar

@ =============== S U B	R O U T	I N E =======================================


sub_9B0:				@ DATA XREF: sub_854+5Eo ROM:off_990o	...
		PUSH	{R4-R6,LR}
		LDR	R4, off_A6C
		LDR	R0, dword_A70
		MOVS	R5, #0
		STRH	R5, [R4,#6]
		LDR	R0, [R0]
		CBZ	R0, loc_9D4
		MOV	R0, R4
		LDRB	R1, [R4,#3]
		LDRSB.W	R0, [R0]
		CBZ	R1, loc_A2C
		ADDS	R0, R0,	#1
		SXTB	R0, R0
		STRB	R0, [R4]
		CMP	R0, #4
		BEQ	loc_A28
		B	loc_A3A
@ ---------------------------------------------------------------------------

loc_9D4:				@ CODE XREF: sub_9B0+Cj
		LDR	R1, off_A6C
		MOVS	R0, #0x7F
		ADDS	R1, #8
		BL	sub_13A4
		LDR	R1, off_A6C
		MOVS	R0, #0x7F
		ADDS	R1, #0xD
		BL	sub_13A4
		LDR	R1, off_A6C
		MOVS	R0, #0x7F
		ADDS	R1, #0x12
		BL	sub_13A4
		MOVS	R0, #0x10
		BL	sub_6758
		MOVS	R0, #0x18
		STRB	R0, [R4]
		STRB	R5, [R4,#3]
		LDR	R0, off_A74
		STRB	R5, [R4,#4]
		STRB	R5, [R4,#2]
		LDRB	R0, [R0]
		BL	DeleteTimeout	@ R0 Timeout #
		LDR	R0, off_A78
		LDR	R0, [R0,#4]
		BL	SetRandSeed
		LDR	R0, off_A7C
		BL	CreateTimeout	@ in R0	Callback fct
					@ out R0 Timeout # or 255
		LDR	R0, off_A80
		BL	CreateTimeout	@ in R0	Callback fct
					@ out R0 Timeout # or 255
		POP.W	{R4-R6,LR}
		LDR	R0, off_A84
		B.W	CreateTimeout	@ in R0	Callback fct
					@ out R0 Timeout # or 255
@ ---------------------------------------------------------------------------

loc_A28:				@ CODE XREF: sub_9B0+20j
		STRB	R5, [R4,#3]
		B	loc_A3A
@ ---------------------------------------------------------------------------

loc_A2C:				@ CODE XREF: sub_9B0+16j
		B	loc_A2E
@ ---------------------------------------------------------------------------

loc_A2E:				@ CODE XREF: sub_9B0:loc_A2Cj
		SUBS	R0, R0,	#1
		SXTB	R0, R0
		STRB	R0, [R4]
		CBNZ	R0, loc_A3A
		MOVS	R0, #1
		STRB	R0, [R4,#3]

loc_A3A:				@ CODE XREF: sub_9B0+22j sub_9B0+7Aj ...
		MOVS	R0, #0x64
		BL	sub_6758
		LDRB	R0, [R4]
		ADR	R2, aFlappyBird	@ "Flappy Bird"
		ADDS	R0, #0x10
		UXTB	R1, R0
		MOVS	R0, #0xA
		BL	DisplayTextXY
		LDRB	R0, [R4]
		ADDS	R0, #0x10
		UXTB	R0, R0
		BL	sub_504C
		BL	j_DisplayRefresh
		BL	sub_1348
		POP.W	{R4-R6,LR}
		MOVS	R0, #0xA
		B.W	SetTimeoutValue
@ End of function sub_9B0

@ ---------------------------------------------------------------------------
		.balign 4,0
off_A6C:	.long byte_2000014A	@ DATA XREF: sub_9B0+2r
					@ sub_9B0:loc_9D4r ...
dword_A70:	.long 0x40004900	@ DATA XREF: sub_9B0+4r
off_A74:	.long CurrentTimeout	@ DATA XREF: sub_9B0+4Er
off_A78:	.long TMR0Counter	@ DATA XREF: sub_9B0+5Ar
off_A7C:	.long sub_A94+1		@ DATA XREF: sub_9B0+62r
off_A80:	.long sub_8834+1	@ DATA XREF: sub_9B0+68r
off_A84:	.long sub_24F8+1	@ DATA XREF: sub_9B0+72r
aFlappyBird:	.ascii "Flappy Bird"    @ DATA XREF: sub_9B0+92o
		.byte 0

@ =============== S U B	R O U T	I N E =======================================


sub_A94:				@ DATA XREF: sub_9B0+62o ROM:off_A7Co
		PUSH.W	{R2-R8,LR}
		LDR	R4, off_C38
		MOVS	R7, #0
		LDRB	R0, [R4,#2]
		CBZ	R0, loc_AC6
		STRB	R7, [R4,#4]
		LDR	R1, off_C3C
		STRB	R7, [R4,#3]
		LDRH	R0, [R4,#6]
		LDRH.W	R2, [R1,#0xBE]
		CMP	R2, R0
		BCS	loc_AB4
		STRH.W	R0, [R1,#0xBE]

loc_AB4:				@ CODE XREF: sub_A94+1Aj
		LDR	R0, off_C40
		LDRB	R0, [R0]
		BL	DeleteTimeout	@ R0 Timeout #
		POP.W	{R2-R8,LR}
		LDR	R0, off_C44
		B.W	CreateTimeout	@ in R0	Callback fct
					@ out R0 Timeout # or 255
@ ---------------------------------------------------------------------------

loc_AC6:				@ CODE XREF: sub_A94+Aj
		LDR	R0, [R4,#8]
		STR	R0, [SP]
		LDRH	R1, [R4,#0xC]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	sub_50A0
		LDRB	R2, [R4,#0x11]
		LDR.W	R0, [R4,#0xD]
		BFI.W	R1, R2,	#0, #8
		BL	sub_50A0
		LDR.W	R0, [R4,#0x12]
		STR	R0, [SP]
		LDRH	R1, [R4,#0x16]
		STRH.W	R1, [SP,#4]
		LDR	R1, [SP,#4]
		BL	sub_50A0
		LDR.W	R8, off_C38
		LDRB	R0, [R4,#3]
		ADD.W	R8, R8,	#8
		ADD.W	R5, R8,	#5
		ADDS	R6, R5,	#5
		CBZ	R0, loc_B1C
		CMP	R0, #1
		BEQ	loc_B16
		CMP	R0, #2
		BNE	loc_B26
		LDRB	R1, [R6]
		SUBS	R1, R1,	#2
		STRB	R1, [R6]

loc_B16:				@ CODE XREF: sub_A94+76j
		LDRB	R1, [R5]
		SUBS	R1, R1,	#2
		STRB	R1, [R5]

loc_B1C:				@ CODE XREF: sub_A94+72j
		LDRB.W	R1, [R8]
		SUBS	R1, R1,	#2
		STRB.W	R1, [R8]

loc_B26:				@ CODE XREF: sub_A94+7Aj
		LDRB	R1, [R4,#4]
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		STRB	R1, [R4,#4]
		CMP	R1, #0x20
		BNE	loc_B3C
		STRB	R7, [R4,#4]
		CMP	R0, #2
		BCS	loc_B3C
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#3]

loc_B3C:				@ CODE XREF: sub_A94+9Cj sub_A94+A2j
		LDRB.W	R0, [R8]
		SUBS	R0, #0x81
		CMP	R0, #0x48
		BCS	loc_B50
		LDR	R1, off_C38
		MOVS	R0, #0x7F
		ADDS	R1, #8
		BL	sub_13A4

loc_B50:				@ CODE XREF: sub_A94+B0j
		LDRB	R0, [R5]
		SUBS	R0, #0x81
		CMP	R0, #0x48
		BCS	loc_B62
		LDR	R1, off_C38
		MOVS	R0, #0x7F
		ADDS	R1, #0xD
		BL	sub_13A4

loc_B62:				@ CODE XREF: sub_A94+C2j
		LDRB	R0, [R6]
		SUBS	R0, #0x81
		CMP	R0, #0x48
		BCS	loc_B74
		LDR	R1, off_C38
		MOVS	R0, #0x7F
		ADDS	R1, #0x12
		BL	sub_13A4

loc_B74:				@ CODE XREF: sub_A94+D4j
		LDRB.W	R0, [R8]
		CMP	R0, #0x15
		BEQ	loc_B88
		LDRB	R0, [R5]
		CMP	R0, #0x15
		BEQ	loc_B88
		LDRB	R0, [R6]
		CMP	R0, #0x15
		BNE	loc_B8E

loc_B88:				@ CODE XREF: sub_A94+E6j sub_A94+ECj
		LDRH	R0, [R4,#6]
		ADDS	R0, R0,	#1
		STRH	R0, [R4,#6]

loc_B8E:				@ CODE XREF: sub_A94+F2j
		LDRSB.W	R0, [R4]
		MOVS	R7, #1
		CMP	R0, #0x30
		BGE	loc_BA0
		UXTB	R0, R0
		BL	sub_504C
		B	loc_BA2
@ ---------------------------------------------------------------------------

loc_BA0:				@ CODE XREF: sub_A94+102j
		STRB	R7, [R4,#2]

loc_BA2:				@ CODE XREF: sub_A94+10Aj
		LDRB.W	R0, [R8]
		MOV	R1, R8
		SUBS	R0, #0x20
		CMP	R0, #0xD8
		BCC	loc_BC6
		LDRB	R2, [R1,#1]
		LDRSB.W	R0, [R4]
		ADDS	R2, R2,	#6
		CMP	R2, R0
		BGT	loc_BC4
		LDRB.W	R1, [R8,#3]
		SUBS	R1, #0xC
		CMP	R1, R0
		BGE	loc_BC6

loc_BC4:				@ CODE XREF: sub_A94+124j
		STRB	R7, [R4,#2]

loc_BC6:				@ CODE XREF: sub_A94+118j sub_A94+12Ej
		LDRB	R0, [R5]
		SUBS	R0, #0x20
		CMP	R0, #0xD8
		BCC	loc_BE4
		LDRB	R1, [R5,#1]
		LDRSB.W	R0, [R4]
		ADDS	R1, R1,	#6
		CMP	R1, R0
		BGT	loc_BE2
		LDRB	R1, [R5,#3]
		SUBS	R1, #0xC
		CMP	R1, R0
		BGE	loc_BE4

loc_BE2:				@ CODE XREF: sub_A94+144j
		STRB	R7, [R4,#2]

loc_BE4:				@ CODE XREF: sub_A94+138j sub_A94+14Cj
		LDRB	R0, [R6]
		SUBS	R0, #0x20
		CMP	R0, #0xD8
		BCC	loc_C02
		LDRB	R1, [R6,#1]
		LDRSB.W	R0, [R4]
		ADDS	R1, R1,	#6
		CMP	R1, R0
		BGT	loc_C00
		LDRB	R1, [R6,#3]
		SUBS	R1, #0xC
		CMP	R1, R0
		BGE	loc_C02

loc_C00:				@ CODE XREF: sub_A94+162j
		STRB	R7, [R4,#2]

loc_C02:				@ CODE XREF: sub_A94+156j sub_A94+16Aj
		LDRH	R0, [R4,#6]
		BL	sub_24DC
		MOV	R5, R0
		LDRH	R0, [R4,#6]
		BL	sub_24DC
		NEGS	R0, R0
		MOVS	R1, #0x40
		ADD.W	R0, R1,	R0,LSL#2
		UXTB	R0, R0
		LDRH	R3, [R4,#6]
		MOV	R2, R5
		MOVS	R1, #4
		BL	sub_7FB8
		BL	j_DisplayRefresh
		BL	sub_1348
		POP.W	{R2-R8,LR}
		MOVS	R0, #4
		B.W	SetTimeoutValue
@ End of function sub_A94

@ ---------------------------------------------------------------------------
		.balign 4,0
off_C38:	.long byte_2000014A	@ DATA XREF: sub_A94+4r sub_A94+62r ...
off_C3C:	.long dfData		@ DATA XREF: sub_A94+Er
off_C40:	.long CurrentTimeout	@ DATA XREF: sub_A94:loc_AB4r
off_C44:	.long sub_854+1		@ DATA XREF: sub_A94+2Cr

@ =============== S U B	R O U T	I N E =======================================


InitHardware:				@ CODE XREF: GotoMain:Mainp
		PUSH	{R4,LR}
		BL	UnlockRegisters
		BL	InitDevices
		MOVS	R3, #0		@ WKEN = 0 (no wake-up event)
		MOVS	R2, #1		@ RSTEN	= 1 (enable watchdog reset)
		MOVS	R1, #2		@ WDT Reset Delay Period is 18 * WDT_CLK (1.8ms)
		MOV.W	R0, #0x700	@ TOUTSEL = 2^18 * WDT_CLK (26.214s)
		BL	SetupWDT
		MOV.W	R1, #0x40000000
		MOVS	R0, #0
		STR.W	R0, [R1,#0x100]	@ Enable registers protection
		BL	InitUART0
		BL	InitGPIO
		BL	InitGPIO_SPI0
		BL	InitGPIO_EADC
		BL	InitPWM
		BL	InitTimers
		BL	InitUSB
		ADR	R0, aJoyetechAprom @ "\n\nJoyetech APROM\n"
		BL	PutTextf
		LDR	R0, off_CB4
		LDR	R2, [R0]
		LDR	R0, off_CB8
		LDR	R1, [R0]
		POP.W	{R4,LR}
		ADR	R0, aCpuDhzPllDhz @ "CPU @ %dHz(PLL@ %dHz)\n"
		B.W	PutTextf
@ End of function InitHardware

@ ---------------------------------------------------------------------------
		.balign 4,0
aJoyetechAprom:	.byte 0xA		@ DATA XREF: InitHardware+3Eo
		.byte 0xA
		.ascii "Joyetech APROM"
		.byte 0xA
		.byte 0
		.balign 4,0
off_CB4:	.long PLLClock		@ DATA XREF: InitHardware+44r
off_CB8:	.long CPUClock		@ DATA XREF: InitHardware+48r
aCpuDhzPllDhz:	.ascii "CPU @ %dHz(PLL@ %dHz)" @ DATA XREF: InitHardware+50o
		.byte 0xA
		.byte 0
		.balign 2,0
@ START	OF FUNCTION CHUNK FOR sub_2C38

loc_CD4:				@ CODE XREF: sub_2C38+8j
		BL	UnlockRegisters
		BL	ChipOneShotReset

loc_CDC:				@ CODE XREF: sub_2C38:loc_CDCj
		B	loc_CDC
@ END OF FUNCTION CHUNK	FOR sub_2C38

@ =============== S U B	R O U T	I N E =======================================


PLL_PD_enable:				@ CODE XREF: SetPLL+8p
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		ORR.W	R1, R1,	#0x10000 @ PLL PD enable
		STR.W	R1, [R0,#0x240]
		BX	LR
@ End of function PLL_PD_enable


@ =============== S U B	R O U T	I N E =======================================


DevClkEnable:				@ CODE XREF: InitDevices+3Ep
					@ InitDevices+56p ...
		LSRS	R1, R0,	#30
		LSLS	R1, R1,	#2
		ADD.W	R1, R1,	#0x40000000
		LDR.W	R2, [R1,#0x204]
		AND.W	R3, R0,	#0x1F
		MOVS	R0, #1
		LSLS	R0, R3
		ORRS	R2, R0
		STR.W	R2, [R1,#0x204]
		BX	LR
@ End of function DevClkEnable


@ =============== S U B	R O U T	I N E =======================================


SetPLL:					@ CODE XREF: SetCoreClock+54p
					@ SetCoreClock+60p

var_28		= -0x28

		PUSH.W	{R3-R11,LR}
		MOV	R4, R1
		MOV	R6, R0
		BL	PLL_PD_enable
		MOV.W	R11, #0x40000000
		LDR	R7, dword_E68
		LDR.W	R8, dword_E6C
		LDR.W	R1, [R11,#0x200]
		MOV	R0, R11
		CBZ	R6, loc_D52
		ORR.W	R1, R1,	#4
		STR.W	R1, [R0,#0x200]	@ HIRC enable
		MOVS	R0, #0x10
		BL	WaitClockReady
		MOV.W	R0, #0x80000
		MOV	R9, R8
		MOVS	R1, #4
		STR	R0, [SP]

loc_D42:				@ CODE XREF: SetPLL+5Cj
		LDR	R0, dword_E70
		LDR	R2, dword_E74
		ADD	R0, R4
		CMP	R0, R2
		BHI	loc_D6A
		MOV.W	R10, #0
		B	loc_D8C
@ ---------------------------------------------------------------------------

loc_D52:				@ CODE XREF: SetPLL+1Cj
		ORR.W	R1, R1,	#1
		STR.W	R1, [R0,#0x200]	@ HXT enable
		MOVS	R0, #1
		BL	WaitClockReady
		MOVS	R0, #0
		MOV	R9, R7
		MOVS	R1, #2
		STR	R0, [SP]
		B	loc_D42
@ ---------------------------------------------------------------------------

loc_D6A:				@ CODE XREF: SetPLL+3Ej
		LDR	R0, dword_E78
		LDR	R2, dword_E7C
		ADD	R0, R4
		CMP	R0, R2
		BHI	loc_D7C
		MOV.W	R10, #1
		LSLS	R4, R4,	#1
		B	loc_D8C
@ ---------------------------------------------------------------------------

loc_D7C:				@ CODE XREF: SetPLL+66j
		LDR	R0, dword_E80
		LDR	R2, dword_E84
		ADD	R0, R4
		CMP	R0, R2
		BHI	loc_E0C
		MOV.W	R10, #3
		LSLS	R4, R4,	#2

loc_D8C:				@ CODE XREF: SetPLL+44j SetPLL+6Ej
		MOVS	R5, #0
		MOV.W	R2, #-1
		MOV	R7, R5
		B	loc_DDC
@ ---------------------------------------------------------------------------

loc_D96:				@ CODE XREF: SetPLL+D2j
		UDIV.W	R12, R9, R1
		LDR	R0, dword_E88
		LDR	R3, dword_E8C
		ADD	R0, R12
		CMP	R0, R3
		BCS	loc_DDA
		LDR.W	LR, dword_E90
		LDR.W	R8, dword_E94
		MOVS	R6, #2

loc_DAE:				@ CODE XREF: SetPLL+CCj
		MUL.W	R0, R12, R6
		ADD.W	R3, R0,	LR
		CMP	R3, R8
		BHI	loc_DD0
		CMP	R0, R4
		BLS	loc_DC2
		SUBS	R3, R0,	R4
		B	loc_DC4
@ ---------------------------------------------------------------------------

loc_DC2:				@ CODE XREF: SetPLL+B0j
		SUBS	R3, R4,	R0

loc_DC4:				@ CODE XREF: SetPLL+B4j
		CMP	R3, R2
		BCS	loc_DD0
		MOVS	R2, R3
		MOV	R5, R1
		MOV	R7, R6
		BEQ	loc_DDA

loc_DD0:				@ CODE XREF: SetPLL+ACj SetPLL+BAj
		MOVW	R0, #0x201
		ADDS	R6, R6,	#1
		CMP	R6, R0
		BLS	loc_DAE

loc_DDA:				@ CODE XREF: SetPLL+96j SetPLL+C2j
		ADDS	R1, R1,	#1

loc_DDC:				@ CODE XREF: SetPLL+88j
		CMP	R1, #0x21
		BLS	loc_D96
		LDR	R0, [SP]
		ORR.W	R1, R0,	R10,LSL#14
		LDR	R0, dword_E98
		ADD.W	R0, R0,	R5,LSL#9
		ORRS	R1, R0
		SUBS	R0, R7,	#2
		ORRS	R1, R0
		STR.W	R1, [R11,#0x240]
		MOVS	R0, #4		@ PLL
		BL	WaitClockReady
		ADD.W	R0, R10, #1
		MULS	R0, R5
		UDIV.W	R0, R9,	R0
		MULS	R0, R7

locret_E08:				@ CODE XREF: SetPLL+120j SetPLL+134j ...
		POP.W	{R3-R11,PC}
@ ---------------------------------------------------------------------------

loc_E0C:				@ CODE XREF: SetPLL+78j
		CBZ	R6, loc_E2E
		LDR	R1, dword_E9C

loc_E10:				@ CODE XREF: SetPLL+126j
		STR.W	R1, [R11,#0x240]
		MOVS	R0, #4		@ PLL
		BL	WaitClockReady
		ADR	R0, dword_EA0
		LDR	R0, [R0]
		STR	R0, [SP]
		LDR.W	R1, [R11,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_E34
		MOVS	R0, #0
		B	locret_E08
@ ---------------------------------------------------------------------------

loc_E2E:				@ CODE XREF: SetPLL:loc_E0Cj
		MOVW	R1, #0xC02E
		B	loc_E10
@ ---------------------------------------------------------------------------

loc_E34:				@ CODE XREF: SetPLL+11Cj
		LSLS	R0, R1,	#0xC
		BPL	loc_E3C
		MOV	R0, R8
		B	loc_E3E
@ ---------------------------------------------------------------------------

loc_E3C:				@ CODE XREF: SetPLL+12Aj
		MOV	R0, R7

loc_E3E:				@ CODE XREF: SetPLL+12Ej
		LSLS	R2, R1,	#0xE
		BMI	locret_E08
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#0xE, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		B	locret_E08
@ End of function SetPLL

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_E68:	.long 12000000		@ DATA XREF: SetPLL+10r
dword_E6C:	.long 22118400		@ DATA XREF: SetPLL+12r
dword_E70:	.long -250000001	@ DATA XREF: SetPLL:loc_D42r
dword_E74:	.long 249999999		@ DATA XREF: SetPLL+38r
dword_E78:	.long -125000001	@ DATA XREF: SetPLL:loc_D6Ar
dword_E7C:	.long 124999999		@ DATA XREF: SetPLL+60r
dword_E80:	.long -50000000		@ DATA XREF: SetPLL:loc_D7Cr
dword_E84:	.long 75000000		@ DATA XREF: SetPLL+72r
dword_E88:	.long -1600001		@ DATA XREF: SetPLL+8Er
dword_E8C:	.long 14399999		@ DATA XREF: SetPLL+90r
dword_E90:	.long -200000000	@ DATA XREF: SetPLL+98r
dword_E94:	.long 300000000		@ DATA XREF: SetPLL+9Cr
dword_E98:	.long -1024		@ DATA XREF: SetPLL+DAr
dword_E9C:	.long 0x8C432		@ DATA XREF: SetPLL+102r
dword_EA0:	.long 0x4020201		@ DATA XREF: SetPLL+10Eo SetPLL+110r

@ =============== S U B	R O U T	I N E =======================================


CLK_PWRCTL_SetBits:			@ CODE XREF: InitDevices+6p
					@ InitDevices+1Ap
		MOV.W	R1, #0x40000000
		LDR.W	R2, [R1,#0x200]
		ORRS	R2, R0
		STR.W	R2, [R1,#0x200]
		BX	LR
@ End of function CLK_PWRCTL_SetBits


@ =============== S U B	R O U T	I N E =======================================


GetCPUClock:				@ CODE XREF: sub_6270:loc_629Ap
		PUSH	{R4,LR}
		BL	GetFrequencies
		LDR	R0, off_EC0
		LDR	R0, [R0]
		POP	{R4,PC}
@ End of function GetCPUClock

@ ---------------------------------------------------------------------------
off_EC0:	.long CPUClock		@ DATA XREF: GetCPUClock+6r

@ =============== S U B	R O U T	I N E =======================================


GetPLLFreq2:				@ CODE XREF: sub_5B30:loc_5B7Ap

var_8		= -8

		PUSH	{R3,LR}
		ADR	R0, dword_F10
		LDR	R0, [R0]
		STR	R0, [SP]
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_EDE
		MOVS	R0, #0

locret_EDC:				@ CODE XREF: GetPLLFreq2+26j
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_EDE:				@ CODE XREF: GetPLLFreq2+14j
		LSLS	R0, R1,	#0xC
		BPL	loc_EE6
		LDR	R0, dword_F14
		B	loc_EE8
@ ---------------------------------------------------------------------------

loc_EE6:				@ CODE XREF: GetPLLFreq2+1Cj
		LDR	R0, dword_F18

loc_EE8:				@ CODE XREF: GetPLLFreq2+20j
		LSLS	R2, R1,	#0xE
		BMI	locret_EDC
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#0xE, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		POP	{R3,PC}
@ End of function GetPLLFreq2

@ ---------------------------------------------------------------------------
dword_F10:	.long 0x4020201		@ DATA XREF: GetPLLFreq2+2o
					@ GetPLLFreq2+4r
dword_F14:	.long 22118400		@ DATA XREF: GetPLLFreq2+1Er
dword_F18:	.long 12000000		@ DATA XREF: GetPLLFreq2:loc_EE6r

@ =============== S U B	R O U T	I N E =======================================


sub_F1C:				@ CODE XREF: sub_6270:loc_63AAp

var_8		= -8

		PUSH	{R3,LR}
		ADR	R0, dword_F68
		LDR	R0, [R0]
		STR	R0, [SP]
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_F36
		MOVS	R0, #0

locret_F34:				@ CODE XREF: sub_F1C+26j
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_F36:				@ CODE XREF: sub_F1C+14j
		LSLS	R0, R1,	#0xC
		BPL	loc_F3E
		LDR	R0, dword_F6C
		B	loc_F40
@ ---------------------------------------------------------------------------

loc_F3E:				@ CODE XREF: sub_F1C+1Cj
		LDR	R0, dword_F70

loc_F40:				@ CODE XREF: sub_F1C+20j
		LSLS	R2, R1,	#0xE
		BMI	locret_F34
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#0xE, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		POP	{R3,PC}
@ End of function sub_F1C

@ ---------------------------------------------------------------------------
dword_F68:	.long 0x4020201		@ DATA XREF: sub_F1C+2o sub_F1C+4r
dword_F6C:	.long 0x1518000		@ DATA XREF: sub_F1C+1Er
dword_F70:	.long 0xB71B00		@ DATA XREF: sub_F1C:loc_F3Er

@ =============== S U B	R O U T	I N E =======================================


GetPLLFreq:				@ CODE XREF: InitUART0+5Ap

var_8		= -8

		PUSH	{R3,LR}
		ADR	R0, dword_FC0
		LDR	R0, [R0]
		STR	R0, [SP]
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x240]
		TST.W	R1, #0x50000
		BEQ	loc_F8E
		MOVS	R0, #0

locret_F8C:				@ CODE XREF: GetPLLFreq+26j
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_F8E:				@ CODE XREF: GetPLLFreq+14j
		LSLS	R0, R1,	#0xC
		BPL	loc_F96
		LDR	R0, dword_FC4
		B	loc_F98
@ ---------------------------------------------------------------------------

loc_F96:				@ CODE XREF: GetPLLFreq+1Cj
		LDR	R0, dword_FC8

loc_F98:				@ CODE XREF: GetPLLFreq+20j
		LSLS	R2, R1,	#14
		BMI	locret_F8C
		UBFX.W	R2, R1,	#0, #9
		UBFX.W	R3, R1,	#14, #2
		LSRS	R0, R0,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R1, R1,	#9, #5
		MULS	R0, R2
		ADDS	R1, R1,	#2
		SMULBB.W R1, R1, R3
		UDIV.W	R0, R0,	R1
		LSLS	R0, R0,	#2
		POP	{R3,PC}
@ End of function GetPLLFreq

@ ---------------------------------------------------------------------------
dword_FC0:	.long 0x4020201		@ DATA XREF: GetPLLFreq+2o
					@ GetPLLFreq+4r
dword_FC4:	.long 22118400		@ DATA XREF: GetPLLFreq+1Er
dword_FC8:	.long 12000000		@ DATA XREF: GetPLLFreq:loc_F96r
@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR sub_5184

glb_FCC:				@ CODE XREF: FlushAndSleep+8j
glb_FCC:
		LDR	R0, dword_FE8
		LDR	R1, [R0]
		ORR.W	R1, R1,	#4
		STR	R1, [R0]	@ SCR.SLEEPDEEP	= 1
		LSLS	R0, R0,	#26	@ 0x40000000 ...
		LDR.W	R1, [R0,#0x200]
		ORR.W	R1, R1,	#0x180
		STR.W	R1, [R0,#0x200]	@ PDWTCPU = PDEN = 1 (sleep at next WFI)
		WFI
		BX	LR
@ END OF FUNCTION CHUNK	FOR sub_5184
@ ---------------------------------------------------------------------------
dword_FE8:	.long 0xE000ED10	@ DATA XREF: sub_5184:glb_FCCr

@ =============== S U B	R O U T	I N E =======================================


SetCoreClock:				@ CODE XREF: InitDevices+30p
		PUSH	{R4-R6,LR}
		MOV.W	R5, #0x40000000
		MOV	R4, R0
		LDR.W	R0, [R5,#0x250]	@ CLK_STATUS
		AND.W	R6, R0,	#0x10	@ HIRCSTB
		LDR	R0, dword_1074
		CMP	R4, R0
		BHI	loc_1008
		LDR	R0, dword_1078
		CMP	R4, R0
		BCS	loc_100A

loc_1008:				@ CODE XREF: SetCoreClock+14j
		MOV	R4, R0

loc_100A:				@ CODE XREF: SetCoreClock+1Aj
		LDR.W	R0, [R5,#0x200]
		ORR.W	R0, R0,	#4
		STR.W	R0, [R5,#0x200]	@ HIRC enabled
		MOVS	R0, #0x10
		ADD.W	R5, R5,	#0x200
		BL	WaitClockReady
		LDR	R0, [R5,#0x10]
		ORR.W	R0, R0,	#7
		STR	R0, [R5,#0x10]	@ HCLKSEL = HIRC
		LDR	R0, [R5,#0x20]
		BIC.W	R0, R0,	#0xF
		STR	R0, [R5,#0x20]	@ HCLKDIV = 0
		LDR	R0, [R5]	@ CLK_PWRCTL
		SUB.W	R5, R5,	#0x200
		LSLS	R0, R0,	#31
		MOV.W	R1, R4,LSL#1
		BEQ	loc_1048	@ If HXTEN = 0
		MOVS	R0, #0
		BL	SetPLL
		MOV	R4, R0
		B	loc_105A
@ ---------------------------------------------------------------------------

loc_1048:				@ CODE XREF: SetCoreClock+50j
		MOV.W	R0, #0x80000
		BL	SetPLL
		MOV	R4, R0
		LDR.W	R0, [R5,#0x250]
		AND.W	R6, R0,	#0x10	@ HIRCSTB

loc_105A:				@ CODE XREF: SetCoreClock+5Aj
		MOVS	R1, #1		@ HCLKDIV = 1 (PLL/2)
		MOVS	R0, #2		@ HCLKSEL = PLL
		BL	HCLKSelDiv
		CBNZ	R6, loc_1070
		LDR.W	R0, [R5,#0x200]
		BIC.W	R0, R0,	#4
		STR.W	R0, [R5,#0x200]

loc_1070:				@ CODE XREF: SetCoreClock+76j
		LSRS	R0, R4,	#1
		POP	{R4-R6,PC}
@ End of function SetCoreClock

@ ---------------------------------------------------------------------------
dword_1074:	.long 72000000		@ DATA XREF: SetCoreClock+10r
dword_1078:	.long 25000000		@ DATA XREF: SetCoreClock+16r

@ =============== S U B	R O U T	I N E =======================================


HCLKSelDiv:				@ CODE XREF: SetCoreClock+72p
					@ InitDevices+14p
		PUSH.W	{R4-R8,LR}
		MOV.W	R4, #0x40000000
		MOV	R7, R0
		LDR.W	R0, [R4,#0x250]	@ CLK_STATUS
		MOV	R6, R1
		AND.W	R5, R0,	#0x10	@ HIRCSTB
		LDR.W	R0, [R4,#0x200]
		ORR.W	R0, R0,	#4
		STR.W	R0, [R4,#0x200]	@ HIRC enabled
		MOVS	R0, #0x10
		ADD.W	R4, R4,	#0x200
		BL	WaitClockReady
		LDR	R0, [R4,#0x10]
		ORR.W	R0, R0,	#7
		STR	R0, [R4,#0x10]	@ HCLKSEL = HIRC
		LDR	R0, [R4,#0x20]
		BIC.W	R0, R0,	#0xF
		ORRS	R0, R6
		STR	R0, [R4,#0x20]	@ HCLKDIV = R1
		LDR	R0, [R4,#0x10]
		BIC.W	R0, R0,	#7
		ORRS	R0, R7
		STR	R0, [R4,#0x10]	@ HCLKSEL = R0
		SUB.W	R4, R4,	#0x200
		BL	GetFrequencies
		CMP	R5, #0
		BNE	locret_10DA
		LDR.W	R0, [R4,#0x200]
		BIC.W	R0, R0,	#4
		STR.W	R0, [R4,#0x200]	@ HIRC disabled

locret_10DA:				@ CODE XREF: HCLKSelDiv+50j
		POP.W	{R4-R8,PC}
@ End of function HCLKSelDiv

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


DevClkSelDiv:				@ CODE XREF: InitDevices+48p
					@ InitDevices+60p ...
		PUSH	{R4-R6,LR}
		TST.W	R0, #0x3FC00
		BEQ	loc_1104
		LDR	R4, dword_112C
		UBFX.W	R3, R0,	#18, #2
		ADD.W	R3, R4,	R3,LSL#2
		LDR	R4, [R3]
		UBFX.W	R5, R0,	#10, #8
		UBFX.W	R6, R0,	#5, #5
		LSLS	R5, R6
		BICS	R4, R5
		ORRS	R4, R2
		STR	R4, [R3]

loc_1104:				@ CODE XREF: DevClkSelDiv+6j
		LSRS	R2, R0,	#25
		LSLS	R2, R2,	#29
		BEQ	locret_1128
		LDR	R3, dword_112C
		UBFX.W	R2, R0,	#28, #2
		SUBS	R3, #0x10
		ADD.W	R2, R3,	R2,LSL#2
		LDR	R3, [R2]
		UBFX.W	R4, R0,	#25, #3
		UBFX.W	R0, R0,	#20, #5
		LSLS	R4, R0
		BICS	R3, R4
		ORRS	R3, R1
		STR	R3, [R2]

locret_1128:				@ CODE XREF: DevClkSelDiv+28j
		POP	{R4-R6,PC}
@ End of function DevClkSelDiv

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_112C:	.long 0x40000220	@ DATA XREF: DevClkSelDiv+8r
					@ DevClkSelDiv+2Ar

@ =============== S U B	R O U T	I N E =======================================


WaitClockReady:				@ CODE XREF: SetPLL+28p SetPLL+50p ...
		PUSH	{R4,LR}
		MOV.W	R2, #0x40000000
		MOV	R4, R0
		LDR	R1, dword_1164	@ Time to wait for clock stability (loops)
		LDR.W	R0, [R2,#0x200]
		BIC.W	R0, R0,	#0x1000
		STR.W	R0, [R2,#0x200]	@ HTX Crystal type INV
		B	loc_1154
@ ---------------------------------------------------------------------------

loc_1148:				@ CODE XREF: WaitClockReady+2Cj
		SUBS	R3, R1,	#0
		SUB.W	R1, R1,	#1
		BGT	loc_1154
		MOVS	R0, #0
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_1154:				@ CODE XREF: WaitClockReady+16j
					@ WaitClockReady+1Ej
		LDR.W	R3, [R2,#0x250]
		BICS.W	R0, R4,	R3	@ Test clock stability
		BNE	loc_1148
		MOVS	R0, #1
		POP	{R4,PC}
@ End of function WaitClockReady

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_1164:	.long 2160000		@ DATA XREF: WaitClockReady+8r

@ =============== S U B	R O U T	I N E =======================================


GetCRCResult:				@ CODE XREF: CalcPageCRC+26p
		LDR	R1, dword_1198
		LDR	R0, [R1]
		AND.W	R0, R0,	#0xC0000000
		CMP.W	R0, #0x80000000
		BEQ	loc_1188
		CMP.W	R0, #0xC0000000
		BEQ	loc_118E
		CBZ	R0, loc_1188
		CMP.W	R0, #0x40000000
		BEQ	loc_1192
		MOVS	R0, #0
		BX	LR
@ ---------------------------------------------------------------------------

loc_1188:				@ CODE XREF: GetCRCResult+Cj
					@ GetCRCResult+14j
		LDR	R0, [R1,#0xC]
		UXTH	R0, R0
		BX	LR
@ ---------------------------------------------------------------------------

loc_118E:				@ CODE XREF: GetCRCResult+12j
		LDR	R0, [R1,#0xC]
		BX	LR
@ ---------------------------------------------------------------------------

loc_1192:				@ CODE XREF: GetCRCResult+1Aj
		LDR	R0, [R1,#0xC]
		UXTB	R0, R0
		BX	LR
@ End of function GetCRCResult

@ ---------------------------------------------------------------------------
dword_1198:	.long 0x40031000	@ DATA XREF: GetCRCResultr

@ =============== S U B	R O U T	I N E =======================================


CalcPageCRC:				@ CODE XREF: InitDataFlash+CCp
					@ InitDataFlash+EEp ...
		PUSH	{R4-R6,LR}
		MOV	R4, R0
		MOVS	R1, #0
		MOV.W	R3, #0x10000000
		MOVW	R2, #0xFFFF
		MOV	R0, R1
		BL	InitCRC
		MOVS	R1, #0
		LDR	R5, dword_11D0
		ADDS	R4, R4,	#4

loc_11B6:				@ CODE XREF: CalcPageCRC+24j
		LDRH.W	R0, [R4,R1,LSL#1]
		STR	R0, [R5,#4]
		ADDS	R1, R1,	#1
		CMP	R1, #0x7E
		BCC	loc_11B6
		BL	GetCRCResult
		LDR	R1, [R5]
		BIC.W	R1, R1,	#1
		STR	R1, [R5]
		POP	{R4-R6,PC}
@ End of function CalcPageCRC

@ ---------------------------------------------------------------------------
dword_11D0:	.long 0x40031000	@ DATA XREF: CalcPageCRC+16r

@ =============== S U B	R O U T	I N E =======================================


InitCRC:				@ CODE XREF: CalcPageCRC+10p
		PUSH	{R4,R5,LR}
		MOV.W	R4, #0x40000000
		LDR.W	R5, [R4,#0x204]
		ORR.W	R5, R5,	#0x80
		STR.W	R5, [R4,#0x204]
		LDR	R4, dword_1200
		STR	R2, [R4,#8]
		ORRS	R0, R1
		ORRS	R0, R3
		ORR.W	R0, R0,	#1
		STR	R0, [R4]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#2
		STR	R0, [R4]
		POP	{R4,R5,PC}
@ End of function InitCRC

@ ---------------------------------------------------------------------------
		.byte 0
		.byte 0
dword_1200:	.long 0x40031000	@ DATA XREF: InitCRC+12r

@ =============== S U B	R O U T	I N E =======================================

@ R0 = Sum of the R1 bytes at R0

Checksum:				@ CODE XREF: sub_25B8+22p sub_2788+98p ...
		PUSH	{R4,LR}
		MOV	R3, R0
		MOVS	R2, #0
		MOV	R0, R2
		B	loc_1214
@ ---------------------------------------------------------------------------

loc_120E:				@ CODE XREF: Checksum+12j
		LDRB	R4, [R3,R2]
		ADDS	R2, R2,	#1
		ADD	R0, R4

loc_1214:				@ CODE XREF: Checksum+8j
		SUBS	R1, R1,	#1
		BCS	loc_120E
		POP	{R4,PC}
@ End of function Checksum

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


sub_121C:				@ CODE XREF: ShowMainView+40p
					@ sub_90DC+5Ep
		PUSH	{R4,LR}
		MOV	R4, R1
		LDR	R1, off_1260
		LDRB	R1, [R1]
		CBNZ	R1, loc_1258
		LDR	R1, off_1264
		LDRH	R2, [R1]
		CBZ	R2, loc_1258
		MULS	R0, R0
		MOVS	R1, #0xA
		UDIV.W	R0, R0,	R1
		UDIV.W	R0, R0,	R2
		UXTH	R3, R0
		BL	ClampPowers
		LDR	R0, off_1268
		LDR	R0, [R0]
		CMP	R3, R0
		BCS	loc_1248
		MOV	R3, R0

loc_1248:				@ CODE XREF: sub_121C+28j
		CBZ	R4, loc_1254
		LDR	R0, off_126C
		LDR	R0, [R0]
		CMP	R3, R0
		BLS	loc_1254
		MOV	R3, R0

loc_1254:				@ CODE XREF: sub_121C:loc_1248j
					@ sub_121C+34j	...
		UXTH	R0, R3
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_1258:				@ CODE XREF: sub_121C+8j sub_121C+Ej
		LDR	R0, off_1270
		LDR	R3, [R0]
		B	loc_1254
@ End of function sub_121C

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
off_1260:	.long byte_2000003D	@ DATA XREF: sub_121C+4r
off_1264:	.long AtoRez		@ DATA XREF: sub_121C+Ar
off_1268:	.long AtoMinPower	@ DATA XREF: sub_121C+22r
off_126C:	.long AtoMaxPower	@ DATA XREF: sub_121C+2Er
off_1270:	.long MaxPower		@ DATA XREF: sub_121C:loc_1258r

@ =============== S U B	R O U T	I N E =======================================


GetAtoVWVolts:				@ CODE XREF: CheckMode+94p
					@ EventHandler+744p ...
		LDR	R1, off_1320
		PUSH	{R4,LR}
		LDRB	R1, [R1]
		CBNZ	R1, loc_12F8
		LDR	R1, off_1324
		LDRH	R1, [R1]
		CBZ	R1, loc_12F8
		FMSR	S0, R0
		FUITOS	S1, S0
		FMSR	S0, R1
		FUITOS	S0, S0
		FMULS	S0, S1,	S0
		CDP	p10, 0xF, c0,c2,c4, 0
		FMULS	S0, S0,	S1
		FMRS	R0, S0
		BL	sub_26A
		FMDRR	D0, R0,	R1
		BL	sub_89F8
		FMRRD	R0, R1,	D0
		BL	sub_290
		FMSR	S0, R0
		CDP	p10, 0xF, c0,c6,c0, 0
		FADDS	S0, S0,	S1
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		FMSR	S0, R0
		FUITOS	S0, S0
		BL	ClampVolts
		LDR	R0, off_1328
		FLDS	S1, [R0]
		FUITOS	S2, S1
		FCMPES	S0, S2
		FMSTAT
		BCS	loc_12F0
		FUITOS	S0, S1

loc_12F0:				@ CODE XREF: GetAtoVWVolts+76j
		LDR	R0, off_132C
		FLDS	S1, [R0]
		B	loc_12FA
@ ---------------------------------------------------------------------------

loc_12F8:				@ CODE XREF: GetAtoVWVolts+6j
					@ GetAtoVWVolts+Cj
		B	loc_1318
@ ---------------------------------------------------------------------------

loc_12FA:				@ CODE XREF: GetAtoVWVolts+82j
		FUITOS	S2, S1
		FCMPES	S0, S2
		FMSTAT
		BLE	loc_130C
		FUITOS	S0, S1

loc_130C:				@ CODE XREF: GetAtoVWVolts+92j
					@ GetAtoVWVolts+A8j
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_1318:				@ CODE XREF: GetAtoVWVolts:loc_12F8j
		FLDS	S0, flt_1330
		B	loc_130C
@ End of function GetAtoVWVolts

@ ---------------------------------------------------------------------------
		@.align 4
		.byte 0
		.byte 0
off_1320:	.long byte_2000003D	@ DATA XREF: GetAtoVWVoltsr
off_1324:	.long AtoRez		@ DATA XREF: GetAtoVWVolts+8r
off_1328:	.long AtoMinVolts	@ DATA XREF: GetAtoVWVolts+64r
off_132C:	.long AtoMaxVolts	@ DATA XREF: GetAtoVWVolts:loc_12F0r
flt_1330:	.float 330.0		@ DATA XREF: GetAtoVWVolts:loc_1318r

@ =============== S U B	R O U T	I N E =======================================


CelsiusToF:				@ CODE XREF: GetAtoTemp+82p
					@ TweakTargetVoltsTC+5Cp ...
		ADD.W	R0, R0,	R0,LSL#3
		UXTH	R0, R0
		MOVS	R1, #5
		UDIV.W	R0, R0,	R1
		ADDS	R0, #0x20
		UXTH	R0, R0
		BX	LR
@ End of function CelsiusToF

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


sub_1348:				@ CODE XREF: sub_854+24p sub_854+120p	...
		LDR	R1, off_137C
		MOVS	R2, #0
		MOV	R0, R2

loc_134E:				@ CODE XREF: sub_1348+2Ej
		STRB	R0, [R1]
		STRB	R0, [R1,#1]
		STRB	R0, [R1,#2]
		STRB	R0, [R1,#3]
		STRB	R0, [R1,#4]
		STRB	R0, [R1,#5]
		STRB	R0, [R1,#6]
		STRB	R0, [R1,#7]
		STRB	R0, [R1,#8]
		STRB	R0, [R1,#9]
		STRB	R0, [R1,#10]
		STRB	R0, [R1,#11]
		STRB	R0, [R1,#12]
		STRB	R0, [R1,#13]
		STRB	R0, [R1,#14]
		STRB	R0, [R1,#15]
		ADDS	R2, R2,	#1
		UXTB	R2, R2
		ADDS	R1, #0x10
		CMP	R2, #0x40
		BCC	loc_134E
		BX	LR
@ End of function sub_1348

@ ---------------------------------------------------------------------------
		.balign 4,0
off_137C:	.long ScreenBuffer	@ DATA XREF: sub_1348r

@ =============== S U B	R O U T	I N E =======================================


ResetWatchDog:				@ CODE XREF: WaitOnTMR2:loc_176Ap
					@ GotoMain+9064p ...
		PUSH	{R4,LR}
		BL	UnlockRegisters
		LDR	R0, dword_13A0
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x2C
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		MOV.W	R1, #0x40000000
		MOVS	R0, #0
		STR.W	R0, [R1,#0x100]
		POP	{R4,PC}
@ End of function ResetWatchDog

@ ---------------------------------------------------------------------------
dword_13A0:	.long 0x40040000	@ DATA XREF: ResetWatchDog+6r

@ =============== S U B	R O U T	I N E =======================================


sub_13A4:				@ CODE XREF: sub_9B0+2Ap sub_9B0+34p ...
		PUSH	{R4,LR}
		MOV	R4, R1
		CMP	R0, #0x7F
		BHI	locret_13DA
		STRB	R0, [R4]
		BL	Random
		MOVS	R1, #0x18
		SDIV.W	R2, R0,	R1
		MLS.W	R0, R1,	R2, R0
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		LSRS	R1, R0,	#3
		STRB	R1, [R4,#2]
		STRB	R0, [R4,#1]
		ADDS	R0, #0x28
		UXTB	R0, R0
		SUB.W	R1, R0,	#8
		RSB.W	R0, R0,	#0x40
		STRB	R1, [R4,#3]
		UBFX.W	R0, R0,	#3, #5
		STRB	R0, [R4,#4]

locret_13DA:				@ CODE XREF: sub_13A4+6j
		POP	{R4,PC}
@ End of function sub_13A4


@ =============== S U B	R O U T	I N E =======================================

@ in R0	Callback fct
@ out R0 Timeout # or 255

CreateTimeout:				@ CODE XREF: sub_854+60p sub_9B0+64p ...
		PUSH	{R4,R5,LR}
		LDR	R5, off_140C
		MOVS	R1, #1
		UXTH	R4, R0
		LDRB	R2, [R5,#2]
		MOVS	R0, #0

loc_13E8:				@ CODE XREF: CreateTimeout+28j
		TST	R1, R2
		BNE	loc_13FA
		ORRS	R2, R1
		LDR	R1, off_1410
		STRB	R2, [R5,#2]
		ADD.W	R1, R1,	R0,LSL#3
		STR	R4, [R1,#4]
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_13FA:				@ CODE XREF: CreateTimeout+Ej
		LSLS	R1, R1,	#0x19
		ADDS	R0, R0,	#1
		LSRS	R1, R1,	#0x18
		UXTB	R0, R0
		CMP	R0, #3
		BCC	loc_13E8
		MOVS	R0, #0xFF
		POP	{R4,R5,PC}
@ End of function CreateTimeout

@ ---------------------------------------------------------------------------
		.balign 4,0
off_140C:	.long TimeoutMask	@ DATA XREF: CreateTimeout+2r
off_1410:	.long TimeoutsTable	@ DATA XREF: CreateTimeout+12r

@ =============== S U B	R O U T	I N E =======================================


DrawScreen:				@ CODE XREF: EventHandler+E62p
					@ GotoMain:loc_92D2p ...
		PUSH.W	{R4-R10,LR}
		LDR	R4, off_1638
		LDR	R5, off_163C
		LDR	R7, off_1640
		LDRB	R0, [R4,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOV.W	R8, #0
		CMP	R0, #2
		BNE	loc_1448
		LDR	R1, off_1644
		LDR	R0, off_1648
		LDRH	R2, [R1]
		LDRH	R0, [R0]
		CMP	R2, R0
		BEQ	loc_1448
		CBZ	R0, loc_1448
		STRH	R0, [R1]
		MOVS	R0, #1
		STRB	R0, [R4]
		STRB.W	R8, [R5]
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R7]

loc_1448:				@ CODE XREF: DrawScreen+12j
					@ DrawScreen+1Ej ...
		LDR	R0, [R7]
		LDR	R6, off_164C
		LSLS	R1, R0,	#0xE
		BPL	loc_1542
		BIC.W	R0, R0,	#0x20000
		STR	R0, [R7]
		BL	ClearScreenBuffer
		LDRB	R0, [R4,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R0, #0x1C
		BEQ	loc_150E
		BGT	loc_1486
		CMP	R0, #0x14
		BEQ	loc_14D2
		BGT	loc_1476
		CMP	R0, #6		@ switch 6 cases
		BCS	def_2000147C	@ jumptable 2000146C default case
		TBB.W	[PC,R0]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_2000146C:	.byte 0x67		@ jump table for switch	statement
		.byte 0x2B
		.byte 0x28
		.byte 0x2B
		.byte 0x67
		.byte 0x2E
@ ---------------------------------------------------------------------------

loc_1476:				@ CODE XREF: DrawScreen+52j
		SUBS	R0, #0x15	@ switch 5 cases
		CMP	R0, #5
		BCS	def_2000147C	@ jumptable 2000146C default case
		TBB.W	[PC,R0]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_2000147C:	.byte 0x2C		@ jump table for switch	statement
		.byte 0x2F
		.byte 0x3E
		.byte 0x41
		.byte 0x44
		.balign 2,0

loc_1486:				@ CODE XREF: DrawScreen+4Cj
		CMP	R0, #0x32
		BEQ	loc_151A
		BGT	loc_14A6
		CMP	R0, #0x25
		BEQ	loc_14F6
		BGT	loc_149C
		CMP	R0, #0x1D
		BEQ	loc_14F0
		CMP	R0, #0x1F
		BNE	def_2000147C	@ jumptable 2000146C default case
		B	loc_1514
@ ---------------------------------------------------------------------------

loc_149C:				@ CODE XREF: DrawScreen+7Cj
		CMP	R0, #0x28
		BEQ	loc_14E4
		CMP	R0, #0x29
		BNE	def_2000147C	@ jumptable 2000146C default case
		B	loc_153A
@ ---------------------------------------------------------------------------

loc_14A6:				@ CODE XREF: DrawScreen+76j
		CMP	R0, #0x3B
		BEQ	loc_1520
		BGT	loc_14B6
		CMP	R0, #0x33
		BEQ	loc_14EA
		CMP	R0, #0x36
		BNE	def_2000147C	@ jumptable 2000146C default case
		B	loc_1534
@ ---------------------------------------------------------------------------

loc_14B6:				@ CODE XREF: DrawScreen+96j
		CMP	R0, #0x52
		BEQ	loc_1526
		CMP	R0, #0x53
		BNE	def_2000147C	@ jumptable 2000146C default case
		B	loc_152C
@ ---------------------------------------------------------------------------

loc_14C0:				@ CODE XREF: DrawScreen+58j
		LDRB.W	R0, [R6,#0x25]	@ jumptable 2000146C case 2
		CBNZ	R0, loc_1506

loc_14C6:				@ CODE XREF: DrawScreen+58j
		BL	ShowMainView	@ jumptable 2000146C cases 1,3
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14CC:				@ CODE XREF: DrawScreen+58j
		BL	ShowBatCharging	@ jumptable 2000146C case 5
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14D2:				@ CODE XREF: DrawScreen+50j
		BL	ShowNoAtoFound
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14D8:				@ CODE XREF: DrawScreen+68j
		BL	ShowAtoShort	@ jumptable 2000147C case 21
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14DE:				@ CODE XREF: DrawScreen+68j
		BL	ShowAtoLow	@ jumptable 2000147C case 22
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14E4:				@ CODE XREF: DrawScreen+8Aj
		BL	ShowStealthMode
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14EA:				@ CODE XREF: DrawScreen+9Aj
		BL	ShowNewCoil
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14F0:				@ CODE XREF: DrawScreen+80j
		BL	ShowDevTooHot
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14F6:				@ CODE XREF: DrawScreen+7Aj
		BL	ShowBoardTemp
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_14FC:				@ CODE XREF: DrawScreen+68j
		BL	Show10sProtec	@ jumptable 2000147C case 23
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_1502:				@ CODE XREF: DrawScreen+68j
		BL	ShowBatLow	@ jumptable 2000147C case 24

loc_1506:				@ CODE XREF: DrawScreen+B0j
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_1508:				@ CODE XREF: DrawScreen+68j
		BL	ShowBatLowLock	@ jumptable 2000147C case 25
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_150E:				@ CODE XREF: DrawScreen+4Aj
		BL	ShowKeyLock
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_1514:				@ CODE XREF: DrawScreen+86j
		BL	ShowKeyUnLock
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_151A:				@ CODE XREF: DrawScreen+74j
		BL	ShowVersion
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_1520:				@ CODE XREF: DrawScreen+94j
		BL	ShowTCRSet
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_1526:				@ CODE XREF: DrawScreen+A4j
		BL	ShowLOGOMenu
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_152C:				@ CODE XREF: DrawScreen+AAj
		BL	ShowGameMenu
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------
		B	loc_1542
@ ---------------------------------------------------------------------------

loc_1534:				@ CODE XREF: DrawScreen+A0j
		BL	ShowBattVolts
		B	def_2000147C	@ jumptable 2000146C default case
@ ---------------------------------------------------------------------------

loc_153A:				@ CODE XREF: DrawScreen+90j
		BL	ShowTiOnOff

def_2000147C:				@ CODE XREF: DrawScreen+56j
					@ DrawScreen+58j ...
		BL	DisplayRefresh	@ jumptable 2000146C default case

loc_1542:				@ CODE XREF: DrawScreen+3Aj
					@ DrawScreen+11Ej
		LDR	R1, [R7]
		LSLS	R0, R1,	#0x17
		BPL	loc_1558
		LDRB	R0, [R6,#0xE]
		CMP	R0, #1
		BEQ	loc_159C
		CBZ	R0, loc_159C
		CMP	R0, #2
		BEQ	loc_159C
		CMP	R0, #3
		BEQ	loc_159C

loc_1558:				@ CODE XREF: DrawScreen+132j
		LDRB	R0, [R5]
		ADDS	R0, R0,	#1

loc_155C:				@ CODE XREF: DrawScreen+18Cj
		STRB	R0, [R5]
		UXTB	R0, R0
		CMP	R0, #10
		BCC	def_200015B2	@ jumptable 200015B2 default case
		STRB.W	R8, [R5]
		LDRB	R0, [R4]
		CBZ	R0, loc_1576
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R4]
		BNE	def_200015B2	@ jumptable 200015B2 default case

loc_1576:				@ CODE XREF: DrawScreen+156j
		LDRB	R0, [R4,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R5, off_1650
		MOV.W	R9, #5
		MOVW	R10, #18000
		CMP	R0, #0x1D
		BEQ	loc_161A	@ jumptable 200015B2 cases 22-25
		BGT	loc_15BE
		CMP	R0, #0x15
		BEQ	loc_161A	@ jumptable 200015B2 cases 22-25
		BGT	loc_15AC
		CMP	R0, #2
		BEQ	loc_15F8
		BGT	loc_15A2
		CBZ	R0, loc_15F6
		CMP	R0, #1
		BNE	def_200015B2	@ jumptable 200015B2 default case
		B	loc_15EE	@ jumptable 200015B2 case 28
@ ---------------------------------------------------------------------------

loc_159C:				@ CODE XREF: DrawScreen+138j
					@ DrawScreen+13Aj ...
		LDRB	R0, [R5]
		ADDS	R0, R0,	#5
		B	loc_155C
@ ---------------------------------------------------------------------------

loc_15A2:				@ CODE XREF: DrawScreen+17Ej
		CMP	R0, #3
		BEQ	loc_15EE	@ jumptable 200015B2 case 28
		CMP	R0, #0x14
		BNE	def_200015B2	@ jumptable 200015B2 default case
		B	loc_161A	@ jumptable 200015B2 cases 22-25
@ ---------------------------------------------------------------------------

loc_15AC:				@ CODE XREF: DrawScreen+178j
		SUBS	R0, #0x16	@ switch 7 cases
		CMP	R0, #7
		BCS	def_200015B2	@ jumptable 200015B2 default case
		TBB.W	[PC,R0]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_200015B2:	.byte 0x32		@ jump table for switch	statement
		.byte 0x32
		.byte 0x32
		.byte 0x32
		.byte 0x2B
		.byte 0x2B
		.byte 0x1C
		.balign 2,0

loc_15BE:				@ CODE XREF: DrawScreen+172j
		CMP	R0, #0x33
		BEQ	loc_161A	@ jumptable 200015B2 cases 22-25
		BGT	loc_15DA
		CMP	R0, #0x28
		BEQ	loc_15EE	@ jumptable 200015B2 case 28
		BGT	loc_15D4
		CMP	R0, #0x1F
		BEQ	loc_15EE	@ jumptable 200015B2 case 28
		CMP	R0, #0x25
		BNE	def_200015B2	@ jumptable 200015B2 default case
		B	loc_15EE	@ jumptable 200015B2 case 28
@ ---------------------------------------------------------------------------

loc_15D4:				@ CODE XREF: DrawScreen+1B4j
		CMP	R0, #0x29
		BNE	def_200015B2	@ jumptable 200015B2 default case
		B	loc_15EE	@ jumptable 200015B2 case 28
@ ---------------------------------------------------------------------------

loc_15DA:				@ CODE XREF: DrawScreen+1AEj
		CMP	R0, #0x36
		BEQ	loc_15EE	@ jumptable 200015B2 case 28
		CMP	R0, #0x3B
		BEQ	loc_15EA
		CMP	R0, #0x52
		BEQ	loc_15EA
		CMP	R0, #0x53
		BNE	def_200015B2	@ jumptable 200015B2 default case

loc_15EA:				@ CODE XREF: DrawScreen+1CCj
					@ DrawScreen+1D0j
		BL	UpdateDataFlash

loc_15EE:				@ CODE XREF: DrawScreen+186j
					@ DrawScreen+190j ...
		LDR	R0, [R7]	@ jumptable 200015B2 case 28
		LSLS	R1, R0,	#19
		BMI	loc_1608
		B	loc_1622
@ ---------------------------------------------------------------------------

loc_15F6:				@ CODE XREF: DrawScreen+180j
		B	loc_162A
@ ---------------------------------------------------------------------------

loc_15F8:				@ CODE XREF: DrawScreen+17Cj
		LDRB.W	R0, [R6,#0x25]
		CBZ	R0, loc_161A	@ jumptable 200015B2 cases 22-25
		ORR.W	R0, R1,	#0x20000
		STR	R0, [R7]
		LSLS	R0, R0,	#0x13
		BPL	loc_1610

loc_1608:				@ CODE XREF: DrawScreen+1DEj
		STRB.W	R9, [R4,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

def_200015B2:				@ CODE XREF: DrawScreen+14Ej
					@ DrawScreen+160j ...
		POP.W	{R4-R10,PC}	@ jumptable 200015B2 default case
@ ---------------------------------------------------------------------------

loc_1610:				@ CODE XREF: DrawScreen+1F2j
					@ DrawScreen+214j
		STRB.W	R8, [R4,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		STRH.W	R10, [R5]
		B	def_200015B2	@ jumptable 200015B2 default case
@ ---------------------------------------------------------------------------

loc_161A:				@ CODE XREF: DrawScreen+170j
					@ DrawScreen+176j ...
		POP.W	{R4-R10,LR}	@ jumptable 200015B2 cases 22-25
		B.W	MainView
@ ---------------------------------------------------------------------------

loc_1622:				@ CODE XREF: DrawScreen+1E0j
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R7]
		B	loc_1610
@ ---------------------------------------------------------------------------

loc_162A:				@ CODE XREF: DrawScreen:loc_15F6j
		LDRB.W	R0, [R6,#0x7C]
		LSLS	R0, R0,	#0x1F
		BEQ	def_200015B2	@ jumptable 200015B2 default case
		STRH.W	R8, [R5]
		B	def_200015B2	@ jumptable 200015B2 default case
@ End of function DrawScreen

@ ---------------------------------------------------------------------------
off_1638:	.long ScreenDuration	@ DATA XREF: DrawScreen+4r
off_163C:	.long byte_20000081	@ DATA XREF: DrawScreen+6r
off_1640:	.long dword_20000064	@ DATA XREF: DrawScreen+8r
off_1644:	.long CurrentFD		@ DATA XREF: DrawScreen+14r
off_1648:	.long FireDuration	@ DATA XREF: DrawScreen+16r
off_164C:	.long dfData		@ DATA XREF: DrawScreen+36r
off_1650:	.long SleepTimer	@ DATA XREF: DrawScreen+164r

@ =============== S U B	R O U T	I N E =======================================


MainView:				@ CODE XREF: DrawScreen+20Ap
					@ sub_3738:loc_3850p ...
		LDR	R0, off_168C
		LDRB	R1, [R0,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R1, #1
		BNE	loc_1672
		LDR	R1, dword_1690
		LDR	R1, [R1]	@ PD3 (left btn)
		CBZ	R1, loc_1672
		LDR	R1, dword_1690
		SUBS	R1, R1,	#4
		LDR	R1, [R1]	@ PD2 (right btn)
		CBZ	R1, loc_1672
		LDR	R1, dword_1690
		ADDS	R1, #0x34
		LDR	R1, [R1]	@ PE0 (fire)
		CBNZ	R1, loc_1678

loc_1672:				@ CODE XREF: MainView+6j MainView+Cj ...
		LDR	R2, off_1694
		MOVS	R1, #3
		STRH	R1, [R2]

loc_1678:				@ CODE XREF: MainView+1Cj
		LDR	R1, off_1698
		LDR	R2, [R1]
		ORR.W	R2, R2,	#0x20000
		STR	R2, [R1]
		MOVS	R1, #1
		STRB	R1, [R0,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R1, #0x1E
		STRB	R1, [R0]
		BX	LR
@ End of function MainView

@ ---------------------------------------------------------------------------
off_168C:	.long ScreenDuration	@ DATA XREF: MainViewr
dword_1690:	.long 0x400048CC	@ DATA XREF: MainView+8r MainView+Er ...
off_1694:	.long HideLogo		@ DATA XREF: MainView:loc_1672r
off_1698:	.long dword_20000064	@ DATA XREF: MainView:loc_1678r

@ =============== S U B	R O U T	I N E =======================================

@ Writes 2kB from RAM R1 to DF R0

FMCWrite800:				@ CODE XREF: FMCEraseWrite800+2Ep
		PUSH	{R4-R7,LR}
		MOVS	R2, #0
		MOVS	R6, #0x21	@ Flash	32-Bits	program
		LDR	R3, dword_16CC
		MOVS	R7, #1
		MOV.W	R12, #0x200	@ # of words in	2kB

loc_16AA:				@ CODE XREF: FMCWrite800+28j
		LDR.W	R4, [R1,R2,LSL#2]
		ADD.W	R5, R0,	R2,LSL#2
		STR	R6, [R3,#0xC]
		STR	R5, [R3,#4]
		STR	R4, [R3,#8]
		STR	R7, [R3,#0x10]

loc_16BA:				@ CODE XREF: FMCWrite800+22j
		LDR	R4, [R3,#0x10]
		CMP	R4, #0
		BNE	loc_16BA
		ADDS	R2, R2,	#1
		CMP	R2, R12
		BCC	loc_16AA
		MOVS	R0, #0
		POP	{R4-R7,PC}
@ End of function FMCWrite800

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_16CC:	.long 0x4000C000	@ DATA XREF: FMCWrite800+6r

@ =============== S U B	R O U T	I N E =======================================

@ Compares 2kB (0x800) DF @R0 with RAM @R1

FMCVerif800:				@ CODE XREF: sub_2788+144p
					@ sub_2788+1D2p
		PUSH	{R4-R7,LR}
		MOV	R4, R0
		MOVS	R0, #0
		LDR	R2, dword_1708
		MOVS	R6, #1
		MOV	R5, R0
		ASRS	R7, R2,	#21

loc_16DE:				@ CODE XREF: FMCVerif800+30j
		ADD.W	R3, R4,	R0,LSL#2
		STR	R5, [R2,#0xC]	@ Flash	32-bit read
		STR	R3, [R2,#4]
		STR	R5, [R2,#8]
		STR	R6, [R2,#0x10]

loc_16EA:				@ CODE XREF: FMCVerif800+1Ej
		LDR	R3, [R2,#0x10]
		CMP	R3, #0
		BNE	loc_16EA
		LDR	R3, [R2,#8]
		LDR.W	R12, [R1,R0,LSL#2]
		ADD.W	R0, R0,	#1
		CMP	R3, R12
		BNE	locret_1704
		CMP	R0, R7
		BCC	loc_16DE
		MOVS	R0, #0

locret_1704:				@ CODE XREF: FMCVerif800+2Cj
		POP	{R4-R7,PC}
@ End of function FMCVerif800

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_1708:	.long 0x4000C000	@ DATA XREF: FMCVerif800+6r

@ =============== S U B	R O U T	I N E =======================================

@ Erase	& writes 2kB from RAM R1 to DF R0

FMCEraseWrite800:			@ CODE XREF: sub_2788+130p
					@ sub_2788+1C2p
		LDR	R2, dword_1748
		PUSH	{LR}
		MOVS	R3, #0x22	@ Flash	page erase
		STR	R3, [R2,#0xC]
		STR	R0, [R2,#4]	@ Page address
		MOVS	R3, #1
		STR	R3, [R2,#0x10]	@ Go

loc_171A:				@ CODE XREF: FMCEraseWrite800+12j
		LDR	R3, [R2,#0x10]
		CMP	R3, #0
		BNE	loc_171A	@ Wait for completion
		LDR	R3, [R2]
		LSLS	R3, R3,	#25	@ failed?
		BPL	loc_1734	@ if success
		LDR	R3, [R2]
		ORR.W	R3, R3,	#0x40
		STR	R3, [R2]	@ clear	fail flag
		MOV.W	R2, #-1
		B	loc_1736
@ ---------------------------------------------------------------------------

loc_1734:				@ CODE XREF: FMCEraseWrite800+18j
		MOVS	R2, #0

loc_1736:				@ CODE XREF: FMCEraseWrite800+26j
		ADDS	R2, R2,	#1
		BEQ	loc_1742
		BL	FMCWrite800	@ Writes 2kB from RAM R1 to DF R0
		MOVS	R0, #0
		POP	{PC}
@ ---------------------------------------------------------------------------

loc_1742:				@ CODE XREF: FMCEraseWrite800+2Cj
		MOVS	R0, #1
		POP	{PC}
@ End of function FMCEraseWrite800

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_1748:	.long 0x4000C000	@ DATA XREF: FMCEraseWrite800r

@ =============== S U B	R O U T	I N E =======================================

@ Waits	R0 ms

WaitOnTMR2:				@ CODE XREF: EventHandler+21Cp
					@ SSD1327_Init+44p ...
		PUSH	{R4-R6,LR}
		LDR	R5, off_1774
		MOV	R4, R0
		LDR	R0, [R5]
		BIC.W	R0, R0,	#4
		STR	R0, [R5]
		B	loc_176E
@ ---------------------------------------------------------------------------

loc_175C:				@ CODE XREF: WaitOnTMR2+24j
		LDR	R0, [R5]
		LSLS	R1, R0,	#29
		BPL	loc_176A
		BIC.W	R0, R0,	#4
		SUBS	R4, R4,	#1
		STR	R0, [R5]

loc_176A:				@ CODE XREF: WaitOnTMR2+14j
		BL	ResetWatchDog

loc_176E:				@ CODE XREF: WaitOnTMR2+Ej
		CMP	R4, #0
		BNE	loc_175C
		POP	{R4-R6,PC}
@ End of function WaitOnTMR2

@ ---------------------------------------------------------------------------
off_1774:	.long dword_20000064	@ DATA XREF: WaitOnTMR2+2r

@ =============== S U B	R O U T	I N E =======================================


TickWait_us:				@ CODE XREF: ReadAtoTemp+46p
					@ ReadAtoTemp+5Cp ...
		LDR	R1, off_1794
		LDR	R1, [R1]
		MULS	R0, R1
		MOV.W	R1, #0xE000E000
		STR	R0, [R1,#0x14]	@ SysTick reload value
		MOVS	R0, #0
		STR	R0, [R1,#0x18]	@ Clear	SysTick
		MOVS	R0, #5
		STR	R0, [R1,#0x10]	@ Use core clk,	multishot

loc_178C:				@ CODE XREF: TickWait_us+18j
		LDR	R0, [R1,#0x10]
		LSLS	R0, R0,	#0xF
		BPL	loc_178C
		BX	LR
@ End of function TickWait_us

@ ---------------------------------------------------------------------------
off_1794:	.long CPUClockMHz	@ DATA XREF: TickWait_usr

@ =============== S U B	R O U T	I N E =======================================


sub_1798:				@ CODE XREF: sub_854+90p

var_8		= -8

		PUSH	{R3,LR}
		LDR	R2, off_17AC
		MOVS	R3, #0x10
		STR	R2, [SP]
		MOV	R1, R0
		MOV	R2, R3
		MOVS	R0, #0xA
		BL	sub_805E
		POP	{R3,PC}
@ End of function sub_1798

@ ---------------------------------------------------------------------------
off_17AC:	.long byte_DB84		@ DATA XREF: sub_1798+2r

@ =============== S U B	R O U T	I N E =======================================


sub_17B0:				@ CODE XREF: SSD1327_Refresh+Ap
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOV	R5, R3
		MOV	R6, R2
		MOV	R7, R1
		MOVS	R0, #0x15
		BL	DisplayWriteByte
		MOV	R0, R4
		BL	DisplayWriteByte
		MOV	R0, R7
		BL	DisplayWriteByte
		MOVS	R0, #0x75
		BL	DisplayWriteByte
		MOV	R0, R6
		BL	DisplayWriteByte
		MOV	R0, R5
		POP.W	{R4-R8,LR}
		B.W	DisplayWriteByte
@ End of function sub_17B0


@ =============== S U B	R O U T	I N E =======================================


ADCDisable:				@ CODE XREF: DevicesOnOff+4Cp
		LDR	R1, [R0,#0x50]
		BIC.W	R1, R1,	#1
		STR	R1, [R0,#0x50]
		BX	LR
@ End of function ADCDisable

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


ADCSetTrigChan:				@ CODE XREF: ADC_Read+1Ep
		PUSH	{R4,LR}
		ADD.W	R0, R0,	R1,LSL#2
		LDR.W	R1, [R0,#0x80]!
		LDR	R4, dword_180C
		ANDS	R1, R4
		STR	R1, [R0]
		LDR	R1, [R0]
		ORRS	R2, R3
		ORRS	R1, R2
		STR	R1, [R0]
		POP	{R4,PC}
@ End of function ADCSetTrigChan

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_180C:	.long 0xFFE0FFF0	@ DATA XREF: ADCSetTrigChan+Ar

@ =============== S U B	R O U T	I N E =======================================


InitGPIO_EADC:				@ CODE XREF: InitHardware+2Ep
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x38]
		AND.W	R1, R1,	#0xF0000000
		STR	R1, [R0,#0x38]
		LDR	R1, [R0,#0x38]
		LDR	R2, dword_1834
		ORRS	R1, R2
		STR	R1, [R0,#0x38]	@ PB0-PB6 = EADC analog	input chan 0-4,13-14
		MOV.W	R0, #0x40004000
		LDR	R1, [R0,#0x44]
		ORR.W	R1, R1,	#0x7F0000
		STR	R1, [R0,#0x44]	@ PB0-PB6 = digital input path disabled
		BX	LR
@ End of function InitGPIO_EADC

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_1834:	.long 0x1111111		@ DATA XREF: InitGPIO_EADC+Er

@ =============== S U B	R O U T	I N E =======================================


ADCEnable:				@ CODE XREF: ADC_Read+Ap
		LDR	R2, [R0,#0x50]
		BIC.W	R2, R2,	#0x100
		STR	R2, [R0,#0x50]	@ Single-end analog
		LDR	R2, [R0,#0x50]
		ORR.W	R1, R1,	#1
		ORRS	R2, R1
		STR	R2, [R0,#0x50]	@ ADC enable
		BX	LR
@ End of function ADCEnable


@ =============== S U B	R O U T	I N E =======================================

@ R0: Channel

ADC_Read:				@ CODE XREF: ReadBatteryVoltage+16p
					@ CheckBattery+18p ...
		PUSH	{R4-R6,LR}
		LDR	R5, dword_18AC
		MOV	R4, R0
		MOVS	R1, #0
		MOV	R0, R5
		BL	ADCEnable
		MOVS	R1, #6
		MOV	R0, R5
		BL	ADCSetSamplingTime
		MOV	R3, R4
		MOVS	R2, #0
		MOV	R1, R3
		MOV	R0, R5
		BL	ADCSetTrigChan
		MOVS	R6, #1
		STR.W	R6, [R5,#0xF8]	@ Clear	interrupt flag
		LDR	R0, [R5,#0x50]
		ORR.W	R0, R0,	#4
		STR	R0, [R5,#0x50]	@ Enable ADC IRQ0
		LDR.W	R0, [R5,#0xD0]
		LSLS	R6, R4
		ORRS	R0, R6
		STR.W	R0, [R5,#0xD0]	@ Enable IRQ0 for module R0
		MOVS	R0, #0x2A
		BL	NVICEnableInt
		LDR	R0, off_18B0
		MOVS	R1, #0
		STR	R1, [R0]
		STR	R6, [R5,#0x54]	@ Start	conversion

loc_1896:				@ CODE XREF: ADC_Read+4Ej
		LDR	R2, [R0]
		CMP	R2, #0
		BEQ	loc_1896	@ Wait for interrupt
		LDR	R0, [R5,#0x50]
		BIC.W	R0, R0,	#4
		STR	R0, [R5,#0x50]	@ Disable interrupts
		LDR.W	R0, [R5,R4,LSL#2] @ Read data
		UXTH	R0, R0
		POP	{R4-R6,PC}
@ End of function ADC_Read

@ ---------------------------------------------------------------------------
dword_18AC:	.long 0x40043000	@ DATA XREF: ADC_Read+2r
off_18B0:	.long ADC_IRQ0_flag	@ DATA XREF: ADC_Read+42r

@ =============== S U B	R O U T	I N E =======================================


ADCSetSamplingTime:			@ CODE XREF: ADC_Read+12p
		LDR	R2, [R0,#0x50]
		BIC.W	R2, R2,	#0x70000
		STR	R2, [R0,#0x50]
		LDR	R2, [R0,#0x50]
		LDR	R3, dword_18CC
		ADD.W	R1, R3,	R1,LSL#16
		ORRS	R2, R1
		STR	R2, [R0,#0x50]
		BX	LR
@ End of function ADCSetSamplingTime

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_18CC:	.long 0xFFFF0000	@ DATA XREF: ADCSetSamplingTime+Ar

@ =============== S U B	R O U T	I N E =======================================


FMCCheckDFBA:				@ CODE XREF: InitDataFlash+B6p
		PUSH	{R4-R6,LR}
		MOV	R4, R0
		LDRB	R0, [R0]
		MOV.W	R5, #0x1E000
		LSLS	R0, R0,	#0x1F
		BNE	loc_18E4
		LDR	R0, [R4,#4]
		CMP	R0, R5
		BEQ	loc_1922

loc_18E4:				@ CODE XREF: FMCCheckDFBA+Cj
		BL	EnableConfigUpdate
		MOV.W	R0, #0x300000
		BL	FMCErasePage
		LDR	R0, [R4]
		MOVS	R1, #2
		BIC.W	R0, R0,	#1
		STRD.W	R0, R5,	[R4]
		MOV	R0, R4
		BL	FMCWriteVerif
		CMP	R0, #0
		BLT	loc_191A
		MOVS	R1, #2
		MOV	R0, R4
		BL	FMCReadConfig
		LDRB	R0, [R4]
		LSLS	R0, R0,	#0x1F
		BNE	loc_191A
		LDR	R0, [R4,#4]
		CMP	R0, R5
		BEQ	loc_191E

loc_191A:				@ CODE XREF: FMCCheckDFBA+34j
					@ FMCCheckDFBA+42j
		MOVS	R0, #0
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_191E:				@ CODE XREF: FMCCheckDFBA+48j
		BL	ChipOneShotReset @ Does	not return (obviously)

loc_1922:				@ CODE XREF: FMCCheckDFBA+12j
		MOVS	R0, #1
		POP	{R4-R6,PC}
@ End of function FMCCheckDFBA


@ =============== S U B	R O U T	I N E =======================================


FMCRead100:				@ CODE XREF: InitDataFlash+E8p
					@ FMCLoadDFFirstPage+38p ...
		PUSH	{R4-R6,LR}
		MOV	R5, R1
		MOV	R6, R0
		MOVS	R4, #0

loc_192E:				@ CODE XREF: FMCRead100+14j
		ADDS	R0, R6,	R4
		BL	FMCReadWord32
		STMIA	R5!, {R0}
		ADDS	R4, R4,	#4
		CMP	R4, #0xFF
		BLS	loc_192E
		POP	{R4-R6,PC}
@ End of function FMCRead100

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


InitDataFlash:				@ CODE XREF: InitVariables+2p
		PUSH.W	{R2-R10,LR}
		BL	UnlockRegisters2
		BL	FMCEnableISP
		MOV.W	R1, #0x800
		LDR	R0, off_1B80
		BL	MemClear
		LDR	R3, dword_1B84
		MOVS	R0, #0xB	@ Read Company ID
		STR	R0, [R3,#0xC]
		MOVS	R7, #0
		STR	R7, [R3,#4]
		MOVS	R5, #1
		STR	R5, [R3,#0x10]

loc_1964:				@ CODE XREF: InitDataFlash+28j
		LDR	R0, [R3,#0x10]
		LSLS	R0, R0,	#31
		BNE	loc_1964
		LDR	R0, [R3,#8]
		LDR	R4, off_1B80
		MOVS	R1, #0xC	@ ?
		STR.W	R0, [R4,#0x10C]
		STR	R1, [R3,#0xC]
		STR	R7, [R3,#4]
		STR	R5, [R3,#0x10]

loc_197A:				@ CODE XREF: InitDataFlash+3Ej
		LDR	R0, [R3,#0x10]
		LSLS	R0, R0,	#31
		BNE	loc_197A
		LDR	R0, [R3,#8]
		STR.W	R0, [R4,#0x110]
		STR	R1, [R3,#0xC]
		MOV.W	R12, #4
		STR.W	R12, [R3,#4]
		STR	R5, [R3,#0x10]

loc_1992:				@ CODE XREF: InitDataFlash+56j
		LDR	R0, [R3,#0x10]
		LSLS	R0, R0,	#31
		BNE	loc_1992
		LDR	R0, [R3,#8]
		STR.W	R0, [R4,#0x114]
		MOVS	R0, #0

loc_19A0:				@ CODE XREF: InitDataFlash+82j
		STR.W	R12, [R3,#0xC]	@ Read Unique ID
		LSLS	R1, R0,	#2
		STR	R1, [R3,#4]
		STR	R7, [R3,#8]
		STR	R5, [R3,#0x10]

loc_19AC:				@ CODE XREF: InitDataFlash+70j
		LDR	R1, [R3,#0x10]
		CMP	R1, #0
		BNE	loc_19AC
		LDR	R1, [R3,#8]
		ADD.W	R2, R4,	R0,LSL#2
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STR.W	R1, [R2,#0x118]
		CMP	R0, #3
		BCC	loc_19A0
		MOVS	R0, #0
		MOVS	R1, #0x10

loc_19C8:				@ CODE XREF: InitDataFlash+AAj
		STR.W	R12, [R3,#0xC]	@ Read Unique ID
		ADD.W	R2, R1,	R0,LSL#2
		STR	R2, [R3,#4]
		STR	R5, [R3,#0x10]

loc_19D4:				@ CODE XREF: InitDataFlash+98j
		LDR	R2, [R3,#0x10]
		LSLS	R2, R2,	#0x1F
		BNE	loc_19D4
		LDR	R2, [R3,#8]
		ADD.W	R8, R4,	R0,LSL#2
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STR.W	R2, [R8,#0x124]
		CMP	R0, #4
		BCC	loc_19C8
		MOVS	R1, #2
		MOV	R0, SP
		BL	FMCReadConfig
		MOV	R0, SP
		BL	FMCCheckDFBA
		MOV.W	R8, #0x1E000
		CBZ	R0, loc_1A0A
		ADDS	R1, R4,	#4
		MOV	R0, R8
		BL	FMCLoadDFFirstPage
		MOV	R6, R0

loc_1A0A:				@ CODE XREF: InitDataFlash+BEj
		ADDS	R0, R4,	#4
		BL	CalcPageCRC
		LDR	R1, [R4,#4]
		CMP	R0, R1
		BEQ	loc_1A42
		CMP	R6, R8
		BNE	loc_1A1E
		LDR	R0, dword_1B88
		B	loc_1A22
@ ---------------------------------------------------------------------------

loc_1A1E:				@ CODE XREF: InitDataFlash+D8j
		SUB.W	R0, R6,	#0x100

loc_1A22:				@ CODE XREF: InitDataFlash+DCj
		ADDS	R1, R4,	#4
		LDR.W	R8, [R4,#8]
		BL	FMCRead100
		ADDS	R0, R4,	#4
		BL	CalcPageCRC
		LDR	R1, [R4,#4]
		CMP	R0, R1
		BEQ	loc_1A3E
		STR.W	R8, [R4,#8]
		B	loc_1A42
@ ---------------------------------------------------------------------------

loc_1A3E:				@ CODE XREF: InitDataFlash+F6j
		BL	UpdateDataFlash

loc_1A42:				@ CODE XREF: InitDataFlash+D4j
					@ InitDataFlash+FCj
		BL	sub_2080
		BL	FMCDisableISP
		MOV.W	R1, #0x40000000
		MOV	R8, R7
		STR.W	R7, [R1,#0x100]	@ Lock registers
		BL	GetProductID
		LDR	R2, [R4,#8]
		LDR	R6, off_1B8C
		CMP	R2, #102
		BEQ	loc_1AAC
		CMP	R2, #103
		BEQ	loc_1AAC
		CMP	R2, #106
		BEQ	loc_1AAC
		CMP	R2, #108
		BEQ	loc_1AAC
		CMP	R2, #109
		BEQ	loc_1AAC
		CMP	R2, #111
		BEQ	loc_1AAC
		STRB.W	R8, [R6,#2]

loc_1A78:				@ CODE XREF: InitDataFlash+16Ej
		MOVS	R0, #115
		CMP	R2, #100
		BEQ	loc_1ABE
		CMP	R2, #102
		BEQ	loc_1ABE
		CMP	R2, #101
		BEQ	loc_1AB0
		CMP	R2, #108
		BEQ	loc_1AB0
		CMP	R2, #103
		BEQ	loc_1AB4
		CMP	R2, #104
		BEQ	loc_1AB4
		CMP	R2, #105
		BEQ	loc_1AB4
		CMP	R2, #106
		BEQ	loc_1AB4
		CMP	R2, #107
		BEQ	loc_1AB8
		CMP	R2, #109
		BEQ	loc_1AB8
		CMP	R2, #110
		BEQ	loc_1ABC
		CMP	R2, #111
		BEQ	loc_1ABC
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1AAC:				@ CODE XREF: InitDataFlash+11Ej
					@ InitDataFlash+122j ...
		STRB	R5, [R6,#2]
		B	loc_1A78
@ ---------------------------------------------------------------------------

loc_1AB0:				@ CODE XREF: InitDataFlash+144j
					@ InitDataFlash+148j
		MOVS	R0, #125
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1AB4:				@ CODE XREF: InitDataFlash+14Cj
					@ InitDataFlash+150j ...
		MOVS	R0, #110
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1AB8:				@ CODE XREF: InitDataFlash+15Cj
					@ InitDataFlash+160j
		MOVS	R0, #120
		B	loc_1ABE
@ ---------------------------------------------------------------------------

loc_1ABC:				@ CODE XREF: InitDataFlash+164j
					@ InitDataFlash+168j
		MOVS	R0, #105

loc_1ABE:				@ CODE XREF: InitDataFlash+13Cj
					@ InitDataFlash+140j ...
		STRB	R0, [R6,#3]
		LDR	R2, off_1B90
		MOVW	R0, #303
		MOV.W	R1, #900
		STR.W	R0, [R4,#0x104]
		STR	R1, [R2]
		LDR	R2, off_1B94
		MOVW	R1, #750
		MOVS	R7, #10
		STR	R1, [R2]
		LDR	R2, off_1B98
		MOV.W	R9, #100
		STR	R1, [R2]
		UDIV.W	R1, R0,	R7
		MLS.W	R3, R7,	R1, R0
		UDIV.W	R1, R0,	R7
		UDIV.W	R2, R1,	R7
		MLS.W	R2, R7,	R2, R1
		UDIV.W	R1, R0,	R9
		ADR	R0, aApromVersion__ @ "  APROM Version ......................."...
		BL	PutTextf
		LDR	R0, [R4,#8]
		UDIV.W	R1, R0,	R7
		MLS.W	R3, R7,	R1, R0
		UDIV.W	R1, R0,	R7
		UDIV.W	R2, R1,	R7
		MLS.W	R2, R7,	R2, R1
		UDIV.W	R1, R0,	R9
		ADR	R0, aHardwareVersio @ "  Hardware Version ...................."...
		BL	PutTextf
		LDRB	R0, [R4,#0xC]
		CMP	R0, #0x36
		BNE	loc_1B32
		ADDS	R0, R4,	#4
		BL	CalcPageCRC
		LDR	R1, [R4,#4]
		CMP	R0, R1
		BEQ	loc_1B54

loc_1B32:				@ CODE XREF: InitDataFlash+1E4j
		ADR	R0, aDataFlashReIni @ "Data Flash Re-Initialization\n"
		BL	PutTextf
		BL	ResetDataFlash
		STRB.W	R8, [R4,#0xE]
		STRB.W	R8, [R4,#0x94]
		MOVS	R0, #0xC8
		STRH	R0, [R4,#0x10]
		STRB	R5, [R4,#0x1B]
		MOVS	R0, #0xEB
		STRH	R0, [R4,#0x12]
		BL	UpdateDataFlash
		B	loc_1B58
@ ---------------------------------------------------------------------------

loc_1B54:				@ CODE XREF: InitDataFlash+1F0j
		BL	DFCheckValuesValidity

loc_1B58:				@ CODE XREF: InitDataFlash+212j
		LDR	R0, [R4,#0x7C]
		ADDS	R1, R4,	#4
		BIC.W	R0, R0,	#1
		STR	R0, [R4,#0x7C]
		MOVS	R0, #2
		STRB.W	R0, [R4,#0x87]
		LSLS	R2, R0,	#7
		LDR	R0, off_1C2C
		BL	MemCpy
		LDRB	R0, [R4,#0xD]
		CMP	R0, #0
		BEQ	locret_1B7C
		STRB.W	R8, [R4,#0xD]
		STRB	R5, [R6]

locret_1B7C:				@ CODE XREF: InitDataFlash+234j
		POP.W	{R2-R10,PC}
@ End of function InitDataFlash

@ ---------------------------------------------------------------------------
off_1B80:	.long dfData		@ DATA XREF: InitDataFlash+10r
					@ InitDataFlash+2Cr
dword_1B84:	.long 0x4000C000	@ DATA XREF: InitDataFlash+16r
dword_1B88:	.long 0x1EF00		@ DATA XREF: InitDataFlash+DAr
off_1B8C:	.long UpdateDFTimer	@ DATA XREF: InitDataFlash+11Ar
off_1B90:	.long MaxVWVolts	@ DATA XREF: InitDataFlash+180r
off_1B94:	.long MaxPower		@ DATA XREF: InitDataFlash+190r
off_1B98:	.long MaxTCPower	@ DATA XREF: InitDataFlash+19Ar
aApromVersion__:.ascii "  APROM Version ......................... [%d.%d%d]"
					@ DATA XREF: InitDataFlash+1BAo
		.byte 0xA
		.byte 0
		.balign 4,0
aHardwareVersio:.ascii "  Hardware Version ...................... [%d.%d%d]"
					@ DATA XREF: InitDataFlash+1DAo
		.byte 0xA
		.byte 0
		.balign 4,0
aDataFlashReIni:.ascii "Data Flash Re-Initialization" @ DATA XREF: InitDataFlash:loc_1B32o
		.byte 0xA
		.byte 0
		.balign 4,0
off_1C2C:	.long byte_2000017C	@ DATA XREF: InitDataFlash+22Ar

@ =============== S U B	R O U T	I N E =======================================


ResetDataFlash:				@ CODE XREF: InitDataFlash+1F8p
					@ sub_2C00+Ap
		PUSH	{R4-R6,LR}
		LDR	R4, off_1CE0
		MOV.W	R1, #0x100
		ADDS	R0, R4,	#4
		LDR	R5, [R4,#8]
		BL	MemClear
		STR.W	R5, [R4,#8]!
		MOVS	R0, #0x36
		STRB	R0, [R4,#4]
		MOVS	R0, #4
		STRB	R0, [R4,#6]
		MOVS	R5, #0
		STRB	R5, [R4,#7]
		MOV.W	R0, #330
		STRH	R0, [R4,#0xE]
		LDR	R0, off_1CE4
		MOV.W	R1, #450
		LDRH	R0, [R0]
		STRH	R0, [R4,#8]
		LDR	R0, off_1CE8
		LDRH	R0, [R0]
		STRH	R0, [R4,#0xC]
		STR.W	R5, [R4,#0x12C]
		STR.W	R5, [R4,#0x130]
		STRB	R5, [R4,#0x13]
		MOVS	R0, #1
		STRB	R0, [R4,#0x11]
		STRB	R0, [R4,#0x12]
		STRH	R1, [R4,#0xA]
		STRH	R5, [R4,#0x14]
		STRB	R5, [R4,#0x1D]
		MOVS	R1, #2
		STRB.W	R1, [R4,#0x7F]
		STRB	R5, [R4,#0x10]
		STRH	R5, [R4,#0x16]
		STRH	R5, [R4,#0x18]
		STRB	R5, [R4,#0x1A]
		STRB	R5, [R4,#0x1B]
		STRB	R0, [R4,#0x1C]
		STRH.W	R5, [R4,#0x7C]
		STRB.W	R5, [R4,#0x7E]
		STRH.W	R5, [R4,#0x88]
		STRB.W	R5, [R4,#0x8A]
		MOVS	R0, #0x78
		STRH.W	R0, [R4,#0x82]
		STRH.W	R0, [R4,#0x84]
		STRH.W	R0, [R4,#0x86]
		STRB.W	R5, [R4,#0xB9]
		STRH.W	R5, [R4,#0xB6]
		STRB.W	R5, [R4,#0xB8]
		BL	sub_388C
		BL	sub_38D8
		LDR	R0, off_1CE0
		MOVS	R1, #0x14
		ADDS	R0, #0x96
		STR	R5, [R4,#0x74]
		BL	MemClear
		LDR	R0, off_1CE0
		MOVS	R1, #0x14
		ADDS	R0, #0xAA
		BL	MemClear
		POP.W	{R4-R6,LR}
		B.W	FMCWriteCounters
@ End of function ResetDataFlash

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
off_1CE0:	.long dfData		@ DATA XREF: ResetDataFlash+2r
					@ ResetDataFlash+90r ...
off_1CE4:	.long MaxPower		@ DATA XREF: ResetDataFlash+26r
off_1CE8:	.long MaxTCPower	@ DATA XREF: ResetDataFlash+30r

@ =============== S U B	R O U T	I N E =======================================


FMCLoadDFFirstPage:			@ CODE XREF: InitDataFlash+C4p
		PUSH.W	{R4-R8,LR}
		MOV	R8, R1
		MOV	R5, R0
		MOVS	R4, #0
		MOV.W	R6, #0x1000

loc_1CFA:				@ CODE XREF: FMCLoadDFFirstPage+2Aj
		ADDS	R0, R5,	R4
		MOV	R7, R0
		BL	FMCReadWord32
		ADDS	R0, R0,	#1
		BNE	loc_1D10
		ADDS	R0, R7,	#4
		BL	FMCReadWord32
		ADDS	R0, R0,	#1
		BEQ	loc_1D18

loc_1D10:				@ CODE XREF: FMCLoadDFFirstPage+18j
		ADD.W	R4, R4,	#0x100
		CMP	R4, R6
		BCC	loc_1CFA

loc_1D18:				@ CODE XREF: FMCLoadDFFirstPage+22j
		CBZ	R4, loc_1D20
		ADD	R5, R4
		SUB.W	R5, R5,	#0x100

loc_1D20:				@ CODE XREF: FMCLoadDFFirstPage:loc_1D18j
		MOV	R1, R8
		MOV	R0, R5
		BL	FMCRead100
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function FMCLoadDFFirstPage

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


UpdateDataFlash:			@ CODE XREF: DrawScreen:loc_15EAp
					@ InitDataFlash:loc_1A3Ep ...
		PUSH	{R4-R6,LR}
		LDR	R0, off_1DA0
		LDR	R5, off_1D9C
		LDRH	R0, [R0]
		STRH.W	R0, [R5,#0x80]
		LDR	R0, off_1DA4
		ADDS	R4, R5,	#4
		SUB.W	R1, R5,	#0x100
		LDRB	R0, [R0]
		STRB.W	R0, [R5,#0x82]
		MOVS	R0, #0

loc_1D4C:				@ CODE XREF: UpdateDataFlash+2Ej
		LDRB	R2, [R4]
		LDRB	R3, [R1]
		CMP	R2, R3
		BNE	loc_1D60
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		ADDS	R1, R1,	#1
		ADDS	R4, R4,	#1
		CMP	R0, #0xFF
		BLS	loc_1D4C

loc_1D60:				@ CODE XREF: UpdateDataFlash+22j
		MOV.W	R4, #0x100
		CMP	R0, R4
		BEQ	locret_1D98
		ADDS	R0, R5,	#4
		BL	CalcPageCRC
		STR	R0, [R5,#4]
		MOV	R2, R4
		ADDS	R1, R5,	#4
		LDR	R0, off_1DA8
		BL	MemCpy
		BL	UnlockRegisters2
		BL	FMCEnableISP
		ADDS	R1, R5,	#4
		MOV.W	R0, #0x1E000
		BL	WriteDataFlash	@ Writes 256 bytes from	address	R1 to
					@ first	free space in DF after addr R0
		BL	FMCDisableISP
		MOVS	R0, #0
		LSLS	R1, R4,	#0x16
		STR.W	R0, [R1,#0x100]

locret_1D98:				@ CODE XREF: UpdateDataFlash+36j
		POP	{R4-R6,PC}
@ End of function UpdateDataFlash

@ ---------------------------------------------------------------------------
		.balign 4,0
off_1D9C:	.long dfData		@ DATA XREF: UpdateDataFlash+4r
off_1DA0:	.long AtoRez		@ DATA XREF: UpdateDataFlash+2r
off_1DA4:	.long AtoError		@ DATA XREF: UpdateDataFlash+Cr
off_1DA8:	.long byte_2000017C	@ DATA XREF: UpdateDataFlash+44r

@ =============== S U B	R O U T	I N E =======================================


DFCheckValuesValidity:			@ CODE XREF: InitDataFlash:loc_1B54p
					@ sub_2788+D6p
		PUSH.W	{R4-R8,LR}
		LDR	R5, off_1FB8
		LDRB	R0, [R5,#0xE]
		CMP	R0, #7
		BCC	loc_1DBC
		MOVS	R0, #4
		STRB	R0, [R5,#0xE]

loc_1DBC:				@ CODE XREF: DFCheckValuesValidity+Aj
		LDR	R1, off_1FBC
		LDRH	R0, [R5,#0x16]
		LDR	R1, [R1]
		CMP	R0, R1
		BHI	loc_1DCA
		CMP	R0, #50
		BCS	loc_1DD0

loc_1DCA:				@ CODE XREF: DFCheckValuesValidity+18j
		MOV.W	R0, #330
		STRH	R0, [R5,#0x16]

loc_1DD0:				@ CODE XREF: DFCheckValuesValidity+1Cj
		LDR	R6, off_1FC0
		LDRH	R1, [R5,#0x10]
		LDR	R0, [R6]
		CMP	R1, R0
		BHI	loc_1DDE
		CMP	R1, #0xA
		BCS	loc_1DE0

loc_1DDE:				@ CODE XREF: DFCheckValuesValidity+2Cj
		STRH	R0, [R5,#0x10]

loc_1DE0:				@ CODE XREF: DFCheckValuesValidity+30j
		LDR	R0, off_1FC4
		LDRH	R1, [R5,#0x14]
		LDR	R0, [R0]
		CMP	R1, R0
		BHI	loc_1DEE
		CMP	R1, #0xA
		BCS	loc_1DF0

loc_1DEE:				@ CODE XREF: DFCheckValuesValidity+3Cj
		STRH	R0, [R5,#0x14]

loc_1DF0:				@ CODE XREF: DFCheckValuesValidity+40j
		LDR	R1, dword_1FC8
		LDR.W	R0, [R5,#0x134]
		MOVS	R4, #0
		CMP	R0, R1
		BHI	loc_1E06
		LDR	R1, dword_1FCC
		LDR.W	R0, [R5,#0x138]
		CMP	R0, R1
		BLS	loc_1E12

loc_1E06:				@ CODE XREF: DFCheckValuesValidity+4Ej
		STR.W	R4, [R5,#0x134]
		STR.W	R4, [R5,#0x138]
		BL	FMCWriteCounters

loc_1E12:				@ CODE XREF: DFCheckValuesValidity+58j
		LDRB.W	R0, [R5,#0x87]
		CMP	R0, #4
		BCC	loc_1E22
		MOVS	R0, #2
		STRB.W	R0, [R5,#0x87]
		B	loc_1E36
@ ---------------------------------------------------------------------------

loc_1E22:				@ CODE XREF: DFCheckValuesValidity+6Cj
		CBZ	R0, loc_1E2E
		CMP	R0, #1
		BEQ	loc_1E3C
		CMP	R0, #2
		BEQ	loc_1E36
		B	loc_1E3E
@ ---------------------------------------------------------------------------

loc_1E2E:				@ CODE XREF: DFCheckValuesValidity:loc_1E22j
		LDRB	R0, [R5,#0x18]	@ Amps,	Puffs or Time display
		CMP	R0, #4
		BCS	loc_1E3C
		B	loc_1E3E
@ ---------------------------------------------------------------------------

loc_1E36:				@ CODE XREF: DFCheckValuesValidity+74j
					@ DFCheckValuesValidity+7Ej
		LDRB	R0, [R5,#0x18]
		CMP	R0, #3
		BCC	loc_1E3E

loc_1E3C:				@ CODE XREF: DFCheckValuesValidity+7Aj
					@ DFCheckValuesValidity+86j
		STRB	R4, [R5,#0x18]

loc_1E3E:				@ CODE XREF: DFCheckValuesValidity+80j
					@ DFCheckValuesValidity+88j ...
		LDRB	R0, [R5,#0x1A]
		MOVS	R1, #1
		CMP	R0, #2
		BEQ	loc_1E54
		CMP	R0, #1
		BEQ	loc_1E54
		CMP	R0, #3
		BEQ	loc_1E54
		CMP	R0, #4
		BEQ	loc_1E54
		STRB	R1, [R5,#0x1A]

loc_1E54:				@ CODE XREF: DFCheckValuesValidity+98j
					@ DFCheckValuesValidity+9Cj ...
		LDRB	R0, [R5,#0x1B]
		CMP	R0, #1
		BLS	loc_1E5E
		STRB	R4, [R5,#0x1B]
		B	loc_1E66
@ ---------------------------------------------------------------------------

loc_1E5E:				@ CODE XREF: DFCheckValuesValidity+ACj
		CBZ	R0, loc_1E66
		CMP	R0, #1
		BEQ	loc_1E76
		B	loc_1E82
@ ---------------------------------------------------------------------------

loc_1E66:				@ CODE XREF: DFCheckValuesValidity+B0j
					@ DFCheckValuesValidity:loc_1E5Ej
		LDRH	R0, [R5,#0x12]
		SUBS	R0, #0xC8
		CMP.W	R0, #0x190
		BLS	loc_1E82
		MOV.W	R0, #0x1C2
		B	loc_1E80
@ ---------------------------------------------------------------------------

loc_1E76:				@ CODE XREF: DFCheckValuesValidity+B6j
		LDRH	R0, [R5,#0x12]
		SUBS	R0, #0x64
		CMP	R0, #0xD8
		BCC	loc_1E82
		MOVS	R0, #0xE6

loc_1E80:				@ CODE XREF: DFCheckValuesValidity+C8j
		STRH	R0, [R5,#0x12]

loc_1E82:				@ CODE XREF: DFCheckValuesValidity+B8j
					@ DFCheckValuesValidity+C2j ...
		LDRH	R0, [R5,#0x1E]
		CMP	R0, #0x96
		BLS	loc_1E8A
		STRH	R4, [R5,#0x1E]

loc_1E8A:				@ CODE XREF: DFCheckValuesValidity+DAj
		LDRH	R0, [R5,#0x20]
		CMP	R0, #0x96
		BLS	loc_1E92
		STRH	R4, [R5,#0x20]

loc_1E92:				@ CODE XREF: DFCheckValuesValidity+E2j
		LDRB.W	R0, [R5,#0x22]
		CMP	R0, #1
		BLS	loc_1E9E
		STRB.W	R4, [R5,#0x22]

loc_1E9E:				@ CODE XREF: DFCheckValuesValidity+ECj
		LDRB.W	R0, [R5,#0x23]
		CMP	R0, #1
		BLS	loc_1EAA
		STRB.W	R4, [R5,#0x23]

loc_1EAA:				@ CODE XREF: DFCheckValuesValidity+F8j
		LDRB.W	R0, [R5,#0x25]
		CMP	R0, #1
		BLS	loc_1EB6
		STRB.W	R4, [R5,#0x25]

loc_1EB6:				@ CODE XREF: DFCheckValuesValidity+104j
		LDRB.W	R0, [R5,#0x24]
		CMP	R0, #1
		BLS	loc_1EC2
		STRB.W	R1, [R5,#0x24]

loc_1EC2:				@ CODE XREF: DFCheckValuesValidity+110j
		LDRH.W	R0, [R5,#0x84]
		CMP	R0, #0x96
		BLS	loc_1ECE
		STRH.W	R4, [R5,#0x84]

loc_1ECE:				@ CODE XREF: DFCheckValuesValidity+11Cj
		LDRB.W	R0, [R5,#0x86]
		CMP	R0, #1
		BLS	loc_1EDA
		STRB.W	R4, [R5,#0x86]

loc_1EDA:				@ CODE XREF: DFCheckValuesValidity+128j
		LDRH.W	R0, [R5,#0x90]
		CMP	R0, #0x96
		BLS	loc_1EE6
		STRH.W	R4, [R5,#0x90]

loc_1EE6:				@ CODE XREF: DFCheckValuesValidity+134j
		LDRB.W	R0, [R5,#0x92]
		CMP	R0, #1
		BLS	loc_1EF2
		STRB.W	R4, [R5,#0x92]

loc_1EF2:				@ CODE XREF: DFCheckValuesValidity+140j
		MOVS	R0, #0

loc_1EF4:				@ CODE XREF: DFCheckValuesValidity+15Aj
		ADD.W	R1, R5,	R0,LSL#1
		LDRH	R1, [R1,#0x26]
		SUBS	R1, #10
		CMP	R1, #191
		BCS	loc_1F08
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #21
		BCC	loc_1EF4

loc_1F08:				@ CODE XREF: DFCheckValuesValidity+152j
		CMP	R0, #21
		BEQ	loc_1F10
		BL	sub_388C

loc_1F10:				@ CODE XREF: DFCheckValuesValidity+15Ej
		MOVS	R0, #0

loc_1F12:				@ CODE XREF: DFCheckValuesValidity+17Aj
		ADD.W	R1, R5,	R0,LSL#1
		LDRH.W	R1, [R1,#0x50]
		SUBS	R1, #0x32
		CMP	R1, #0x33
		BCS	loc_1F28
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #0xB
		BCC	loc_1F12

loc_1F28:				@ CODE XREF: DFCheckValuesValidity+172j
		CMP	R0, #0xB
		BEQ	loc_1F30
		BL	sub_38D8

loc_1F30:				@ CODE XREF: DFCheckValuesValidity+17Ej
		MOVS	R0, #0
		MOVW	R2, #0x3E7
		MOVS	R3, #0x78

loc_1F38:				@ CODE XREF: DFCheckValuesValidity+1A4j
		ADD.W	R1, R5,	R0,LSL#1
		LDRH.W	R7, [R1,#0x8A]
		SUBS	R7, R7,	#1
		CMP	R7, R2
		BCC	loc_1F4A
		STRH.W	R3, [R1,#0x8A]

loc_1F4A:				@ CODE XREF: DFCheckValuesValidity+198j
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #3
		BCC	loc_1F38
		LDRB.W	R0, [R5,#0xC1]
		CMP	R0, #2
		BCC	loc_1F5E
		STRB.W	R4, [R5,#0xC1]

loc_1F5E:				@ CODE XREF: DFCheckValuesValidity+1ACj
		LDRB.W	R0, [R5,#0xC0]
		CMP	R0, #2
		BLS	loc_1F6A
		STRB.W	R4, [R5,#0xC0]

loc_1F6A:				@ CODE XREF: DFCheckValuesValidity+1B8j
		LDR	R4, [R6]
		MOVS	R0, #0
		MOV.W	R3, #0x15E

loc_1F72:				@ CODE XREF: DFCheckValuesValidity+204j
		ADD.W	R2, R5,	R0,LSL#1
		LDRH.W	R1, [R2,#0x96]
		CMP	R1, R3
		BHI	loc_1F92
		CMP	R1, #5
		BCS	loc_1F84
		CBNZ	R1, loc_1F92

loc_1F84:				@ CODE XREF: DFCheckValuesValidity+1D4j
		LDRH.W	R1, [R2,#0xAA]
		CMP	R1, R4
		BHI	loc_1F92
		CMP	R1, #0xA
		BCS	loc_1FAA
		CBZ	R1, loc_1FAA

loc_1F92:				@ CODE XREF: DFCheckValuesValidity+1D0j
					@ DFCheckValuesValidity+1D6j ...
		LDR	R0, off_1FB8
		MOVS	R1, #0x14
		ADDS	R0, #0x96
		BL	MemClear
		POP.W	{R4-R8,LR}
		LDR	R0, off_1FB8
		MOVS	R1, #0x14
		ADDS	R0, #0xAA
		B.W	MemClear
@ ---------------------------------------------------------------------------

loc_1FAA:				@ CODE XREF: DFCheckValuesValidity+1E2j
					@ DFCheckValuesValidity+1E4j
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #0xA
		BCC	loc_1F72
		POP.W	{R4-R8,PC}
@ End of function DFCheckValuesValidity

@ ---------------------------------------------------------------------------
		.balign 4,0
off_1FB8:	.long dfData		@ DATA XREF: DFCheckValuesValidity+4r
					@ DFCheckValuesValidity:loc_1F92r ...
off_1FBC:	.long MaxVWVolts	@ DATA XREF: DFCheckValuesValidity:loc_1DBCr
off_1FC0:	.long MaxPower		@ DATA XREF: DFCheckValuesValidity:loc_1DD0r
off_1FC4:	.long MaxTCPower	@ DATA XREF: DFCheckValuesValidity:loc_1DE0r
dword_1FC8:	.long 99999		@ DATA XREF: DFCheckValuesValidity:loc_1DF0r
dword_1FCC:	.long 999999		@ DATA XREF: DFCheckValuesValidity+50r

@ =============== S U B	R O U T	I N E =======================================

@ Writes 256 bytes from	address	R1 to
@ first	free space in DF after addr R0

WriteDataFlash:				@ CODE XREF: UpdateDataFlash+58p
		PUSH.W	{R4-R8,LR}
		MOV	R6, R1
		MOV	R5, R0
		MOVS	R4, #0
		MOV.W	R8, #0x1000

loc_1FDE:				@ CODE XREF: WriteDataFlash+2Aj
		ADDS	R0, R5,	R4
		MOV	R7, R0
		BL	FMCReadWord32
		ADDS	R0, R0,	#1
		BNE	loc_1FF4
		ADDS	R0, R7,	#4
		BL	FMCReadWord32
		ADDS	R0, R0,	#1
		BEQ	loc_1FFC

loc_1FF4:				@ CODE XREF: WriteDataFlash+18j
		ADD.W	R4, R4,	#0x100
		CMP	R4, R8
		BCC	loc_1FDE

loc_1FFC:				@ CODE XREF: WriteDataFlash+22j
		CMP.W	R4, #0x100
		BEQ	loc_200E
		CMP	R4, R8
		BCC	loc_2018
		MOV	R0, R5
		BL	FMCErasePage
		B	loc_201C
@ ---------------------------------------------------------------------------

loc_200E:				@ CODE XREF: WriteDataFlash+30j
		ADD.W	R0, R5,	#0x800
		BL	FMCErasePage
		B	loc_201A
@ ---------------------------------------------------------------------------

loc_2018:				@ CODE XREF: WriteDataFlash+34j
		CBZ	R4, loc_201C

loc_201A:				@ CODE XREF: WriteDataFlash+46j
		ADD	R5, R4

loc_201C:				@ CODE XREF: WriteDataFlash+3Cj
					@ WriteDataFlash:loc_2018j
		MOVS	R4, #0

loc_201E:				@ CODE XREF: WriteDataFlash+5Aj
		LDMIA	R6!, {R1}
		ADDS	R0, R5,	R4
		BL	FMCWriteWord32	@ Writes Word R1 at addr R0
		ADDS	R4, R4,	#4
		CMP	R4, #0xFF
		BLS	loc_201E
		POP.W	{R4-R8,PC}
@ End of function WriteDataFlash


@ =============== S U B	R O U T	I N E =======================================


UpdateFlash:				@ CODE XREF: GotoMain+908Ep
					@ GotoMain+915Cp
		PUSH	{R4,LR}
		LDR	R4, off_2060
		LDRB	R0, [R4]
		CBZ	R0, loc_2046
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R4]
		BNE	loc_2046
		BL	UpdateDataFlash

loc_2046:				@ CODE XREF: UpdateFlash+6j
					@ UpdateFlash+10j
		LDRB	R0, [R4,#1]
		CMP	R0, #0
		BEQ	locret_205E
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R4,#1]
		BNE	locret_205E
		POP.W	{R4,LR}
		B.W	FMCWriteCounters
@ ---------------------------------------------------------------------------

locret_205E:				@ CODE XREF: UpdateFlash+1Aj
					@ UpdateFlash+24j
		POP	{R4,PC}
@ End of function UpdateFlash

@ ---------------------------------------------------------------------------
off_2060:	.long UpdateDFTimer	@ DATA XREF: UpdateFlash+2r

@ =============== S U B	R O U T	I N E =======================================


GetProductID:				@ CODE XREF: InitDataFlash+114p
		ADR	R0, HWProductID	@ "E052"
		LDRD.W	R1, R2,	[R0]
		LDR	R0, off_207C
		STRD.W	R1, R2,	[R0,#0x3C]
		BX	LR
@ End of function GetProductID

@ ---------------------------------------------------------------------------
		.balign 4,0
HWProductID:	.ascii "E052"           @ DATA XREF: GetProductIDo
		.byte 1, 1, 1, 0	@ Max supported	hardware version (1.11)
off_207C:	.long dword_2000037C	@ DATA XREF: GetProductID+6r

@ =============== S U B	R O U T	I N E =======================================


sub_2080:				@ CODE XREF: InitDataFlash:loc_1A42p
		PUSH	{R4-R6,LR}
		MOVS	R4, #0
		MOV.W	R6, #0x800

loc_2088:				@ CODE XREF: sub_2080+1Cj
		ADD.W	R0, R4,	#0x1F000
		BL	FMCReadWord32
		ADDS	R1, R0,	#1
		BEQ	loc_209E
		ADDS	R4, R4,	#4
		UXTH	R4, R4
		MOV	R5, R0
		CMP	R4, R6
		BCC	loc_2088

loc_209E:				@ CODE XREF: sub_2080+12j
		LDR	R0, off_20C0
		LDR	R6, off_20C4
		STRH	R4, [R0,#4]
		CBZ	R4, loc_20B8
		LDR	R0, dword_20C8
		STR.W	R5, [R6,#0x134]
		ADD	R0, R4
		BL	FMCReadWord32

loc_20B2:				@ CODE XREF: sub_2080+3Ej
		STR.W	R0, [R6,#0x138]
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_20B8:				@ CODE XREF: sub_2080+24j
		MOVS	R0, #0
		STR.W	R0, [R6,#0x134]
		B	loc_20B2
@ End of function sub_2080

@ ---------------------------------------------------------------------------
off_20C0:	.long UpdateDFTimer	@ DATA XREF: sub_2080:loc_209Er
off_20C4:	.long dfData		@ DATA XREF: sub_2080+20r
dword_20C8:	.long 0x1F7FC		@ DATA XREF: sub_2080+26r

@ =============== S U B	R O U T	I N E =======================================


FMCWriteCounters:			@ CODE XREF: ResetDataFlash+AAp
					@ DFCheckValuesValidity+62p ...
		PUSH	{R4-R6,LR}
		BL	UnlockRegisters2
		BL	FMCEnableISP
		LDR	R4, off_2128
		MOVS	R5, #0
		LDRH	R0, [R4,#4]
		CMP.W	R0, #0x800
		BCC	loc_20F4
		MOV.W	R0, #0x1F000
		BL	FMCErasePage
		MOV.W	R0, #0x1F800
		BL	FMCErasePage
		STRH	R5, [R4,#4]

loc_20F4:				@ CODE XREF: FMCWriteCounters+14j
		LDR	R6, off_212C
		LDRH	R0, [R4,#4]
		ADD.W	R0, R0,	#0x1F000
		LDR.W	R1, [R6,#0x134]
		BL	FMCWriteWord32	@ Writes Word R1 at addr R0
		LDRH	R0, [R4,#4]
		LDR.W	R1, [R6,#0x138]
		ADD.W	R0, R0,	#0x1F800
		BL	FMCWriteWord32	@ Writes Word R1 at addr R0
		LDRH	R0, [R4,#4]
		ADDS	R0, R0,	#4
		STRH	R0, [R4,#4]
		BL	FMCDisableISP
		MOV.W	R0, #0x40000000
		STR.W	R5, [R0,#0x100]
		POP	{R4-R6,PC}
@ End of function FMCWriteCounters

@ ---------------------------------------------------------------------------
		.balign 4,0
off_2128:	.long UpdateDFTimer	@ DATA XREF: FMCWriteCounters+Ar
off_212C:	.long dfData		@ DATA XREF: FMCWriteCounters:loc_20F4r

@ =============== S U B	R O U T	I N E =======================================


sub_2130:				@ CODE XREF: USBD_IRQHandler+B4p
		LDR	R0, dword_214C
		PUSH	{R4,LR}
		LDR	R0, [R0]
		LDR	R4, dword_214C
		LDR	R1, dword_2150
		ADDS	R4, R4,	#4

loc_213C:
		ADD	R0, R1
		LDR	R1, [R4]
		BL	sub_2788
		MOVS	R0, #0x40
		STR	R0, [R4]
		POP	{R4,PC}
@ End of function sub_2130

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_214C:	.long 0x400C0530	@ DATA XREF: sub_2130r	sub_2130+6r
dword_2150:	.long 0x400C0100	@ DATA XREF: sub_2130+8r

@ =============== S U B	R O U T	I N E =======================================


FMCDisableISP:				@ CODE XREF: InitDataFlash+106p
					@ UpdateDataFlash+5Cp ...
		LDR	R0, dword_2160
		LDR	R1, [R0]
		BIC.W	R1, R1,	#1
		STR	R1, [R0]
		BX	LR
@ End of function FMCDisableISP

@ ---------------------------------------------------------------------------
dword_2160:	.long 0x4000C000	@ DATA XREF: FMCDisableISPr

@ =============== S U B	R O U T	I N E =======================================


FMCDisableLDROMUpdate:			@ CODE XREF: sub_2788+1FCp
		LDR	R0, dword_2170
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x20
		STR	R1, [R0]
		BX	LR
@ End of function FMCDisableLDROMUpdate

@ ---------------------------------------------------------------------------
dword_2170:	.long 0x4000C000	@ DATA XREF: FMCDisableLDROMUpdater

@ =============== S U B	R O U T	I N E =======================================


EnableConfigUpdate:			@ CODE XREF: FMCCheckDFBA:loc_18E4p
		LDR	R0, dword_2180
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x10
		STR	R1, [R0]
		BX	LR
@ End of function EnableConfigUpdate

@ ---------------------------------------------------------------------------
dword_2180:	.long 0x4000C000	@ DATA XREF: EnableConfigUpdater

@ =============== S U B	R O U T	I N E =======================================


FMCEnableLDROMUpdate:			@ CODE XREF: sub_2788+1BAp
		LDR	R0, dword_2190
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x20
		STR	R1, [R0]
		BX	LR
@ End of function FMCEnableLDROMUpdate

@ ---------------------------------------------------------------------------
dword_2190:	.long 0x4000C000	@ DATA XREF: FMCEnableLDROMUpdater

@ =============== S U B	R O U T	I N E =======================================


FMCErasePage:				@ CODE XREF: FMCCheckDFBA+1Cp
					@ WriteDataFlash+38p ...
		LDR	R1, dword_21C0
		MOVS	R2, #0x22	@ Flash	page erase
		STR	R2, [R1,#0xC]	@ FMC_ISPCMD
		STR	R0, [R1,#4]	@ FMC_ISPADDR
		MOVS	R0, #1
		STR	R0, [R1,#0x10]	@ FMC_ISPTRG.ISPGO = 1

loc_21A0:				@ CODE XREF: FMCErasePage+10j
		LDR	R0, [R1,#0x10]
		CMP	R0, #0
		BNE	loc_21A0
		LDR	R0, [R1]
		LSLS	R0, R0,	#25	@ ISPFF	(fail flag)
		BPL	loc_21BA	@ if ok
		LDR	R0, [R1]
		ORR.W	R0, R0,	#0x40
		STR	R0, [R1]
		MOV.W	R0, #-1
		BX	LR
@ ---------------------------------------------------------------------------

loc_21BA:				@ CODE XREF: FMCErasePage+16j
		MOVS	R0, #0
		BX	LR
@ End of function FMCErasePage

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
dword_21C0:	.long 0x4000C000	@ DATA XREF: FMCErasePager

@ =============== S U B	R O U T	I N E =======================================


FMCEnableISP:				@ CODE XREF: InitDataFlash+8p
					@ UpdateDataFlash+4Ep ...
		LDR	R0, dword_21D0
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		BX	LR
@ End of function FMCEnableISP

@ ---------------------------------------------------------------------------
dword_21D0:	.long 0x4000C000	@ DATA XREF: FMCEnableISPr

@ =============== S U B	R O U T	I N E =======================================


FMCReadWord32:				@ CODE XREF: FMCRead100+Ap
					@ FMCLoadDFFirstPage+12p ...
		LDR	R1, dword_21EC
		MOVS	R2, #0		@ FLASH	32-bit Read.
		STR	R2, [R1,#0xC]	@ FMC_ISPCMD
		STR	R0, [R1,#4]	@ FMC_ISPADDR
		STR	R2, [R1,#8]	@ FMC_ISPDAT = 0
		MOVS	R0, #1
		STR	R0, [R1,#0x10]	@ FMC_ISPTRG.ISPGO = 1

loc_21E2:				@ CODE XREF: FMCReadWord32+12j
		LDR	R0, [R1,#0x10]
		CMP	R0, #0
		BNE	loc_21E2
		LDR	R0, [R1,#8]	@ FMC_ISPDAT
		BX	LR
@ End of function FMCReadWord32

@ ---------------------------------------------------------------------------
dword_21EC:	.long 0x4000C000	@ DATA XREF: FMCReadWord32r

@ =============== S U B	R O U T	I N E =======================================


FMCReadWord32_2:			@ CODE XREF: FMCReadConfig+14p
					@ FMCWriteVerif+34p
		LDR	R1, dword_2208
		MOVS	R2, #0
		STR	R2, [R1,#0xC]
		STR	R0, [R1,#4]
		STR	R2, [R1,#8]
		MOVS	R0, #1
		STR	R0, [R1,#0x10]

loc_21FE:				@ CODE XREF: FMCReadWord32_2+12j
		LDR	R0, [R1,#0x10]
		CMP	R0, #0
		BNE	loc_21FE
		LDR	R0, [R1,#8]
		BX	LR
@ End of function FMCReadWord32_2

@ ---------------------------------------------------------------------------
dword_2208:	.long 0x4000C000	@ DATA XREF: FMCReadWord32_2r

@ =============== S U B	R O U T	I N E =======================================


FMCReadConfig:				@ CODE XREF: FMCCheckDFBA+3Ap
					@ InitDataFlash+B0p
		PUSH.W	{R4-R8,LR}
		MOV	R5, R1
		MOV	R6, R0
		MOVS	R4, #0
		MOV.W	R7, #0x300000
		B	loc_222A
@ ---------------------------------------------------------------------------

loc_221C:				@ CODE XREF: FMCReadConfig+20j
		ADD.W	R0, R7,	R4,LSL#2
		BL	FMCReadWord32_2
		STR.W	R0, [R6,R4,LSL#2]
		ADDS	R4, R4,	#1

loc_222A:				@ CODE XREF: FMCReadConfig+Ej
		CMP	R4, R5
		BCC	loc_221C
		MOVS	R0, #0
		POP.W	{R4-R8,PC}
@ End of function FMCReadConfig


@ =============== S U B	R O U T	I N E =======================================

@ Writes Word R1 at addr R0

FMCWriteWord32:				@ CODE XREF: WriteDataFlash+52p
					@ FMCWriteCounters+34p	...
		LDR	R2, dword_224C
		MOVS	R3, #0x21	@ FLASH	32-bit Program
		STR	R3, [R2,#0xC]	@ FMC_ISPCMD
		STR	R0, [R2,#4]	@ FMC_ISPADDR
		STR	R1, [R2,#8]	@ FMC_ISPDAT
		MOVS	R0, #1
		STR	R0, [R2,#0x10]	@ FMC_ISPTRG.ISPGO = 1

loc_2242:				@ CODE XREF: FMCWriteWord32+12j
		LDR	R0, [R2,#0x10]
		CMP	R0, #0
		BNE	loc_2242
		BX	LR
@ End of function FMCWriteWord32

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_224C:	.long 0x4000C000	@ DATA XREF: FMCWriteWord32r

@ =============== S U B	R O U T	I N E =======================================


FMCWriteVerif:				@ CODE XREF: FMCCheckDFBA+2Ep
		PUSH.W	{R4-R10,LR}
		MOV	R7, R1
		MOV	R6, R0
		MOVS	R4, #0
		LDR	R5, dword_22A4
		MOV.W	R8, #0x300000
		MOV.W	R9, #0x21
		MOV.W	R10, #1
		B	loc_229A
@ ---------------------------------------------------------------------------

loc_226A:				@ CODE XREF: FMCWriteVerif+4Cj
		LDR.W	R1, [R6,R4,LSL#2]
		ADD.W	R0, R8,	R4,LSL#2
		STR.W	R9, [R5,#0xC]
		STR	R0, [R5,#4]
		STR	R1, [R5,#8]
		STR.W	R10, [R5,#0x10]

loc_227E:				@ CODE XREF: FMCWriteVerif+32j
		LDR	R1, [R5,#0x10]
		CMP	R1, #0
		BNE	loc_227E
		BL	FMCReadWord32_2
		LDR.W	R1, [R6,R4,LSL#2]
		CMP	R0, R1
		BEQ	loc_2298
		MOV.W	R0, #-1

locret_2294:				@ CODE XREF: FMCWriteVerif+50j
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_2298:				@ CODE XREF: FMCWriteVerif+3Ej
		ADDS	R4, R4,	#1

loc_229A:				@ CODE XREF: FMCWriteVerif+18j
		CMP	R4, R7
		BCC	loc_226A
		MOVS	R0, #0
		B	locret_2294
@ End of function FMCWriteVerif

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_22A4:	.long 0x4000C000	@ DATA XREF: FMCWriteVerif+Ar

@ =============== S U B	R O U T	I N E =======================================


FarenheitToC:				@ CODE XREF: ShowMainFiring+90p
		SUBS	R0, #0x20
		ADD.W	R0, R0,	R0,LSL#2
		UXTH	R0, R0
		MOVS	R1, #9
		UDIV.W	R0, R0,	R1
		BX	LR
@ End of function FarenheitToC


@ =============== S U B	R O U T	I N E =======================================


sub_22B8:				@ CODE XREF: sub_854+1Cp
		LDR	R1, off_22E8
		MOVS	R2, #0

loc_22BC:				@ CODE XREF: sub_22B8+2Cj
		ADDS	R2, R2,	#1
		STRB	R0, [R1]
		STRB	R0, [R1,#1]
		STRB	R0, [R1,#2]
		STRB	R0, [R1,#3]
		STRB	R0, [R1,#4]
		STRB	R0, [R1,#5]
		STRB	R0, [R1,#6]
		STRB	R0, [R1,#7]
		STRB	R0, [R1,#8]
		STRB	R0, [R1,#9]
		STRB	R0, [R1,#10]
		STRB	R0, [R1,#11]
		STRB	R0, [R1,#12]
		STRB	R0, [R1,#13]
		STRB	R0, [R1,#14]
		STRB	R0, [R1,#15]
		UXTB	R2, R2
		ADDS	R1, #0x10
		CMP	R2, #0x40
		BCC	loc_22BC
		BX	LR
@ End of function sub_22B8

@ ---------------------------------------------------------------------------
off_22E8:	.long ScreenBuffer	@ DATA XREF: sub_22B8r

@ =============== S U B	R O U T	I N E =======================================


GPD_IRQHandler:				@ DATA XREF: ROM:0000008Co
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0xE0]	@ PD_INTSRC
		LSLS	R2, R1,	#24
		MOV.W	R1, #1
		BPL	loc_231A
		MOVS	R2, #0x80
		STR.W	R2, [R0,#0xE0]
		LDR	R0, off_2330
		LDR	R0, [R0]
		LSLS	R2, R0,	#21
		BPL	locret_2318
		LDR	R2, off_2330
		SUBS	R2, #0x28
		LSLS	R0, R0,	#19
		STRB	R1, [R2,#0xC]
		BPL	locret_2318
		MOVS	R0, #0xD
		STRB	R0, [R2,#7]

locret_2318:				@ CODE XREF: GPD_IRQHandler+1Cj
					@ GPD_IRQHandler+26j
		BX	LR
@ ---------------------------------------------------------------------------

loc_231A:				@ CODE XREF: GPD_IRQHandler+Ej
		LDR.W	R2, [R0,#0xE0]
		LSLS	R2, R2,	#31
		BEQ	loc_2328
		STR.W	R1, [R0,#0xE0]
		BX	LR
@ ---------------------------------------------------------------------------

loc_2328:				@ CODE XREF: GPD_IRQHandler+34j
		LDR.W	R1, [R0,#0xE0]!
		STR	R1, [R0]
		BX	LR
@ End of function GPD_IRQHandler

@ ---------------------------------------------------------------------------
off_2330:	.long dword_20000064	@ DATA XREF: GPD_IRQHandler+16r
					@ GPD_IRQHandler+1Er

@ =============== S U B	R O U T	I N E =======================================


GPE_IRQHandler:				@ DATA XREF: ROM:00000090o
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0x120]
		STR.W	R1, [R0,#0x120]
		BX	LR
@ End of function GPE_IRQHandler


@ =============== S U B	R O U T	I N E =======================================


GPF_IRQHandler:				@ DATA XREF: ROM:00000094o
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0x160]
		STR.W	R1, [R0,#0x160]
		BX	LR
@ End of function GPF_IRQHandler


@ =============== S U B	R O U T	I N E =======================================


sub_2350:				@ CODE XREF: DevicesOnOff+9Ap
					@ DevicesOnOff+B2p ...
		LDR	R2, [R0,#0x18]
		MOVS	R3, #1
		LSLS	R3, R1
		BICS	R2, R3
		STR	R2, [R0,#0x18]
		LDR	R2, [R0,#0x1C]
		MOV.W	R3, #0x10001
		LSLS	R3, R1
		BICS	R2, R3
		STR	R2, [R0,#0x1C]
		BX	LR
@ End of function sub_2350


@ =============== S U B	R O U T	I N E =======================================


SetGPIOTrigInt:				@ CODE XREF: InitGPIO+AEp InitGPIO+C2p ...
		PUSH	{R4,LR}
		LDR	R3, [R0,#0x18]
		LSRS	R4, R2,	#0x18
		LSLS	R4, R1
		ORRS	R3, R4
		STR	R3, [R0,#0x18]
		LDR	R3, [R0,#0x1C]
		BIC.W	R2, R2,	#0xFF000000
		LSLS	R2, R1
		ORRS	R3, R2
		STR	R3, [R0,#0x1C]
		POP	{R4,PC}
@ End of function SetGPIOTrigInt

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


InitGPIO:				@ CODE XREF: InitHardware+26p
		PUSH.W	{R4-R8,LR}
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x48]
		ORR.W	R1, R1,	#0x30
		STR	R1, [R0,#0x48]	@ PD1 =	Data transmitter output	pin for	UART0
		MOVS	R1, #1
		MOVS	R0, #0
		BL	InitGPIO_PWM
		MOVS	R1, #1
		MOVS	R0, #2
		BL	InitGPIO_PWM
		LDR.W	R8, dword_24A4
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R8
		BL	SetGPIOMode	@ PE0 =	Input
		LDR	R6, dword_24A4
		MOVS	R2, #0
		SUBS	R6, #0x40
		MOVS	R1, #4
		MOV	R0, R6
		BL	SetGPIOMode	@ PD2 =	Input
		MOVS	R2, #0
		MOVS	R1, #8
		MOV	R0, R6
		BL	SetGPIOMode	@ PD3 =	Input
		LDR	R0, dword_24A8
		MOVS	R4, #0
		STR	R4, [R0]	@ PC1 =	low
		LDR	R7, dword_24A4
		MOVS	R2, #1
		SUBS	R7, #0x80
		MOVS	R1, #2
		MOV	R0, R7
		BL	SetGPIOMode	@ PC1 =	Push-Pull Output
		LDR	R0, dword_24A8
		ADDS	R0, #8
		STR	R4, [R0]	@ PC3 =	low
		MOVS	R2, #1
		MOVS	R1, #8
		MOV	R0, R7
		BL	SetGPIOMode	@ PC3 =	Push-Pull Output
		LDR	R0, dword_24A8
		SUBS	R0, #0x84
		STR	R4, [R0]	@ PA0 =	low
		MOVS	R2, #1
		MOV.W	R5, #0x40004000
		MOV	R1, R2
		MOV	R0, R5
		BL	SetGPIOMode	@ PA0 =	Push-Pull Output
		LDR	R0, dword_24A8
		SUBS	R0, #0x80
		STR	R4, [R0]	@ PA1 =	low
		MOVS	R2, #1
		MOVS	R1, #2
		MOV	R0, R5
		BL	SetGPIOMode	@ PA1 =	Push-Pull Output
		LDR	R0, dword_24A8
		ADDS	R0, #0xC
		STR	R4, [R0]	@ PC4 =	low
		MOVS	R2, #1
		MOVS	R1, #0x10
		MOV	R0, R7
		BL	SetGPIOMode	@ PC4 =	Push-Pull Output
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R6
		BL	SetGPIOMode	@ PD0 =	Input
		MOVS	R2, #1
		MOVS	R1, #0
		MOV	R0, R6
		BL	SetGPIOTrigInt	@ PD0 Trigger =	Edge, INT = Falling edge
		MOVS	R2, #0
		MOVS	R1, #0x80
		MOV	R0, R6
		BL	SetGPIOMode	@ PD7 =	Input
		LSLS	R2, R5,	#2	@ 0x00010000
		MOVS	R1, #7
		MOV	R0, R6
		BL	SetGPIOTrigInt	@ PD7 Trigger =	Edge, INT = Rising edge
		LDR.W	R0, [R5,#0xD4]!
		ORR.W	R0, R0,	#0x80
		STR	R0, [R5]	@ PD7 Debounce enabled
		LDR	R0, dword_24A8
		ADDS	R0, #0xA4
		STR	R4, [R0]	@ PE10 = low
		ASRS	R1, R0,	#20
		MOVS	R2, #1
		MOV	R0, R8
		BL	SetGPIOMode	@ PE10 = Push-Pull Output
		LDR	R0, dword_24A8
		ADDS	R0, #0xAC
		STR	R4, [R0]	@ PE12 = low
		ASRS	R1, R0,	#18
		MOVS	R2, #1
		MOV	R0, R8
		BL	SetGPIOMode	@ PE12 = Push-Pull Output
		LDR	R1, dword_24A8
		MOVS	R0, #1
		SUBS	R1, #0x28
		STR	R0, [R1]	@ PB7 =	high
		MOV	R2, R0
		LDR	R0, dword_24A4
		MOVS	R1, #0x80
		SUBS	R0, #0xC0
		BL	SetGPIOMode	@ PB7 =	Push-Pull Output
		MOVS	R0, #0x13
		BL	NVICEnableInt	@ GPD IRQ enable
		MOVS	R0, #0x14
		BL	NVICEnableInt	@ GPE IRQ enable
		MOVS	R0, #0x15
		BL	NVICEnableInt	@ GPF IRQ enable
		LDR	R1, dword_24AC
		MOVS	R0, #0x3A
		STR	R0, [R1]	@ ICLKON, DBCLKSRC = LIRC, DBCLKSEL = 4*256 CLK	(0.1s)
		POP.W	{R4-R8,PC}
@ End of function InitGPIO

@ ---------------------------------------------------------------------------
dword_24A4:	.long 0x40004100	@ DATA XREF: InitGPIO+20r InitGPIO+2Er ...
dword_24A8:	.long 0x40004884	@ DATA XREF: InitGPIO+46r InitGPIO+5Ar ...
dword_24AC:	.long 0x40004440	@ DATA XREF: InitGPIO+116r

@ =============== S U B	R O U T	I N E =======================================


SetGPIOMode:				@ CODE XREF: SetADCState+88p
					@ InitGPIO+2Ap	...
		PUSH	{R4-R7,LR}
		MOVS	R3, #0
		MOVS	R7, #1
		MOVS	R5, #3

loc_24B8:				@ CODE XREF: SetGPIOMode+28j
		LSL.W	R4, R7,	R3
		TST	R4, R1
		BEQ	loc_24D4
		LDR	R6, [R0]
		LSLS	R4, R3,	#1
		LSL.W	R12, R5, R4
		BIC.W	R6, R6,	R12
		LSL.W	R4, R2,	R4
		ORRS	R6, R4
		STR	R6, [R0]

loc_24D4:				@ CODE XREF: SetGPIOMode+Ej
		ADDS	R3, R3,	#1
		CMP	R3, #0x10
		BCC	loc_24B8
		POP	{R4-R7,PC}
@ End of function SetGPIOMode


@ =============== S U B	R O U T	I N E =======================================


sub_24DC:				@ CODE XREF: sub_854+F6p sub_854+10Cp	...
		MOV	R1, R0
		MOVS	R0, #0
		MOVS	R2, #0xA
		B	loc_24EC
@ ---------------------------------------------------------------------------

loc_24E4:				@ CODE XREF: sub_24DC+12j
		UDIV.W	R1, R1,	R2
		ADDS	R0, R0,	#1
		UXTB	R0, R0

loc_24EC:				@ CODE XREF: sub_24DC+6j
		CMP	R1, #0
		BNE	loc_24E4
		CMP	R0, #0
		BNE	locret_24F6
		MOVS	R0, #1

locret_24F6:				@ CODE XREF: sub_24DC+16j
		BX	LR
@ End of function sub_24DC


@ =============== S U B	R O U T	I N E =======================================


sub_24F8:				@ DATA XREF: sub_9B0+72o ROM:off_A84o
		PUSH	{R4,LR}
		LDR	R4, off_2558
		LDRB	R0, [R4,#2]
		CBZ	R0, loc_250C
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#2]
		LDR	R0, off_255C
		LDRB	R0, [R0]
		BL	DeleteTimeout	@ R0 Timeout #

loc_250C:				@ CODE XREF: sub_24F8+6j
		LDR	R0, off_2560
		LDRB.W	R0, [R0,#0xC0]
		CMP	R0, #2
		BEQ	loc_2534
		CMP	R0, #1
		LDRB	R0, [R4,#1]
		BEQ	loc_253A
		ADDS	R0, R0,	#4

loc_251E:				@ CODE XREF: sub_24F8+40j sub_24F8+44j
		STRB	R0, [R4,#1]
		SXTB	R0, R0
		MOVS	R1, #0xC
		CMP	R0, #0
		BLE	loc_253E
		SDIV.W	R0, R0,	R1
		LDRB	R1, [R4]
		ADD	R0, R1
		ADDS	R0, R0,	#1
		B	loc_254A
@ ---------------------------------------------------------------------------

loc_2534:				@ CODE XREF: sub_24F8+1Cj
		LDRB	R0, [R4,#1]
		ADDS	R0, R0,	#6
		B	loc_251E
@ ---------------------------------------------------------------------------

loc_253A:				@ CODE XREF: sub_24F8+22j
		ADDS	R0, R0,	#5
		B	loc_251E
@ ---------------------------------------------------------------------------

loc_253E:				@ CODE XREF: sub_24F8+2Ej
		NEGS	R0, R0
		SDIV.W	R0, R0,	R1
		LDRB	R1, [R4]
		SUBS	R0, R1,	R0
		SUBS	R0, R0,	#1

loc_254A:				@ CODE XREF: sub_24F8+3Aj
		STRB	R0, [R4]
		POP.W	{R4,LR}
		MOVS	R0, #8
		B.W	SetTimeoutValue
@ End of function sub_24F8

@ ---------------------------------------------------------------------------
		.balign 4,0
off_2558:	.long byte_2000014A	@ DATA XREF: sub_24F8+2r
off_255C:	.long CurrentTimeout	@ DATA XREF: sub_24F8+Cr
off_2560:	.long dfData		@ DATA XREF: sub_24F8:loc_250Cr

@ =============== S U B	R O U T	I N E =======================================


sub_2564:				@ DATA XREF: InitUSB+4o ROM:off_882Co

var_10		= -0x10

		PUSH	{R2-R4,LR}
		MOV	R0, SP
		BL	sub_8354
		LDRB.W	R0, [SP]
		LSLS	R0, R0,	#0x18
		BMI	loc_2582
		LDRB.W	R0, [SP,#1]
		MOVS	R1, #0
		CMP	R0, #9
		BEQ	loc_258A
		CMP	R0, #0xA
		BEQ	loc_25A2

loc_2582:				@ CODE XREF: sub_2564+Ej
		MOVS	R0, #0
		BL	sub_8584

locret_2588:				@ CODE XREF: sub_2564+2Cj
		POP	{R2-R4,PC}
@ ---------------------------------------------------------------------------

loc_258A:				@ CODE XREF: sub_2564+18j
		LDRB.W	R0, [SP,#0x10+var_10+3]
		CMP	R0, #3
		BNE	locret_2588
		LDR	R0, dword_25B4
		LDR	R2, [R0]
		ORR.W	R2, R2,	#0x80
		STR	R2, [R0]
		SUBS	R0, R0,	#4

loc_259E:				@ CODE XREF: sub_2564+4Cj
		STR	R1, [R0]
		POP	{R2-R4,PC}
@ ---------------------------------------------------------------------------

loc_25A2:				@ CODE XREF: sub_2564+1Cj
		LDR	R0, dword_25B4
		SUBS	R0, #0x10
		LDR	R2, [R0]
		ORR.W	R2, R2,	#0x80
		STR	R2, [R0]
		SUBS	R0, R0,	#4
		B	loc_259E
@ End of function sub_2564

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_25B4:	.long 0x400C0518	@ DATA XREF: sub_2564+2Er
					@ sub_2564:loc_25A2r

@ =============== S U B	R O U T	I N E =======================================


sub_25B8:				@ CODE XREF: sub_5F74+5Ap
		PUSH.W	{R4-R8,LR}
		LDR.W	R4, [R0,#2]
		LDR.W	R6, [R0,#6]
		MOV	R7, R0
		LDR	R5, off_2630
		MOV	R2, R6
		MOV	R1, R4
		ADR	R0, aGetInfoCommand @ "Get Info command - Start Addr: %d    Pa"...
		BL	PutTextf
		CBZ	R6, loc_262A
		MOVW	R1, #0x7FC
		ADDS	R0, R5,	#4
		BL	Checksum	@ R0 = Sum of the R1 bytes at R0
		MOV	R1, R5
		LDR.W	R8, off_2668
		STR	R0, [R1]
		ADDS	R0, R4,	R6
		CMP.W	R0, #0x800
		BHI	loc_25F4
		ADDS	R1, R5,	R4
		MOV	R2, R6
		B	loc_25FC
@ ---------------------------------------------------------------------------

loc_25F4:				@ CODE XREF: sub_25B8+34j
		RSB.W	R2, R4,	#0x800
		MOV	R6, R2
		ADDS	R1, R5,	R4

loc_25FC:				@ CODE XREF: sub_25B8+3Aj
		LDR	R0, off_266C
		BL	MemCpy
		LDR	R0, dword_2670
		STR.W	R6, [R8]
		STR.W	R6, [R7,#0xA]
		LDR	R0, [R0]
		MOV	R4, R8
		LDR	R1, dword_2674
		MOVS	R2, #0x40
		ADD	R0, R1
		LDR	R1, off_266C
		BL	sub_844C	@ Copy R2 bytes	from R1	to R0
		LDR	R1, dword_2670
		MOVS	R0, #0x40
		ADDS	R1, R1,	#4
		STR	R0, [R1]	@ max payload =	0x40
		LDR	R0, [R4]
		SUBS	R0, #0x40
		STR	R0, [R4]

loc_262A:				@ CODE XREF: sub_25B8+1Aj
		MOVS	R0, #0
		POP.W	{R4-R8,PC}
@ End of function sub_25B8

@ ---------------------------------------------------------------------------
off_2630:	.long dfData		@ DATA XREF: sub_25B8+Er
aGetInfoCommand:.ascii "Get Info command - Start Addr: %d    Param Len: %d"
					@ DATA XREF: sub_25B8+14o
		.byte 0xA
		.byte 0
off_2668:	.long dword_200000F0	@ DATA XREF: sub_25B8+28r
off_266C:	.long byte_20000A7C	@ DATA XREF: sub_25B8:loc_25FCr
					@ sub_25B8+5Er
dword_2670:	.long 0x400C0520	@ DATA XREF: sub_25B8+4Ar sub_25B8+64r
dword_2674:	.long 0x400C0100	@ DATA XREF: sub_25B8+58r

@ =============== S U B	R O U T	I N E =======================================


sub_2678:				@ CODE XREF: sub_5F74+6Ap
		PUSH	{R4,LR}
		MOV	R4, R0
		ADR	R0, aSetBootLogoC_0 @ "Set Boot Logo command - Start page: %d"...
		LDR.W	R1, [R4,#2]!
		LDR	R2, [R4,#4]
		BL	PutTextf
		MOV.W	R1, #0x800
		LDR	R0, off_26D0
		BL	MemClear
		LDR	R1, off_26D4
		MOVS	R0, #0
		STR	R0, [R1]
		STR	R0, [R4,#8]
		POP	{R4,PC}
@ End of function sub_2678

@ ---------------------------------------------------------------------------
aSetBootLogoC_0:.ascii "Set Boot Logo command - Start page: %d" @ DATA XREF: sub_2678+4o
		.byte 9
		.byte 9
		.ascii "Len: %d"
		.byte 0xA
		.byte 0
		@.align 4
		.byte 0
		.byte 0
		.byte 0
off_26D0:	.long byte_20000A7C	@ DATA XREF: sub_2678+14r
off_26D4:	.long dword_200000F0	@ DATA XREF: sub_2678+1Ar

@ =============== S U B	R O U T	I N E =======================================


sub_26D8:				@ CODE XREF: sub_5F74+62p
		PUSH	{R4,LR}
		LDR.W	R1, [R0,#2]!
		LDR	R2, [R0,#4]
		ADR	R0, aSetParamComman @ "Set Param command - Start Addr: %d    P"...
		BL	PutTextf
		LDR	R1, off_2728
		MOVS	R0, #0
		STR	R0, [R1]
		POP	{R4,PC}
@ End of function sub_26D8

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
aSetParamComman:.ascii "Set Param command - Start Addr: %d    Param Len: %d"
					@ DATA XREF: sub_26D8+8o
		.byte 0xA
		.byte 0
		@.align 4
		.byte 0
		.byte 0
		.byte 0
off_2728:	.long dword_200000F0	@ DATA XREF: sub_26D8+Er

@ =============== S U B	R O U T	I N E =======================================


sub_272C:				@ CODE XREF: sub_5F74+70p
		PUSH	{R4,LR}
		MOV	R4, R0
		ADR	R0, aUpdateLdromC_0 @ "Update LDROM command - Start page: %d\t"...
		LDR.W	R1, [R4,#2]!
		LDR	R2, [R4,#4]
		BL	PutTextf
		MOV.W	R1, #0x800
		LDR	R0, off_2780
		BL	MemClear
		LDR	R1, off_2784
		MOVS	R0, #0
		STR	R0, [R1]
		STR	R0, [R4,#8]
		POP	{R4,PC}
@ End of function sub_272C

@ ---------------------------------------------------------------------------
aUpdateLdromC_0:.ascii "Update LDROM command - Start page: %d" @ DATA XREF: sub_272C+4o
		.byte 9
		.byte 9
		.ascii "Len: %d"
		.byte 0xA
		.byte 0
off_2780:	.long byte_20000A7C	@ DATA XREF: sub_272C+14r
off_2784:	.long dword_200000F0	@ DATA XREF: sub_272C+1Ar

@ =============== S U B	R O U T	I N E =======================================


sub_2788:				@ CODE XREF: sub_2130+10p
		PUSH.W	{R4-R12,LR}
		LDR.W	R9, off_29A4
		LDR.W	R8, off_29A8
		ADD.W	R10, R9, #0x800
		MOV	R3, R0
		LDRB.W	R5, [R10]
		LDR.W	R2, [R8]
		LDR.W	R7, [R10,#2]
		LDR.W	R6, [R10,#6]
		LDR.W	R4, [R10,#0xA]
		SUB.W	R0, R9,	#0x800
		ADD	R0, R2
		MOV.W	R11, #0
		CMP	R5, #0x53	@ Set Sys Param
		BEQ	loc_27DC
		MOV.W	R9, #0x40000000
		CMP	R5, #0xA5
		BEQ	loc_2884
		CMP	R5, #0x3C
		BEQ	loc_28C0
		MOV	R0, R3
		BL	sub_5F74
		CMP	R0, #0
		BEQ	locret_2880
		POP.W	{R4-R12,LR}
		ADR	R0, aUnknownHidComm @ "Unknown HID command!\n"
		B.W	PutTextf
@ ---------------------------------------------------------------------------

loc_27DC:				@ CODE XREF: sub_2788+32j
		MOVS	R2, #0x40
		MOV	R1, R3
		BL	sub_844C	@ Copy R2 bytes	from R1	to R0
		LDR.W	R0, [R8]
		ADDS	R0, #0x40
		STR.W	R0, [R8]
		CMP	R0, R6
		BCC	loc_287C
		MOVS	R5, #0
		ADDS	R0, R7,	R6
		CMP.W	R0, #0x800
		BHI	loc_2804
		ADD.W	R0, R9,	R7
		MOV	R2, R6
		B	loc_280C
@ ---------------------------------------------------------------------------

loc_2804:				@ CODE XREF: sub_2788+72j
		RSB.W	R2, R7,	#0x800
		ADD.W	R0, R9,	R7

loc_280C:				@ CODE XREF: sub_2788+7Aj
		LDR	R1, off_29C4
		BL	MemCpy
		ADR	R0, aSetSysParamCom @ "Set Sys Param complete.\n"
		BL	PutTextf
		MOVW	R1, #0x7FC
		ADD.W	R0, R9,	#4
		BL	Checksum	@ R0 = Sum of the R1 bytes at R0
		LDR	R4, off_29A4
		LDR	R1, [R4]
		CMP	R0, R1
		BNE	loc_2872
		ADR	R0, aCompanyId_____ @ "\tCompany ID .........................."...
		LDR.W	R1, [R4,#0x10C]
		BL	PutTextf
		ADR	R0, aDeviceId______ @ "\tDevice ID ..........................."...
		LDR.W	R1, [R4,#0x110]
		BL	PutTextf
		ADR	R0, aProductId_____ @ "\tProduct ID .........................."...
		LDR.W	R1, [R4,#0x114]
		BL	PutTextf
		LDRB	R1, [R4,#0xD]
		ADR	R0, aU8updateaprom_ @ "\tu8UpdateAPRom ......................."...
		BL	PutTextf
		MOV.W	R2, #0x100
		ADDS	R1, R4,	#4
		LDR	R0, off_2AB4
		BL	MemCpy
		BL	DFCheckValuesValidity
		BL	UpdateDataFlash
		LDR	R0, off_2AB8
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x20000
		STR	R1, [R0]
		B	loc_2878
@ ---------------------------------------------------------------------------

loc_2872:				@ CODE XREF: sub_2788+A2j
		ADR	R0, aSysParamRecive @ "Sys Param Recive fail.\n"
		BL	PutTextf

loc_2878:				@ CODE XREF: sub_2788+E8j
		STR.W	R11, [R8]

loc_287C:				@ CODE XREF: sub_2788+68j
		STRB.W	R5, [R10]

locret_2880:				@ CODE XREF: sub_2788+48j
					@ sub_2788+188j
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_2884:				@ CODE XREF: sub_2788+3Aj
		MOVS	R2, #0x40
		MOV	R1, R3
		BL	sub_844C	@ Copy R2 bytes	from R1	to R0
		LDR.W	R0, [R8]
		ADDS	R0, #0x40
		STR.W	R0, [R8]
		CMP.W	R0, #0x800
		BCS	loc_28A2
		ADD	R0, R4
		CMP	R0, R6
		BCC	loc_2908

loc_28A2:				@ CODE XREF: sub_2788+112j
		ADD	R7, R4
		MOV	R1, R7
		ADR	R0, aWritingPageD @ "Writing page %d\n"
		BL	PutTextf
		BL	UnlockRegisters3
		BL	FMCEnableISP
		MOV	R0, R7
		LDR	R1, off_29C4
		BL	FMCEraseWrite800 @ Erase & writes 2kB from RAM R1 to DF	R0
		CBZ	R0, loc_28C8
		B	loc_28C2
@ ---------------------------------------------------------------------------

loc_28C0:				@ CODE XREF: sub_2788+3Ej
		B	loc_2912
@ ---------------------------------------------------------------------------

loc_28C2:				@ CODE XREF: sub_2788+136j
		ADR	R0, aDataFlashErase @ "Data Flash Erase error!\n"
		BL	PutTextf

loc_28C8:				@ CODE XREF: sub_2788+134j
		MOV	R0, R7
		LDR	R1, off_29C4
		BL	FMCVerif800	@ Compares 2kB (0x800) DF @R0 with RAM @R1
		CBZ	R0, loc_28DC
		LSLS	R1, R0,	#2
		ADR	R0, aDataFlashVerif @ "Data Flash Verify error! 0x%x\n"
		SUBS	R1, R1,	#4
		BL	PutTextf

loc_28DC:				@ CODE XREF: sub_2788+148j
		MOV.W	R1, #0x800
		LDR	R0, off_29C4
		BL	MemClear
		LDR.W	R1, [R8]
		MOV	R7, R8
		ADD	R4, R1
		MOV	R2, R4
		ADR	R0, aG_u32bytesinpa @ "g_u32BytesInPageBuf %d, u32LenCnt 0x%x"...
		BL	PutTextf
		BL	FMCDisableISP
		STR.W	R11, [R9,#0x100]
		CMP	R4, R6
		BCC	loc_299C
		MOVS	R5, #0
		ADR	R0, aSetBootLogoCom @ "set boot logo command complete.\n"
		B	loc_2998
@ ---------------------------------------------------------------------------

loc_2908:				@ CODE XREF: sub_2788+118j
					@ sub_2788+1A6j ...
		STRB.W	R5, [R10]
		STR.W	R4, [R10,#0xA]
		B	locret_2880
@ ---------------------------------------------------------------------------

loc_2912:				@ CODE XREF: sub_2788:loc_28C0j
		MOVS	R2, #0x40
		MOV	R1, R3
		BL	sub_844C	@ Copy R2 bytes	from R1	to R0
		LDR.W	R0, [R8]
		ADDS	R0, #0x40
		STR.W	R0, [R8]
		CMP.W	R0, #0x800
		BCS	loc_2930
		ADD	R0, R4
		CMP	R0, R6
		BCC	loc_2908

loc_2930:				@ CODE XREF: sub_2788+1A0j
		ADD	R7, R4
		MOV	R1, R7
		ADR	R0, aWritingPage0x0 @ "Writing page 0x%08X\n"
		BL	PutTextf
		BL	UnlockRegisters3
		BL	FMCEnableISP
		BL	FMCEnableLDROMUpdate
		MOV	R0, R7
		LDR	R1, off_29C4
		BL	FMCEraseWrite800 @ Erase & writes 2kB from RAM R1 to DF	R0
		CBZ	R0, loc_2956
		ADR	R0, aDataFlashErase @ "Data Flash Erase error!\n"
		BL	PutTextf

loc_2956:				@ CODE XREF: sub_2788+1C6j
		MOV	R0, R7
		LDR	R1, off_29C4
		BL	FMCVerif800	@ Compares 2kB (0x800) DF @R0 with RAM @R1
		CBZ	R0, loc_296A
		LSLS	R1, R0,	#2
		ADR	R0, aDataFlashVerif @ "Data Flash Verify error! 0x%x\n"
		SUBS	R1, R1,	#4
		BL	PutTextf

loc_296A:				@ CODE XREF: sub_2788+1D6j
		MOV.W	R1, #0x800
		LDR	R0, off_29C4
		BL	MemClear
		LDR.W	R1, [R8]
		MOV	R7, R8
		ADD	R4, R1
		MOV	R2, R4
		ADR	R0, aG_u32bytesinpa @ "g_u32BytesInPageBuf %d, u32LenCnt 0x%x"...
		BL	PutTextf
		BL	FMCDisableLDROMUpdate
		BL	FMCDisableISP
		STR.W	R11, [R9,#0x100]
		CMP	R4, R6
		BCC	loc_299C
		MOVS	R5, #0
		ADR	R0, aUpdateLdromCom @ "Update LDROM command complete.\n"

loc_2998:				@ CODE XREF: sub_2788+17Ej
		BL	PutTextf

loc_299C:				@ CODE XREF: sub_2788+178j
					@ sub_2788+20Aj
		STR.W	R11, [R7]
		B	loc_2908
@ End of function sub_2788

@ ---------------------------------------------------------------------------
		.balign 4,0
off_29A4:	.long dword_2000127C	@ DATA XREF: sub_2788+4r sub_2788+9Cr
off_29A8:	.long dword_200000F0	@ DATA XREF: sub_2788+8r
aUnknownHidComm:.ascii "Unknown HID command!" @ DATA XREF: sub_2788+4Eo
		.byte 0xA
		.byte 0
		.balign 4,0
off_29C4:	.long byte_20000A7C	@ DATA XREF: sub_2788:loc_280Cr
					@ sub_2788+12Er ...
aSetSysParamCom:.ascii "Set Sys Param complete." @ DATA XREF: sub_2788+8Ao
		.byte 0xA
		.byte 0
		.balign 4,0
aCompanyId_____:.byte 9			@ DATA XREF: sub_2788+A4o
		.ascii "Company ID ............................ [0x%08x]"
		.byte 0xA
		.byte 0
		.balign 4,0
aDeviceId______:.byte 9			@ DATA XREF: sub_2788+AEo
		.ascii "Device ID ............................. [0x%08x]"
		.byte 0xA
		.byte 0
		.balign 4,0
aProductId_____:.byte 9			@ DATA XREF: sub_2788+B8o
		.ascii "Product ID ............................ [0x%08x]"
		.byte 0xA
		.byte 0
		.balign 4,0
aU8updateaprom_:.byte 9			@ DATA XREF: sub_2788+C4o
		.ascii "u8UpdateAPRom ......................... [0x%08x]"
		.byte 0xA
		.byte 0
		.balign 4,0
off_2AB4:	.long dfCRC		@ DATA XREF: sub_2788+D0r
off_2AB8:	.long dword_20000064	@ DATA XREF: sub_2788+DEr
aSysParamRecive:.ascii "Sys Param Recive fail." @ DATA XREF: sub_2788:loc_2872o
		.byte 0xA
		.byte 0
aWritingPageD:	.ascii "Writing page %d" @ DATA XREF: sub_2788+11Eo
		.byte 0xA
		.byte 0
		.balign 4,0
aDataFlashErase:.ascii "Data Flash Erase error!" @ DATA XREF: sub_2788:loc_28C2o
					@ sub_2788+1C8o
		.byte 0xA
		.byte 0
		.balign 4,0
aDataFlashVerif:.ascii "Data Flash Verify error! 0x%x" @ DATA XREF: sub_2788+14Co
					@ sub_2788+1DAo
		.byte 0xA
		.byte 0
		.balign 4,0
aG_u32bytesinpa:.ascii "g_u32BytesInPageBuf %d, u32LenCnt 0x%x" @ DATA XREF: sub_2788+168o
					@ sub_2788+1F6o
		.byte 0xA
		.byte 0
aSetBootLogoCom:.ascii "set boot logo command complete." @ DATA XREF: sub_2788+17Co
		.byte 0xA
		.byte 0
		.balign 4,0
aWritingPage0x0:.ascii "Writing page 0x%08X" @ DATA XREF: sub_2788+1ACo
		.byte 0xA
		.byte 0
		.balign 4,0
aUpdateLdromCom:.ascii "Update LDROM command complete." @ DATA XREF: sub_2788+20Eo
		.byte 0xA
		.byte 0

@ =============== S U B	R O U T	I N E =======================================


sub_2BA8:				@ CODE XREF: InitUSB+Cp
		LDR	R1, dword_2BF8
		MOVS	R0, #0
		STR	R0, [R1,#0x18]
		LDR	R1, dword_2BFC
		MOV.W	R0, #0x240
		STR	R0, [R1]
		LDR	R1, dword_2BFC
		MOVS	R0, #8
		SUBS	R1, #8
		STR	R0, [R1]
		LDR	R2, dword_2BFC
		MOV.W	R1, #0x220
		ADDS	R2, #0x10
		STR	R1, [R2]
		LDR	R1, dword_2BFC
		ADDS	R1, #8
		STR	R0, [R1]
		LDR	R1, dword_2BFC
		MOVS	R0, #0x41
		ADDS	R1, #0x20
		STR	R0, [R1]
		LDR	R1, dword_2BFC
		MOVS	R0, #0x10
		ADDS	R1, #0x18
		STR	R0, [R1]
		LDR	R1, dword_2BFC
		MOVS	R0, #0x22
		ADDS	R1, #0x30
		STR	R0, [R1]
		LDR	R1, dword_2BFC
		MOVS	R0, #0x50
		ADDS	R1, #0x28
		STR	R0, [R1]
		MOVS	R0, #0x40
		ADDS	R1, R1,	#4
		STR	R0, [R1]
		BX	LR
@ End of function sub_2BA8

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_2BF8:	.long 0x400C0000	@ DATA XREF: sub_2BA8r
dword_2BFC:	.long 0x400C0508	@ DATA XREF: sub_2BA8+6r sub_2BA8+Er ...

@ =============== S U B	R O U T	I N E =======================================


sub_2C00:				@ CODE XREF: sub_5F74+80p
		PUSH	{R4,LR}
		MOV	R4, R0
		ADR	R0, aResetParam	@ "Reset param\n"
		BL	PutTextf
		BL	ResetDataFlash
		BL	UpdateDataFlash
		LDR	R1, off_2C34
		LDR	R0, [R1]
		ORR.W	R2, R0,	#0x20000
		MOVS	R0, #0
		STR	R2, [R1]
		STRB	R0, [R4]
		POP	{R4,PC}
@ End of function sub_2C00

@ ---------------------------------------------------------------------------
		.balign 4,0
aResetParam:	.ascii "Reset param"    @ DATA XREF: sub_2C00+4o
		.byte 0xA
		.byte 0
		.balign 4,0
off_2C34:	.long dword_20000064	@ DATA XREF: sub_2C00+12r

@ =============== S U B	R O U T	I N E =======================================


sub_2C38:				@ CODE XREF: sub_5F74+78p

@ FUNCTION CHUNK AT 00000CD4 SIZE 0000000A BYTES

		PUSH	{R4,LR}
		ADR	R0, aResetSystemCom @ "Reset system command\n"
		BL	PutTextf
		BL	loc_CD4
@ End of function sub_2C38


@ =============== S U B	R O U T	I N E =======================================


sub_2C44:
		MOVS	R0, #0
		POP	{R4,PC}
@ End of function sub_2C44

@ ---------------------------------------------------------------------------
aResetSystemCom:.ascii "Reset system command" @ DATA XREF: sub_2C38+2o
		.byte 0xA
		.byte 0
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


usbEventEndpoint2:			@ CODE XREF: USBD_IRQHandler+A6p
		PUSH	{R4-R6,LR}
		LDR	R5, off_2CA0
		LDRB	R4, [R5]
		CMP	R4, #0x35
		BNE	locret_2C9A
		LDR	R6, off_2CA4
		LDR.W	R2, [R5,#0xA]
		LDR	R1, [R6]
		CBZ	R1, loc_2C9C
		LDR	R0, dword_2CA8
		LDR	R0, [R0]
		SUBS	R1, R2,	R1
		LDR	R3, dword_2CAC
		SUB.W	R2, R5,	#0x1000
		ADD	R1, R2
		ADD	R0, R3
		MOVS	R2, #0x40
		BL	sub_844C	@ Copy R2 bytes	from R1	to R0
		LDR	R1, dword_2CA8
		MOVS	R0, #0x40
		ADDS	R1, R1,	#4
		STR	R0, [R1]
		LDR	R0, [R6]
		SUBS	R0, #0x40
		STR	R0, [R6]

loc_2C98:				@ CODE XREF: usbEventEndpoint2+3Ej
		STRB	R4, [R5]

locret_2C9A:				@ CODE XREF: usbEventEndpoint2+8j
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_2C9C:				@ CODE XREF: usbEventEndpoint2+12j
		MOVS	R4, #0
		B	loc_2C98
@ End of function usbEventEndpoint2

@ ---------------------------------------------------------------------------
off_2CA0:	.long byte_20001A7C	@ DATA XREF: usbEventEndpoint2+2r
off_2CA4:	.long dword_200000F0	@ DATA XREF: usbEventEndpoint2+Ar
dword_2CA8:	.long 0x400C0520	@ DATA XREF: usbEventEndpoint2+14r
					@ usbEventEndpoint2+2Ar
dword_2CAC:	.long 0x400C0100	@ DATA XREF: usbEventEndpoint2+1Ar
@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR HardFault_Handler

loc_2CB0:				@ CODE XREF: HardFault_Handler+16j
					@ DATA XREF: HardFault_Handler+14o ...
		MOV	R4, R0
		ADR	R0, aInHardFaultHan @ "In Hard Fault Handler\n"
		BL	PutTextf
		MOV	R0, R4
		BL	DumpRegisters

loc_2CBE:				@ CODE XREF: HardFault_Handler:loc_2CBEj
		B	loc_2CBE
@ END OF FUNCTION CHUNK	FOR HardFault_Handler
@ ---------------------------------------------------------------------------
aInHardFaultHan:.ascii "In Hard Fault Handler" @ DATA XREF: HardFault_Handler+2B5Eo
		.byte 0xA
		.byte 0
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


RegulateBuckBoost:			@ CODE XREF: ReachTargetVoltage:loc_2EE8p
					@ GotoMain+90AEp
		PUSH.W	{R4-R12,LR}
		LDR	R4, off_2E94
		LDRH	R0, [R4]
		LSLS	R0, R0,	#23
		BPL	loc_2CEC
		BL	CheckBattery
		CMP	R0, #0
		BNE	locret_2DC8

loc_2CEC:				@ CODE XREF: RegulateBuckBoost+Aj
		LDR	R0, [R4]
		MOV	R8, R4
		LSLS	R1, R0,	#0x12
		BMI	loc_2CF8
		LSLS	R0, R0,	#0x17
		BPL	locret_2DC8

loc_2CF8:				@ CODE XREF: RegulateBuckBoost+1Aj
		MOVS	R0, #1
		BL	ADC_Read	@ R0: Channel
		LDR	R6, off_2E98
		MOVW	R1, #0x455
		LDR.W	R11, dword_2E9C
		STR	R0, [R6,#8]
		MULS	R0, R1
		LSRS	R0, R0,	#0xC
		STR	R0, [R6,#0xC]
		LDR	R1, dword_2E9C
		LDRB	R0, [R6]
		MOVS	R5, #1
		ADD.W	R9, R1,	#4
		SUB.W	R11, R11, #8
		SUB.W	R10, R1, #4
		CMP	R0, #1
		BEQ	loc_2D7C
		LDR	R4, off_2EA0
		LDR	R7, dword_2EA4
		CMP	R0, #2
		BEQ	loc_2DD6
		CMP	R0, #3
		BNE	locret_2DC8
		MOV	R8, R6
		LDRB	R1, [R6,#1]
		LDR	R6, off_2EA8
		CMP	R1, #3
		BEQ	loc_2D66
		STRB.W	R0, [R8,#1]
		STR.W	R5, [R11]
		MOVS	R1, #0
		MOV	R0, R1
		BL	InitGPIO_PWM
		STR.W	R5, [R10]
		MOVS	R1, #1
		MOVS	R0, #2
		BL	InitGPIO_PWM
		MOVW	R0, #0x1DF
		STRH	R0, [R6]
		LDRH	R0, [R4]
		STR	R0, [R7,#0x50]
		STR.W	R5, [R9]

loc_2D66:				@ CODE XREF: RegulateBuckBoost+62j
		LDR.W	R2, [R8,#0x18]
		LDR.W	R1, [R8,#0xC]
		CMP	R1, R2
		BCS	loc_2E70
		LDRH	R0, [R6]
		CMP	R0, #0x50
		BLS	loc_2E76
		SUBS	R0, R0,	#1
		B	loc_2E84
@ ---------------------------------------------------------------------------

loc_2D7C:				@ CODE XREF: RegulateBuckBoost+4Cj
		LDRB	R0, [R6,#1]
		CMP	R0, #1
		BEQ	loc_2DA0
		STR	R5, [R1]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	InitGPIO_PWM
		STR.W	R5, [R9]
		STR.W	R5, [R11]
		MOVS	R1, #0
		MOV	R0, R1
		BL	InitGPIO_PWM
		STR.W	R5, [R10]

loc_2DA0:				@ CODE XREF: RegulateBuckBoost+A8j
		LDR	R1, [R6,#0x18]
		LDR	R0, [R6,#0xC]
		CMP	R0, R1
		BEQ	loc_2DCC
		LDRB	R0, [R6,#2]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R6,#2]
		CMP	R0, #5
		BCC	locret_2DC8
		LDR	R0, off_2EAC
		LDRB	R0, [R0,#0xE]
		CMP	R0, #5
		BEQ	loc_2DC6
		LDRB	R0, [R6,#1]
		CMP	R0, #2
		BEQ	loc_2DD2
		MOVS	R0, #2

loc_2DC4:				@ CODE XREF: RegulateBuckBoost+FCj
		STRB	R0, [R6]

loc_2DC6:				@ CODE XREF: RegulateBuckBoost+E2j
		STRB	R5, [R6,#1]

locret_2DC8:				@ CODE XREF: RegulateBuckBoost+12j
					@ RegulateBuckBoost+1Ej ...
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_2DCC:				@ CODE XREF: RegulateBuckBoost+CEj
		MOVS	R0, #0
		STRB	R0, [R6,#2]
		B	locret_2DC8
@ ---------------------------------------------------------------------------

loc_2DD2:				@ CODE XREF: RegulateBuckBoost+E8j
		MOVS	R0, #3
		B	loc_2DC4
@ ---------------------------------------------------------------------------

loc_2DD6:				@ CODE XREF: RegulateBuckBoost+54j
		LDRB	R0, [R6,#1]
		CMP	R0, #2
		BEQ	loc_2E08
		STR	R5, [R1]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	InitGPIO_PWM
		STR.W	R5, [R9]
		MOVS	R1, #1
		MOVS	R0, #0
		BL	InitGPIO_PWM
		LDRB	R0, [R6,#1]
		CBZ	R0, loc_2E1C
		MOVW	R0, #0x1DF

loc_2DFA:				@ CODE XREF: RegulateBuckBoost+146j
		STRH	R0, [R4]
		UXTH	R0, R0
		STR	R0, [R7,#0x50]
		STR.W	R5, [R10]
		LDRB	R0, [R6]
		STRB	R0, [R6,#1]

loc_2E08:				@ CODE XREF: RegulateBuckBoost+102j
		LDR	R1, [R6,#0x18]
		LDR	R0, [R6,#0xC]
		CMP	R0, R1
		BCS	loc_2E38
		LDRH	R0, [R4]
		CMP.W	R0, #0x1DE
		BHI	loc_2E20
		ADDS	R0, R0,	#1
		B	loc_2E46
@ ---------------------------------------------------------------------------

loc_2E1C:				@ CODE XREF: RegulateBuckBoost+11Cj
		MOVS	R0, #0xA
		B	loc_2DFA
@ ---------------------------------------------------------------------------

loc_2E20:				@ CODE XREF: RegulateBuckBoost+13Ej
		ADD.W	R0, R1,	R1,LSL#1
		LSLS	R1, R0,	#2
		LDR	R0, off_2EB0
		LDRH	R0, [R0]
		ADD.W	R0, R0,	R0,LSL#2
		CMP.W	R1, R0,LSL#1
		BLS	loc_2E48
		STRB	R5, [R6]
		B	loc_2E48
@ ---------------------------------------------------------------------------

loc_2E38:				@ CODE XREF: RegulateBuckBoost+136j
		BLS	loc_2E48
		LDRH	R0, [R4]
		CMP	R0, #0xA
		BLS	loc_2E44
		SUBS	R0, R0,	#1
		B	loc_2E46
@ ---------------------------------------------------------------------------

loc_2E44:				@ CODE XREF: RegulateBuckBoost+166j
		MOVS	R0, #0

loc_2E46:				@ CODE XREF: RegulateBuckBoost+142j
					@ RegulateBuckBoost+16Aj
		STRH	R0, [R4]

loc_2E48:				@ CODE XREF: RegulateBuckBoost+15Aj
					@ RegulateBuckBoost+15Ej ...
		LDR	R0, off_2EB4
		LDRB	R0, [R0]
		CBZ	R0, loc_2E62
		CMP	R0, #1
		BEQ	loc_2E62
		LDRH.W	R0, [R8]
		LSLS	R0, R0,	#0x17
		BMI	loc_2E6C
		LDR	R0, off_2EB8
		LDRB	R0, [R0]
		CMP	R0, #0xC
		BCC	loc_2E6C

loc_2E62:				@ CODE XREF: RegulateBuckBoost+174j
					@ RegulateBuckBoost+178j
		LDRH	R0, [R4]
		CMP	R0, #0x2D
		BCC	loc_2E6C
		MOVS	R0, #0x2D
		STRH	R0, [R4]

loc_2E6C:				@ CODE XREF: RegulateBuckBoost+180j
					@ RegulateBuckBoost+188j ...
		LDRH	R0, [R4]
		B	loc_2E72
@ ---------------------------------------------------------------------------

loc_2E70:				@ CODE XREF: RegulateBuckBoost+98j
		B	loc_2E76
@ ---------------------------------------------------------------------------

loc_2E72:				@ CODE XREF: RegulateBuckBoost+196j
		STR	R0, [R7,#0x50]
		B	locret_2DC8
@ ---------------------------------------------------------------------------

loc_2E76:				@ CODE XREF: RegulateBuckBoost+9Ej
					@ RegulateBuckBoost:loc_2E70j
		CMP	R1, R2
		BLS	loc_2E8C
		LDRH	R0, [R6]
		CMP.W	R0, #0x1DE
		BHI	loc_2E88
		ADDS	R0, R0,	#1

loc_2E84:				@ CODE XREF: RegulateBuckBoost+A2j
		STRH	R0, [R6]
		B	loc_2E8C
@ ---------------------------------------------------------------------------

loc_2E88:				@ CODE XREF: RegulateBuckBoost+1A8j
		STRB.W	R5, [R8]

loc_2E8C:				@ CODE XREF: RegulateBuckBoost+1A0j
					@ RegulateBuckBoost+1AEj
		LDRH	R0, [R6]
		STR	R0, [R7,#0x58]
		B	locret_2DC8
@ End of function RegulateBuckBoost

@ ---------------------------------------------------------------------------
		.balign 4,0
off_2E94:	.long dword_20000064	@ DATA XREF: RegulateBuckBoost+4r
off_2E98:	.long BBCNextMode	@ DATA XREF: RegulateBuckBoost+26r
dword_2E9C:	.long 0x40004888	@ DATA XREF: RegulateBuckBoost+2Cr
					@ RegulateBuckBoost+38r
off_2EA0:	.long BuckDuty		@ DATA XREF: RegulateBuckBoost+4Er
dword_2EA4:	.long 0x40058000	@ DATA XREF: RegulateBuckBoost+50r
off_2EA8:	.long BoostDuty		@ DATA XREF: RegulateBuckBoost+5Er
off_2EAC:	.long dfData		@ DATA XREF: RegulateBuckBoost+DCr
off_2EB0:	.long BatteryVoltage	@ DATA XREF: RegulateBuckBoost+14Er
off_2EB4:	.long AtoError		@ DATA XREF: RegulateBuckBoost:loc_2E48r
off_2EB8:	.long byte_2000003E	@ DATA XREF: RegulateBuckBoost+182r

@ =============== S U B	R O U T	I N E =======================================


ReachTargetVoltage:			@ CODE XREF: EventHandler+7DEp
					@ sub_6038+70p
		PUSH.W	{R4-R10,LR}
		LDR	R5, off_2F2C
		MOVS	R0, #2
		LDR	R6, off_2F30
		STRB	R0, [R5]
		MOVS	R0, #0
		STRB	R0, [R5,#1]
		LDR	R4, off_2F34
		LDR	R7, off_2F38
		LDR.W	R8, off_2F3C
		LDR.W	R9, off_2F40
		MOV.W	R10, #2000
		STR	R0, [R5,#0x10]

loc_2EDE:				@ CODE XREF: ReachTargetVoltage+6Aj
		LDR	R0, [R4]
		LSLS	R1, R0,	#18
		BMI	loc_2EE8
		LSLS	R0, R0,	#23
		BPL	locret_2F28

loc_2EE8:				@ CODE XREF: ReachTargetVoltage+26j
		BL	RegulateBuckBoost
		BL	GetAtoCurrent
		LDR	R1, [R5,#0x18]
		LDR	R0, [R5,#0xC]
		CMP	R0, R1
		BEQ	locret_2F28
		LDRB	R0, [R6]
		CBZ	R0, loc_2F0C
		CMP	R0, #1
		BEQ	loc_2F0C
		LDRH	R0, [R4]
		LSLS	R0, R0,	#0x17
		BMI	loc_2F14
		LDRB	R0, [R7]
		CMP	R0, #0xC
		BCC	loc_2F14

loc_2F0C:				@ CODE XREF: ReachTargetVoltage+3Ej
					@ ReachTargetVoltage+42j
		LDRH.W	R0, [R8]
		CMP	R0, #0x2D
		BCS	locret_2F28

loc_2F14:				@ CODE XREF: ReachTargetVoltage+48j
					@ ReachTargetVoltage+4Ej
		LDRB.W	R0, [R9,#0xE]
		CMP	R0, #5
		BNE	loc_2F22
		LDRB	R0, [R5,#1]
		CMP	R0, #1
		BEQ	locret_2F28

loc_2F22:				@ CODE XREF: ReachTargetVoltage+5Ej
		LDR	R0, [R5,#0x10]
		CMP	R0, R10
		BCC	loc_2EDE

locret_2F28:				@ CODE XREF: ReachTargetVoltage+2Aj
					@ ReachTargetVoltage+3Aj ...
		POP.W	{R4-R10,PC}
@ End of function ReachTargetVoltage

@ ---------------------------------------------------------------------------
off_2F2C:	.long BBCNextMode	@ DATA XREF: ReachTargetVoltage+4r
off_2F30:	.long AtoError		@ DATA XREF: ReachTargetVoltage+8r
off_2F34:	.long dword_20000064	@ DATA XREF: ReachTargetVoltage+10r
off_2F38:	.long byte_2000003E	@ DATA XREF: ReachTargetVoltage+12r
off_2F3C:	.long BuckDuty		@ DATA XREF: ReachTargetVoltage+14r
off_2F40:	.long dfData		@ DATA XREF: ReachTargetVoltage+18r

@ =============== S U B	R O U T	I N E =======================================


GetAtoTemp:				@ CODE XREF: ReadAtoTemp+196p
		PUSH	{R4-R6,LR}
		LDR	R3, off_2FE8
		LDR	R0, [R3,#0x14]
		CMP	R0, #0
		BEQ	locret_2FD8
		MOVW	R1, #3000
		CMP	R0, R1
		BHI	locret_2FD8
		LDR	R1, off_2FEC
		LDRH	R2, [R1,#0x1C]
		CMP	R2, #150
		BHI	locret_2FD8
		ADD.W	R4, R2,	R2,LSL#3
		ADD.W	R4, R4,	R2,LSL#4
		CMP.W	R0, R4,LSL#1
		BHI	locret_2FD8
		MOVS	R4, #10
		UDIV.W	R4, R0,	R4
		CMP	R4, R2
		BHI	loc_2F7A
		MOVS	R0, #70
		B	loc_2FD6
@ ---------------------------------------------------------------------------

loc_2F7A:				@ CODE XREF: GetAtoTemp+30j
		LDR	R4, off_2FEC
		LDR	R6, off_2FE8
		LDRB	R1, [R1,#0x1A]
		LDRH	R4, [R4,#0x1C]
		LDR	R5, [R6,#0x14]
		NEGS	R4, R4
		ADD.W	R4, R4,	R4,LSL#2
		ADD.W	R5, R5,	R4,LSL#1
		LDRH	R4, [R6,#6]
		CMP	R1, #1
		BEQ	loc_2FCC
		CMP	R1, #2
		BEQ	loc_2FDA
		LDR	R0, off_2FEC
		MOV	R4, R6
		LDRH	R0, [R0,#0x1C]
		LDR	R5, [R4,#0x14]
		NEGS	R2, R0
		ADD.W	R2, R2,	R2,LSL#2
		ADD.W	R2, R5,	R2,LSL#1
		LDRH	R4, [R4,#6]
		MOVW	R5, #10000
		MULS	R2, R5
		MULS	R0, R4
		CMP	R1, #3
		BEQ	loc_2FBC
		CMP	R1, #4
		BNE	locret_2FD8

loc_2FBC:				@ CODE XREF: GetAtoTemp+72j
		UDIV.W	R0, R2,	R0
		ADDS	R0, #20
		UXTH	R0, R0
		STRH	R0, [R3,#2]
		BL	CelsiusToF
		B	loc_2FD6
@ ---------------------------------------------------------------------------

loc_2FCC:				@ CODE XREF: GetAtoTemp+4Ej
		MOVS	R0, #100
		MULS	R5, R0
		UDIV.W	R0, R5,	R4
		ADDS	R0, #140

loc_2FD6:				@ CODE XREF: GetAtoTemp+34j
					@ GetAtoTemp+86j ...
		STRH	R0, [R3,#2]

locret_2FD8:				@ CODE XREF: GetAtoTemp+8j
					@ GetAtoTemp+10j ...
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_2FDA:				@ CODE XREF: GetAtoTemp+52j
		MULS	R0, R4
		UDIV.W	R0, R0,	R2
		SUB.W	R0, R0,	#460
		B	loc_2FD6
@ End of function GetAtoTemp

@ ---------------------------------------------------------------------------
		.balign 4,0
off_2FE8:	.long byte_20000098	@ DATA XREF: GetAtoTemp+2r
					@ GetAtoTemp+38r
off_2FEC:	.long dfData		@ DATA XREF: GetAtoTemp+12r
					@ GetAtoTemp:loc_2F7Ar	...

@ =============== S U B	R O U T	I N E =======================================


sub_2FF0:				@ CODE XREF: EventHandler:loc_4052p
		PUSH	{R4-R7,LR}
		LDR	R1, off_3070
		LDR	R7, off_3074
		LDRH	R1, [R1,#0x1C]
		CMP	R1, #0x64
		BLS	loc_3002
		LDRH	R0, [R0,#0x28]
		STRH	R0, [R7,#6]

locret_3000:				@ CODE XREF: sub_2FF0+2Cj sub_2FF0+58j
		POP	{R4-R7,PC}
@ ---------------------------------------------------------------------------

loc_3002:				@ CODE XREF: sub_2FF0+Aj
		MOVS	R6, #5
		UDIV.W	R2, R1,	R6
		UDIV.W	R4, R1,	R6
		UXTB	R2, R2
		MLS.W	R4, R6,	R4, R1
		LDRH.W	R3, [R0,R2,LSL#1]
		STRH	R3, [R7,#6]
		CBNZ	R4, loc_301E
		CMP	R2, #0x14
		BCS	locret_3000

loc_301E:				@ CODE XREF: sub_2FF0+28j
		ADD.W	R5, R0,	R2,LSL#1
		LDRH.W	R0, [R0,R2,LSL#1]
		LDRH	R4, [R5,#2]
		CMP	R4, R0
		BLS	loc_304E
		SUBS	R0, R4,	R0
		UDIV.W	R2, R1,	R6
		SDIV.W	R0, R0,	R6
		MLS.W	R1, R6,	R2, R1
		UXTH	R0, R0
		MLA.W	R0, R0,	R1, R3
		UXTH	R0, R0
		STRH	R0, [R7,#6]
		LDRH	R1, [R5,#2]
		CMP	R1, R0
		BHI	locret_3000

loc_304A:				@ CODE XREF: sub_2FF0+7Aj
		STRH	R1, [R7,#6]
		POP	{R4-R7,PC}
@ ---------------------------------------------------------------------------

loc_304E:				@ CODE XREF: sub_2FF0+3Aj
		SUBS	R0, R0,	R4
		UDIV.W	R2, R1,	R6
		SDIV.W	R0, R0,	R6
		MLS.W	R1, R6,	R2, R1
		UXTH	R0, R0
		MLS.W	R0, R0,	R1, R3
		UXTH	R0, R0
		STRH	R0, [R7,#6]
		LDRH	R1, [R5,#2]
		CMP	R1, R0
		BCS	loc_304A
		POP	{R4-R7,PC}
@ End of function sub_2FF0

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
off_3070:	.long dfData		@ DATA XREF: sub_2FF0+2r
off_3074:	.long byte_20000098	@ DATA XREF: sub_2FF0+4r

@ =============== S U B	R O U T	I N E =======================================


CheckMode:				@ CODE XREF: GotoMain:loc_9224p
		PUSH.W	{R4-R10,LR}
		LDR	R0, off_3164
		LDR	R3, off_3168
		LDR	R1, [R0,#0x14]
		MOVS	R0, #0xA
		UDIV.W	R4, R1,	R0
		LDRH	R2, [R3]
		CMP	R4, R2
		BLS	loc_3098
		UDIV.W	R0, R1,	R0
		SUBS	R0, R0,	R2
		UXTB	R0, R0
		B	loc_309A
@ ---------------------------------------------------------------------------

loc_3098:				@ CODE XREF: CheckMode+14j
		MOVS	R0, #0

loc_309A:				@ CODE XREF: CheckMode+1Ej
		ADD.W	R1, R1,	R1,LSL#2
		LSLS	R1, R1,	#1
		UDIV.W	R1, R1,	R2
		MOVS	R6, #0
		LDR.W	R9, off_316C
		LDR	R5, off_3170
		LDR	R7, off_3174
		LDR	R4, off_3178
		MOV	R10, R3
		MOV.W	R8, #50
		CMP	R2, #150
		BHI	loc_30F2
		CMP	R1, #115
		BHI	loc_30D0
		LDRB	R2, [R4,#0xE]
		CMP	R2, #2
		BEQ	loc_30C8
		CMP	R2, #3
		BNE	loc_30F2

loc_30C8:				@ CODE XREF: CheckMode+4Aj
		CMP	R1, #0x69
		BLS	loc_30F2
		CMP	R0, #1
		BLS	loc_30F2

loc_30D0:				@ CODE XREF: CheckMode+44j
		LDRB	R0, [R5]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R5]
		CMP	R0, #3
		BLS	locret_315E
		LDRB	R0, [R4,#0x19]
		CMP	R0, #2
		BEQ	loc_30E8
		MOVS	R0, #2
		STRB	R0, [R4,#0x19]
		B	loc_3156
@ ---------------------------------------------------------------------------

loc_30E8:				@ CODE XREF: CheckMode+68j
					@ CheckMode+E2j
		LDR	R0, [R7]
		BIC.W	R0, R0,	#0x800000
		STR	R0, [R7]
		B	loc_315C
@ ---------------------------------------------------------------------------

loc_30F2:				@ CODE XREF: CheckMode+40j
					@ CheckMode+4Ej ...
		LDR	R0, off_317C
		LDRH	R0, [R0]
		CMP	R0, #0x14
		BCC	loc_315C
		MOVS	R0, #1
		STRB	R0, [R4,#0x19]
		MOVS	R0, #4
		STRB	R0, [R4,#0xE]
		LDRH	R0, [R4,#0x10]
		CMP	R0, #0xC8
		BLS	loc_3112
		MOVS	R0, #0xC8
		STRH	R0, [R4,#0x10]
		BL	GetAtoVWVolts
		STRH	R0, [R4,#0x16]

loc_3112:				@ CODE XREF: CheckMode+8Ej
		LDR	R0, [R7]
		LSLS	R1, R0,	#4
		BMI	loc_311E
		LDR	R1, off_3180
		LDRH	R1, [R1]
		STRH	R1, [R4,#0x1E]

loc_311E:				@ CODE XREF: CheckMode+9Ej
		LSLS	R1, R0,	#3
		BMI	loc_3128
		LDR	R1, off_3184
		LDRH	R1, [R1]
		STRH	R1, [R4,#0x20]

loc_3128:				@ CODE XREF: CheckMode+A8j
		CMP	R0, #0
		BLT	loc_3134
		LDR	R0, off_3188
		LDRH	R0, [R0]
		STRH.W	R0, [R4,#0x84]

loc_3134:				@ CODE XREF: CheckMode+B2j
		LDR	R0, off_318C
		LDRB	R0, [R0]
		LSLS	R0, R0,	#0x1E
		BMI	loc_3144
		LDR	R0, off_3190
		LDRH	R0, [R0]
		STRH.W	R0, [R4,#0x90]

loc_3144:				@ CODE XREF: CheckMode+C2j
		LDRH.W	R0, [R10]
		CMP	R0, #0xA
		BCS	loc_3156
		BL	StopFire
		LDR	R1, off_3194
		MOVS	R0, #0x1B
		STRB	R0, [R1]

loc_3156:				@ CODE XREF: CheckMode+6Ej
					@ CheckMode+D2j
		STRB.W	R8, [R9]
		B	loc_30E8
@ ---------------------------------------------------------------------------

loc_315C:				@ CODE XREF: CheckMode+78j
					@ CheckMode+80j
		STRB	R6, [R5]

locret_315E:				@ CODE XREF: CheckMode+62j
		POP.W	{R4-R10,PC}
@ End of function CheckMode

@ ---------------------------------------------------------------------------
		.balign 4,0
off_3164:	.long byte_20000098	@ DATA XREF: CheckMode+4r
off_3168:	.long AtoRez		@ DATA XREF: CheckMode+6r
off_316C:	.long UpdateDFTimer	@ DATA XREF: CheckMode+2Er
off_3170:	.long byte_200000C2	@ DATA XREF: CheckMode+32r
off_3174:	.long dword_20000064	@ DATA XREF: CheckMode+34r
off_3178:	.long dfData		@ DATA XREF: CheckMode+36r
off_317C:	.long FireDuration	@ DATA XREF: CheckMode:loc_30F2r
off_3180:	.long word_200000B8	@ DATA XREF: CheckMode+A0r
off_3184:	.long word_200000BA	@ DATA XREF: CheckMode+AAr
off_3188:	.long word_200000BC	@ DATA XREF: CheckMode+B4r
off_318C:	.long dword_20000068	@ DATA XREF: CheckMode:loc_3134r
off_3190:	.long word_200000BE	@ DATA XREF: CheckMode+C4r
off_3194:	.long Event		@ DATA XREF: CheckMode+D8r

@ =============== S U B	R O U T	I N E =======================================


TweakTargetVoltsVW:			@ CODE XREF: GotoMain:loc_924Ap
		LDR	R0, off_31CC
		PUSH	{R4,LR}
		LDRB	R1, [R0,#0xE]
		CMP	R1, #6
		BEQ	loc_31BE
		LDRH	R0, [R0,#0x10]

loc_31A4:				@ CODE XREF: TweakTargetVoltsVW+32j
		BL	GetAtoPower
		LDR	R1, off_31D0
		LDR	R1, [R1]
		MULS	R0, R1
		MOVS	R1, #0x64
		UDIV.W	R0, R0,	R1
		BL	GetVoltsForPower
		LDR	R1, off_31D4
		STR	R0, [R1]
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_31BE:				@ CODE XREF: TweakTargetVoltsVW+8j
		LDR	R1, off_31D8	@ Saved	config # in start mode
		LDRB	R1, [R1]	@ Saved	config # in start mode
		ADD.W	R0, R0,	R1,LSL#1
		LDRH.W	R0, [R0,#0xAA]
		B	loc_31A4
@ End of function TweakTargetVoltsVW

@ ---------------------------------------------------------------------------
off_31CC:	.long dfData		@ DATA XREF: TweakTargetVoltsVWr
off_31D0:	.long dword_200000D8	@ DATA XREF: TweakTargetVoltsVW+10r
off_31D4:	.long TargetVolts	@ DATA XREF: TweakTargetVoltsVW+20r
off_31D8:	.long ConfigIndex	@ DATA XREF: TweakTargetVoltsVW:loc_31BEr
					@ Saved	config # in start mode

@ =============== S U B	R O U T	I N E =======================================


sub_31DC:				@ CODE XREF: ShowMainView+34p
					@ ShowMainFiring+180p
		LDR	R1, off_31F0
		MULS	R0, R0
		LDR	R1, [R1,#0x14]
		UDIV.W	R0, R0,	R1
		CBNZ	R0, loc_31EA
		MOVS	R0, #1

loc_31EA:				@ CODE XREF: sub_31DC+Aj
		UXTH	R0, R0
		BX	LR
@ End of function sub_31DC

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
off_31F0:	.long byte_20000098	@ DATA XREF: sub_31DCr

@ =============== S U B	R O U T	I N E =======================================


GetVoltsForPower:			@ CODE XREF: TweakTargetVoltsVW+1Cp
					@ TweakTargetVoltsTC:loc_369Cp	...
		FMSR	S0, R0
		LDR	R0, off_3248
		PUSH	{R4,LR}
		FUITOS	S1, S0
		FLDS	S0, [R0,#0x14]
		FUITOS	S0, S0
		FMULS	S0, S1,	S0
		FMRS	R0, S0
		BL	sub_26A
		FMDRR	D0, R0,	R1
		BL	sub_89F8
		FMRRD	R0, R1,	D0
		BL	sub_290
		FMSR	S0, R0
		CDP	p10, 0xF, c0,c6,c0, 0
		LDR	R1, off_324C
		FADDS	S0, S0,	S1
		LDR	R1, [R1]
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		CMP	R0, R1
		BLS	locret_3244
		UXTH	R0, R1

locret_3244:				@ CODE XREF: GetVoltsForPower+4Cj
		POP	{R4,PC}
@ End of function GetVoltsForPower

@ ---------------------------------------------------------------------------
		.balign 4,0
off_3248:	.long byte_20000098	@ DATA XREF: GetVoltsForPower+4r
off_324C:	.long MaxVWVolts	@ DATA XREF: GetVoltsForPower+38r

@ =============== S U B	R O U T	I N E =======================================


ReadAtoTemp:				@ CODE XREF: sub_6038+7Ap
					@ GotoMain+90C2p

var_28		= -0x28

		PUSH.W	{R3-R11,LR}
		LDR	R0, off_33EC
		LDR	R0, [R0]
		CMP	R0, #0
		BEQ	locret_333A
		LDR	R5, off_33F0
		LDR.W	R9, off_33F4
		LDR.W	R8, off_33F8
		LDRH	R0, [R5]
		MOV.W	R7, #1
		LSLS	R0, R0,	#0x17
		BMI	loc_3278
		LDRB.W	R0, [R9]
		CMP	R0, #0xA
		BEQ	loc_328C

loc_3278:				@ CODE XREF: ReadAtoTemp+1Ej
		STRB.W	R7, [R8]

loc_327C:				@ CODE XREF: ReadAtoTemp+42j
		MOV.W	R10, #0
		STR.W	R10, [R8,#0x10]
		MOV	R4, R10
		STR.W	R10, [R8,#8]
		B	loc_32C4
@ ---------------------------------------------------------------------------

loc_328C:				@ CODE XREF: ReadAtoTemp+26j
		MOVS	R0, #0x32
		STRB.W	R0, [R8]
		B	loc_327C
@ ---------------------------------------------------------------------------

loc_3294:				@ CODE XREF: ReadAtoTemp+7Aj
		MOVS	R0, #10
		BL	TickWait_us
		MOVS	R0, #2
		BL	ADC_Read	@ R0: Channel
		LDR.W	R1, [R8,#8]
		ADD	R0, R1
		STR.W	R0, [R8,#8]
		MOVS	R0, #10
		BL	TickWait_us
		MOVS	R0, #1
		BL	ADC_Read	@ R0: Channel
		LDR.W	R1, [R8,#0x10]
		ADDS	R4, R4,	#1
		ADD	R0, R1
		UXTB	R4, R4
		STR.W	R0, [R8,#0x10]

loc_32C4:				@ CODE XREF: ReadAtoTemp+3Aj
		LDRB.W	R0, [R8]
		CMP	R4, R0
		BCC	loc_3294
		LDR.W	R0, [R8,#8]
		CBNZ	R0, loc_32D6
		STR.W	R7, [R8,#8]

loc_32D6:				@ CODE XREF: ReadAtoTemp+80j
		LDR	R0, off_33FC
		MOVW	R1, #1300
		LDRB	R0, [R0]
		SMULBB.W R0, R0, R1
		MOVS	R1, #100
		UDIV.W	R1, R0,	R1
		LDR.W	R0, [R8,#0x10]
		MULS	R1, R0
		LDR.W	R0, [R8,#8]
		ADD.W	R0, R0,	R0,LSL#1
		UDIV.W	R0, R1,	R0
		STR.W	R0, [R8,#0x14]
		BL	GetAtoCurrent
		LDR.W	R1, [R8,#0x14]
		CMP	R1, #5
		BCC	locret_333A
		LDR	R6, off_3400
		LDR	R4, off_3404
		MOV.W	R11, #0x19
		CMP	R1, #0x14
		BHI	loc_333E
		STRB	R7, [R4]
		LDR.W	R0, [R8,#0xC]
		STR	R0, [SP,#0x28+var_28]
		ADR	R0, aRl_gndDDDD	@ "RL_GND %d(%d,%d,%d)\n"
		LDR.W	R3, [R8,#8]
		LDR.W	R2, [R8,#0x10]
		BL	PutTextf
		LDRH	R0, [R5]
		LSLS	R0, R0,	#0x17
		BPL	locret_333A
		BL	StopFire
		STRB.W	R11, [R6]

locret_333A:				@ CODE XREF: ReadAtoTemp+Aj
					@ ReadAtoTemp+B8j ...
		POP.W	{R3-R11,PC}
@ ---------------------------------------------------------------------------

loc_333E:				@ CODE XREF: ReadAtoTemp+C4j
		LDRB.W	R0, [R9]
		CMP	R0, #0xA
		BHI	loc_334A
		CMP	R1, #0x32
		BCC	loc_334E

loc_334A:				@ CODE XREF: ReadAtoTemp+F4j
		CMP	R1, #0x28
		BCS	loc_3362

loc_334E:				@ CODE XREF: ReadAtoTemp+F8j
		ADR	R0, aRl_lowD	@ "RL_LOW %d\n"
		BL	PutTextf
		MOVS	R0, #2
		STRB	R0, [R4]
		LDRH	R0, [R5]
		LSLS	R0, R0,	#0x17
		BPL	locret_333A
		MOVS	R0, #0x1B
		B	loc_337A
@ ---------------------------------------------------------------------------

loc_3362:				@ CODE XREF: ReadAtoTemp+FCj
		MOVW	R2, #0xC350
		CMP	R1, R2
		BLS	loc_337E
		STRB.W	R10, [R4]
		STR.W	R10, [R8,#0x14]
		LDRH	R0, [R5]
		LSLS	R0, R0,	#0x17
		BPL	locret_333A
		MOVS	R0, #0x1A

loc_337A:				@ CODE XREF: ReadAtoTemp+110j
		STRB	R0, [R6]
		B	locret_333A
@ ---------------------------------------------------------------------------

loc_337E:				@ CODE XREF: ReadAtoTemp+118j
		MOVW	R7, #0xDAC
		CMP	R0, #0xA
		BHI	loc_3392
		CMP	R1, R7
		BLS	loc_3392
		MOVS	R0, #3
		STRB	R0, [R4]
		ADR	R0, aRl_largeD	@ "RL_LARGE %d\n"
		B	loc_33B6
@ ---------------------------------------------------------------------------

loc_3392:				@ CODE XREF: ReadAtoTemp+134j
					@ ReadAtoTemp+138j
		LDR	R2, [R5]
		LSLS	R3, R2,	#0x17
		BPL	loc_33BE
		MOVS	R3, #0xA
		UDIV.W	R3, R1,	R3
		LDR	R5, off_343C
		LDRH	R5, [R5]
		CMP.W	R3, R5,LSR#2
		BHI	loc_33BE
		BL	StopFire
		STRB.W	R11, [R6]
		LDR.W	R1, [R8,#0x14]
		ADR	R0, aRl_gnd2D	@ "RL_GND2 %d\n"

loc_33B6:				@ CODE XREF: ReadAtoTemp+140j
		POP.W	{R3-R11,LR}
		B.W	PutTextf
@ ---------------------------------------------------------------------------

loc_33BE:				@ CODE XREF: ReadAtoTemp+146j
					@ ReadAtoTemp+156j
		LDRB	R3, [R4]
		CMP	R3, #4
		BEQ	loc_33CA
		CBZ	R3, loc_33CA
		CMP	R3, #3
		BNE	locret_333A

loc_33CA:				@ CODE XREF: ReadAtoTemp+172j
					@ ReadAtoTemp+174j
		CMP	R1, #0x32
		BCC	locret_333A
		CMP	R1, R7
		BHI	locret_333A
		LSLS	R1, R2,	#0x17
		BMI	loc_33DA
		CMP	R0, #0xA
		BHI	locret_333A

loc_33DA:				@ CODE XREF: ReadAtoTemp+184j
		MOVS	R0, #4
		STRB	R0, [R4]
		LSLS	R0, R2,	#0x17
		BPL	locret_333A
		POP.W	{R3-R11,LR}
		B.W	GetAtoTemp
@ End of function ReadAtoTemp

@ ---------------------------------------------------------------------------
		.balign 4,0
off_33EC:	.long TargetVolts	@ DATA XREF: ReadAtoTemp+4r
off_33F0:	.long dword_20000064	@ DATA XREF: ReadAtoTemp+Cr
off_33F4:	.long byte_2000003E	@ DATA XREF: ReadAtoTemp+Er
off_33F8:	.long byte_20000098	@ DATA XREF: ReadAtoTemp+12r
off_33FC:	.long AtoShuntValue	@ DATA XREF: ReadAtoTemp:loc_32D6r
off_3400:	.long Event		@ DATA XREF: ReadAtoTemp+BAr
off_3404:	.long AtoError		@ DATA XREF: ReadAtoTemp+BCr
aRl_gndDDDD:	.ascii "RL_GND %d(%d,%d,%d)" @ DATA XREF: ReadAtoTemp+CEo
		.byte 0xA
		.byte 0
		.balign 4,0
aRl_lowD:	.ascii "RL_LOW %d"      @ DATA XREF: ReadAtoTemp:loc_334Eo
		.byte 0xA
		.byte 0
		.balign 4,0
aRl_largeD:	.ascii "RL_LARGE %d"    @ DATA XREF: ReadAtoTemp+13Eo
		.byte 0xA
		.byte 0
		.balign 4,0
off_343C:	.long AtoRez		@ DATA XREF: ReadAtoTemp+14Er
aRl_gnd2D:	.ascii "RL_GND2 %d"     @ DATA XREF: ReadAtoTemp+164o
		.byte 0xA
		.byte 0

@ =============== S U B	R O U T	I N E =======================================


StopFire:				@ CODE XREF: CheckBattery:loc_7AAp
					@ CheckMode+D4p ...
		PUSH	{R4-R6,LR}
		MOVS	R2, #0
		MOVS	R1, #0x80
		LDR	R0, dword_34E8
		BL	SetGPIOMode
		LDR	R1, off_34EC
		LDR	R0, [R1]
		LSLS	R2, R0,	#0x17
		BPL	loc_3466
		BIC.W	R0, R0,	#0x100
		STR	R0, [R1]

loc_3466:				@ CODE XREF: StopFire+12j
		LDR	R5, off_34EC
		MOVS	R4, #0
		SUBS	R5, #0x28
		LDRH	R0, [R5,#0x1C]
		CMP	R0, #5
		BLS	loc_34A2
		LDR	R1, off_34F0
		LDR.W	R2, [R1,#0x138]
		ADD	R0, R2
		LDR	R2, dword_34F4
		STR.W	R0, [R1,#0x138]
		CMP	R0, R2
		BLS	loc_3488
		STR.W	R4, [R1,#0x138]

loc_3488:				@ CODE XREF: StopFire+36j
		LDR.W	R0, [R1,#0x134]
		LDR	R2, dword_34F8
		ADDS	R0, R0,	#1
		STR.W	R0, [R1,#0x134]
		CMP	R0, R2
		BLS	loc_349C
		STR.W	R4, [R1,#0x134]

loc_349C:				@ CODE XREF: StopFire+4Aj
		LDR	R1, off_34FC
		MOVS	R0, #0x50
		STRB	R0, [R1]

loc_34A2:				@ CODE XREF: StopFire+24j
		LDR	R0, dword_3500
		STRH	R4, [R5,#0x1C]
		STR	R4, [R0]
		LDR	R0, dword_3500
		ADDS	R0, #8
		STR	R4, [R0]
		LDR	R0, dword_3500
		STRH	R4, [R5,#0x24]
		SUBS	R0, R0,	#4
		STR	R4, [R0]
		MOVS	R1, #0
		MOV	R0, R1
		BL	InitGPIO_PWM
		LDR	R0, dword_3500
		STRH	R4, [R5,#0x26]
		ADDS	R0, R0,	#4
		STR	R4, [R0]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	InitGPIO_PWM
		MOVS	R1, #0
		MOVS	R0, #1
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #2
		BL	SetADCState
		LDR	R0, off_3504
		STRH	R4, [R0]
		MOVS	R0, #0xC8
		STRB	R0, [R5,#0x15]
		POP	{R4-R6,PC}
@ End of function StopFire

@ ---------------------------------------------------------------------------
dword_34E8:	.long 0x400040C0	@ DATA XREF: StopFire+6r
off_34EC:	.long dword_20000064	@ DATA XREF: StopFire+Cr
					@ StopFire:loc_3466r
off_34F0:	.long dfData		@ DATA XREF: StopFire+26r
dword_34F4:	.long 999999		@ DATA XREF: StopFire+2Er
dword_34F8:	.long 99999		@ DATA XREF: StopFire+40r
off_34FC:	.long UpdatePTTimer	@ DATA XREF: StopFire:loc_349Cr
dword_3500:	.long 0x40004884	@ DATA XREF: StopFire:loc_34A2r
					@ StopFire+5Cr	...
off_3504:	.long LowBatVolts	@ DATA XREF: StopFire+92r

@ =============== S U B	R O U T	I N E =======================================


sub_3508:				@ CODE XREF: GetAtoCurrent+3Ep
		LDR	R0, off_3534
		LDR	R1, off_3538
		LDRH	R0, [R0,#0x1C]
		LDRH	R1, [R1]
		CMP	R0, R1
		BLS	loc_3518
		CBZ	R1, loc_3518
		MOV	R0, R1

loc_3518:				@ CODE XREF: sub_3508+Aj sub_3508+Cj
		LDR	R1, off_353C
		MOVS	R2, #0xA
		LDR	R1, [R1,#0x14]
		UDIV.W	R3, R1,	R2
		CMP	R3, R0
		BCS	locret_3530
		CMP	R1, #0xA
		BCC	locret_3530
		UDIV.W	R0, R1,	R2
		UXTH	R0, R0

locret_3530:				@ CODE XREF: sub_3508+1Cj sub_3508+20j
		BX	LR
@ End of function sub_3508

@ ---------------------------------------------------------------------------
		.balign 4,0
off_3534:	.long dfData		@ DATA XREF: sub_3508r
off_3538:	.long AtoRez		@ DATA XREF: sub_3508+2r
off_353C:	.long byte_20000098	@ DATA XREF: sub_3508:loc_3518r

@ =============== S U B	R O U T	I N E =======================================


GetAtoPower:				@ CODE XREF: TweakTargetVoltsVW:loc_31A4p
					@ TweakTargetVoltsTC:loc_368Ap	...
		LDR	R1, off_3560
		LDR	R1, [R1,#0x14]
		CMP	R1, #0x78
		BCS	locret_355E
		MOVW	R2, #0x271
		MULS	R1, R2
		MOVS	R2, #0xA
		UDIV.W	R1, R1,	R2
		UDIV.W	R1, R1,	R2
		CMP	R0, R1
		BLS	locret_355E
		UXTH	R0, R1

locret_355E:				@ CODE XREF: GetAtoPower+6j
					@ GetAtoPower+1Aj
		BX	LR
@ End of function GetAtoPower

@ ---------------------------------------------------------------------------
off_3560:	.long byte_20000098	@ DATA XREF: GetAtoPowerr

@ =============== S U B	R O U T	I N E =======================================


GetAtoCurrent:				@ CODE XREF: ReachTargetVoltage+30p
					@ ReadAtoTemp+AEp ...

var_24		= -0x24

		PUSH.W	{R0-R10,LR}
		LDR.W	R8, off_3638
		LDR.W	R0, [R8]
		LSLS	R1, R0,	#0x17
		BMI	loc_3578
		LSLS	R0, R0,	#0x12
		BPL	locret_3632

loc_3578:				@ CODE XREF: GetAtoCurrent+Ej
		MOVS	R0, #2
		BL	ADC_Read	@ R0: Channel
		MOV	R6, R0
		MOVS	R0, #10
		BL	TickWait_us
		MOVS	R0, #1
		BL	ADC_Read	@ R0: Channel
		LDR	R5, off_363C
		MOV	R9, R0
		MOV.W	R0, #0x6400
		MULS	R0, R6
		LDRB	R1, [R5]
		LSRS	R0, R0,	#0xC
		UDIV.W	R0, R0,	R1
		LDR	R7, off_3640
		STRH	R0, [R7,#4]
		BL	sub_3508
		MOV	R4, R0
		LDR.W	R0, [R8]
		LDR.W	R8, off_3644
		LSLS	R1, R0,	#0x17
		BPL	loc_35E6
		LDRB	R1, [R5]
		MOVS	R2, #0x64
		ADD.W	R1, R1,	R1,LSL#6
		LSLS	R1, R1,	#5
		UDIV.W	R2, R1,	R2
		MUL.W	R1, R6,	R4
		MUL.W	R2, R2,	R9
		RSB.W	R1, R1,	R1,LSL#4
		CMP.W	R2, R1,LSL#1
		BCS	loc_35E6
		LDRH	R1, [R7,#4]
		CMP	R1, #0x32
		BLS	loc_35E6
		LDR.W	R1, [R8]
		CMP	R1, #0x64
		BCC	loc_35E6
		MOVS	R5, #2
		B	loc_35F8
@ ---------------------------------------------------------------------------

loc_35E6:				@ CODE XREF: GetAtoCurrent+4Ej
					@ GetAtoCurrent+6Ej ...
		LDRH	R1, [R7,#4]
		CMP.W	R1, #0x100
		BLS	locret_3632
		LDR	R1, off_3648
		LDRB	R1, [R1,#0xE]
		CMP	R1, #5
		BEQ	locret_3632
		MOVS	R5, #3

loc_35F8:				@ CODE XREF: GetAtoCurrent+80j
		LDR	R2, off_364C
		MOVS	R1, #1
		LSLS	R0, R0,	#0x17
		STRB	R1, [R2]
		BPL	loc_3608
		LDR	R1, off_3650
		MOVS	R0, #0x19
		STRB	R0, [R1]

loc_3608:				@ CODE XREF: GetAtoCurrent+9Cj
		BL	StopFire
		LDRH	R0, [R7,#4]
		MOVS	R1, #0xA
		UDIV.W	R2, R0,	R1
		MLS.W	R2, R1,	R2, R0
		UDIV.W	R0, R0,	R1
		LDR.W	R1, [R8]
		STR	R1, [SP,#0xC]
		STMEA.W	SP, {R0,R2,R4}
		MOV	R3, R9
		MOV	R2, R6
		MOV	R1, R5
		LDR	R0, off_3654	@ "\n Short %d! u32ADValue_Res_temp(%d) u3"...
		BL	PutTextf

locret_3632:				@ CODE XREF: GetAtoCurrent+12j
					@ GetAtoCurrent+88j ...
		POP.W	{R0-R10,PC}
@ End of function GetAtoCurrent

@ ---------------------------------------------------------------------------
		.balign 4,0
off_3638:	.long dword_20000064	@ DATA XREF: GetAtoCurrent+4r
off_363C:	.long AtoShuntValue	@ DATA XREF: GetAtoCurrent+28r
off_3640:	.long byte_20000098	@ DATA XREF: GetAtoCurrent+3Ar
off_3644:	.long TargetVolts	@ DATA XREF: GetAtoCurrent+48r
off_3648:	.long dfData		@ DATA XREF: GetAtoCurrent+8Ar
off_364C:	.long AtoError		@ DATA XREF: GetAtoCurrent:loc_35F8r
off_3650:	.long Event		@ DATA XREF: GetAtoCurrent+9Er
off_3654:	.long aShortDU32adval	@ DATA XREF: GetAtoCurrent+C8r
					@ "\n Short %d! u32ADValue_Res_temp(%d) u3"...

@ =============== S U B	R O U T	I N E =======================================


TweakTargetVoltsTC:			@ CODE XREF: GotoMain:loc_9244p
		PUSH	{R4-R6,LR}
		LDR	R4, off_3714
		LDR	R0, [R4]
		CMP	R0, #0
		BEQ	locret_36AA
		LDR	R6, off_3718
		LDRH	R0, [R6,#0x14]
		CMP	R0, #0xA
		BCS	loc_366C
		MOVS	R0, #0xA

loc_366C:				@ CODE XREF: TweakTargetVoltsTC+10j
		LDR	R5, off_371C
		MOV.W	R3, #0x12C
		LDR	R1, [R5]
		LSLS	R1, R1,	#8
		BPL	loc_368A
		CMP	R0, R3
		BCS	loc_3680
		MOV	R0, R3
		B	loc_368A
@ ---------------------------------------------------------------------------

loc_3680:				@ CODE XREF: TweakTargetVoltsTC+22j
		MOV.W	R1, #0x190
		CMP	R0, R1
		BLS	loc_368A
		MOV	R0, R1

loc_368A:				@ CODE XREF: TweakTargetVoltsTC+1Ej
					@ TweakTargetVoltsTC+26j ...
		BL	GetAtoPower
		LDR	R1, off_3720
		LDRH	R1, [R1]
		CMP	R1, #2
		BHI	loc_369C
		CMP	R0, R3
		BLS	loc_369C
		MOV	R0, R3

loc_369C:				@ CODE XREF: TweakTargetVoltsTC+3Cj
					@ TweakTargetVoltsTC+40j
		BL	GetVoltsForPower
		MOV	R2, R0
		LDR	R0, [R5]
		LSLS	R0, R0,	#8
		BPL	loc_36AC

loc_36A8:				@ CODE XREF: TweakTargetVoltsTC+B8j
		STR	R2, [R4]

locret_36AA:				@ CODE XREF: TweakTargetVoltsTC+8j
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_36AC:				@ CODE XREF: TweakTargetVoltsTC+4Ej
		LDRB	R0, [R6,#0x1B]
		CMP	R0, #1
		LDRH	R0, [R6,#0x12]
		BNE	loc_36B8
		BL	CelsiusToF

loc_36B8:				@ CODE XREF: TweakTargetVoltsTC+5Aj
		LDR	R1, [R5]
		LSLS	R3, R1,	#9
		BMI	loc_3704
		LDR	R3, off_3724
		LDRH	R3, [R3,#2]
		CMP	R3, R0
		BCS	loc_36D4
		LDR	R0, [R4]
		ADDS	R0, R0,	#1
		STR	R0, [R4]
		BIC.W	R0, R1,	#0x4000000
		STR	R0, [R5]
		B	loc_370C
@ ---------------------------------------------------------------------------

loc_36D4:				@ CODE XREF: TweakTargetVoltsTC+6Cj
		LSLS	R6, R1,	#5
		BPL	loc_3700
		CMP	R3, R0
		BLS	loc_3700
		BIC.W	R0, R1,	#0x4000000
		STR	R0, [R5]
		LDR	R1, dword_3728
		MOVS	R0, #0
		STR	R0, [R4]
		STR	R0, [R1]
		LDR	R1, dword_3728
		SUBS	R1, #8
		STR	R0, [R1]
		LDR	R1, off_372C
		STRH	R0, [R1]
		LDR	R1, dword_3730
		STR	R0, [R1,#0x50]
		LDR	R3, off_3734
		STRH	R0, [R3]
		STR	R0, [R1,#0x58]
		B	loc_370C
@ ---------------------------------------------------------------------------

loc_3700:				@ CODE XREF: TweakTargetVoltsTC+7Ej
					@ TweakTargetVoltsTC+82j
		CMP	R3, R0
		BLS	loc_370C

loc_3704:				@ CODE XREF: TweakTargetVoltsTC+64j
		LDR	R0, [R4]
		CBZ	R0, loc_370C
		SUBS	R0, R0,	#1
		STR	R0, [R4]

loc_370C:				@ CODE XREF: TweakTargetVoltsTC+7Aj
					@ TweakTargetVoltsTC+A6j ...
		LDR	R0, [R4]
		CMP	R0, R2
		BHI	loc_36A8
		POP	{R4-R6,PC}
@ End of function TweakTargetVoltsTC

@ ---------------------------------------------------------------------------
off_3714:	.long TargetVolts	@ DATA XREF: TweakTargetVoltsTC+2r
off_3718:	.long dfData		@ DATA XREF: TweakTargetVoltsTC+Ar
off_371C:	.long dword_20000064	@ DATA XREF: TweakTargetVoltsTC:loc_366Cr
off_3720:	.long FireDuration	@ DATA XREF: TweakTargetVoltsTC+36r
off_3724:	.long byte_20000098	@ DATA XREF: TweakTargetVoltsTC+66r
dword_3728:	.long 0x4000488C	@ DATA XREF: TweakTargetVoltsTC+8Ar
					@ TweakTargetVoltsTC+92r
off_372C:	.long BuckDuty		@ DATA XREF: TweakTargetVoltsTC+98r
dword_3730:	.long 0x40058000	@ DATA XREF: TweakTargetVoltsTC+9Cr
off_3734:	.long BoostDuty		@ DATA XREF: TweakTargetVoltsTC+A0r

@ =============== S U B	R O U T	I N E =======================================


sub_3738:				@ CODE XREF: GotoMain+9148p
					@ GotoMain+91D0p
		PUSH.W	{R4-R8,LR}
		LDR	R1, off_3860	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R4, off_385C
		LDRB	R3, [R1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R1, off_3864
		LDR	R0, [R4,#0x7C]
		LDRH	R1, [R1]
		LSLS	R2, R0,	#0x1E
		BPL	loc_3752
		CBNZ	R1, loc_3752
		CMP	R3, #0x3B
		BNE	locret_379E

loc_3752:				@ CODE XREF: sub_3738+12j sub_3738+14j
		LDR	R2, dword_3868	@ PE0_PDIO (fire button)
		LDR	R2, [R2]
		CMP	R2, #0
		BEQ	locret_379E
		LSLS	R5, R0,	#0x1F
		LDR	R0, off_385C
		LDR	R7, dword_386C
		LDRH	R2, [R0,#0x14]
		LDRB	R0, [R0,#0xE]
		ADD.W	R12, R7, #4
		BEQ	loc_3770
		CMP	R3, #0x3B
		BNE	locret_379E
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_3770:				@ CODE XREF: sub_3738+30j
		CBZ	R1, loc_37A2
		LDR	R1, off_3870
		LDRB	R1, [R1]
		CMP	R1, #2
		BNE	locret_379E
		LDR	R1, off_3874
		LDR	R4, off_3878
		LDR	R5, [R1]
		LDR	R1, [R4]
		CMP	R2, R5
		ORR.W	R1, R1,	#0x40000
		BNE	loc_3790
		LDR	R5, [R7]	@ PD2_PDIO (right button)
		CMP	R5, #1
		BNE	loc_379C

loc_3790:				@ CODE XREF: sub_3738+50j
		CMP	R2, #0xA
		BNE	loc_37E4
		LDR.W	R5, [R12]	@ PD3_PDIO (left button)
		CMP	R5, #1
		BEQ	loc_37E4

loc_379C:				@ CODE XREF: sub_3738+56j
		STR	R1, [R4]

locret_379E:				@ CODE XREF: sub_3738+18j sub_3738+20j ...
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_37A2:				@ CODE XREF: sub_3738:loc_3770j
		CBZ	R0, loc_37B0
		CMP	R0, #1
		BEQ	loc_37B0
		CMP	R0, #2
		BEQ	loc_37B0
		CMP	R0, #3
		BNE	loc_37E4

loc_37B0:				@ CODE XREF: sub_3738:loc_37A2j
					@ sub_3738+6Ej	...
		LDR	R1, off_385C
		LDRB	R4, [R4,#0x1B]
		LDRH	R1, [R1,#0x12]
		CBZ	R4, loc_37BE
		CMP	R4, #1
		BEQ	loc_37D2
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_37BE:				@ CODE XREF: sub_3738+7Ej
		CMP.W	R1, #0x258
		BEQ	loc_37CA
		CMP	R1, #0xC8
		BEQ	loc_3810
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_37CA:				@ CODE XREF: sub_3738+8Aj
		LDR	R1, [R7]

loc_37CC:				@ CODE XREF: sub_3738+DCj
		CMP	R1, #1
		BNE	locret_379E
		B	loc_37E4
@ ---------------------------------------------------------------------------

loc_37D2:				@ CODE XREF: sub_3738+82j
		SUB.W	R4, R1,	#0x100
		SUBS	R4, #0x3B
		BNE	loc_37E0
		LDR	R4, [R7]
		CMP	R4, #1
		BNE	locret_379E

loc_37E0:				@ CODE XREF: sub_3738+A0j
		CMP	R1, #0x64
		BEQ	loc_3810

loc_37E4:				@ CODE XREF: sub_3738+36j sub_3738+5Aj ...
		LDR	R1, [R7]
		LDR.W	LR, [R12]
		MOVS	R6, #0
		LDR	R4, off_387C
		LDR	R5, off_3880
		CMP	R1, LR
		BEQ	loc_3832
		LDRB	R0, [R4]
		CMP	R0, #3
		BCS	loc_3804
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R4]
		CMP	R0, #3
		BCC	locret_379E

loc_3804:				@ CODE XREF: sub_3738+C0j
		LDRH	R0, [R5]
		CMP	R0, #0x69
		BCS	loc_3816
		ADDS	R0, R0,	#1
		STRH	R0, [R5]
		B	loc_3818
@ ---------------------------------------------------------------------------

loc_3810:				@ CODE XREF: sub_3738+8Ej sub_3738+AAj
		LDR.W	R1, [R12]
		B	loc_37CC
@ ---------------------------------------------------------------------------

loc_3816:				@ CODE XREF: sub_3738+D0j
		STRB	R6, [R4]

loc_3818:				@ CODE XREF: sub_3738+D6j
		LDR	R1, [R7]
		LDR	R0, off_3884
		CMP	R1, #1
		BEQ	loc_3824
		MOVS	R1, #2
		B	loc_382E
@ ---------------------------------------------------------------------------

loc_3824:				@ CODE XREF: sub_3738+E6j
		LDR.W	R1, [R12]
		CMP	R1, #1
		BEQ	locret_379E
		MOVS	R1, #3

loc_382E:				@ CODE XREF: sub_3738+EAj
		STRB	R1, [R0]
		B	locret_379E
@ ---------------------------------------------------------------------------

loc_3832:				@ CODE XREF: sub_3738+BAj
		LDR	R7, off_3888
		LDRB	R1, [R7]
		CBZ	R1, loc_3854
		SUBS	R1, R1,	#1
		ANDS.W	R1, R1,	#0xFF
		STRB	R1, [R7]
		BNE	loc_3854
		CMP	R3, #1
		BNE	loc_3854
		CMP.W	R2, #0x3E8
		BCS	loc_3850
		CMP	R0, #6
		BNE	loc_3854

loc_3850:				@ CODE XREF: sub_3738+112j
		BL	MainView

loc_3854:				@ CODE XREF: sub_3738+FEj
					@ sub_3738+108j ...
		STRH	R6, [R5]
		STRB	R6, [R4]
		B	locret_379E
@ End of function sub_3738

@ ---------------------------------------------------------------------------
		.balign 4,0
off_385C:	.long dfData		@ DATA XREF: sub_3738+6r sub_3738+24r	...
off_3860:	.long Screen		@ DATA XREF: sub_3738+4r
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
off_3864:	.long EditModeTimer	@ DATA XREF: sub_3738+Ar
dword_3868:	.long 0x40004900	@ DATA XREF: sub_3738:loc_3752r
dword_386C:	.long 0x400048C8	@ DATA XREF: sub_3738+26r
off_3870:	.long EditItemIndex	@ DATA XREF: sub_3738+3Ar
off_3874:	.long MaxTCPower	@ DATA XREF: sub_3738+42r
off_3878:	.long dword_20000064	@ DATA XREF: sub_3738+44r
off_387C:	.long byte_20000080	@ DATA XREF: sub_3738+B4r
off_3880:	.long word_20000054	@ DATA XREF: sub_3738+B6r
off_3884:	.long Event		@ DATA XREF: sub_3738+E2r
off_3888:	.long byte_2000003C	@ DATA XREF: sub_3738:loc_3832r

@ =============== S U B	R O U T	I N E =======================================


sub_388C:				@ CODE XREF: ResetDataFlash+88p
					@ DFCheckValuesValidity+160p
		PUSH	{LR}
		SUB	SP, SP,	#0x2C
		MOVS	R2, #0x2C
		LDR	R1, off_38A8
		MOV	R0, SP
		BL	MemCpy
		MOVS	R2, #0x2A
		MOV	R1, SP
		LDR	R0, off_38AC
		BL	MemCpy
		ADD	SP, SP,	#0x2C
		POP	{PC}
@ End of function sub_388C

@ ---------------------------------------------------------------------------
off_38A8:	.long byte_9444		@ DATA XREF: sub_388C+6r
off_38AC:	.long byte_200002A2	@ DATA XREF: sub_388C+12r

@ =============== S U B	R O U T	I N E =======================================


InitTimeouts:				@ CODE XREF: EventHandler+1AEp
		LDR	R0, off_38D0
		MOVS	R1, #0
		LDR	R2, off_38D4
		STRB	R1, [R0,#1]
		STRB	R1, [R0,#2]
		MOV	R0, R1

loc_38BC:				@ CODE XREF: InitTimeouts+1Cj
		ADD.W	R3, R2,	R0,LSL#3
		STRB.W	R1, [R2,R0,LSL#3]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STR	R1, [R3,#4]
		CMP	R0, #3
		BCC	loc_38BC
		BX	LR
@ End of function InitTimeouts

@ ---------------------------------------------------------------------------
off_38D0:	.long TimeoutMask	@ DATA XREF: InitTimeoutsr
off_38D4:	.long TimeoutsTable	@ DATA XREF: InitTimeouts+4r

@ =============== S U B	R O U T	I N E =======================================


sub_38D8:				@ CODE XREF: ResetDataFlash+8Cp
					@ DFCheckValuesValidity+180p
		PUSH	{LR}
		SUB	SP, SP,	#0x2C
		MOVS	R2, #0x2C
		LDR	R1, off_38F4
		MOV	R0, SP
		BL	MemCpy
		MOVS	R2, #0x2A
		MOV	R1, SP
		LDR	R0, off_38F8
		BL	MemCpy
		ADD	SP, SP,	#0x2C
		POP	{PC}
@ End of function sub_38D8

@ ---------------------------------------------------------------------------
off_38F4:	.long word_9470		@ DATA XREF: sub_38D8+6r
off_38F8:	.long byte_200002CC	@ DATA XREF: sub_38D8+12r

@ =============== S U B	R O U T	I N E =======================================


SetAtoSTARTParams:			@ CODE XREF: sub_90DC+1Ap
		PUSH.W	{R4-R8,LR}
		LDR	R7, off_39C8
		MOVS	R4, #0
		LDR.W	R8, dword_39CC
		LDR	R6, off_39D0
		LDRH	R1, [R7]
		MOVS	R3, #0x14

loc_390E:				@ CODE XREF: SetAtoSTARTParams+5Ej
		ADD.W	R5, R6,	R4,LSL#1
		LDRH.W	R0, [R5,#0x96]
		UDIV.W	R2, R0,	R3
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3926
		SUBS	R2, R0,	#1
		CMP	R2, R1
		BGT	loc_3954

loc_3926:				@ CODE XREF: SetAtoSTARTParams+22j
		UDIV.W	R2, R0,	R3
		ADD	R2, R0
		CMP	R2, R1
		BCS	loc_3936
		ADDS	R2, R0,	#1
		CMP	R2, R1
		BCC	loc_3954

loc_3936:				@ CODE XREF: SetAtoSTARTParams+32j
		BL	SearchSTARTRez
		LDR	R2, off_39D4
		LDRH.W	R1, [R5,#0xAA]
		LDR	R2, [R2]
		CMP	R1, R2
		BHI	loc_394A
		CMP	R1, #0xA
		BCS	loc_395C

loc_394A:				@ CODE XREF: SetAtoSTARTParams+48j
		LDRH.W	R0, [R8,R0,LSL#2]
		STRH.W	R0, [R5,#0xAA]
		B	loc_395C
@ ---------------------------------------------------------------------------

loc_3954:				@ CODE XREF: SetAtoSTARTParams+28j
					@ SetAtoSTARTParams+38j
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #0xA
		BCC	loc_390E

loc_395C:				@ CODE XREF: SetAtoSTARTParams+4Cj
					@ SetAtoSTARTParams+56j
		LDR	R5, off_39D8	@ Saved	config # in start mode
		CMP	R4, #0xA
		BEQ	loc_396E
		STRB	R4, [R5]	@ Saved	config # in start mode

loc_3964:				@ CODE XREF: SetAtoSTARTParams+AAj
		LDR	R1, off_39DC
		MOVS	R0, #50
		STRB	R0, [R1]
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_396E:				@ CODE XREF: SetAtoSTARTParams+64j
		MOVS	R0, #0

loc_3970:				@ CODE XREF: SetAtoSTARTParams+84j
		ADD.W	R1, R6,	R0,LSL#1
		LDRH.W	R1, [R1,#0x96]
		CBZ	R1, loc_3982
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #0xA
		BCC	loc_3970

loc_3982:				@ CODE XREF: SetAtoSTARTParams+7Cj
		CMP	R0, #0xA
		BEQ	loc_39A8
		STRB	R0, [R5]	@ Saved	config # in start mode

loc_3988:				@ CODE XREF: SetAtoSTARTParams+CAj
		LDRB	R1, [R5]	@ Saved	config # in start mode
		LDRH	R0, [R7]
		ADD.W	R1, R6,	R1,LSL#1
		STRH.W	R0, [R1,#0x96]
		BL	SearchSTARTRez
		LDRB	R1, [R5]	@ Saved	config # in start mode
		LDRH.W	R0, [R8,R0,LSL#2]
		ADD.W	R1, R6,	R1,LSL#1
		STRH.W	R0, [R1,#0xAA]
		B	loc_3964
@ ---------------------------------------------------------------------------

loc_39A8:				@ CODE XREF: SetAtoSTARTParams+88j
		MOVS	R0, #9
		STRB	R0, [R5]	@ Saved	config # in start mode
		MOVS	R0, #0

loc_39AE:				@ CODE XREF: SetAtoSTARTParams+C8j
		ADD.W	R1, R6,	R0,LSL#1
		ADDS	R0, R0,	#1
		LDRH.W	R2, [R1,#0x98]
		STRH.W	R2, [R1,#0x96]!
		UXTB	R0, R0
		LDRH	R2, [R1,#0x16]
		STRH	R2, [R1,#0x14]
		CMP	R0, #9
		BCC	loc_39AE
		B	loc_3988
@ End of function SetAtoSTARTParams

@ ---------------------------------------------------------------------------
off_39C8:	.long AtoRez		@ DATA XREF: SetAtoSTARTParams+4r
dword_39CC:	.long 0x950E		@ DATA XREF: SetAtoSTARTParams+8r
off_39D0:	.long dfData		@ DATA XREF: SetAtoSTARTParams+Cr
off_39D4:	.long MaxPower		@ DATA XREF: SetAtoSTARTParams+3Er
off_39D8:	.long ConfigIndex	@ DATA XREF: SetAtoSTARTParams:loc_395Cr
					@ Saved	config # in start mode
off_39DC:	.long UpdateDFTimer	@ DATA XREF: SetAtoSTARTParams:loc_3964r

@ =============== S U B	R O U T	I N E =======================================


EventHandler:				@ CODE XREF: GotoMain:loc_937Ap

var_68		= -0x68
var_64		= -0x64
var_60		= -0x60
var_5C		= -0x5C
var_58		= -0x58
var_54		= -0x54
var_50		= -0x50
var_4C		= -0x4C
var_48		= -0x48
var_44		= -0x44
var_40		= -0x40
var_3C		= -0x3C
var_38		= -0x38
var_34		= -0x34
var_30		= -0x30
var_2C		= -0x2C
var_28		= -0x28

		PUSH.W	{R4-R11,LR}
		LDR	R0, off_3DE0
		SUB	SP, SP,	#0x44
		LDRB	R6, [R0,#7]
		CMP	R6, #0xFF
		BEQ	def_20003A9A	@ jumptable 20003A9A default case
		MOVS	R1, #200
		STRB	R1, [R0,#0x13]
		LDR	R1, off_3DE0
		STRB	R6, [R0,#9]
		MOVS	R0, #0xFF
		STRB	R0, [R1,#7]
		ADD.W	R0, R1,	#0x2C
		ADD.W	R4, R1,	#0x28
		LDR	R0, [R0]
		STR	R0, [SP,#0xC]
		BIC.W	R0, R0,	#1
		STR	R0, [SP,#0x40]
		LDR	R0, [R4]
		LDR	R7, off_3DF4	@ Saved	config # in start mode
		MOV	R11, R0
		ORR.W	R12, R0, #0x20000
		MOV	R0, R1
		LDR.W	R9, off_3DF0	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDRH	R0, [R0,#0x16]
		STR	R0, [SP,#0x68+var_2C]
		ORR.W	R0, R11, #0x40000
		STR	R0, [SP,#0x68+var_4C]
		BIC.W	R0, R11, #0x8000000
		STR	R0, [SP,#0x68+var_30]
		BIC.W	R0, R11, #0x10000000
		STR	R0, [SP,#0x68+var_34]
		BIC.W	R0, R11, #0x80000000
		STR	R0, [SP,#0x68+var_38]
		LDR	R0, [SP,#0x68+var_5C]
		LDR.W	R8, off_3DE4
		BIC.W	R0, R0,	#2
		STR	R0, [SP,#0x68+var_3C]
		LDR	R0, off_3DE4
		LDR.W	R10, off_3DE8
		MOVS	R5, #0
		LDRB	R0, [R0,#0x1B]
		STR	R0, [SP,#0x68+var_40]
		MOV	R0, R1
		CMP	R6, #0x2A	@ switch 42 cases
		LDR	R0, [R0,#0x38]
		STR	R0, [SP,#0x68+var_64]
		MOV	R0, R1
		LDRH	R0, [R0,#0x18]
		STR	R0, [SP,#0x68+var_50]
		MOV	R0, R1
		LDR	R1, off_3DE4
		LDRB	R0, [R0,#0xF]
		STR	R0, [SP,#0x68+var_44]
		LDR	R0, off_3DE4
		LDRH	R0, [R0,#0x14]
		STR	R0, [SP,#0x68+var_68]
		LDR	R0, off_3DEC
		LDRB	R7, [R7]	@ Saved	config # in start mode
		LDRB.W	R2, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDRB	R3, [R0]
		LDR	R0, off_3DE4
		LDR	R1, [R1,#0x7C]
		ADD.W	R8, R8,	R7,LSL#1
		LDRB.W	LR, [R0,#0x87]
		LDRB	R0, [R0,#0xE]
		STR	R7, [SP,#0x68+var_48]
		LDR	R7, off_3DE4
		LDRH	R7, [R7,#0x10]
		STR	R7, [SP,#0x68+var_60]
		LDR	R7, off_3DE0
		LDRB	R7, [R7,#0x14]
		STR	R7, [SP,#0x68+var_58]
		LDR	R7, off_3DE4
		LDRH	R7, [R7,#0x12]
		STR	R7, [SP,#0x68+var_54]
		BCS	def_20003A9A	@ jumptable 20003A9A default case
		TBB.W	[PC,R6]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_20003A9A:	.byte 0x23		@ jump table for switch	statement
		.byte 0x17
		.byte 0xFD
		.byte 0xFC
		.byte 0xFB
		.byte 0x23
		.byte 0xFA
		.byte 0x23
		.byte 0x23
		.byte 0x23
		.byte 0xF9
		.byte 0xF8
		.byte 0xF7
		.byte 0xF6
		.byte 0x23
		.byte 0xF5
		.byte 0xF4
		.byte 0xF3
		.byte 0xF2
		.byte 0x23
		.byte 0x15
		.byte 0x15
		.byte 0xF1
		.byte 0xF0
		.byte 0xEF
		.byte 0xEE
		.byte 0xED
		.byte 0xEC
		.byte 0xEB
		.byte 0xEA
		.byte 0xE9
		.byte 0xE8
		.byte 0xE7
		.byte 0xE6
		.byte 0xE5
		.byte 0x23
		.byte 0x23
		.byte 0x23
		.byte 0xE4
		.byte 0xE3
		.byte 0xE2
		.byte 0xE1
@ ---------------------------------------------------------------------------

loc_3AC8:				@ CODE XREF: EventHandler+BAj
		LDR	R0, [R4]	@ jumptable 20003A9A cases 20,21
		B	loc_42AC
@ ---------------------------------------------------------------------------

loc_3ACC:				@ CODE XREF: EventHandler+BAj
		LDR	R3, off_3DE4	@ jumptable 20003A9A case 1
		LSLS	R1, R1,	#0x1F
		BEQ	loc_3AD6
		CMP	R2, #0x3B
		BEQ	loc_3AE6

loc_3AD6:				@ CODE XREF: EventHandler+F0j
		MOV	R11, R3
		CMP	R0, #6
		BEQ	loc_3AFE
		LDR	R7, [SP,#0x68+var_60]

loc_3ADE:				@ CODE XREF: EventHandler+122j
		CMP	R2, #0x52
		BEQ	loc_3B04
		B	loc_3B08
@ ---------------------------------------------------------------------------

def_20003A9A:				@ CODE XREF: EventHandler+Cj
					@ EventHandler+B8j ...
		B	loc_3C02	@ jumptable 20003A9A default case
@ ---------------------------------------------------------------------------

loc_3AE6:				@ CODE XREF: EventHandler+F4j
		LDR	R1, off_3DE0
		LDR	R0, [SP,#0x68+var_5C]
		ADDS	R1, #0x2C
		LSLS	R0, R0,	#0x1F
		BEQ	loc_3AF6
		LDR	R0, [SP,#0x68+var_28]

loc_3AF2:				@ CODE XREF: EventHandler+11Cj
		STR	R0, [R1]
		B	loc_42F4
@ ---------------------------------------------------------------------------

loc_3AF6:				@ CODE XREF: EventHandler+10Ej
		LDR	R0, [SP,#0x68+var_5C]
		ORR.W	R0, R0,	#1
		B	loc_3AF2
@ ---------------------------------------------------------------------------

loc_3AFE:				@ CODE XREF: EventHandler+FAj
		LDRH.W	R7, [R8,#0xAA]
		B	loc_3ADE
@ ---------------------------------------------------------------------------

loc_3B04:				@ CODE XREF: EventHandler+100j
		BL	UpdateDataFlash

loc_3B08:				@ CODE XREF: EventHandler+102j
		LDR	R0, off_3DF0	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDRB	R0, [R0]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R0, #0x53
		BEQ	loc_3B5A
		LDRB.W	R0, [R11,#0x7C]
		MOV	R9, R11
		LSLS	R0, R0,	#0x1F
		BNE	loc_3C02
		LDR	R6, off_3DE0
		LDRH	R0, [R6,#0x16]
		CBZ	R0, loc_3B30
		STRH	R5, [R6,#0x16]
		LDR	R0, [R4]
		LDR	R1, off_3DF8
		ORR.W	R0, R0,	#0x40000
		STR	R0, [R4]
		MOVS	R0, #50
		STRB	R0, [R1]

loc_3B30:				@ CODE XREF: EventHandler+13Ej
		LDR	R0, off_3DE0
		ADDS	R0, #0x2C
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x10
		STR	R1, [R0]
		LDR	R0, [R4]
		LSLS	R1, R0,	#0x17
		BMI	loc_3C22
		LSLS	R1, R0,	#0x16
		MOV.W	R11, #0x19
		BPL	loc_3BCC
		LDRH	R1, [R6,#0x20]
		CMP.W	R1, #0x14A
		BCC	loc_3BA8
		BIC.W	R0, R0,	#0x200
		STR	R0, [R4]
		B	loc_3BC6
@ ---------------------------------------------------------------------------

loc_3B5A:				@ CODE XREF: EventHandler+12Ej
		BL	UpdateDataFlash
		LDRB.W	R0, [R11,#0xC0]
		CMP	R0, #2
		BHI	loc_3C02
		LDR	R1, off_3DE0
		ADDS	R1, #0x2C
		LDR	R0, [R1]
		LSLS	R2, R0,	#0x16

loc_3B6E:				@ CODE XREF: EventHandler+1EAj
		BMI	loc_3C02
		ORR.W	R0, R0,	#0x200
		STR	R0, [R1]
		LDR	R0, off_3DF0	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R1, off_3DFC
		STRB	R5, [R0]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x4000
		STR	R0, [R4]
		LDR	R0, off_3DE0
		STRB	R5, [R0,#0x13]
		MOVW	R0, #0xBB8
		STRH	R0, [R1]
		BL	InitTimeouts
		BL	j_DisplayRefresh
		MOVS	R0, #0x18
		BL	sub_504C
		ADD	SP, SP,	#0x44
		LDR	R0, off_3E00
		POP.W	{R4-R11,LR}
		B.W	CreateTimeout	@ in R0	Callback fct
					@ out R0 Timeout # or 255
@ ---------------------------------------------------------------------------

loc_3BA8:				@ CODE XREF: EventHandler+170j
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		LDR	R0, off_3DF0	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		STRB.W	R11, [R0]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R0, #2
		STRB.W	R0, [R10]
		LDR	R0, off_3DE0
		ADDS	R0, #0x1E
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]

loc_3BC6:				@ CODE XREF: EventHandler+178j
		LDRH	R0, [R4]
		LSLS	R0, R0,	#0x16
		BMI	loc_3B6E

loc_3BCC:				@ CODE XREF: EventHandler+168j
		LDRH	R0, [R6,#0x20]
		CMP.W	R0, #0x136
		BLS	loc_3CB2
		LDRB	R0, [R6,#0xA]
		CMP	R0, #0x46
		BCC	loc_3BE4
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,LR}
		B.W	Overtemp
@ ---------------------------------------------------------------------------

loc_3BE4:				@ CODE XREF: EventHandler+1F8j
		LDR.W	R8, off_3E04

loc_3BE8:				@ CODE XREF: EventHandler+220j
		LDRB.W	R0, [R8]
		CMP	R0, #4
		BNE	loc_3C04
		LDRB	R0, [R6,#2]
		CMP	R0, #0xC
		BCS	loc_3C04
		BL	sub_6038
		MOVS	R0, #0xA
		BL	WaitOnTMR2	@ Waits	R0 ms
		B	loc_3BE8
@ ---------------------------------------------------------------------------

loc_3C02:				@ CODE XREF: EventHandler:def_20003A9Aj
					@ EventHandler+138j ...
		B	loc_3D2C
@ ---------------------------------------------------------------------------

loc_3C04:				@ CODE XREF: EventHandler+20Ej
					@ EventHandler+214j
		LDRB.W	R0, [R8]
		CBZ	R0, loc_3C1E
		CMP	R0, #1
		BEQ	loc_3C18
		CMP	R0, #2
		BEQ	loc_3C24
		CMP	R0, #3
		BNE	loc_3C28
		B	loc_3C1E
@ ---------------------------------------------------------------------------

loc_3C18:				@ CODE XREF: EventHandler+22Cj
		STRB.W	R11, [R6,#7]
		B	loc_3C28
@ ---------------------------------------------------------------------------

loc_3C1E:				@ CODE XREF: EventHandler+228j
					@ EventHandler+236j
		MOVS	R0, #0x1A
		B	loc_3C26
@ ---------------------------------------------------------------------------

loc_3C22:				@ CODE XREF: EventHandler+160j
		B	loc_41F0
@ ---------------------------------------------------------------------------

loc_3C24:				@ CODE XREF: EventHandler+230j
		MOVS	R0, #0x1B

loc_3C26:				@ CODE XREF: EventHandler+240j
		STRB	R0, [R6,#7]

loc_3C28:				@ CODE XREF: EventHandler+234j
					@ EventHandler+23Cj
		LDRB	R0, [R6,#1]
		MOV	R11, R6
		CMP	R0, #0
		BNE	loc_3D2C
		LDR	R0, off_3E08
		LDRB	R1, [R0]
		CMP	R1, #1
		BNE	loc_3CC4
		STRB	R5, [R0]
		LDR	R0, off_3E0C
		MOV	R2, R9
		LDRH	R1, [R0]
		LDR	R0, off_3E10
		STRH	R1, [R0]
		LDRB.W	R0, [R9,#0xE]
		CMP	R0, #1
		BEQ	loc_3CA0
		CBZ	R0, loc_3CA6
		CMP	R0, #2
		BEQ	loc_3CAC
		CMP	R0, #3
		BEQ	loc_3CB4
		CMP	R0, #5
		BEQ	loc_3CBA
		CMP	R0, #4
		BEQ	loc_3CBA
		B	loc_3C9A
@ ---------------------------------------------------------------------------

loc_3C60:				@ CODE XREF: EventHandler+BAj
		B	loc_4458	@ jumptable 20003A9A case 41
@ ---------------------------------------------------------------------------

loc_3C62:				@ CODE XREF: EventHandler+BAj
		B	loc_445A	@ jumptable 20003A9A case 40
@ ---------------------------------------------------------------------------

loc_3C64:				@ CODE XREF: EventHandler+BAj
		B	loc_445C	@ jumptable 20003A9A case 39
@ ---------------------------------------------------------------------------

loc_3C66:				@ CODE XREF: EventHandler+BAj
		B	loc_445E	@ jumptable 20003A9A case 38
@ ---------------------------------------------------------------------------

loc_3C68:				@ CODE XREF: EventHandler+BAj
		B	loc_4460	@ jumptable 20003A9A case 34
@ ---------------------------------------------------------------------------

loc_3C6A:				@ CODE XREF: EventHandler+BAj
		B	loc_4258	@ jumptable 20003A9A case 33
@ ---------------------------------------------------------------------------

loc_3C6C:				@ CODE XREF: EventHandler+BAj
		B	loc_4462	@ jumptable 20003A9A case 32
@ ---------------------------------------------------------------------------

loc_3C6E:				@ CODE XREF: EventHandler+BAj
		B	loc_4464	@ jumptable 20003A9A case 31
@ ---------------------------------------------------------------------------

loc_3C70:				@ CODE XREF: EventHandler+BAj
		B	loc_4466	@ jumptable 20003A9A case 30
@ ---------------------------------------------------------------------------

loc_3C72:				@ CODE XREF: EventHandler+BAj
		B	loc_4468	@ jumptable 20003A9A case 29
@ ---------------------------------------------------------------------------

loc_3C74:				@ CODE XREF: EventHandler+BAj
		B	loc_446A	@ jumptable 20003A9A case 28
@ ---------------------------------------------------------------------------

loc_3C76:				@ CODE XREF: EventHandler+BAj
		B	loc_446C	@ jumptable 20003A9A case 27
@ ---------------------------------------------------------------------------

loc_3C78:				@ CODE XREF: EventHandler+BAj
		B	loc_446E	@ jumptable 20003A9A case 26
@ ---------------------------------------------------------------------------

loc_3C7A:				@ CODE XREF: EventHandler+BAj
		B	loc_4470	@ jumptable 20003A9A case 25
@ ---------------------------------------------------------------------------

loc_3C7C:				@ CODE XREF: EventHandler+BAj
		B	loc_4472	@ jumptable 20003A9A case 24
@ ---------------------------------------------------------------------------

loc_3C7E:				@ CODE XREF: EventHandler+BAj
		B	loc_4474	@ jumptable 20003A9A case 23
@ ---------------------------------------------------------------------------

loc_3C80:				@ CODE XREF: EventHandler+BAj
		B	loc_4476	@ jumptable 20003A9A case 22
@ ---------------------------------------------------------------------------

loc_3C82:				@ CODE XREF: EventHandler+BAj
		B	loc_4478	@ jumptable 20003A9A case 18
@ ---------------------------------------------------------------------------

loc_3C84:				@ CODE XREF: EventHandler+BAj
		B	loc_447A	@ jumptable 20003A9A case 17
@ ---------------------------------------------------------------------------

loc_3C86:				@ CODE XREF: EventHandler+BAj
		B	loc_447C	@ jumptable 20003A9A case 16
@ ---------------------------------------------------------------------------

loc_3C88:				@ CODE XREF: EventHandler+BAj
		B	loc_41FE	@ jumptable 20003A9A case 15
@ ---------------------------------------------------------------------------

loc_3C8A:				@ CODE XREF: EventHandler+BAj
		B	loc_447E	@ jumptable 20003A9A case 13
@ ---------------------------------------------------------------------------

loc_3C8C:				@ CODE XREF: EventHandler+BAj
		B	loc_4480	@ jumptable 20003A9A case 12
@ ---------------------------------------------------------------------------

loc_3C8E:				@ CODE XREF: EventHandler+BAj
		B	loc_4482	@ jumptable 20003A9A case 11
@ ---------------------------------------------------------------------------

loc_3C90:				@ CODE XREF: EventHandler+BAj
		B	loc_4484	@ jumptable 20003A9A case 10
@ ---------------------------------------------------------------------------

loc_3C92:				@ CODE XREF: EventHandler+BAj
		B	loc_4486	@ jumptable 20003A9A case 6
@ ---------------------------------------------------------------------------

loc_3C94:				@ CODE XREF: EventHandler+BAj
		B	loc_4488	@ jumptable 20003A9A case 4
@ ---------------------------------------------------------------------------

loc_3C96:				@ CODE XREF: EventHandler+BAj
		B	loc_448A	@ jumptable 20003A9A case 3
@ ---------------------------------------------------------------------------

loc_3C98:				@ CODE XREF: EventHandler+BAj
		B	loc_42C6	@ jumptable 20003A9A case 2
@ ---------------------------------------------------------------------------

loc_3C9A:				@ CODE XREF: EventHandler+27Ej
		CMP	R0, #6
		BEQ	loc_3CBA
		B	loc_3CC4
@ ---------------------------------------------------------------------------

loc_3CA0:				@ CODE XREF: EventHandler+26Aj
		LDRB.W	R0, [R2,#0x22]
		B	loc_3CB8
@ ---------------------------------------------------------------------------

loc_3CA6:				@ CODE XREF: EventHandler+26Cj
		LDRB.W	R0, [R2,#0x23]
		B	loc_3CB8
@ ---------------------------------------------------------------------------

loc_3CAC:				@ CODE XREF: EventHandler+270j
		LDRB.W	R0, [R2,#0x86]
		B	loc_3CB8
@ ---------------------------------------------------------------------------

loc_3CB2:				@ CODE XREF: EventHandler+1F2j
		B	loc_41E4
@ ---------------------------------------------------------------------------

loc_3CB4:				@ CODE XREF: EventHandler+274j
		LDRB.W	R0, [R2,#0x92]

loc_3CB8:				@ CODE XREF: EventHandler+2C4j
					@ EventHandler+2CAj ...
		CBNZ	R0, loc_3CC4

loc_3CBA:				@ CODE XREF: EventHandler+278j
					@ EventHandler+27Cj ...
		STRH.W	R1, [R9,#0x1C]
		LDR	R1, off_3DF8
		MOVS	R0, #0x32
		STRB	R0, [R1]

loc_3CC4:				@ CODE XREF: EventHandler+256j
					@ EventHandler+2BEj ...
		LDR	R0, [R4]
		MOV.W	R2, #0x20
		LSLS	R1, R0,	#4
		BPL	loc_3D82
		LDRB.W	R1, [R9,#0xE]
		MOV	R8, R9
		CMP	R1, #1
		BNE	loc_3D82
		BIC.W	R3, R0,	#0x8000000
		STR	R3, [R4]
		LDRH.W	R0, [R8,#0x1E]
		CBZ	R0, loc_3D52
		LDR	R1, off_3E14
		STRH	R0, [R1]
		LDR	R1, off_3E10
		LDRH	R1, [R1]
		CMP.W	R1, R0,LSL#1
		BHI	loc_3D74
		MOVS	R6, #0x14
		UDIV.W	R12, R0, R6
		ADD	R12, R0
		CMP	R12, R1
		BCS	loc_3D10
		ADD.W	R12, R0, #1
		CMP	R12, R1
		BCS	loc_3D10
		LDRB.W	R12, [R8,#0x22]
		CMP.W	R12, #0
		BEQ	loc_3D5E

loc_3D10:				@ CODE XREF: EventHandler+31Cj
					@ EventHandler+324j
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3D20
		SUBS	R3, R0,	#1
		CMP	R3, R1
		BGT	loc_3D34

loc_3D20:				@ CODE XREF: EventHandler+338j
		UDIV.W	R3, R0,	R6
		ADD	R3, R0
		CMP	R3, R1
		BCS	loc_3D4C
		B	loc_3D2E
@ ---------------------------------------------------------------------------

loc_3D2C:				@ CODE XREF: EventHandler:loc_3C02j
					@ EventHandler+24Ej
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_3D2E:				@ CODE XREF: EventHandler+34Aj
		ADDS	R3, R0,	#1
		CMP	R3, R1
		BCS	loc_3D4C

loc_3D34:				@ CODE XREF: EventHandler+33Ej
		LDRB.W	R3, [R8,#0x22]
		CBZ	R3, loc_3D64
		MOVS	R3, #0xA
		UDIV.W	R3, R0,	R3
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3D4C
		SUBS	R3, R0,	#4
		CMP	R3, R1
		BGT	loc_3D64

loc_3D4C:				@ CODE XREF: EventHandler+348j
					@ EventHandler+352j ...
		STRH.W	R0, [R9,#0x1C]
		B	loc_3D7C
@ ---------------------------------------------------------------------------

loc_3D52:				@ CODE XREF: EventHandler+302j
		B	loc_3D54
@ ---------------------------------------------------------------------------

loc_3D54:				@ CODE XREF: EventHandler:loc_3D52j
		LDRH.W	R0, [R8,#0x1C]
		STRH.W	R0, [R9,#0x1E]
		B	loc_3D7C
@ ---------------------------------------------------------------------------

loc_3D5E:				@ CODE XREF: EventHandler+32Ej
		ORR.W	R0, R3,	#0x8000000
		B	loc_3E58
@ ---------------------------------------------------------------------------

loc_3D64:				@ CODE XREF: EventHandler+358j
					@ EventHandler+36Aj
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3D7C
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3D7C

loc_3D74:				@ CODE XREF: EventHandler+310j
		STRH.W	R1, [R8,#0x1C]
		STRH.W	R1, [R9,#0x1E]

loc_3D7C:				@ CODE XREF: EventHandler+370j
					@ EventHandler+37Cj ...
		LDR	R0, off_3DF8
		MOVS	R1, #0x32
		STRB	R1, [R0]

loc_3D82:				@ CODE XREF: EventHandler+2ECj
					@ EventHandler+2F6j
		LDR	R0, [R4]
		LSLS	R1, R0,	#3
		BPL	loc_3E82
		LDRB.W	R1, [R9,#0xE]
		MOV	R8, R9
		CBNZ	R1, loc_3DDC
		BIC.W	R3, R0,	#0x10000000
		STR	R3, [R4]
		LDRH.W	R0, [R8,#0x20]
		CBZ	R0, loc_3DDE
		LDR	R1, off_3E18
		ADD.W	R6, R0,	R0,LSL#1
		STRH	R0, [R1]
		LDR	R1, off_3E10
		LDRH	R1, [R1]
		CMP	R6, R1
		BCC	loc_3E74
		MOVS	R6, #0x14
		UDIV.W	R12, R0, R6
		ADD	R12, R0
		CMP	R12, R1
		BCS	loc_3DCA
		ADD.W	R12, R0, #1
		CMP	R12, R1
		BCS	loc_3DCA
		LDRB.W	R12, [R8,#0x23]
		CMP.W	R12, #0
		BEQ	loc_3E54

loc_3DCA:				@ CODE XREF: EventHandler+3D6j
					@ EventHandler+3DEj
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3DDA
		SUBS	R3, R0,	#1
		CMP	R3, R1
		BGT	loc_3E2C

loc_3DDA:				@ CODE XREF: EventHandler+3F2j
		B	loc_3E1C
@ ---------------------------------------------------------------------------

loc_3DDC:				@ CODE XREF: EventHandler+3AEj
		B	loc_3E82
@ ---------------------------------------------------------------------------

loc_3DDE:				@ CODE XREF: EventHandler+3BAj
		B	loc_3E4A
@ ---------------------------------------------------------------------------
off_3DE0:	.long byte_2000003C	@ DATA XREF: EventHandler+4r
					@ EventHandler+12r ...
off_3DE4:	.long dfData		@ DATA XREF: EventHandler+5Ar
					@ EventHandler+64r ...
off_3DE8:	.long ScreenDuration	@ DATA XREF: EventHandler+66r
off_3DEC:	.long EditItemIndex	@ DATA XREF: EventHandler+8Cr
off_3DF0:	.long Screen		@ DATA XREF: EventHandler+38r
					@ EventHandler:loc_3B08r ...
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
off_3DF4:	.long ConfigIndex	@ DATA XREF: EventHandler+2Er
					@ Saved	config # in start mode
off_3DF8:	.long UpdateDFTimer	@ DATA XREF: EventHandler+144r
					@ EventHandler+2DEr ...
off_3DFC:	.long SleepTimer	@ DATA XREF: EventHandler+198r
off_3E00:	.long sub_9B0+1		@ DATA XREF: EventHandler+1BEr
off_3E04:	.long AtoError		@ DATA XREF: EventHandler:loc_3BE4r
off_3E08:	.long byte_200000B3	@ DATA XREF: EventHandler+250r
off_3E0C:	.long AtoRez		@ DATA XREF: EventHandler+25Ar
off_3E10:	.long word_200000C0	@ DATA XREF: EventHandler+260r
					@ EventHandler+308r ...
off_3E14:	.long word_200000B8	@ DATA XREF: EventHandler+304r
off_3E18:	.long word_200000BA	@ DATA XREF: EventHandler+3BCr
@ ---------------------------------------------------------------------------

loc_3E1C:				@ CODE XREF: EventHandler:loc_3DDAj
		UDIV.W	R3, R0,	R6
		ADD	R3, R0
		CMP	R3, R1
		BCS	loc_3E44
		ADDS	R3, R0,	#1
		CMP	R3, R1
		BCS	loc_3E44

loc_3E2C:				@ CODE XREF: EventHandler+3F8j
		LDRB.W	R3, [R8,#0x23]
		CBZ	R3, loc_3E64
		MOVS	R3, #0xA
		UDIV.W	R3, R0,	R3
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3E44
		SUBS	R3, R0,	#4
		CMP	R3, R1
		BGT	loc_3E64

loc_3E44:				@ CODE XREF: EventHandler+444j
					@ EventHandler+44Aj ...
		STRH.W	R0, [R9,#0x1C]
		B	loc_3E7C
@ ---------------------------------------------------------------------------

loc_3E4A:				@ CODE XREF: EventHandler:loc_3DDEj
		LDRH.W	R0, [R8,#0x1C]
		STRH.W	R0, [R9,#0x20]
		B	loc_3E7C
@ ---------------------------------------------------------------------------

loc_3E54:				@ CODE XREF: EventHandler+3E8j
		ORR.W	R0, R3,	#0x10000000

loc_3E58:				@ CODE XREF: EventHandler+382j
		STR	R0, [R4]

loc_3E5A:				@ CODE XREF: EventHandler+542j
					@ EventHandler+604j
		STRB.W	R2, [R11,#7]

loc_3E5E:				@ CODE XREF: EventHandler:loc_3D2Cj
					@ EventHandler:loc_41A0j ...
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,PC}
@ ---------------------------------------------------------------------------

loc_3E64:				@ CODE XREF: EventHandler+450j
					@ EventHandler+462j
		UDIV.W	R3, R0,	R6
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3E7C
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3E7C

loc_3E74:				@ CODE XREF: EventHandler+3CAj
		STRH.W	R1, [R8,#0x1C]
		STRH.W	R1, [R9,#0x20]

loc_3E7C:				@ CODE XREF: EventHandler+468j
					@ EventHandler+472j ...
		LDR	R0, off_426C
		MOVS	R1, #0x32
		STRB	R1, [R0]

loc_3E82:				@ CODE XREF: EventHandler+3A6j
					@ EventHandler:loc_3DDCj
		LDR	R0, off_4270
		LDR	R0, [R0]
		CMP	R0, #0
		BGE	loc_3F40
		LDRB.W	R1, [R9,#0xE]
		MOV	R6, R9
		CMP	R1, #2
		BNE	loc_3F40
		LDR.W	R8, off_4270
		BIC.W	R3, R0,	#0x80000000
		STR.W	R3, [R8]
		LDRH.W	R0, [R6,#0x84]
		CBZ	R0, loc_3F10
		LDR	R1, off_4274
		ADD.W	R4, R0,	R0,LSL#1
		STRH	R0, [R1]
		LDR	R1, off_4278
		LDRH	R1, [R1]
		CMP.W	R4, R1,LSL#1
		BCC	loc_3F34
		MOV.W	R12, #0x14
		UDIV.W	R4, R0,	R12
		ADD	R4, R0
		CMP	R4, R1
		BCS	loc_3ED2
		ADDS	R4, R0,	#1
		CMP	R4, R1
		BCS	loc_3ED2
		LDRB.W	R4, [R6,#0x86]
		CBZ	R4, loc_3F1A

loc_3ED2:				@ CODE XREF: EventHandler+4E4j
					@ EventHandler+4EAj
		UDIV.W	R3, R0,	R12
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3EE2
		SUBS	R3, R0,	#1
		CMP	R3, R1
		BGT	loc_3EF2

loc_3EE2:				@ CODE XREF: EventHandler+4FAj
		UDIV.W	R3, R0,	R12
		ADD	R3, R0
		CMP	R3, R1
		BCS	loc_3F0A
		ADDS	R3, R0,	#1
		CMP	R3, R1
		BCS	loc_3F0A

loc_3EF2:				@ CODE XREF: EventHandler+500j
		LDRB.W	R3, [R6,#0x86]
		CBZ	R3, loc_3F24
		MOVS	R3, #0xA
		UDIV.W	R3, R0,	R3
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3F0A
		SUBS	R3, R0,	#4
		CMP	R3, R1
		BGT	loc_3F24

loc_3F0A:				@ CODE XREF: EventHandler+50Aj
					@ EventHandler+510j ...
		STRH.W	R0, [R9,#0x1C]
		B	loc_3F3A
@ ---------------------------------------------------------------------------

loc_3F10:				@ CODE XREF: EventHandler+4C4j
		B	loc_3F12
@ ---------------------------------------------------------------------------

loc_3F12:				@ CODE XREF: EventHandler:loc_3F10j
		LDRH	R0, [R6,#0x1C]
		STRH.W	R0, [R9,#0x84]
		B	loc_3F3A
@ ---------------------------------------------------------------------------

loc_3F1A:				@ CODE XREF: EventHandler+4F0j
		ORR.W	R0, R3,	#0x80000000
		STR.W	R0, [R8]
		B	loc_3E5A
@ ---------------------------------------------------------------------------

loc_3F24:				@ CODE XREF: EventHandler+516j
					@ EventHandler+528j
		UDIV.W	R3, R0,	R12
		SUBS	R3, R0,	R3
		CMP	R3, R1
		BLE	loc_3F3A
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3F3A

loc_3F34:				@ CODE XREF: EventHandler+4D6j
		STRH	R1, [R6,#0x1C]
		STRH.W	R1, [R9,#0x84]

loc_3F3A:				@ CODE XREF: EventHandler+52Ej
					@ EventHandler+538j ...
		LDR	R1, off_426C
		MOVS	R0, #0x32
		STRB	R0, [R1]

loc_3F40:				@ CODE XREF: EventHandler+4A8j
					@ EventHandler+4B2j
		LDR.W	R12, off_4270
		ADD.W	R12, R12, #4
		LDR.W	R0, [R12]
		LSLS	R1, R0,	#0x1E
		BPL	loc_4002
		LDRB.W	R1, [R9,#0xE]
		MOV	R6, R9
		CMP	R1, #3
		BNE	loc_4002
		BIC.W	R3, R0,	#2
		STR.W	R3, [R12]
		LDRH.W	R0, [R6,#0x90]
		CBZ	R0, loc_3FD2
		LDR	R1, off_427C
		ADD.W	R4, R0,	R0,LSL#1
		STRH	R0, [R1]
		LDR	R1, off_4278
		LDRH	R1, [R1]
		CMP.W	R4, R1,LSL#1
		BCC	loc_3FF6
		MOV.W	R8, #0x14
		UDIV.W	R4, R0,	R8
		ADD	R4, R0
		CMP	R4, R1
		BCS	loc_3F94
		ADDS	R4, R0,	#1
		CMP	R4, R1
		BCS	loc_3F94
		LDRB.W	R4, [R6,#0x92]
		CBZ	R4, loc_3FDC

loc_3F94:				@ CODE XREF: EventHandler+5A6j
					@ EventHandler+5ACj
		UDIV.W	R2, R0,	R8
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3FA4
		SUBS	R2, R0,	#1
		CMP	R2, R1
		BGT	loc_3FB4

loc_3FA4:				@ CODE XREF: EventHandler+5BCj
		UDIV.W	R2, R0,	R8
		ADD	R2, R0
		CMP	R2, R1
		BCS	loc_3FCC
		ADDS	R2, R0,	#1
		CMP	R2, R1
		BCS	loc_3FCC

loc_3FB4:				@ CODE XREF: EventHandler+5C2j
		LDRB.W	R2, [R6,#0x92]
		CBZ	R2, loc_3FE6
		MOVS	R2, #0xA
		UDIV.W	R2, R0,	R2
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3FCC
		SUBS	R2, R0,	#4
		CMP	R2, R1
		BGT	loc_3FE6

loc_3FCC:				@ CODE XREF: EventHandler+5CCj
					@ EventHandler+5D2j ...
		STRH.W	R0, [R9,#0x1C]
		B	loc_3FFC
@ ---------------------------------------------------------------------------

loc_3FD2:				@ CODE XREF: EventHandler+586j
		B	loc_3FD4
@ ---------------------------------------------------------------------------

loc_3FD4:				@ CODE XREF: EventHandler:loc_3FD2j
		LDRH	R0, [R6,#0x1C]
		STRH.W	R0, [R9,#0x90]
		B	loc_3FFC
@ ---------------------------------------------------------------------------

loc_3FDC:				@ CODE XREF: EventHandler+5B2j
		ORR.W	R0, R3,	#2
		STR.W	R0, [R12]
		B	loc_3E5A
@ ---------------------------------------------------------------------------

loc_3FE6:				@ CODE XREF: EventHandler+5D8j
					@ EventHandler+5EAj
		UDIV.W	R2, R0,	R8
		SUBS	R2, R0,	R2
		CMP	R2, R1
		BLE	loc_3FFC
		SUBS	R0, R0,	#1
		CMP	R0, R1
		BLE	loc_3FFC

loc_3FF6:				@ CODE XREF: EventHandler+598j
		STRH	R1, [R6,#0x1C]
		STRH.W	R1, [R9,#0x90]

loc_3FFC:				@ CODE XREF: EventHandler+5F0j
					@ EventHandler+5FAj ...
		LDR	R1, off_426C
		MOVS	R0, #0x32
		STRB	R0, [R1]

loc_4002:				@ CODE XREF: EventHandler+56Ej
					@ EventHandler+578j
		MOVS	R2, #1
		MOVS	R1, #0x80
		LDR	R0, dword_4280
		BL	SetGPIOMode
		LDR	R1, dword_4284
		MOVS	R0, #0
		STR	R0, [R1]
		LDR.W	R8, off_4270
		MOV	R5, R11
		LDR.W	R1, [R8]
		ORR.W	R1, R1,	#0x100
		STR.W	R1, [R8]
		LDRB.W	R0, [R11,#0xC]
		CMP	R0, #1
		BNE	loc_4030
		MOVS	R0, #2
		STRB	R0, [R5,#0xC]

loc_4030:				@ CODE XREF: EventHandler+64Aj
		LDRB.W	R0, [R9,#0x1A]
		MOV	R4, R9
		CMP	R0, #1
		BEQ	loc_404A
		CMP	R0, #2
		BEQ	loc_404E
		LDR	R1, off_4288
		CMP	R0, #3
		BEQ	loc_4058
		CMP	R0, #4
		BEQ	loc_405C
		B	loc_406A
@ ---------------------------------------------------------------------------

loc_404A:				@ CODE XREF: EventHandler+658j
		LDR	R0, off_428C
		B	loc_4052
@ ---------------------------------------------------------------------------

loc_404E:				@ CODE XREF: EventHandler+65Cj
		LDR	R0, off_428C
		ADDS	R0, #0x2A

loc_4052:				@ CODE XREF: EventHandler+66Cj
		BL	sub_2FF0
		B	loc_406A
@ ---------------------------------------------------------------------------

loc_4058:				@ CODE XREF: EventHandler+662j
		MOVS	R0, #0x78
		B	loc_4068
@ ---------------------------------------------------------------------------

loc_405C:				@ CODE XREF: EventHandler+666j
		LDRB.W	R0, [R4,#0x88]
		ADD.W	R0, R4,	R0,LSL#1
		LDRH.W	R0, [R0,#0x8A]

loc_4068:				@ CODE XREF: EventHandler+67Aj
		STRH	R0, [R1]

loc_406A:				@ CODE XREF: EventHandler+668j
					@ EventHandler+676j
		LDR	R6, off_4290
		LDR	R1, off_4294
		MOV.W	R9, #0x64
		STR.W	R9, [R6]
		STR.W	R9, [R1]
		LDRB	R0, [R4,#0xE]
		MOV.W	R11, #0x190
		CMP	R0, #1
		BEQ	loc_408E
		CBZ	R0, loc_408E
		CMP	R0, #2
		BEQ	loc_408E
		CMP	R0, #3
		BNE	loc_40A6

loc_408E:				@ CODE XREF: EventHandler+6A2j
					@ EventHandler+6A4j ...
		LDRH	R0, [R4,#0x1C]
		CMP	R0, #0x96
		BHI	loc_40A2
		LDRB	R0, [R4,#0x19]
		CMP	R0, #1
		BNE	loc_40A6
		LDR.W	R0, [R8]
		LSLS	R0, R0,	#8
		BMI	loc_40AE

loc_40A2:				@ CODE XREF: EventHandler+6B2j
		MOVS	R0, #4
		STRB	R0, [R4,#0xE]

loc_40A6:				@ CODE XREF: EventHandler+6ACj
					@ EventHandler+6B8j
		LDR.W	R0, [R8]
		LSLS	R0, R0,	#8
		BPL	loc_40DC

loc_40AE:				@ CODE XREF: EventHandler+6C0j
		LDRB	R0, [R4,#0xE]
		CMP	R0, #1
		BEQ	loc_40BE
		CBZ	R0, loc_40BE
		CMP	R0, #2
		BEQ	loc_40BE
		CMP	R0, #3
		BNE	loc_40EC

loc_40BE:				@ CODE XREF: EventHandler+6D2j
					@ EventHandler+6D4j ...
		LDRH	R0, [R4,#0x14]
		MOV.W	R1, #0x12C
		CMP	R0, R1
		BCS	loc_40CC
		MOV	R0, R1
		B	loc_40D2
@ ---------------------------------------------------------------------------

loc_40CC:				@ CODE XREF: EventHandler+6E6j
		CMP	R0, R11
		BLS	loc_40D2
		MOV	R0, R11

loc_40D2:				@ CODE XREF: EventHandler+6EAj
					@ EventHandler+6EEj
		BL	GetAtoPower
		BL	GetVoltsForPower
		B	loc_4128
@ ---------------------------------------------------------------------------

loc_40DC:				@ CODE XREF: EventHandler+6CCj
		LDRB	R0, [R4,#0xE]
		CMP	R0, #1
		BEQ	loc_40FC
		CBZ	R0, loc_40FC
		CMP	R0, #2
		BEQ	loc_40FC
		CMP	R0, #3
		BEQ	loc_40FC

loc_40EC:				@ CODE XREF: EventHandler+6DCj
		UXTB	R0, R0
		CMP	R0, #4
		BEQ	loc_412C
		CMP	R0, #6
		BEQ	loc_412C
		CMP	R0, #5
		BEQ	loc_418A
		B	loc_41A2
@ ---------------------------------------------------------------------------

loc_40FC:				@ CODE XREF: EventHandler+700j
					@ EventHandler+702j ...
		LDRB	R0, [R4,#0x1B]
		CMP	R0, #1
		LDRH	R0, [R4,#0x12]
		BNE	loc_4108
		BL	CelsiusToF

loc_4108:				@ CODE XREF: EventHandler+722j
		MOVS	R1, #0x64
		SUBS	R0, #0xC8
		MULS	R0, R1
		SDIV.W	R0, R0,	R11
		UXTB	R0, R0
		MOV.W	R1, #0x12C
		SMULBB.W R1, R0, R1
		UDIV.W	R0, R1,	R9
		ADDS	R0, #0x64
		UXTB	R0, R0
		BL	GetAtoVWVolts

loc_4128:				@ CODE XREF: EventHandler+6FAj
		STR	R0, [R6]
		B	loc_417A
@ ---------------------------------------------------------------------------

loc_412C:				@ CODE XREF: EventHandler+710j
					@ EventHandler+714j
		MOV.W	R0, #0x12C
		CMP	R7, R0
		BLS	loc_413A
		BL	GetVoltsForPower
		B	loc_413C
@ ---------------------------------------------------------------------------

loc_413A:				@ CODE XREF: EventHandler+752j
		LDRH	R0, [R4,#0x16]

loc_413C:				@ CODE XREF: EventHandler+758j
		STR	R0, [R6]
		LDR.W	R0, [R8]
		CMP.W	R7, #0x258
		BIC.W	R0, R0,	#0x20000000
		STR.W	R0, [R8]
		BLS	loc_416C
		LDRH	R2, [R5,#0x20]
		CMP.W	R2, #0x154
		BHI	loc_416C
		ORR.W	R0, R0,	#0x20000000
		STR.W	R0, [R8]
		MOVW	R0, #0xEA60
		UDIV.W	R1, R0,	R7
		LDR	R0, off_4294
		STR	R1, [R0]

loc_416C:				@ CODE XREF: EventHandler+76Ej
					@ EventHandler+776j
		LDRH	R0, [R5,#0x20]
		LDR	R1, off_4298
		CMP.W	R0, #0x17C
		BLS	loc_4178
		MOVS	R0, #0

loc_4178:				@ CODE XREF: EventHandler+794j
		STRH	R0, [R1]

loc_417A:				@ CODE XREF: EventHandler+74Aj
		LDRB	R0, [R4,#0xE]
		CMP	R0, #4
		BEQ	loc_4190
		CMP	R0, #5
		BEQ	loc_4190
		CMP	R0, #6
		BEQ	loc_4190
		B	loc_41A2
@ ---------------------------------------------------------------------------

loc_418A:				@ CODE XREF: EventHandler+718j
		MOV.W	R0, #0x1C2
		STR	R0, [R6]

loc_4190:				@ CODE XREF: EventHandler+79Ej
					@ EventHandler+7A2j ...
		LDR	R0, off_429C
		LDRH	R0, [R0]
		CMP	R0, #0xA
		BCS	loc_41A2
		BL	StopFire
		MOVS	R0, #0x1B
		STRB	R0, [R5,#7]

loc_41A0:				@ CODE XREF: EventHandler+820j
					@ EventHandler+826j ...
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_41A2:				@ CODE XREF: EventHandler+71Aj
					@ EventHandler+7A8j ...
		LDR	R0, off_42A0
		MOVS	R6, #2
		LDR	R1, off_42A4
		STRB	R6, [R0]
		MOVS	R0, #0
		STRB	R0, [R1]
		MOVS	R1, #1
		MOV	R0, R1
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #2
		BL	SetADCState
		BL	ReachTargetVoltage
		LDRH.W	R0, [R8]
		MOV	R4, R8
		LSLS	R0, R0,	#0x17
		BPL	loc_41D2
		LDRB	R0, [R5,#6]
		CMP	R0, #1
		BEQ	loc_41D6

loc_41D2:				@ CODE XREF: EventHandler+7EAj
		BL	StopFire

loc_41D6:				@ CODE XREF: EventHandler+7F0j
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		LDR	R0, off_42A8	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		STRB	R6, [R0]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		B	loc_4984
@ ---------------------------------------------------------------------------

loc_41E4:				@ CODE XREF: EventHandler:loc_3CB2j
		MOVS	R0, #0x1C
		STRB	R0, [R6,#7]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x200
		B	loc_48C6
@ ---------------------------------------------------------------------------

loc_41F0:				@ CODE XREF: EventHandler:loc_3C22j
					@ EventHandler+FC0j
		LDR	R0, off_4270
		SUBS	R0, #0xA
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]

loc_41FC:				@ CODE XREF: EventHandler+8EEj
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_41FE:				@ CODE XREF: EventHandler:loc_3C88j
		LSLS	R0, R1,	#0x1F
		BNE	loc_41A0
		MOVS.W	R0, R11,LSL#23
		BMI	loc_41A0
		MOV	R6, R9
		CMP	R2, #0x52
		BNE	loc_4212
		BL	UpdateDataFlash

loc_4212:				@ CODE XREF: EventHandler+82Cj
		LDRB	R0, [R6]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R0, #0x53
		BNE	loc_421C
		BL	UpdateDataFlash

loc_421C:				@ CODE XREF: EventHandler+836j
		LDR	R0, [R4]
		LSLS	R1, R0,	#0x14
		BPL	loc_4230
		BIC.W	R0, R0,	#0x800
		ORR.W	R0, R0,	#0x8000
		STR	R0, [R4]
		BL	ReadBatteryVoltage

loc_4230:				@ CODE XREF: EventHandler+840j
		LDR	R0, off_4270
		SUBS	R0, #0x28
		LDRH	R1, [R0,#0x16]
		CBZ	R1, loc_4252
		STRH	R5, [R0,#0x16]
		ADDS	R0, #0x2C
		LDR	R1, [R0]
		BIC.W	R1, R1,	#0x10
		STR	R1, [R0]
		LDR	R0, [R4]
		LDR	R1, off_426C
		ORR.W	R0, R0,	#0x40000
		STR	R0, [R4]
		MOVS	R0, #0x32
		STRB	R0, [R1]

loc_4252:				@ CODE XREF: EventHandler+856j
		BL	MainView
		B	loc_48A0
@ ---------------------------------------------------------------------------

loc_4258:				@ CODE XREF: EventHandler:loc_3C6Aj
		LDR	R0, off_428C
		SUBS	R0, #0x26
		LSLS	R1, R1,	#31
		BEQ	loc_41A0
		LDRB.W	R1, [R0,#0x24]
		CBZ	R1, loc_42AE
		STRB.W	R5, [R0,#0x24]
		B	loc_42B4
@ ---------------------------------------------------------------------------
off_426C:	.long UpdateDFTimer	@ DATA XREF: EventHandler:loc_3E7Cr
					@ EventHandler:loc_3F3Ar ...
off_4270:	.long dword_20000064	@ DATA XREF: EventHandler:loc_3E82r
					@ EventHandler+4B4r ...
off_4274:	.long word_200000BC	@ DATA XREF: EventHandler+4C6r
off_4278:	.long word_200000C0	@ DATA XREF: EventHandler+4CEr
					@ EventHandler+590r
off_427C:	.long word_200000BE	@ DATA XREF: EventHandler+588r
dword_4280:	.long 0x400040C0	@ DATA XREF: EventHandler+626r
dword_4284:	.long 0x400048DC	@ DATA XREF: EventHandler+62Cr
off_4288:	.long TCR		@ DATA XREF: EventHandler+65Er
off_428C:	.long byte_200002A2	@ DATA XREF: EventHandler:loc_404Ar
					@ EventHandler:loc_404Er ...
off_4290:	.long TargetVolts	@ DATA XREF: EventHandler:loc_406Ar
off_4294:	.long dword_200000D8	@ DATA XREF: EventHandler+68Cr
					@ EventHandler+788r
off_4298:	.long LowBatVolts	@ DATA XREF: EventHandler+78Er
off_429C:	.long AtoRez		@ DATA XREF: EventHandler:loc_4190r
off_42A0:	.long BBCNextMode	@ DATA XREF: EventHandler:loc_41A2r
off_42A4:	.long BBCMode		@ DATA XREF: EventHandler+7C6r
off_42A8:	.long Screen		@ DATA XREF: EventHandler+7FEr
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
@ ---------------------------------------------------------------------------

loc_42AC:				@ CODE XREF: EventHandler+EAj
		B	loc_49EC
@ ---------------------------------------------------------------------------

loc_42AE:				@ CODE XREF: EventHandler+884j
		MOVS	R1, #1
		STRB.W	R1, [R0,#0x24]

loc_42B4:				@ CODE XREF: EventHandler+88Aj
		MOVS	R1, #0x29
		STR.W	R12, [R4]
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R1, #3
		STRB.W	R1, [R10]

loc_42C4:				@ CODE XREF: EventHandler+E5Ej
		B	loc_4578
@ ---------------------------------------------------------------------------

loc_42C6:				@ CODE XREF: EventHandler:loc_3C98j
		LDR	R6, off_46AC
		LSLS	R1, R1,	#0x1F
		BEQ	loc_4310
		CMP	R2, #0x3B
		BNE	loc_41FC
		LDR	R0, [SP,#0x68+var_5C]
		LSLS	R0, R0,	#0x1F
		BEQ	loc_42FA
		LDR	R1, [SP,#0x68+var_58]
		LDR	R0, off_46B0
		CMP	R1, #3
		BCC	loc_42E0
		STRB	R5, [R0,#0x14]

loc_42E0:				@ CODE XREF: EventHandler+8FCj
		LDRB	R0, [R0,#0x14]
		MOVW	R2, #0x3E7
		ADD.W	R1, R6,	R0,LSL#1
		LDRH.W	R0, [R1,#0x8A]
		CMP	R0, R2
		BCS	loc_430A
		B	loc_42F6
@ ---------------------------------------------------------------------------

loc_42F4:				@ CODE XREF: EventHandler+114j
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_42F6:				@ CODE XREF: EventHandler+912j
		ADDS	R0, R0,	#1
		B	loc_45AC
@ ---------------------------------------------------------------------------

loc_42FA:				@ CODE XREF: EventHandler+8F4j
		LDR	R0, [SP,#0x68+var_58]
		LDR	R1, off_46B0
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R1,#0x14]
		CMP	R0, #3
		BCC	loc_430A
		STRB	R5, [R1,#0x14]

loc_430A:				@ CODE XREF: EventHandler+910j
					@ EventHandler:loc_42F4j ...
		STR.W	R12, [R4]
		B	loc_4AF8
@ ---------------------------------------------------------------------------

loc_4310:				@ CODE XREF: EventHandler+8EAj
		CMP	R2, #0x50
		BCC	loc_4330
		LDR	R7, off_46B4
		LDRB	R1, [R7]
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		STRB	R1, [R7]
		CMP	R1, #3
		BCC	loc_4328
		MOVS	R0, #1
		STRB	R0, [R7]
		B	loc_4356
@ ---------------------------------------------------------------------------

loc_4328:				@ CODE XREF: EventHandler+940j
		CMP	R1, #1
		BEQ	loc_4356
		CMP	R1, #2
		BEQ	loc_435A

loc_4330:				@ CODE XREF: EventHandler+932j
		LDR.W	R9, off_46B0
		MOVS	R7, #5
		STRB.W	R7, [R9]
		LDR	R1, [SP,#0x3C]
		CBZ	R1, loc_43A2
		MOV.W	R2, #0x3E8
		STRH.W	R2, [R9,#0x16]
		CBZ	R3, loc_4362
		CMP	R3, #1
		BEQ	loc_4368
		CMP	R3, #2
		BEQ	loc_43C4
		CMP	R3, #3
		BEQ	loc_4416
		B	loc_4376
@ ---------------------------------------------------------------------------

loc_4356:				@ CODE XREF: EventHandler+946j
					@ EventHandler+94Aj
		MOVS	R1, #0x28
		B	loc_435C
@ ---------------------------------------------------------------------------

loc_435A:				@ CODE XREF: EventHandler+94Ej
		MOVS	R1, #0x29

loc_435C:				@ CODE XREF: EventHandler+978j
		LDR	R0, off_46B0
		STRB	R1, [R0,#7]
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_4362:				@ CODE XREF: EventHandler+966j
		BL	NextMode
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4368:				@ CODE XREF: EventHandler+96Aj
		CMP	R0, #3
		BEQ	loc_438C
		CBZ	R0, loc_43A4
		CMP	R0, #1
		BEQ	loc_43A4
		CMP	R0, #2
		BEQ	loc_43A4

loc_4376:				@ CODE XREF: EventHandler+974j
		LDR	R0, off_46AC
		LDRB	R0, [R0,#0x18]	@ Amps,	Puffs or Time display
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP.W	LR, #0
		BEQ	loc_441C
		CMP.W	LR, #2
		BEQ	loc_4428
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_438C:				@ CODE XREF: EventHandler+98Aj
		LDRB.W	R0, [R6,#0x88]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R0, [R6,#0x88]
		CMP	R0, #3
		BCC	loc_43A0
		STRB.W	R5, [R6,#0x88]

loc_43A0:				@ CODE XREF: EventHandler+9BAj
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_43A2:				@ CODE XREF: EventHandler+95Cj
		B	loc_4436
@ ---------------------------------------------------------------------------

loc_43A4:				@ CODE XREF: EventHandler+98Cj
					@ EventHandler+990j ...
		LDRB.W	R0, [R6,#0x94]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R0, [R6,#0x94]
		CMP	R0, #2
		BLS	loc_43B8
		STRB.W	R5, [R6,#0x94]

loc_43B8:				@ CODE XREF: EventHandler+9D2j
		LDRB.W	R0, [R6,#0x94]
		STRB	R0, [R6,#0xE]
		BL	ModeChange
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_43C4:				@ CODE XREF: EventHandler+96Ej
		LDRD.W	R0, R1,	[SP]
		CMP	R0, R1
		BCS	loc_4412
		LDR	R0, [SP,#0x68+var_50]
		CMP	R0, #0x69
		BCC	loc_440C
		LDR	R1, [SP,#0x68+var_68]
		MOVS	R0, #0xA
		UDIV.W	R2, R1,	R0
		MLS.W	R1, R0,	R2, R1
		CBZ	R1, loc_43F4
		LDR	R1, [SP,#0x68+var_68]
		UDIV.W	R0, R1,	R0
		ADD.W	R1, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R1,LSL#1
		STRH	R0, [R6,#0x14]

loc_43F4:				@ CODE XREF: EventHandler+9FEj
		LDRH	R0, [R6,#0x14]
		ADDS	R0, #0xA

loc_43F8:				@ CODE XREF: EventHandler+A30j
					@ EventHandler+A34j
		STRH	R0, [R6,#0x14]
		LDR	R0, off_46B0
		LDR	R1, [SP,#0x68+var_5C]
		ADDS	R0, #0x2C
		ORR.W	R1, R1,	#0x10
		STR	R1, [R0]
		BL	MainView
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_440C:				@ CODE XREF: EventHandler+9F0j
		LDR	R0, [SP,#0x68+var_68]
		ADDS	R0, R0,	#1
		B	loc_43F8
@ ---------------------------------------------------------------------------

loc_4412:				@ CODE XREF: EventHandler+9EAj
		MOVS	R0, #0xA
		B	loc_43F8
@ ---------------------------------------------------------------------------

loc_4416:				@ CODE XREF: EventHandler+972j
		BL	SwitchRezLock
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_441C:				@ CODE XREF: EventHandler+9A2j
		CMP	R3, #6
		BNE	loc_4426
		STRB	R0, [R6,#0x18]	@ Amps,	Puffs or Time display
		CMP	R0, #4
		BCS	loc_4432

loc_4426:				@ CODE XREF: EventHandler+A3Ej
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4428:				@ CODE XREF: EventHandler+9A8j
		CMP	R3, #4
		BNE	loc_4434
		STRB	R0, [R6,#0x18]	@ Amps,	Puffs or Time display
		CMP	R0, #3
		BCC	loc_4434

loc_4432:				@ CODE XREF: EventHandler+A44j
		STRB	R5, [R6,#0x18]	@ Amps,	Puffs or Time display

loc_4434:				@ CODE XREF: EventHandler+A4Aj
					@ EventHandler+A50j
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4436:				@ CODE XREF: EventHandler:loc_43A2j
		CMP	R2, #0x33
		BEQ	loc_448C
		LDR	R1, off_46B0
		CMP	R0, #4
		LDR	R2, [R1,#0x34]
		UXTH	R1, R2
		BEQ	loc_44BC
		CMP	R0, #6
		BEQ	loc_44FC
		CMP	R0, #1
		BEQ	loc_44AE
		CBZ	R0, loc_44AE
		CMP	R0, #2
		BEQ	loc_4550
		CMP	R0, #3
		BEQ	loc_4550
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4458:				@ CODE XREF: EventHandler:loc_3C60j
		B	loc_4A1C
@ ---------------------------------------------------------------------------

loc_445A:				@ CODE XREF: EventHandler:loc_3C62j
		B	loc_4A10
@ ---------------------------------------------------------------------------

loc_445C:				@ CODE XREF: EventHandler:loc_3C64j
		B	loc_4ADE
@ ---------------------------------------------------------------------------

loc_445E:				@ CODE XREF: EventHandler:loc_3C66j
		B	loc_4AB0
@ ---------------------------------------------------------------------------

loc_4460:				@ CODE XREF: EventHandler:loc_3C68j
		B	loc_4AA4
@ ---------------------------------------------------------------------------

loc_4462:				@ CODE XREF: EventHandler:loc_3C6Cj
		B	loc_49A2
@ ---------------------------------------------------------------------------

loc_4464:				@ CODE XREF: EventHandler:loc_3C6Ej
		B	loc_4B20
@ ---------------------------------------------------------------------------

loc_4466:				@ CODE XREF: EventHandler:loc_3C70j
		B	loc_4A58
@ ---------------------------------------------------------------------------

loc_4468:				@ CODE XREF: EventHandler:loc_3C72j
		B	loc_4B10
@ ---------------------------------------------------------------------------

loc_446A:				@ CODE XREF: EventHandler:loc_3C74j
		B	loc_48D4
@ ---------------------------------------------------------------------------

loc_446C:				@ CODE XREF: EventHandler:loc_3C76j
		B	loc_4988
@ ---------------------------------------------------------------------------

loc_446E:				@ CODE XREF: EventHandler:loc_3C78j
		B	loc_48F0
@ ---------------------------------------------------------------------------

loc_4470:				@ CODE XREF: EventHandler:loc_3C7Aj
		B	loc_497A
@ ---------------------------------------------------------------------------

loc_4472:				@ CODE XREF: EventHandler:loc_3C7Cj
		B	loc_4904
@ ---------------------------------------------------------------------------

loc_4474:				@ CODE XREF: EventHandler:loc_3C7Ej
		B	loc_49D8
@ ---------------------------------------------------------------------------

loc_4476:				@ CODE XREF: EventHandler:loc_3C80j
		B	loc_49D0
@ ---------------------------------------------------------------------------

loc_4478:				@ CODE XREF: EventHandler:loc_3C82j
		B	loc_4A6A
@ ---------------------------------------------------------------------------

loc_447A:				@ CODE XREF: EventHandler:loc_3C84j
		B	loc_4922
@ ---------------------------------------------------------------------------

loc_447C:				@ CODE XREF: EventHandler:loc_3C86j
		B	loc_49B2
@ ---------------------------------------------------------------------------

loc_447E:				@ CODE XREF: EventHandler:loc_3C8Aj
		B	loc_48A8
@ ---------------------------------------------------------------------------

loc_4480:				@ CODE XREF: EventHandler:loc_3C8Cj
		B	loc_487E
@ ---------------------------------------------------------------------------

loc_4482:				@ CODE XREF: EventHandler:loc_3C8Ej
		B	loc_4854
@ ---------------------------------------------------------------------------

loc_4484:				@ CODE XREF: EventHandler:loc_3C90j
		B	loc_4848
@ ---------------------------------------------------------------------------

loc_4486:				@ CODE XREF: EventHandler:loc_3C92j
		B	loc_49F2
@ ---------------------------------------------------------------------------

loc_4488:				@ CODE XREF: EventHandler:loc_3C94j
		B	loc_4A28
@ ---------------------------------------------------------------------------

loc_448A:				@ CODE XREF: EventHandler:loc_3C96j
		B	loc_4580
@ ---------------------------------------------------------------------------

loc_448C:				@ CODE XREF: EventHandler+A58j
		LDR	R1, off_46B8
		CMP	R0, #1
		LDRH	R1, [R1]
		STRH	R1, [R6,#0x1C]
		BEQ	loc_44A2
		CBZ	R0, loc_44A6
		CMP	R0, #2
		BEQ	loc_44B0
		CMP	R0, #3
		BEQ	loc_44B6
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_44A2:				@ CODE XREF: EventHandler+AB4j
		STRH	R1, [R6,#0x1E]
		B	loc_474C
@ ---------------------------------------------------------------------------

loc_44A6:				@ CODE XREF: EventHandler+AB6j
		STRH	R1, [R6,#0x20]
		B	loc_4754
@ ---------------------------------------------------------------------------

loc_44AA:				@ CODE XREF: EventHandler+D6Ej
					@ EventHandler+D76j ...
		STR	R0, [R4]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_44AE:				@ CODE XREF: EventHandler+A6Aj
					@ EventHandler+A6Cj
		B	loc_4550
@ ---------------------------------------------------------------------------

loc_44B0:				@ CODE XREF: EventHandler+ABAj
		STRH.W	R1, [R6,#0x84]
		B	loc_475E
@ ---------------------------------------------------------------------------

loc_44B6:				@ CODE XREF: EventHandler+ABEj
		STRH.W	R1, [R6,#0x90]
		B	loc_4768
@ ---------------------------------------------------------------------------

loc_44BC:				@ CODE XREF: EventHandler+A62j
		LDR	R0, [SP,#0x68+var_50]
		CMP	R0, #0x69
		BCC	loc_44F6
		LDR	R3, [SP,#0x68+var_60]
		MOVS	R0, #0xA
		UDIV.W	R4, R3,	R0
		MLS.W	R3, R0,	R4, R3
		CBZ	R3, loc_44E4
		LDR	R3, [SP,#0x68+var_60]
		UDIV.W	R0, R3,	R0
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH	R0, [R6,#0x10]

loc_44E4:				@ CODE XREF: EventHandler+AEEj
		LDRH	R0, [R6,#0x10]
		ADDS	R0, #0xA

loc_44E8:				@ CODE XREF: EventHandler+B1Aj
		STRH	R0, [R6,#0x10]
		UXTH	R0, R0
		CMP	R0, R2
		BLS	loc_44F2
		STRH	R1, [R6,#0x10]

loc_44F2:				@ CODE XREF: EventHandler+B0Ej
		LDRH	R0, [R6,#0x10]
		B	loc_4548
@ ---------------------------------------------------------------------------

loc_44F6:				@ CODE XREF: EventHandler+AE0j
		LDR	R0, [SP,#0x68+var_60]
		ADDS	R0, R0,	#1
		B	loc_44E8
@ ---------------------------------------------------------------------------

loc_44FC:				@ CODE XREF: EventHandler+A66j
		LDR	R0, [SP,#0x68+var_48]
		CMP	R0, #0xA
		BCS	loc_4544
		LDRB.W	R0, [R9,#1]
		CBNZ	R0, loc_4544
		LDR	R0, off_46BC
		LDRH	R0, [R0]
		CBZ	R0, loc_4544
		LDRH.W	R0, [R8,#0xAA]
		MOVS	R3, #0xA
		UDIV.W	R4, R0,	R3
		MLS.W	R4, R3,	R4, R0
		CBZ	R4, loc_4532
		UDIV.W	R0, R0,	R3
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH.W	R0, [R8,#0xAA]

loc_4532:				@ CODE XREF: EventHandler+B3Cj
		UXTH	R0, R0
		ADDS	R0, #0xA
		UXTH	R0, R0
		STRH.W	R0, [R8,#0xAA]
		CMP	R0, R2
		BLS	loc_4544
		STRH.W	R1, [R8,#0xAA]

loc_4544:				@ CODE XREF: EventHandler+B20j
					@ EventHandler+B26j ...
		LDRH.W	R0, [R8,#0xAA]

loc_4548:				@ CODE XREF: EventHandler+B14j
		BL	GetAtoVWVolts
		STRH	R0, [R6,#0x16]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4550:				@ CODE XREF: EventHandler+A70j
					@ EventHandler+A74j ...
		LDR	R0, [SP,#0x68+var_40]
		CMP	R0, #0
		LDR	R0, [SP,#0x68+var_54]
		BEQ	loc_4566
		ADDS	R0, R0,	#5
		CMP.W	R0, #0x13C
		BCC	loc_4574
		STRB	R5, [R6,#0x1B]
		MOVS	R0, #0xC8
		B	loc_4574
@ ---------------------------------------------------------------------------

loc_4566:				@ CODE XREF: EventHandler+B76j
		ADDS	R0, #0xA
		CMP.W	R0, #0x258
		BLS	loc_4574
		MOVS	R0, #1
		STRB	R0, [R6,#0x1B]
		MOVS	R0, #0x64

loc_4574:				@ CODE XREF: EventHandler+B7Ej
					@ EventHandler+B84j ...
		STRH	R0, [R6,#0x12]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4578:				@ CODE XREF: EventHandler:loc_42C4j
					@ EventHandler+E66j ...
		LDR	R1, off_46C0
		MOVS	R0, #0x32
		STRB	R0, [R1]

loc_457E:				@ CODE XREF: EventHandler+BA8j
		B	loc_3E5E
@ ---------------------------------------------------------------------------

loc_4580:				@ CODE XREF: EventHandler:loc_448Aj
		LDR	R7, off_46AC
		LSLS	R6, R1,	#0x1F
		BEQ	loc_45BE
		CMP	R2, #0x3B
		BNE	loc_457E
		LDR	R0, [SP,#0x68+var_5C]
		LDR	R1, [SP,#0x68+var_58]
		LSLS	R0, R0,	#0x1F
		LDR	R0, off_46B0
		BEQ	loc_45B2
		CMP	R1, #3
		BCC	loc_459A
		STRB	R5, [R0,#0x14]

loc_459A:				@ CODE XREF: EventHandler+BB6j
		LDRB	R0, [R0,#0x14]
		ADD.W	R1, R7,	R0,LSL#1
		LDRH.W	R0, [R1,#0x8A]
		CMP	R0, #1
		BLS.W	loc_430A
		SUBS	R0, R0,	#1

loc_45AC:				@ CODE XREF: EventHandler+918j
		STRH.W	R0, [R1,#0x8A]

loc_45B0:				@ CODE XREF: EventHandler+C24j
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_45B2:				@ CODE XREF: EventHandler+BB2j
		CBZ	R1, loc_45B8
		SUBS	R1, R1,	#1
		B	loc_45BA
@ ---------------------------------------------------------------------------

loc_45B8:				@ CODE XREF: EventHandler:loc_45B2j
		MOVS	R1, #2

loc_45BA:				@ CODE XREF: EventHandler+BD6j
		STRB	R1, [R0,#0x14]
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_45BE:				@ CODE XREF: EventHandler+BA4j
		CMP	R2, #0x52
		BEQ	loc_45E4
		CMP	R2, #0x53
		BEQ	loc_45F6
		LDR.W	R9, off_46B0
		MOVS	R6, #5
		STRB.W	R6, [R9]
		LDR	R1, [SP,#0x68+var_2C]
		CBZ	R1, loc_464A
		MOV.W	R2, #0x3E8
		LDR	R6, off_46C4
		STRH.W	R2, [R9,#0x16]
		CMP	R3, #2
		BEQ	loc_460C
		B	loc_466E
@ ---------------------------------------------------------------------------

loc_45E4:				@ CODE XREF: EventHandler+BE0j
		LSLS	R0, R1,	#0x1C
		BMI	loc_45EE
		ORR.W	R0, R1,	#8
		B	loc_45F2
@ ---------------------------------------------------------------------------

loc_45EE:				@ CODE XREF: EventHandler+C06j
		BIC.W	R0, R1,	#8

loc_45F2:				@ CODE XREF: EventHandler+C0Cj
		STR	R0, [R7,#0x7C]
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_45F6:				@ CODE XREF: EventHandler+BE4j
		LDRB.W	R0, [R7,#0xC0]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R0, [R7,#0xC0]
		CMP	R0, #3
		BLS	loc_45B0
		STRB.W	R5, [R7,#0xC0]
		B	loc_430A
@ ---------------------------------------------------------------------------

loc_460C:				@ CODE XREF: EventHandler+C00j
		LDR	R1, [SP,#0xC]
		LSLS	R1, R1,	#0x1B
		BPL	loc_466E
		LDR	R0, [SP]
		CMP	R0, #0xA
		BLS	loc_466A
		LDR	R0, [SP,#0x18]
		CMP	R0, #0x69
		BCC	loc_464C
		LDR	R1, [SP]
		MOVS	R0, #0xA
		UDIV.W	R2, R1,	R0
		MLS.W	R1, R0,	R2, R1
		CBZ	R1, loc_4644
		LDR	R1, [SP]
		UDIV.W	R0, R1,	R0
		ADD.W	R1, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R1,LSL#1
		STRH	R0, [R7,#0x14]
		CMP	R0, #0xA
		BLS	loc_4652

loc_4644:				@ CODE XREF: EventHandler+C4Aj
		LDRH	R0, [R7,#0x14]
		SUBS	R0, #0xA
		B	loc_4650
@ ---------------------------------------------------------------------------

loc_464A:				@ CODE XREF: EventHandler+BF2j
		B	loc_4716
@ ---------------------------------------------------------------------------

loc_464C:				@ CODE XREF: EventHandler+C3Cj
		LDR	R0, [SP]
		SUBS	R0, R0,	#1

loc_4650:				@ CODE XREF: EventHandler+C68j
					@ EventHandler+C8Cj
		STRH	R0, [R7,#0x14]

loc_4652:				@ CODE XREF: EventHandler+C62j
		LDR	R0, [SP,#0x68+var_4C]
		STR	R0, [R4]
		BL	MainView
		LDRB.W	R0, [R7,#0x87]
		CBZ	R0, loc_46C8
		CMP	R0, #1
		BEQ	loc_46E2
		CMP	R0, #2
		BEQ	loc_470E
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_466A:				@ CODE XREF: EventHandler+C36j
		LDR	R0, [SP,#4]
		B	loc_4650
@ ---------------------------------------------------------------------------

loc_466E:				@ CODE XREF: EventHandler+C02j
					@ EventHandler+C30j
		LDR	R1, off_46C4
		MOVS	R2, #6
		LDRB	R1, [R1]
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		CMP	R0, #1
		BEQ	loc_4698
		CBZ	R0, loc_4698
		CMP	R0, #2
		BEQ	loc_4698
		CMP	R0, #3
		BEQ	loc_4698
		SUBS.W	R4, LR,	#0
		BEQ	loc_46F4
		CMP.W	LR, #1
		BEQ	loc_46FA
		CMP	R4, #2
		BEQ	loc_46FE
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4698:				@ CODE XREF: EventHandler+C9Aj
					@ EventHandler+C9Cj ...
		CMP.W	LR, #0
		BEQ	loc_46CA
		CMP.W	LR, #1
		BEQ	loc_46DC
		CMP.W	LR, #2
		BEQ	loc_46EE
		B	loc_4834
@ ---------------------------------------------------------------------------
off_46AC:	.long dfData		@ DATA XREF: EventHandler:loc_42C6r
					@ EventHandler:loc_4376r ...
off_46B0:	.long byte_2000003C	@ DATA XREF: EventHandler+8F8r
					@ EventHandler+91Cr ...
off_46B4:	.long LOGOMenuIndex	@ DATA XREF: EventHandler+934r
off_46B8:	.long word_200000C0	@ DATA XREF: EventHandler:loc_448Cr
off_46BC:	.long AtoRez		@ DATA XREF: EventHandler+B28r
off_46C0:	.long UpdateDFTimer	@ DATA XREF: EventHandler:loc_4578r
off_46C4:	.long EditItemIndex	@ DATA XREF: EventHandler+BF8r
					@ EventHandler:loc_466Er
@ ---------------------------------------------------------------------------

loc_46C8:				@ CODE XREF: EventHandler+C7Ej
		B	loc_46D4
@ ---------------------------------------------------------------------------

loc_46CA:				@ CODE XREF: EventHandler+CBCj
		CMP	R3, #3
		BEQ	loc_46F6
		CMP	R3, #6
		BCS	loc_470A
		STRB	R1, [R6]

loc_46D4:				@ CODE XREF: EventHandler:loc_46C8j
		LDRB	R0, [R6]
		CMP	R0, #6
		BHI	loc_470A
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_46DC:				@ CODE XREF: EventHandler+CC2j
					@ EventHandler+D1Cj
		CMP	R3, #5
		BCS	loc_470A
		STRB	R1, [R6]

loc_46E2:				@ CODE XREF: EventHandler+C82j
		LDRB	R0, [R6]
		CMP	R0, #5
		BHI	loc_470A
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_46EA:				@ CODE XREF: EventHandler+D12j
		STRB	R1, [R6]
		B	loc_470E
@ ---------------------------------------------------------------------------

loc_46EE:				@ CODE XREF: EventHandler+CC8j
		CMP	R3, #4
		BCS	loc_470A
		B	loc_46EA
@ ---------------------------------------------------------------------------

loc_46F4:				@ CODE XREF: EventHandler+CAAj
		CBNZ	R3, loc_470A

loc_46F6:				@ CODE XREF: EventHandler+CECj
		STRB	R2, [R6]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_46FA:				@ CODE XREF: EventHandler+CB0j
		CBZ	R3, loc_4704
		B	loc_46DC
@ ---------------------------------------------------------------------------

loc_46FE:				@ CODE XREF: EventHandler+CB4j
		CMP	R0, #6
		BEQ	loc_470E
		CBNZ	R3, loc_470A

loc_4704:				@ CODE XREF: EventHandler:loc_46FAj
		MOVS	R0, #4
		STRB	R0, [R6]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_470A:				@ CODE XREF: EventHandler+CF0j
					@ EventHandler+CF8j ...
		STRB	R5, [R6]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_470E:				@ CODE XREF: EventHandler+C86j
					@ EventHandler+D0Cj ...
		LDRB	R0, [R6]
		CMP	R0, #4
		BHI	loc_470A
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4716:				@ CODE XREF: EventHandler:loc_464Aj
		CMP	R2, #0x33
		BEQ	loc_4738
		LDR	R1, off_4AFC
		CMP	R0, #4
		LDR	R2, [R1,#0x30]
		UXTH	R1, R2
		BEQ	loc_4772
		CMP	R0, #6
		BEQ	loc_47BA
		CMP	R0, #1
		BEQ	loc_480E
		CBZ	R0, loc_47A4
		CMP	R0, #2
		BEQ	loc_480E
		CMP	R0, #3
		BEQ	loc_480E
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4738:				@ CODE XREF: EventHandler+D38j
		CMP	R0, #1
		BEQ	loc_4748
		CBZ	R0, loc_4750
		CMP	R0, #2
		BEQ	loc_4758
		CMP	R0, #3
		BEQ	loc_4762
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4748:				@ CODE XREF: EventHandler+D5Aj
		LDRH	R0, [R7,#0x1E]
		STRH	R0, [R7,#0x1C]

loc_474C:				@ CODE XREF: EventHandler+AC4j
		LDR	R0, [SP,#0x68+var_30]
		B	loc_44AA
@ ---------------------------------------------------------------------------

loc_4750:				@ CODE XREF: EventHandler+D5Cj
		LDRH	R0, [R7,#0x20]
		STRH	R0, [R7,#0x1C]

loc_4754:				@ CODE XREF: EventHandler+AC8j
		LDR	R0, [SP,#0x68+var_34]
		B	loc_44AA
@ ---------------------------------------------------------------------------

loc_4758:				@ CODE XREF: EventHandler+D60j
		LDRH.W	R0, [R7,#0x84]
		STRH	R0, [R7,#0x1C]

loc_475E:				@ CODE XREF: EventHandler+AD4j
		LDR	R0, [SP,#0x68+var_38]
		B	loc_44AA
@ ---------------------------------------------------------------------------

loc_4762:				@ CODE XREF: EventHandler+D64j
		LDRH.W	R0, [R7,#0x90]
		STRH	R0, [R7,#0x1C]

loc_4768:				@ CODE XREF: EventHandler+ADAj
		LDR	R0, off_4AFC
		LDR	R1, [SP,#0x68+var_3C]
		ADDS	R0, #0x2C
		STR	R1, [R0]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_4772:				@ CODE XREF: EventHandler+D42j
		LDR	R0, [SP,#0x68+var_50]
		CMP	R0, #0x69
		BCC	loc_47A6
		LDR	R3, [SP,#0x68+var_60]
		MOVS	R0, #0xA
		UDIV.W	R4, R3,	R0
		MLS.W	R3, R0,	R4, R3
		CBZ	R3, loc_479A
		LDR	R3, [SP,#0x68+var_60]
		UDIV.W	R0, R3,	R0
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH	R0, [R7,#0x10]

loc_479A:				@ CODE XREF: EventHandler+DA4j
		LDRH	R0, [R7,#0x10]
		CMP	R0, #0xA
		BLS	loc_47AE
		SUBS	R0, #0xA
		B	loc_47AC
@ ---------------------------------------------------------------------------

loc_47A4:				@ CODE XREF: EventHandler+D4Cj
		B	loc_480E
@ ---------------------------------------------------------------------------

loc_47A6:				@ CODE XREF: EventHandler+D96j
		LDR	R0, [SP,#0x68+var_60]
		CBZ	R0, loc_47AE
		SUBS	R0, R0,	#1

loc_47AC:				@ CODE XREF: EventHandler+DC2j
		STRH	R0, [R7,#0x10]

loc_47AE:				@ CODE XREF: EventHandler+DBEj
					@ EventHandler+DC8j
		LDRH	R0, [R7,#0x10]
		CMP	R0, R2
		BHI	loc_47B6
		STRH	R1, [R7,#0x10]

loc_47B6:				@ CODE XREF: EventHandler+DD2j
		LDRH	R0, [R7,#0x10]
		B	loc_4806
@ ---------------------------------------------------------------------------

loc_47BA:				@ CODE XREF: EventHandler+D46j
		LDR	R0, [SP,#0x68+var_48]
		CMP	R0, #0xA
		BCS	loc_4802
		LDRH.W	R0, [R8,#0xAA]
		MOVS	R3, #0xA
		UDIV.W	R4, R0,	R3
		MLS.W	R4, R3,	R4, R0
		CBZ	R4, loc_47E4
		UDIV.W	R0, R0,	R3
		ADD.W	R3, R0,	R0,LSL#2
		MOVW	R0, #0xFFFF
		AND.W	R0, R0,	R3,LSL#1
		STRH.W	R0, [R8,#0xAA]

loc_47E4:				@ CODE XREF: EventHandler+DEEj
		UXTH	R0, R0
		SUBS	R0, #0xA
		CMP	R0, #0
		BLE	loc_47F2
		STRH.W	R0, [R8,#0xAA]
		B	loc_47F6
@ ---------------------------------------------------------------------------

loc_47F2:				@ CODE XREF: EventHandler+E0Aj
		STRH.W	R1, [R8,#0xAA]

loc_47F6:				@ CODE XREF: EventHandler+E10j
		LDRH.W	R0, [R8,#0xAA]
		CMP	R0, R2
		BHI	loc_4802
		STRH.W	R1, [R8,#0xAA]

loc_4802:				@ CODE XREF: EventHandler+DDEj
					@ EventHandler+E1Cj
		LDRH.W	R0, [R8,#0xAA]

loc_4806:				@ CODE XREF: EventHandler+DD8j
		BL	GetAtoVWVolts
		STRH	R0, [R7,#0x16]
		B	loc_4834
@ ---------------------------------------------------------------------------

loc_480E:				@ CODE XREF: EventHandler+D4Aj
					@ EventHandler+D50j ...
		LDR	R0, [SP,#0x68+var_40]
		CMP	R0, #0
		LDR	R0, [SP,#0x68+var_54]
		BEQ	loc_4824
		SUBS	R0, R0,	#5
		CMP	R0, #0x64
		BGE	loc_4832
		STRB	R5, [R7,#0x1B]
		MOV.W	R0, #0x258
		B	loc_4832
@ ---------------------------------------------------------------------------

loc_4824:				@ CODE XREF: EventHandler+E34j
		SUBS	R0, #0xA
		CMP	R0, #0xC8
		BGE	loc_4832
		MOVS	R0, #1
		STRB	R0, [R7,#0x1B]
		MOVW	R0, #0x13B

loc_4832:				@ CODE XREF: EventHandler+E3Aj
					@ EventHandler+E42j ...
		STRH	R0, [R7,#0x12]

loc_4834:				@ CODE XREF: EventHandler+986j
					@ EventHandler+9AAj ...
		BL	MainView
		LDRH.W	R0, [R9,#0x18]
		CMP	R0, #5
		BCC.W	loc_42C4
		BL	DrawScreen
		B	loc_4578
@ ---------------------------------------------------------------------------

loc_4848:				@ CODE XREF: EventHandler:loc_4484j
		BIC.W	R0, R11, #0x200
		ORR.W	R0, R0,	#0x400
		STR	R0, [R4]
		B	loc_4868
@ ---------------------------------------------------------------------------

loc_4854:				@ CODE XREF: EventHandler:loc_4482j
		BIC.W	R0, R11, #0x1400
		STR	R0, [R4]
		CMP	R2, #5
		BEQ	loc_486E
		CMP	R2, #3
		BEQ	loc_4950
		CMP	R2, #5
		BNE.W	loc_41A0

loc_4868:				@ CODE XREF: EventHandler+E72j
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4950

loc_486C:				@ CODE XREF: EventHandler+F2Ej
					@ EventHandler+F46j ...
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_486E:				@ CODE XREF: EventHandler+E7Cj
		LSLS	R1, R1,	#0x1F
		BEQ	loc_4950
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		STRB.W	R5, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_487E:				@ CODE XREF: EventHandler:loc_4480j
		ORR.W	R0, R11, #0x21000
		STR	R0, [R4]
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4896
		MOVS	R0, #5
		STRB.W	R0, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R0, off_4AFC
		LDR	R1, [SP,#0x68+var_44]
		STRB	R1, [R0,#0x11]
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_4896:				@ CODE XREF: EventHandler+EA6j
		CMP	R2, #5
		BEQ	loc_48A0
		MOVS	R1, #3
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

loc_48A0:				@ CODE XREF: EventHandler+876j
					@ EventHandler+EB8j
		MOVS	R1, #0x1E

loc_48A2:				@ CODE XREF: EventHandler+FA6j
					@ EventHandler+10FCj
		STRB.W	R1, [R10]
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_48A8:				@ CODE XREF: EventHandler:loc_447Ej
		CMP	R2, #5
		BEQ	loc_48B0
		CMP	R2, #4
		BNE	loc_48C0

loc_48B0:				@ CODE XREF: EventHandler+ECAj
		STR.W	R12, [R4]
		STRB.W	R5, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LSLS	R0, R1,	#0x1F
		BEQ	loc_48CA
		LDR	R0, off_4B00
		STRH	R5, [R0]

loc_48C0:				@ CODE XREF: EventHandler+ECEj
					@ EventHandler+EF2j
		LDR	R0, [R4]
		BIC.W	R0, R0,	#0x1000

loc_48C6:				@ CODE XREF: EventHandler+80Ej
					@ EventHandler+1010j
		STR	R0, [R4]

loc_48C8:				@ CODE XREF: EventHandler+FD4j
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_48CA:				@ CODE XREF: EventHandler+EDAj
		LDR	R1, off_4B00
		MOVW	R0, #0x4650
		STRH	R0, [R1]
		B	loc_48C0
@ ---------------------------------------------------------------------------

loc_48D4:				@ CODE XREF: EventHandler:loc_446Aj
		BL	StopFire
		LDR	R0, off_4AFC
		ADDS	R0, #0x1E
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]
		LDR	R0, [R4]
		MOVS	R1, #0x18
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		B	loc_4A62
@ ---------------------------------------------------------------------------

loc_48F0:				@ CODE XREF: EventHandler:loc_446Ej
		BL	StopFire
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		MOVS	R0, #20
		STRB.W	R0, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		B	loc_4984
@ ---------------------------------------------------------------------------

loc_4904:				@ CODE XREF: EventHandler:loc_4472j
		BL	StopFire
		LDR	R0, off_4AFC
		LDRB	R0, [R0,#1]
		CMP	R0, #0
		BNE	loc_486C
		LDR	R0, [R4]
		MOVS	R1, #0x17
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		B	loc_4A62
@ ---------------------------------------------------------------------------

loc_491C:				@ CODE XREF: EventHandler+1088j
					@ EventHandler+111Aj ...
		STRB.W	R0, [R10]

loc_4920:				@ CODE XREF: EventHandler+1016j
					@ EventHandler+1032j
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_4922:				@ CODE XREF: EventHandler:loc_447Aj
		MOVS.W	R0, R11,LSL#23
		BMI	loc_486C
		LDR	R6, off_4B04
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4952
		ORR.W	R0, R11, #0x8000
		STR	R0, [R4]
		BL	ReadBatteryVoltage
		LDR	R0, off_4AFC
		LDRH	R0, [R0,#0x20]
		CMP.W	R0, #0x12C
		BHI	loc_4948
		LDRH	R0, [R4]
		LSLS	R0, R0,	#0x15
		BPL	loc_486C

loc_4948:				@ CODE XREF: EventHandler+F60j
		LDR	R0, [R6,#0x7C]
		BIC.W	R0, R0,	#1
		STR	R0, [R6,#0x7C]

loc_4950:				@ CODE XREF: EventHandler+E80j
					@ EventHandler+E8Aj ...
		B	loc_49C6
@ ---------------------------------------------------------------------------

loc_4952:				@ CODE XREF: EventHandler+F4Cj
		ORR.W	R0, R1,	#1
		STR	R0, [R6,#0x7C]
		STR.W	R12, [R4]
		MOVS.W	R0, R12,LSL#19
		BPL	loc_4970
		MOVS	R0, #5
		LDR	R1, off_4AFC
		STRB.W	R0, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R0, [SP,#0x68+var_44]
		STRB	R0, [R1,#0x11]

loc_496E:				@ CODE XREF: EventHandler:loc_4A1Ej
					@ EventHandler+104Cj ...
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_4970:				@ CODE XREF: EventHandler+F80j
		LDR	R0, off_4B00
		STRB.W	R5, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		STRH	R5, [R0]
		B	loc_41A0
@ ---------------------------------------------------------------------------

loc_497A:				@ CODE XREF: EventHandler:loc_4470j
		MOVS	R1, #0x15
		STR.W	R12, [R4]
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

loc_4984:				@ CODE XREF: EventHandler+802j
					@ EventHandler+F22j
		MOVS	R1, #1
		B	loc_48A2
@ ---------------------------------------------------------------------------

loc_4988:				@ CODE XREF: EventHandler:loc_446Cj
		BL	StopFire
		LDR	R0, [R4]
		MOVS	R1, #0x16
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R1, #1
		STRB.W	R1, [R10]
		B	loc_41F0
@ ---------------------------------------------------------------------------

loc_49A2:				@ CODE XREF: EventHandler:loc_4462j
		BL	StopFire
		LDR	R0, [R4]
		MOVS	R1, #0x33
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		B	loc_4AF4
@ ---------------------------------------------------------------------------

loc_49B2:				@ CODE XREF: EventHandler:loc_447Cj
		LSLS	R0, R1,	#0x1F
		BNE	loc_48C8
		LDR	R0, [SP,#0x1C]
		STR	R0, [R4]
		LDR	R0, off_4B08
		MOV.W	R1, #1000
		STRB	R5, [R0]
		LDR	R0, off_4AFC
		STRH	R1, [R0,#0x16]

loc_49C6:				@ CODE XREF: EventHandler:loc_4950j
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,LR}
		B.W	MainView
@ ---------------------------------------------------------------------------

loc_49D0:				@ CODE XREF: EventHandler:loc_4476j
		LDR	R0, off_4B04
		STR.W	R5, [R0,#0x134]
		B	loc_49DE
@ ---------------------------------------------------------------------------

loc_49D8:				@ CODE XREF: EventHandler:loc_4474j
		LDR	R0, off_4B04
		STR.W	R5, [R0,#0x138]

loc_49DE:				@ CODE XREF: EventHandler+FF6j
		LDR	R1, off_4B0C
		MOVS	R0, #0x50
		STRB	R0, [R1]
		LDR	R0, off_4AFC
		STRH	R5, [R0,#0x16]
		LDR	R0, [SP,#0x68+var_4C]
		STR	R0, [R4]

loc_49EC:				@ CODE XREF: EventHandler:loc_42ACj
		ORR.W	R0, R0,	#0x20000
		B	loc_48C6
@ ---------------------------------------------------------------------------

loc_49F2:				@ CODE XREF: EventHandler:loc_4486j
		LDR	R2, off_4B04
		LSLS	R0, R1,	#0x1F
		BNE	loc_4920
		LDRB.W	R0, [R2,#0x25]
		CBZ	R0, loc_4A0C
		MOVS	R0, #0

loc_4A00:				@ CODE XREF: EventHandler+102Ej
		STRB.W	R0, [R2,#0x25]
		MOVS	R1, #0x28
		STR.W	R12, [R4]
		B	loc_4AD6
@ ---------------------------------------------------------------------------

loc_4A0C:				@ CODE XREF: EventHandler+101Cj
		MOVS	R0, #1
		B	loc_4A00
@ ---------------------------------------------------------------------------

loc_4A10:				@ CODE XREF: EventHandler:loc_445Aj
		LSLS	R0, R1,	#0x1F
		BNE	loc_4920
		MOVS	R1, #0x52
		STR.W	R12, [R4]
		B	loc_4AF4
@ ---------------------------------------------------------------------------

loc_4A1C:				@ CODE XREF: EventHandler:loc_4458j
		LSLS	R0, R1,	#0x1F

loc_4A1E:				@ CODE XREF: EventHandler+1132j
		BNE	loc_496E
		MOVS	R1, #0x53
		STR.W	R12, [R4]
		B	loc_4AF4
@ ---------------------------------------------------------------------------

loc_4A28:				@ CODE XREF: EventHandler:loc_4488j
		LDR	R2, off_4B04
		LSLS	R0, R1,	#0x1F
		BNE	loc_496E
		LSLS	R0, R1,	#0x1E
		BMI	loc_4A38
		ORR.W	R0, R1,	#2
		B	loc_4A3C
@ ---------------------------------------------------------------------------

loc_4A38:				@ CODE XREF: EventHandler+1050j
		BIC.W	R0, R1,	#2

loc_4A3C:				@ CODE XREF: EventHandler+1056j
		STR	R0, [R2,#0x7C]
		LSLS	R0, R0,	#0x1E
		BPL	loc_4A46
		MOVS	R1, #0x1C
		B	loc_4A48
@ ---------------------------------------------------------------------------

loc_4A46:				@ CODE XREF: EventHandler+1060j
		MOVS	R1, #0x1F

loc_4A48:				@ CODE XREF: EventHandler+1064j
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R0, #2
		STRB.W	R0, [R10]
		STR.W	R12, [R4]
		B	loc_4578
@ ---------------------------------------------------------------------------

loc_4A58:				@ CODE XREF: EventHandler:loc_4466j
		LSLS	R0, R1,	#0x1F

loc_4A5A:				@ CODE XREF: EventHandler+1142j
		BNE	loc_496E
		MOVS	R1, #0x1C
		STR.W	R12, [R4]

loc_4A62:				@ CODE XREF: EventHandler+F0Ej
					@ EventHandler+F3Aj
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R0, #2
		B	loc_491C
@ ---------------------------------------------------------------------------

loc_4A6A:				@ CODE XREF: EventHandler:loc_4478j
		LDR	R2, off_4B04
		LSLS	R0, R1,	#0x1F

loc_4A6E:				@ CODE XREF: EventHandler+10C6j
					@ EventHandler+10D4j ...
		BEQ.W	loc_486C
		LSLS	R0, R1,	#0x1D
		BMI	loc_4A7C
		ORR.W	R0, R1,	#4
		B	loc_4A80
@ ---------------------------------------------------------------------------

loc_4A7C:				@ CODE XREF: EventHandler+1094j
		BIC.W	R0, R1,	#4

loc_4A80:				@ CODE XREF: EventHandler+109Aj
		STR	R0, [R2,#0x7C]
		BL	InitDisplay
		LDR	R0, [R4]
		MOVS	R1, #1
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R0, #2
		STRB.W	R0, [R10]
		ADD	SP, SP,	#0x44
		POP.W	{R4-R11,LR}
		B.W	UpdateDataFlash
@ ---------------------------------------------------------------------------

loc_4AA4:				@ CODE XREF: EventHandler:loc_4460j
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4A6E
		MOVS	R1, #0x36
		STR.W	R12, [R4]
		B	loc_4B2A
@ ---------------------------------------------------------------------------

loc_4AB0:				@ CODE XREF: EventHandler:loc_445Ej
		LDR	R2, off_4B04
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4A6E
		ADD.W	R0, LR,	#1
		UXTB	R0, R0
		STRB.W	R0, [R2,#0x87]
		CMP	R0, #3
		BCC	loc_4AC8
		STRB.W	R5, [R2,#0x87]

loc_4AC8:				@ CODE XREF: EventHandler+10E2j
		BL	UpdateDataFlash
		LDR	R0, [R4]
		MOVS	R1, #1
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R4]

loc_4AD6:				@ CODE XREF: EventHandler+102Aj
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R1, #3
		B	loc_48A2
@ ---------------------------------------------------------------------------

loc_4ADE:				@ CODE XREF: EventHandler:loc_445Cj
		LSLS	R0, R1,	#0x1F
		BEQ	loc_4A6E
		LDR	R0, off_4AFC
		LDR	R1, [SP,#0x40]
		ADDS	R0, #0x2C
		STR	R1, [R0]
		SUBS	R0, #0x2C
		MOVS	R1, #0x3B
		STRB	R5, [R0,#0x14]
		STR.W	R12, [R4]

loc_4AF4:				@ CODE XREF: EventHandler+FD0j
					@ EventHandler+103Aj ...
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

loc_4AF8:				@ CODE XREF: EventHandler+92Ej
		MOVS	R0, #0xA
		B	loc_491C
@ ---------------------------------------------------------------------------
off_4AFC:	.long byte_2000003C	@ DATA XREF: EventHandler+D3Ar
					@ EventHandler:loc_4768r ...
off_4B00:	.long SleepTimer	@ DATA XREF: EventHandler+EDCr
					@ EventHandler:loc_48CAr ...
off_4B04:	.long dfData		@ DATA XREF: EventHandler+F48r
					@ EventHandler:loc_49D0r ...
off_4B08:	.long EditItemIndex	@ DATA XREF: EventHandler+FDAr
off_4B0C:	.long UpdatePTTimer	@ DATA XREF: EventHandler:loc_49DEr
@ ---------------------------------------------------------------------------

loc_4B10:				@ CODE XREF: EventHandler:loc_4468j
		LSLS	R0, R1,	#0x1F
		BNE	loc_4A1E
		MOVS	R0, #0x32
		STR.W	R12, [R4]
		STRB.W	R0, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		B	loc_4B2E
@ ---------------------------------------------------------------------------

loc_4B20:				@ CODE XREF: EventHandler:loc_4464j
		LSLS	R0, R1,	#0x1F
		BNE	loc_4A5A
		MOVS	R1, #0x25
		STR.W	R12, [R4]

loc_4B2A:				@ CODE XREF: EventHandler+10CEj
		STRB.W	R1, [R9]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

loc_4B2E:				@ CODE XREF: EventHandler+113Ej
		MOVS	R0, #5
		B	loc_491C
@ End of function EventHandler

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


GetUserInput:				@ CODE XREF: GotoMain+9070p
					@ GotoMain:loc_9294p
		PUSH.W	{R4-R12,LR}
		LDR	R5, off_4ECC
		LDR.W	R8, dword_4ED0
		MOVS	R0, #0xE
		STRB	R0, [R5,#5]
		LDR.W	R6, [R8]
		LDR	R1, off_4ED4	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR.W	R11, off_4ED8
		MOV	R0, R5
		LDR.W	R12, dword_4ED0
		ADD.W	R9, R5,	#0x28
		LDRB	R3, [R0,#6]
		SUB.W	R12, R12, #0x38
		LDRB	R1, [R1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR.W	R2, [R9]
		LDR.W	R7, [R11,#0x7C]
		ADD.W	R0, R12, #4
		MOV.W	R10, #1
		MOVS	R4, #0
		CBNZ	R6, loc_4B82
		LDR.W	R6, [R12]
		CBZ	R6, loc_4B82
		LDR	R6, [R0]
		CBZ	R6, loc_4B82
		STRB.W	R10, [R5,#5]
		B	loc_4C60
@ ---------------------------------------------------------------------------

loc_4B82:				@ CODE XREF: GetUserInput+3Cj
					@ GetUserInput+42j ...
		LSLS	R6, R2,	#0x17
		BMI	loc_4C42
		LDRB	R6, [R5,#4]
		CBNZ	R6, loc_4B92
		LDRB	R6, [R5,#8]
		CBZ	R6, loc_4B92
		STRB	R6, [R5,#7]
		STRB	R4, [R5,#8]

loc_4B92:				@ CODE XREF: GetUserInput+54j
					@ GetUserInput+58j
		LSLS	R6, R7,	#0x1F
		BEQ	loc_4B9A
		CMP	R1, #0x3B
		BNE	loc_4BB0

loc_4B9A:				@ CODE XREF: GetUserInput+60j
		LDR.W	R6, [R12]
		CMP	R6, #1
		BEQ	loc_4BA6
		MOVS	R6, #2
		STRB	R6, [R5,#5]

loc_4BA6:				@ CODE XREF: GetUserInput+6Cj
		LDR	R6, [R0]
		CMP	R6, #1
		BEQ	loc_4BB0
		MOVS	R6, #3
		STRB	R6, [R5,#5]

loc_4BB0:				@ CODE XREF: GetUserInput+64j
					@ GetUserInput+76j
		LDR.W	R6, [R12]
		CMP	R6, #1
		BEQ	loc_4BC2
		LDR	R6, [R0]
		CMP	R6, #1
		BEQ	loc_4BC2
		MOVS	R6, #4
		STRB	R6, [R5,#5]

loc_4BC2:				@ CODE XREF: GetUserInput+82j
					@ GetUserInput+88j
		LDR.W	R6, [R8]
		CBNZ	R6, loc_4BD4
		LDR.W	R6, [R12]
		CMP	R6, #1
		BEQ	loc_4BD4
		MOVS	R6, #5
		STRB	R6, [R5,#5]

loc_4BD4:				@ CODE XREF: GetUserInput+92j
					@ GetUserInput+9Aj
		LDR.W	R6, [R8]
		CBNZ	R6, loc_4BE4
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_4BE4
		MOVS	R0, #6
		STRB	R0, [R5,#5]

loc_4BE4:				@ CODE XREF: GetUserInput+A4j
					@ GetUserInput+AAj
		LDR	R0, dword_4EDC
		LDR	R6, [R0,#0x14]
		LSLS	R6, R6,	#0x1F
		BEQ	loc_4BF4
		LSLS	R6, R2,	#0x15
		BMI	loc_4BF4
		MOVS	R0, #0xA
		B	loc_4C24
@ ---------------------------------------------------------------------------

loc_4BF4:				@ CODE XREF: GetUserInput+B6j
					@ GetUserInput+BAj
		LDR	R0, [R0,#0x14]
		LSLS	R0, R0,	#0x1F
		MOV.W	R0, R2,LSL#21
		BEQ	loc_4C0C
		CMP	R0, #0
		BGE	loc_4C3C

loc_4C02:				@ CODE XREF: GetUserInput+E0j
		LDR	R0, dword_4ED0
		SUBS	R0, #0x24
		LDR	R6, [R0]
		CBZ	R6, loc_4C16
		B	loc_4C2A
@ ---------------------------------------------------------------------------

loc_4C0C:				@ CODE XREF: GetUserInput+C8j
		CMP	R0, #0
		BGE	loc_4C3C
		MOVS	R0, #0xB
		STRB	R0, [R5,#5]
		B	loc_4C02
@ ---------------------------------------------------------------------------

loc_4C16:				@ CODE XREF: GetUserInput+D4j
		LSLS	R6, R2,	#0x13
		BMI	loc_4C2A
		LDRB	R0, [R5,#0xC]
		CBZ	R0, loc_4C22
		CMP	R0, #0x32
		BCC	loc_4C3C

loc_4C22:				@ CODE XREF: GetUserInput+E8j
		MOVS	R0, #0xC

loc_4C24:				@ CODE XREF: GetUserInput+BEj
		STRB	R0, [R5,#5]
		STRB	R4, [R5,#0xC]
		B	loc_4C60
@ ---------------------------------------------------------------------------

loc_4C2A:				@ CODE XREF: GetUserInput+D6j
					@ GetUserInput+E4j
		LDR	R0, [R0]
		CBZ	R0, loc_4C3C
		LSLS	R0, R2,	#0x13
		BPL	loc_4C3C
		MOVS	R0, #0xD
		STRB	R0, [R5,#5]
		STRB.W	R10, [R5,#0xC]
		B	loc_4C60
@ ---------------------------------------------------------------------------

loc_4C3C:				@ CODE XREF: GetUserInput+CCj
					@ GetUserInput+DAj ...
		LDRB	R0, [R5,#5]
		CMP	R0, #0xE
		BCC	loc_4C60

loc_4C42:				@ CODE XREF: GetUserInput+50j
		CMP	R3, #1
		BNE	loc_4C4A
		BL	StopFire

loc_4C4A:				@ CODE XREF: GetUserInput+110j
		LDR.W	R1, [R9]
		MOVS	R0, #0xFF
		ORR.W	R1, R1,	#0x4000
		STR.W	R1, [R9]
		STRB	R0, [R5,#6]
		STRH	R4, [R5,#0x1E]

locret_4C5C:				@ CODE XREF: GetUserInput+144j
					@ GetUserInput:loc_4CBAj ...
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_4C60:				@ CODE XREF: GetUserInput+4Cj
					@ GetUserInput+F4j ...
		LDR	R6, off_4ECC
		LDRB	R0, [R5,#5]
		ADDS	R6, #0x28
		CMP	R0, R3
		LDR	R6, [R6]
		BIC.W	R8, R6,	#0x4000
		BEQ	loc_4C7A
		STRB	R0, [R5,#6]
		STRH	R4, [R5,#0x1E]
		STR.W	R8, [R9]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4C7A:				@ CODE XREF: GetUserInput+13Aj
		LDRH	R3, [R5,#0x1E]
		ADDS	R3, R3,	#1
		UXTH	R6, R3
		LDR	R3, off_4ECC
		STRH	R6, [R5,#0x1E]
		ADDS	R3, #0x1E
		LDRB.W	R12, [R3,#1]
		CMP.W	R12, #0
		BNE	loc_4C96
		LDRB	R3, [R3]
		CMP	R3, #0xD2
		BCC	loc_4CE6

loc_4C96:				@ CODE XREF: GetUserInput+15Aj
		CMP	R0, #1
		BEQ	loc_4CA8
		MOV.W	R1, #0x1F4
		CMP	R0, #6
		BEQ	loc_4CC6
		CMP	R0, #5
		BEQ	loc_4CD2
		B	loc_4CE0
@ ---------------------------------------------------------------------------

loc_4CA8:				@ CODE XREF: GetUserInput+164j
		MOVW	R0, #0x44C
		CMP	R6, R0
		BLS	loc_4CBC
		STRH	R0, [R5,#0x1E]
		ORR.W	R1, R2,	#0x4000
		STR.W	R1, [R9]

loc_4CBA:				@ CODE XREF: GetUserInput+23Cj
					@ GetUserInput+248j ...
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4CBC:				@ CODE XREF: GetUserInput+17Aj
		LDRH	R0, [R5,#0x1C]
		CMP	R0, #0x63
		BCC	locret_4C5C
		MOVS	R0, #0x18
		B	loc_4CDC
@ ---------------------------------------------------------------------------

loc_4CC6:				@ CODE XREF: GetUserInput+16Cj
		LSLS	R0, R7,	#0x1F
		BEQ	loc_4CE0
		CMP	R6, R1
		BNE	locret_4C5C
		MOVS	R0, #0x22
		B	loc_4CDC
@ ---------------------------------------------------------------------------

loc_4CD2:				@ CODE XREF: GetUserInput+170j
		LSLS	R0, R7,	#0x1F
		BEQ	loc_4CE0
		CMP	R6, R1
		BNE	locret_4C5C
		MOVS	R0, #0x27

loc_4CDC:				@ CODE XREF: GetUserInput+190j
					@ GetUserInput+19Cj
		STRB	R0, [R5,#7]

loc_4CDE:				@ CODE XREF: GetUserInput+27Cj
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4CE0:				@ CODE XREF: GetUserInput+172j
					@ GetUserInput+194j ...
		MOVS	R0, #6
		STRH	R0, [R5,#0x1E]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4CE6:				@ CODE XREF: GetUserInput+160j
		LDR	R2, off_4ECC
		LDR	R3, off_4ED8
		MOV	LR, R5
		LDRH.W	R12, [R2,#0x16]
		LDR	R2, off_4EE0
		LDRB.W	R5, [R3,#0x87]
		LDRB	R3, [R3,#0x18]	@ Amps,	Puffs or Time display
		LDRB	R2, [R2]
		CMP	R6, #6
		BEQ	loc_4D1A
		MOV	R7, LR
		CMP	R6, #0x14
		BEQ	loc_4E02
		CMP	R6, #0xC8
		BNE	locret_4C5C
		CMP.W	R12, #0
		BEQ	loc_4D12
		CMP	R0, #1
		BEQ	loc_4E0C

loc_4D12:				@ CODE XREF: GetUserInput+1D8j
		LDR	R5, off_4ED4	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R1, #0x3B
		BEQ	loc_4DF8
		B	loc_4E66
@ ---------------------------------------------------------------------------

loc_4D1A:				@ CODE XREF: GetUserInput+1C8j
		MOV	R6, LR
		STR.W	R8, [R9]
		CMP	R0, #4
		BEQ	locret_4C5C
		CMP	R0, #5
		BEQ	locret_4C5C
		CMP	R0, #6
		BEQ	locret_4C5C
		CMP	R0, #7
		BEQ	locret_4C5C
		CMP	R0, #8
		BEQ	locret_4C5C
		CMP	R0, #9
		BEQ	locret_4C5C
		STRB	R0, [R6,#7]
		CMP	R0, #1
		BEQ	loc_4D54
		MOVS	R2, #0x1E
		CMP	R0, #2
		BEQ	loc_4DC0
		CMP	R0, #3
		BNE	locret_4C5C
		LSLS	R0, R7,	#0x1E
		BPL	loc_4DFA
		CMP.W	R12, #0
		BEQ	loc_4DDE
		B	loc_4DFA
@ ---------------------------------------------------------------------------

loc_4D54:				@ CODE XREF: GetUserInput+208j
		MOVS	R0, #0x28
		STRB	R0, [R6,#4]
		LDRB	R0, [R6,#3]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R6,#3]
		STRB	R4, [R6,#8]
		STRB	R4, [R6,#7]
		CMP	R0, #5
		BEQ	loc_4DB4
		BGT	loc_4D76
		CMP	R0, #1
		BEQ	loc_4D82
		CMP	R0, #3
		BNE	loc_4CBA
		MOVS	R0, #0x10
		B	loc_4DBA
@ ---------------------------------------------------------------------------

loc_4D76:				@ CODE XREF: GetUserInput+234j
		CMP	R0, #0xA
		BEQ	loc_4DB8
		CMP	R0, #0x14
		BNE	loc_4CBA
		MOVS	R0, #0x1D
		B	loc_4DFC
@ ---------------------------------------------------------------------------

loc_4D82:				@ CODE XREF: GetUserInput+238j
		MOVS	R0, #0xF
		STRB	R0, [R6,#8]
		CMP.W	R12, #0
		BEQ	loc_4D96
		CBZ	R5, loc_4D9C
		CMP	R5, #1
		BEQ	loc_4DAA
		CMP	R5, #2
		BEQ	loc_4DAA

loc_4D96:				@ CODE XREF: GetUserInput+256j
					@ GetUserInput+26Aj ...
		STRB.W	R10, [LR,#7]

loc_4D9A:				@ CODE XREF: GetUserInput+2D0j
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4D9C:				@ CODE XREF: GetUserInput+258j
		CMP	R2, #6
		BNE	loc_4D96
		CMP	R3, #2
		BEQ	loc_4CBA
		CMP	R3, #3
		BEQ	loc_4CBA
		B	loc_4D96
@ ---------------------------------------------------------------------------

loc_4DAA:				@ CODE XREF: GetUserInput+25Cj
					@ GetUserInput+260j
		CMP	R2, #4
		BEQ	loc_4CBA
		CMP	R2, #5
		BEQ	loc_4CDE
		B	loc_4D96
@ ---------------------------------------------------------------------------

loc_4DB4:				@ CODE XREF: GetUserInput+232j
		MOVS	R0, #0x11
		B	loc_4DFC
@ ---------------------------------------------------------------------------

loc_4DB8:				@ CODE XREF: GetUserInput+244j
		MOVS	R0, #0x1F

loc_4DBA:				@ CODE XREF: GetUserInput+240j
		STRB.W	R0, [LR,#8]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4DC0:				@ CODE XREF: GetUserInput+20Ej
		LSLS	R0, R7,	#0x1E
		BPL	loc_4DDA
		CMP.W	R12, #0
		BNE	loc_4DDA
		CMP	R1, #0x33
		BEQ	loc_4DDA
		CMP	R1, #0x3B
		BEQ	loc_4DDA
		CMP	R1, #0x52
		BEQ	loc_4DDA
		CMP	R1, #0x53
		BNE	loc_4DEE

loc_4DDA:				@ CODE XREF: GetUserInput+28Ej
					@ GetUserInput+294j ...
		MOVS	R0, #2
		B	loc_4DFC
@ ---------------------------------------------------------------------------

loc_4DDE:				@ CODE XREF: GetUserInput+21Cj
		CMP	R1, #0x33
		BEQ	loc_4DFA
		CMP	R1, #0x3B
		BEQ	loc_4DFA
		CMP	R1, #0x52
		BEQ	loc_4DFA
		CMP	R1, #0x53
		BEQ	loc_4DFA

loc_4DEE:				@ CODE XREF: GetUserInput+2A4j
		STRB.W	R2, [LR,#7]

loc_4DF2:				@ CODE XREF: GetUserInput+384j
					@ GetUserInput+38Cj
		B	locret_4C5C
@ ---------------------------------------------------------------------------
		B	loc_4E02
@ ---------------------------------------------------------------------------
		B	loc_4E0C
@ ---------------------------------------------------------------------------

loc_4DF8:				@ CODE XREF: GetUserInput+1E2j
		B	loc_4E50
@ ---------------------------------------------------------------------------

loc_4DFA:				@ CODE XREF: GetUserInput+216j
					@ GetUserInput+21Ej ...
		MOVS	R0, #3

loc_4DFC:				@ CODE XREF: GetUserInput+24Cj
					@ GetUserInput+282j ...
		STRB.W	R0, [LR,#7]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4E02:				@ CODE XREF: GetUserInput+1CEj
					@ GetUserInput+2C0j
		CMP	R0, #1
		BNE	loc_4D9A
		STRB.W	R4, [LR,#8]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4E0C:				@ CODE XREF: GetUserInput+1DCj
					@ GetUserInput+2C2j
		MOV.W	R0, #0x3E8
		STRH	R0, [R7,#0x16]
		MOVS	R0, #0x16
		MOVS	R1, #0x17
		CBZ	R5, loc_4E22
		CMP	R5, #1
		BEQ	loc_4E38
		CMP	R5, #2
		BEQ	loc_4E42
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E22:				@ CODE XREF: GetUserInput+2E2j
		CMP	R2, #6
		BNE	loc_4E6C
		CMP	R3, #2
		BEQ	loc_4E30
		CMP	R3, #3
		BEQ	loc_4E34
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E30:				@ CODE XREF: GetUserInput+2F4j
					@ GetUserInput+306j ...
		STRB	R0, [R7,#7]
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E34:				@ CODE XREF: GetUserInput+2F8j
					@ GetUserInput+30Aj ...
		STRB	R1, [R7,#7]
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E38:				@ CODE XREF: GetUserInput+2E6j
		CMP	R2, #4
		BEQ	loc_4E30
		CMP	R2, #5
		BEQ	loc_4E34
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E42:				@ CODE XREF: GetUserInput+2EAj
		CMP	R2, #4
		BNE	loc_4E6C
		CMP	R3, #1
		BEQ	loc_4E30
		CMP	R3, #2
		BEQ	loc_4E34
		B	loc_4E6C
@ ---------------------------------------------------------------------------

loc_4E50:				@ CODE XREF: GetUserInput:loc_4DF8j
		CMP	R0, #1
		BNE	loc_4E66
		BL	UpdateDataFlash
		LDR.W	R1, [R9]
		ORR.W	R1, R1,	#0x20000
		STR.W	R1, [R9]
		STRB	R4, [R5]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

loc_4E66:				@ CODE XREF: GetUserInput+1E4j
					@ GetUserInput+31Ej
		LDRB	R0, [R7,#5]
		CMP	R0, #4
		BEQ	loc_4E7E

loc_4E6C:				@ CODE XREF: GetUserInput+2ECj
					@ GetUserInput+2F0j ...
		LDR	R1, off_4EE4
		MOV	R4, R11
		STRB.W	R10, [R1]
		LDRB.W	R0, [R11,#0x7C]
		LSLS	R0, R0,	#0x1F
		BEQ	loc_4E8E
		B	loc_4EB4
@ ---------------------------------------------------------------------------

loc_4E7E:				@ CODE XREF: GetUserInput+336j
		LDRB.W	R0, [R11,#0x7C]
		LSLS	R0, R0,	#0x1F
		BEQ	loc_4E8A
		MOVS	R0, #0x12
		B	loc_4E30
@ ---------------------------------------------------------------------------

loc_4E8A:				@ CODE XREF: GetUserInput+350j
		MOVS	R0, #4
		B	loc_4E30
@ ---------------------------------------------------------------------------

loc_4E8E:				@ CODE XREF: GetUserInput+346j
		LDRB	R0, [R7,#5]
		CMP	R0, #5
		BNE	loc_4EB4
		LDR	R1, off_4ECC
		ADDS	R1, #0x2C
		LDR	R0, [R1]
		LSLS	R2, R0,	#0x16
		BPL	loc_4EC8
		BIC.W	R0, R0,	#0x200
		STR	R0, [R1]
		MOVS	R0, #0xFF
		STRB	R0, [R7,#7]
		LDR	R0, off_4EE8
		LDRB	R0, [R0]
		BL	DeleteTimeout	@ R0 Timeout #
		BL	MainView

loc_4EB4:				@ CODE XREF: GetUserInput+348j
					@ GetUserInput+35Ej
		LDRB	R0, [R7,#5]
		CMP	R0, #6
		BNE	loc_4DF2
		LDRB.W	R0, [R4,#0x7C]
		LSLS	R0, R0,	#0x1F
		BNE	loc_4DF2
		MOVS	R0, #6

loc_4EC4:				@ CODE XREF: GetUserInput+396j
		STRB	R0, [R7,#7]
		B	locret_4C5C
@ ---------------------------------------------------------------------------

loc_4EC8:				@ CODE XREF: GetUserInput+368j
		MOVS	R0, #0x28
		B	loc_4EC4
@ End of function GetUserInput

@ ---------------------------------------------------------------------------
off_4ECC:	.long byte_2000003C	@ DATA XREF: GetUserInput+4r
					@ GetUserInput:loc_4C60r ...
dword_4ED0:	.long 0x40004900	@ DATA XREF: GetUserInput+6r
					@ GetUserInput+1Ar ...
off_4ED4:	.long Screen		@ DATA XREF: GetUserInput+12r
					@ GetUserInput:loc_4D12r
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
off_4ED8:	.long dfData		@ DATA XREF: GetUserInput+14r
					@ GetUserInput+1B4r
dword_4EDC:	.long 0x400C0000	@ DATA XREF: GetUserInput:loc_4BE4r
off_4EE0:	.long EditItemIndex	@ DATA XREF: GetUserInput+1BCr
off_4EE4:	.long LOGOMenuIndex	@ DATA XREF: GetUserInput:loc_4E6Cr
off_4EE8:	.long CurrentTimeout	@ DATA XREF: GetUserInput+374r

@ =============== S U B	R O U T	I N E =======================================

@ R0 Timeout #

DeleteTimeout:				@ CODE XREF: sub_854+6Cp sub_9B0+56p ...
		LDR	R2, off_4F04
		MOVS	R1, #1
		LSLS	R1, R0
		LDRB	R3, [R2,#2]
		BICS	R3, R1
		STRB	R3, [R2,#2]
		LDR	R2, off_4F08
		MOVS	R1, #0
		STRB.W	R1, [R2,R0,LSL#3]
		BX	LR
@ End of function DeleteTimeout

@ ---------------------------------------------------------------------------
		.balign 4,0
off_4F04:	.long TimeoutMask	@ DATA XREF: DeleteTimeoutr
off_4F08:	.long TimeoutsTable	@ DATA XREF: DeleteTimeout+Cr

@ =============== S U B	R O U T	I N E =======================================


sub_4F0C:				@ CODE XREF: SleepIfIdle+24p
		PUSH	{R4-R6,LR}
		BL	ScreenOff
		LDR	R4, off_4F9C
		LDR	R1, off_4FA0
		LDR	R0, [R4]
		BIC.W	R0, R0,	#0x100
		STR	R0, [R4]
		MOVS	R0, #0x32
		STRB	R0, [R1]
		MOVS	R0, #1
		BL	DevicesOnOff
		MOVS	R0, #250
		BL	TickWait_us
		MOVS	R0, #250
		BL	TickWait_us
		MOVS	R0, #250
		BL	TickWait_us
		LDR	R0, off_4FA4
		MOV.W	R5, #0x500	@ 1.6s for watchdog
		LDRB.W	R0, [R0,#0x7C]
		LSLS	R0, R0,	#0x1F
		BNE	loc_4F5A
		LDR	R0, dword_4FA8
		LDR	R0, [R0]
		CBNZ	R0, loc_4F5A
		LDR	R0, off_4FAC
		LDRH	R1, [R0]
		SUB.W	R2, R1,	#0x400
		SUBS	R2, #0x4C
		BNE	loc_4F6E

loc_4F5A:				@ CODE XREF: sub_4F0C+3Aj sub_4F0C+40j
		BL	UnlockRegisters4
		MOVS	R3, #0
		MOV	R2, R3
		MOVS	R1, #2
		MOV	R0, R5
		BL	SetupWDT	@ Disable WD reset
		BL	FlushAndSleep

loc_4F6E:				@ CODE XREF: sub_4F0C+4Cj
		MOVS	R3, #0
		MOVS	R2, #1
		MOVS	R1, #2
		MOV	R0, R5
		BL	SetupWDT	@ Re-enable WD reset
		MOV.W	R0, #0x40000000
		MOVS	R1, #0
		STR.W	R1, [R0,#0x100]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x800
		STR	R0, [R4]
		MOV	R0, R1
		BL	DevicesOnOff
		POP.W	{R4-R6,LR}
		B.W	InitDisplay
@ End of function sub_4F0C

@ ---------------------------------------------------------------------------
		.balign 4,0
off_4F9C:	.long dword_20000064	@ DATA XREF: sub_4F0C+6r
off_4FA0:	.long byte_20000051	@ DATA XREF: sub_4F0C+8r
off_4FA4:	.long dfData		@ DATA XREF: sub_4F0C+2Er
dword_4FA8:	.long 0x40004900	@ DATA XREF: sub_4F0C+3Cr
off_4FAC:	.long KeyPressTime	@ DATA XREF: sub_4F0C+42r

@ =============== S U B	R O U T	I N E =======================================


ModeChange:				@ CODE XREF: EventHandler+9DEp
					@ NextMode:loc_5B28j
		PUSH	{R4,LR}
		LDR	R3, off_503C
		LDR	R2, off_5040
		LDR	R0, off_5044
		LDRB	R1, [R3,#0xE]
		LDR	R2, [R2]
		LDRH	R0, [R0]
		CMP	R1, #1
		BEQ	loc_4FCE
		CBZ	R1, loc_4FE6
		CMP	R1, #2
		BEQ	loc_5006
		CMP	R1, #3
		BEQ	loc_501C
		B	loc_4FFE
@ ---------------------------------------------------------------------------

loc_4FCE:				@ CODE XREF: ModeChange+10j
		MOVS	R1, #2
		STRB	R1, [R3,#0x1A]
		LDR	R1, off_503C
		LDRB.W	R4, [R3,#0x22]
		LDRH	R1, [R1,#0x1E]
		CBZ	R4, loc_4FDE
		CBNZ	R1, loc_502E

loc_4FDE:				@ CODE XREF: ModeChange+2Aj
		LSLS	R2, R2,	#4
		B	loc_4FF8
@ ---------------------------------------------------------------------------

loc_4FE2:				@ CODE XREF: ModeChange+4Aj
		CBNZ	R1, loc_502E
		B	loc_4FFC
@ ---------------------------------------------------------------------------

loc_4FE6:				@ CODE XREF: ModeChange+12j
		MOVS	R1, #1
		STRB	R1, [R3,#0x1A]
		LDR	R1, off_503C
		LDRB.W	R4, [R3,#0x23]
		LDRH	R1, [R1,#0x20]
		CBZ	R4, loc_4FF6
		CBNZ	R1, loc_502E

loc_4FF6:				@ CODE XREF: ModeChange+42j
		LSLS	R2, R2,	#3

loc_4FF8:				@ CODE XREF: ModeChange+30j
					@ ModeChange+66j ...
		CMP	R2, #0
		BGE	loc_4FE2

loc_4FFC:				@ CODE XREF: ModeChange+34j
		STRH	R0, [R3,#0x1C]

loc_4FFE:				@ CODE XREF: ModeChange+1Cj
					@ ModeChange+80j
		LDR	R1, off_5048
		MOVS	R0, #0x32
		STRB	R0, [R1]
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_5006:				@ CODE XREF: ModeChange+16j
		MOVS	R1, #3
		STRB	R1, [R3,#0x1A]
		LDR	R1, off_503C
		LDRB.W	R4, [R3,#0x86]
		LDRH.W	R1, [R1,#0x84]
		CMP	R4, #0
		BEQ	loc_4FF8
		CBNZ	R1, loc_502E
		B	loc_4FF8
@ ---------------------------------------------------------------------------

loc_501C:				@ CODE XREF: ModeChange+1Aj
		MOVS	R1, #4
		STRB	R1, [R3,#0x1A]
		LDR	R1, off_503C
		LDRB.W	R2, [R3,#0x92]
		LDRH.W	R1, [R1,#0x90]
		CBZ	R2, loc_5032
		CBZ	R1, loc_5032

loc_502E:				@ CODE XREF: ModeChange+2Cj
					@ ModeChange:loc_4FE2j	...
		STRH	R1, [R3,#0x1C]
		B	loc_4FFE
@ ---------------------------------------------------------------------------

loc_5032:				@ CODE XREF: ModeChange+7Aj
					@ ModeChange+7Cj
		LDR	R2, off_5040
		ADDS	R2, R2,	#4
		LDRB	R2, [R2]
		LSLS	R2, R2,	#0x1E
		B	loc_4FF8
@ End of function ModeChange

@ ---------------------------------------------------------------------------
off_503C:	.long dfData		@ DATA XREF: ModeChange+2r
					@ ModeChange+22r ...
off_5040:	.long dword_20000064	@ DATA XREF: ModeChange+4r
					@ ModeChange:loc_5032r
off_5044:	.long AtoRez		@ DATA XREF: ModeChange+6r
off_5048:	.long UpdateDFTimer	@ DATA XREF: ModeChange:loc_4FFEr

@ =============== S U B	R O U T	I N E =======================================


sub_504C:				@ CODE XREF: sub_9B0+A4p sub_A94+106p	...

var_10		= -0x10

		PUSH	{R3-R5,LR}
		LDR	R4, off_5098
		MOV	R1, R0
		MOV	R0, R4
		LDRB	R2, [R4,#1]
		LDR	R3, off_509C
		LDRB	R0, [R0]
		CMP	R2, #1
		BEQ	loc_5094
		CMP	R2, #2
		BEQ	loc_506C
		CMP	R2, #3
		BEQ	loc_508C
		CMP	R2, #4
		BNE	loc_507A
		B	loc_5094
@ ---------------------------------------------------------------------------

loc_506C:				@ CODE XREF: sub_504C+14j
		LDR	R2, off_509C
		ADDS	R2, #0x20
		B	loc_5090
@ ---------------------------------------------------------------------------

loc_5072:				@ CODE XREF: sub_504C+46j sub_504C+4Aj
		MOVS	R3, #0x10
		MOV	R2, R3
		BL	sub_805E

loc_507A:				@ CODE XREF: sub_504C+1Cj
		LDRB	R0, [R4,#1]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R4,#1]
		CMP	R0, #5
		BNE	locret_508A
		MOVS	R0, #1
		STRB	R0, [R4,#1]

locret_508A:				@ CODE XREF: sub_504C+38j
		POP	{R3-R5,PC}
@ ---------------------------------------------------------------------------

loc_508C:				@ CODE XREF: sub_504C+18j
		LDR	R2, off_509C
		ADDS	R2, #0x40

loc_5090:				@ CODE XREF: sub_504C+24j
		STR	R2, [SP,#0x10+var_10]
		B	loc_5072
@ ---------------------------------------------------------------------------

loc_5094:				@ CODE XREF: sub_504C+10j sub_504C+1Ej
		STR	R3, [SP,#0x10+var_10]
		B	loc_5072
@ End of function sub_504C

@ ---------------------------------------------------------------------------
off_5098:	.long byte_20000148	@ DATA XREF: sub_504C+2r
off_509C:	.long byte_DB24		@ DATA XREF: sub_504C+Ar
					@ sub_504C:loc_506Cr ...

@ =============== S U B	R O U T	I N E =======================================


sub_50A0:				@ CODE XREF: sub_854+9Ep sub_854+ACp ...

var_28		= -0x28

		PUSH.W	{R3-R11,LR}
		MOV	R5, R0
		MOV	R9, R1
		MOVS	R4, #0
		LDR	R6, off_5144
		AND.W	R10, R0, #0xFF
		UBFX.W	R7, R0,	#0x10, #8
		B	loc_50CA
@ ---------------------------------------------------------------------------

loc_50B6:				@ CODE XREF: sub_50A0+2Cj
		LSLS	R0, R4,	#0x1B
		LSRS	R1, R0,	#0x18
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		STR	R6, [SP]
		BL	sub_805E
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_50CA:				@ CODE XREF: sub_50A0+14j
		CMP	R7, R4
		BHI	loc_50B6
		MOVS	R4, #0
		MOV.W	R8, #0x38
		AND.W	R7, R9,	#0xFF
		B	loc_50F0
@ ---------------------------------------------------------------------------

loc_50DA:				@ CODE XREF: sub_50A0+54j
		NEGS	R1, R4
		ADD.W	R0, R8,	R1,LSL#3
		UXTB	R1, R0
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		BL	sub_805E
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_50F0:				@ CODE XREF: sub_50A0+38j
		CMP	R7, R4
		STR	R6, [SP]
		BHI	loc_50DA
		UBFX.W	R4, R5,	#8, #8
		SUB.W	R0, R4,	#8
		UXTB	R1, R0
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		BL	sub_805E
		LDR	R0, off_5144
		MOVS	R3, #8
		ADDS	R0, #0x18
		STR	R0, [SP]
		MOVS	R2, #0x18
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_805E
		LDR	R0, off_5144
		LSRS	R4, R5,	#0x18
		ADDS	R0, #0x30
		STR	R0, [SP]
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_805E
		ADDS	R4, #8
		UXTB	R1, R4
		MOVS	R3, #8
		MOVS	R2, #0x18
		MOV	R0, R10
		STR	R6, [SP]
		BL	sub_805E
		POP.W	{R3-R11,PC}
@ End of function sub_50A0

@ ---------------------------------------------------------------------------
off_5144:	.long byte_DADC		@ DATA XREF: sub_50A0+Ar sub_50A0+6Ar	...

@ =============== S U B	R O U T	I N E =======================================


NVICEnableInt:				@ CODE XREF: ADC_Read+3Ep
					@ InitGPIO+106p ...
		AND.W	R2, R0,	#0x1F
		MOVS	R1, #1
		LSLS	R1, R2
		LSRS	R0, R0,	#5
		LSLS	R0, R0,	#2
		ADD.W	R0, R0,	#0xE000E000
		STR.W	R1, [R0,#0x100]
		BX	LR
@ End of function NVICEnableInt

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


DisplayWriteByte:			@ CODE XREF: sub_17B0+Ep sub_17B0+14p	...
		LDR	R1, off_517C
		MOV.W	R2, #1
		STRB	R0, [R1]
		LDR	R0, off_5180
		LDRB	R0, [R0]
		CMP	R0, #0
		MOV.W	R0, #0
		BEQ	loc_5178
		B.W	SSD1327_WriteBytes
@ ---------------------------------------------------------------------------

loc_5178:				@ CODE XREF: DisplayWriteByte+12j
		B.W	SSD1306_WriteBytes
@ End of function DisplayWriteByte

@ ---------------------------------------------------------------------------
off_517C:	.long DisplayByteData	@ DATA XREF: DisplayWriteByter
off_5180:	.long DisplayModel	@ DATA XREF: DisplayWriteByte+8r

@ =============== S U B	R O U T	I N E =======================================


sub_5184:				@ CODE XREF: SSD1327_Refresh+18j
					@ SSD1306_Refresh+32p
		MOV	R2, R1
		LDR	R1, off_51A4
		LDRB	R1, [R1]
		CBZ	R1, loc_5198
		CMP	R1, #1
		BNE	locret_51A0
		MOV	R1, R0
		MOVS	R0, #0x40
		B.W	SSD1327_WriteBytes
@ ---------------------------------------------------------------------------

loc_5198:				@ CODE XREF: sub_5184+6j
		MOV	R1, R0
		MOVS	R0, #0x40
		B.W	SSD1306_WriteBytes
@ ---------------------------------------------------------------------------

locret_51A0:				@ CODE XREF: sub_5184+Aj
		BX	LR
@ End of function sub_5184

@ ---------------------------------------------------------------------------
		.balign 4,0
off_51A4:	.long DisplayModel	@ DATA XREF: sub_5184+2r

@ =============== S U B	R O U T	I N E =======================================


sub_51A8:				@ CODE XREF: DisplayStringCentered+6p
		PUSH	{LR}
		MOV	R2, R0
		MOVS	R3, #0

loc_51AE:				@ CODE XREF: sub_51A8+16j
		LDRH	R0, [R2]
		BL	sub_51CC
		ADD	R0, R3
		UXTB	R3, R0
		LDRH.W	R0, [R2,#2]!
		CMP	R0, #0
		BNE	loc_51AE
		RSB.W	R0, R3,	#0x40
		UBFX.W	R0, R0,	#1, #8
		POP	{PC}
@ End of function sub_51A8

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


sub_51CC:				@ CODE XREF: sub_51A8+8p
		LDR	R1, off_51EC
		LDRB	R1, [R1]
		CBZ	R1, loc_51D8
		CMP	R1, #1
		BEQ	loc_51DC
		B	loc_51E6
@ ---------------------------------------------------------------------------

loc_51D8:				@ CODE XREF: sub_51CC+4j
		LDR	R1, off_51F0
		B	loc_51DE
@ ---------------------------------------------------------------------------

loc_51DC:				@ CODE XREF: sub_51CC+8j
		LDR	R1, off_51F4

loc_51DE:				@ CODE XREF: sub_51CC+Ej
		ADD.W	R0, R1,	R0,LSL#2
		LDR.W	R0, [R0,#-4]

loc_51E6:				@ CODE XREF: sub_51CC+Aj
		LDRB	R0, [R0]
		BX	LR
@ End of function sub_51CC

@ ---------------------------------------------------------------------------
		.balign 4,0
off_51EC:	.long DisplayModel	@ DATA XREF: sub_51CCr
off_51F0:	.long font1		@ DATA XREF: sub_51CC:loc_51D8r
off_51F4:	.long font2		@ DATA XREF: sub_51CC:loc_51DCr

@ =============== S U B	R O U T	I N E =======================================


DisplayHLine:				@ CODE XREF: DisplayFillRect+18p
					@ DrawBFLine+18p ...
		PUSH.W	{R4-R10,LR}	@ (X1,Y,X2,Mode)
		MOV	R9, R1
		SUBS	R1, R2,	R0
		MOV	R8, R3
		UXTB	R6, R1
		MOV	R5, R0
		MOVS	R4, #0
		LDR	R7, off_523C
		B	loc_5234
@ ---------------------------------------------------------------------------

loc_520C:				@ CODE XREF: DisplayHLine+3Ej
		LDRB	R0, [R7]
		CBZ	R0, loc_5216
		CMP	R0, #1
		BEQ	loc_5224
		B	loc_5230
@ ---------------------------------------------------------------------------

loc_5216:				@ CODE XREF: DisplayHLine+16j
		ADDS	R0, R4,	R5
		UXTB	R0, R0
		MOV	R2, R8
		MOV	R1, R9
		BL	sub_5500
		B	loc_5230
@ ---------------------------------------------------------------------------

loc_5224:				@ CODE XREF: DisplayHLine+1Aj
		ADDS	R0, R4,	R5
		UXTB	R0, R0
		MOV	R2, R8
		MOV	R1, R9
		BL	sub_5258

loc_5230:				@ CODE XREF: DisplayHLine+1Cj
					@ DisplayHLine+2Aj
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_5234:				@ CODE XREF: DisplayHLine+12j
		CMP	R4, R6
		BLS	loc_520C
		POP.W	{R4-R10,PC}
@ End of function DisplayHLine

@ ---------------------------------------------------------------------------
off_523C:	.long DisplayModel	@ DATA XREF: DisplayHLine+10r

@ =============== S U B	R O U T	I N E =======================================


InitDisplay:				@ CODE XREF: EventHandler+10A2p
					@ sub_4F0C+8Ap	...
		LDR	R0, off_5254
		LDRB	R0, [R0]
		CBZ	R0, loc_524E
		CMP	R0, #1
		BNE	locret_5252
		B.W	SSD1327_Init
@ ---------------------------------------------------------------------------

loc_524E:				@ CODE XREF: InitDisplay+4j
		B.W	SSD1306_Init
@ ---------------------------------------------------------------------------

locret_5252:				@ CODE XREF: InitDisplay+8j
		BX	LR
@ End of function InitDisplay

@ ---------------------------------------------------------------------------
off_5254:	.long DisplayModel	@ DATA XREF: InitDisplayr

@ =============== S U B	R O U T	I N E =======================================


sub_5258:				@ CODE XREF: DisplayHLine+34p
		PUSH	{R4,R5,LR}
		AND.W	R3, R0,	#7
		RSB.W	R5, R3,	#7
		MOVS	R3, #1
		LSLS	R3, R5
		LDR	R4, off_527C
		LSLS	R1, R1,	#3
		ADD.W	R1, R1,	R0,LSR#3
		LDRB	R0, [R4,R1]
		CBZ	R2, loc_5276
		ORRS	R0, R3
		B	loc_5278
@ ---------------------------------------------------------------------------

loc_5276:				@ CODE XREF: sub_5258+18j
		BICS	R0, R3

loc_5278:				@ CODE XREF: sub_5258+1Cj
		STRB	R0, [R4,R1]
		POP	{R4,R5,PC}
@ End of function sub_5258

@ ---------------------------------------------------------------------------
off_527C:	.long ScreenBuffer	@ DATA XREF: sub_5258+Er

@ =============== S U B	R O U T	I N E =======================================


SSD1327_Init:				@ CODE XREF: InitDisplay+Aj
		PUSH	{R4-R6,LR}
		BL	SSD1327_PowerOn
		LDR	R5, off_52D8
		MOVS	R4, #0

loc_528A:				@ CODE XREF: SSD1327_Init+16j
		LDRB	R0, [R5,R4]
		BL	DisplayWriteByte
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #28
		BCC	loc_528A
		LDR	R0, off_52DC
		LDRB.W	R0, [R0,#0x7C]
		LSLS	R0, R0,	#0x1D
		BPL	loc_52BA
		MOVS	R0, #0xA2
		BL	DisplayWriteByte
		MOVS	R0, #0x80
		BL	DisplayWriteByte
		MOVS	R0, #0xA0
		BL	DisplayWriteByte
		MOVS	R0, #0x53
		BL	DisplayWriteByte

loc_52BA:				@ CODE XREF: SSD1327_Init+20j
		BL	sub_52E4
		LDR	R1, dword_52E0
		MOVS	R0, #1
		STR	R0, [R1]
		BL	WaitOnTMR2	@ Waits	R0 ms
		MOVS	R0, #0xAF
		BL	DisplayWriteByte
		POP.W	{R4-R6,LR}
		MOVS	R0, #20
		B.W	WaitOnTMR2	@ Waits	R0 ms
@ End of function SSD1327_Init

@ ---------------------------------------------------------------------------
off_52D8:	.long SSD1327_InitSeq	@ DATA XREF: SSD1327_Init+6r
off_52DC:	.long dfData		@ DATA XREF: SSD1327_Init+18r
dword_52E0:	.long 0x40004890	@ DATA XREF: SSD1327_Init+3Er

@ =============== S U B	R O U T	I N E =======================================


sub_52E4:				@ CODE XREF: SSD1327_Init:loc_52BAp
		PUSH	{R4,LR}
		BL	sub_5320
		POP.W	{R4,LR}
		B.W	SSD1327_Refresh
@ End of function sub_52E4

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


SSD1327_PowerOn:			@ CODE XREF: SSD1327_Init+2p
		PUSH	{R4-R6,LR}
		LDR	R0, dword_531C
		MOVS	R4, #1
		STR	R4, [R0]
		MOV	R0, R4
		BL	WaitOnTMR2	@ Waits	R0 ms
		LDR	R5, dword_531C
		MOVS	R0, #0
		SUBS	R5, R5,	#4
		STR	R0, [R5]
		MOVS	R0, #10
		BL	WaitOnTMR2	@ Waits	R0 ms
		STR	R4, [R5]
		POP.W	{R4-R6,LR}
		MOVS	R0, #1
		B.W	WaitOnTMR2	@ Waits	R0 ms
@ End of function SSD1327_PowerOn

@ ---------------------------------------------------------------------------
dword_531C:	.long 0x40004804	@ DATA XREF: SSD1327_PowerOn+2r
					@ SSD1327_PowerOn+Er

@ =============== S U B	R O U T	I N E =======================================


sub_5320:				@ CODE XREF: sub_52E4+2p
					@ ClearScreenBuffer+Aj
		MOVS	R0, #0
		LDR	R2, off_5338
		MOV	R1, R0
		MOV.W	R3, #0x400

loc_532A:				@ CODE XREF: sub_5320+12j
		STRB	R1, [R2,R0]
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		CMP	R0, R3
		BCC	loc_532A
		BX	LR
@ End of function sub_5320

@ ---------------------------------------------------------------------------
		.balign 4,0
off_5338:	.long ScreenBuffer	@ DATA XREF: sub_5320+2r

@ =============== S U B	R O U T	I N E =======================================


sub_533C:				@ CODE XREF: DisplayImage+Cj
					@ DisplayImageInv+Aj
		PUSH	{R4}
		CMP	R2, #0x91
		BEQ	loc_534E
		CMP	R2, #0x88
		BEQ	loc_534E
		CMP	R2, #0x9A
		BEQ	loc_534E
		CMP	R2, #0x92
		BNE	loc_5352	@ 0x8B is missing!

loc_534E:				@ CODE XREF: sub_533C+4j sub_533C+8j ...
		ADDS	R1, R1,	#2
		UXTB	R1, R1

loc_5352:				@ CODE XREF: sub_533C+10j
		LDR	R4, off_5364
		ADD.W	R2, R4,	R2,LSL#2
		LDR.W	R2, [R2,#-4]
		POP	{R4}
		B.W	sub_5368
@ End of function sub_533C

@ ---------------------------------------------------------------------------
		.balign 4,0
off_5364:	.long font2		@ DATA XREF: sub_533C:loc_5352r

@ =============== S U B	R O U T	I N E =======================================


sub_5368:				@ CODE XREF: sub_533C+22p
					@ DisplayLOGO+74p
		PUSH.W	{R0-R11,LR}
		SUB	SP, SP,	#0x10
		ADDS	R4, R2,	#2
		STR	R4, [SP,#0xC]
		LDRB	R4, [R2]
		STR	R4, [SP,#4]
		ADDS	R4, R4,	#7
		AND.W	R9, R0,	#7
		LSLS	R1, R1,	#3
		LDRB	R2, [R2,#1]
		ADD.W	R0, R1,	R0,LSR#3
		RSB.W	R3, R9,	#8
		MOV.W	R11, R4,LSR#3
		MOVS	R6, #0
		LDR.W	LR, off_54A4
		STR	R2, [SP,#8]
		STR	R0, [SP]
		B	loc_5496
@ ---------------------------------------------------------------------------

loc_5398:				@ CODE XREF: sub_5368+130j
		SUB.W	R1, R11, #1
		LDR	R0, [SP]
		CMP	R6, R1
		BNE	loc_53AA
		LDR	R1, [SP,#4]
		ANDS.W	R2, R1,	#7
		BNE	loc_53AC

loc_53AA:				@ CODE XREF: sub_5368+38j
		MOVS	R2, #8

loc_53AC:				@ CODE XREF: sub_5368+40j
		MOVS	R5, #0
		B	loc_5484
@ ---------------------------------------------------------------------------

loc_53B0:				@ CODE XREF: sub_5368+120j
		SMULBB.W R4, R5, R11
		LDR	R1, [SP,#0xC]
		ADD	R1, R6
		LDRB	R1, [R4,R1]
		LDR	R4, [SP,#0x1C]
		CBZ	R4, loc_53C2
		MVNS	R1, R1
		UXTB	R1, R1

loc_53C2:				@ CODE XREF: sub_5368+54j
		ADDS	R4, R0,	#1
		UXTH	R4, R4
		CMP.W	R9, #0
		BEQ	loc_53E4
		CMP	R2, R3
		BHI	loc_541A
		LDR	R4, [SP,#0x1C]
		CBZ	R4, loc_53EA
		LDR	R7, off_54A8
		LDRB.W	R4, [LR,R0]
		LDRB	R7, [R7,R3]
		ANDS	R4, R7
		STRB.W	R4, [LR,R0]
		B	loc_5406
@ ---------------------------------------------------------------------------

loc_53E4:				@ CODE XREF: sub_5368+62j sub_5368+B0j
		STRB.W	R1, [LR,R0]
		B	loc_547C
@ ---------------------------------------------------------------------------

loc_53EA:				@ CODE XREF: sub_5368+6Aj
		LDR	R4, off_54A8
		SUB.W	R12, R0, R2
		LDRB	R7, [R4,R3]
		SUBS	R4, #8
		LDRB.W	R4, [R4,R12]
		LDRB.W	R12, [LR,R0]
		ORRS	R7, R4
		AND.W	R7, R7,	R12
		STRB.W	R7, [LR,R0]

loc_5406:				@ CODE XREF: sub_5368+7Aj
		LDR	R4, off_54A8
		LSR.W	R1, R1,	R9
		SUBS	R4, #8
		LDRB.W	R7, [LR,R0]
		LDRB	R4, [R4,R3]
		ANDS	R1, R4
		ORRS	R1, R7
		B	loc_53E4
@ ---------------------------------------------------------------------------

loc_541A:				@ CODE XREF: sub_5368+66j
		LDR	R7, off_54A8
		LDRB.W	R12, [LR,R0]
		LDRB.W	R10, [R7,R3]
		AND.W	R8, R12, R10
		LSR.W	R12, R1, R9
		SUBS	R7, #8
		CMP	R2, #8
		LDRB	R7, [R7,R3]
		AND.W	R12, R12, R7
		ORR.W	R12, R12, R8
		STRB.W	R12, [LR,R0]
		BCS	loc_5466
		RSB.W	R12, R2, #8
		ADD.W	R8, R12, R3
		LDR.W	R12, off_54A8
		LDRB.W	R7, [LR,R4]
		SUB.W	R12, R12, #8
		LSLS	R1, R3
		LDRB.W	R12, [R12,R8]
		AND.W	R1, R1,	R10
		AND.W	R7, R7,	R12
		ORRS	R1, R7
		B	loc_5478
@ ---------------------------------------------------------------------------

loc_5466:				@ CODE XREF: sub_5368+D6j
		LDRB.W	R12, [LR,R4]
		LSLS	R1, R3
		AND.W	R12, R12, R7
		AND.W	R1, R1,	R10
		ORR.W	R1, R1,	R12

loc_5478:				@ CODE XREF: sub_5368+FCj
		STRB.W	R1, [LR,R4]

loc_547C:				@ CODE XREF: sub_5368+80j
		ADDS	R0, #8
		ADDS	R5, R5,	#1
		UXTH	R0, R0
		UXTB	R5, R5

loc_5484:				@ CODE XREF: sub_5368+46j
		LDR	R1, [SP,#8]
		CMP	R5, R1
		BCC	loc_53B0
		LDR	R0, [SP]
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		ADDS	R6, R6,	#1
		UXTB	R6, R6
		STR	R0, [SP]

loc_5496:				@ CODE XREF: sub_5368+2Ej
		CMP	R6, R11
		BCC.W	loc_5398
		LDR	R0, [SP,#4]
		ADD	SP, SP,	#0x20
		POP.W	{R4-R11,PC}
@ End of function sub_5368

@ ---------------------------------------------------------------------------
off_54A4:	.long ScreenBuffer	@ DATA XREF: sub_5368+26r
off_54A8:	.long byte_D730		@ DATA XREF: sub_5368+6Cr
					@ sub_5368:loc_53EAr ...

@ =============== S U B	R O U T	I N E =======================================


SSD1327_ScreenOff:			@ CODE XREF: ScreenOff+Aj
		PUSH	{R4,LR}
		MOVS	R0, #0xAE
		BL	DisplayWriteByte
		LDR	R0, dword_54DC
		MOVS	R4, #0
		STR	R4, [R0]	@ PC4 =	low
		MOVS	R0, #100
		BL	WaitOnTMR2	@ Waits	R0 ms
		LDR	R0, dword_54DC
		SUBS	R0, #0x8C
		STR	R4, [R0]	@ PA1 =	low
		MOVS	R0, #100
		BL	WaitOnTMR2	@ Waits	R0 ms
		LDR	R0, dword_54DC
		SUBS	R0, #0x90
		STR	R4, [R0]	@ PA0 =	low
		POP.W	{R4,LR}
		MOVS	R0, #100
		B.W	WaitOnTMR2	@ Waits	R0 ms
@ End of function SSD1327_ScreenOff

@ ---------------------------------------------------------------------------
dword_54DC:	.long 0x40004890	@ DATA XREF: SSD1327_ScreenOff+8r
					@ SSD1327_ScreenOff+14r ...

@ =============== S U B	R O U T	I N E =======================================


SSD1327_Refresh:			@ CODE XREF: sub_52E4+Ap
					@ DisplayRefresh+Aj
		PUSH	{R4,LR}
		MOVS	R3, #0x7F
		MOVS	R2, #0
		MOVS	R1, #0x2F
		MOVS	R0, #0x10
		BL	sub_17B0
		POP.W	{R4,LR}
		MOV.W	R1, #0x400
		LDR	R0, off_54FC
		B.W	sub_5184
@ End of function SSD1327_Refresh

@ ---------------------------------------------------------------------------
off_54FC:	.long ScreenBuffer	@ DATA XREF: SSD1327_Refresh+16r

@ =============== S U B	R O U T	I N E =======================================


sub_5500:				@ CODE XREF: DisplayHLine+26p
		PUSH	{R4-R6,LR}
		LSRS	R4, R1,	#3
		AND.W	R3, R1,	#7
		MOVS	R6, #1
		LSLS	R6, R3
		LDR	R5, off_552C
		ADD.W	R4, R0,	R4,LSL#6
		LSRS	R1, R1,	#3
		ADD.W	R0, R0,	R1,LSL#6
		MOV	R1, R5
		UXTB	R3, R6
		LDRB	R0, [R0,R1]
		ADD	R4, R5
		CBZ	R2, loc_5526
		ORRS	R0, R3
		B	loc_5528
@ ---------------------------------------------------------------------------

loc_5526:				@ CODE XREF: sub_5500+20j
		BICS	R0, R3

loc_5528:				@ CODE XREF: sub_5500+24j
		STRB	R0, [R4]
		POP	{R4-R6,PC}
@ End of function sub_5500

@ ---------------------------------------------------------------------------
off_552C:	.long ScreenBuffer	@ DATA XREF: sub_5500+Cr

@ =============== S U B	R O U T	I N E =======================================


SSD1306_Init:				@ CODE XREF: InitDisplay:loc_524Ej
		PUSH	{R4-R6,LR}
		BL	SSD1306_PowerOn
		LDR	R5, off_558C
		MOVS	R4, #0

loc_553A:				@ CODE XREF: SSD1306_Init+16j
		LDRB	R0, [R5,R4]
		BL	DisplayWriteByte
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #0x16
		BCC	loc_553A
		LDR	R0, off_5590
		LDRB.W	R0, [R0,#0x7C]	@ dfStatus
		LSLS	R0, R0,	#29
		BPL	loc_5576
		MOVS	R0, #0xC0
		BL	DisplayWriteByte
		MOVS	R0, #0xD3
		BL	DisplayWriteByte
		MOVS	R0, #0x60
		BL	DisplayWriteByte
		MOVS	R0, #0xDC
		BL	DisplayWriteByte
		MOVS	R0, #0x20
		BL	DisplayWriteByte
		MOVS	R0, #0xA0
		BL	DisplayWriteByte

loc_5576:				@ CODE XREF: SSD1306_Init+20j
		BL	sub_5594
		MOVS	R0, #0xAF
		BL	DisplayWriteByte
		POP.W	{R4-R6,LR}
		MOVS	R0, #20
		B.W	WaitOnTMR2	@ Waits	R0 ms
@ End of function SSD1306_Init

@ ---------------------------------------------------------------------------
		.balign 4,0
off_558C:	.long SSD1306_InitSeq	@ DATA XREF: SSD1306_Init+6r
off_5590:	.long dfData		@ DATA XREF: SSD1306_Init+18r

@ =============== S U B	R O U T	I N E =======================================


sub_5594:				@ CODE XREF: SSD1306_Init:loc_5576p
		PUSH	{R4,LR}
		BL	sub_55D8
		POP.W	{R4,LR}
		B.W	SSD1306_Refresh
@ End of function sub_5594

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


SSD1306_PowerOn:			@ CODE XREF: SSD1306_Init+2p
		PUSH	{R4-R6,LR}
		LDR	R0, dword_55D4
		MOVS	R4, #1
		STR	R4, [R0]	@ PA1 =	high (display Vdd)
		LDR	R0, dword_55D4
		ADDS	R0, #0x8C
		STR	R4, [R0]	@ PC4 =	high (display Vcc)
		MOV	R0, R4
		BL	WaitOnTMR2	@ Waits	R0 ms
		LDR	R5, dword_55D4
		MOVS	R0, #0
		SUBS	R5, R5,	#4
		STR	R0, [R5]	@ PA0 =	low (display reset)
		MOVS	R0, #1
		BL	WaitOnTMR2	@ Waits	R0 ms
		STR	R4, [R5]	@ PA0 =	high
		POP.W	{R4-R6,LR}
		MOVS	R0, #10
		B.W	WaitOnTMR2	@ Waits	R0 ms
@ End of function SSD1306_PowerOn

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_55D4:	.long 0x40004804	@ DATA XREF: SSD1306_PowerOn+2r
					@ SSD1306_PowerOn+8r ...

@ =============== S U B	R O U T	I N E =======================================


sub_55D8:				@ CODE XREF: sub_5594+2p
					@ ClearScreenBuffer:loc_5792j
		LDR	R1, off_55F8
		MOVS	R2, #0
		MOV	R3, R2

loc_55DE:				@ CODE XREF: sub_55D8+1Aj
		MOVS	R0, #0

loc_55E0:				@ CODE XREF: sub_55D8+12j
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.W	R3, [R1],#1
		CMP	R0, #64
		BCC	loc_55E0
		ADDS	R2, R2,	#1
		UXTB	R2, R2
		CMP	R2, #16
		BCC	loc_55DE
		BX	LR
@ End of function sub_55D8

@ ---------------------------------------------------------------------------
		.balign 4,0
off_55F8:	.long ScreenBuffer	@ DATA XREF: sub_55D8r

@ =============== S U B	R O U T	I N E =======================================


sub_55FC:				@ CODE XREF: DisplayImage+12j
					@ DisplayImageInv+10j
		PUSH	{R4}
		CMP	R2, #0x91	@ "p"
		BEQ	loc_560E
		CMP	R2, #0x88	@ "g"
		BEQ	loc_560E
		CMP	R2, #0x9A	@ "y"
		BEQ	loc_560E
		CMP	R2, #0x92	@ "q"
		BNE	loc_5612	@ 0x8B ("j") is missing!

loc_560E:				@ CODE XREF: sub_55FC+4j sub_55FC+8j ...
		ADDS	R1, R1,	#2
		UXTB	R1, R1

loc_5612:				@ CODE XREF: sub_55FC+10j
		LDR	R4, off_5624
		ADD.W	R2, R4,	R2,LSL#2
		LDR.W	R2, [R2,#-4]
		POP	{R4}
		B.W	sub_5628
@ End of function sub_55FC

@ ---------------------------------------------------------------------------
		.balign 4,0
off_5624:	.long font1		@ DATA XREF: sub_55FC:loc_5612r

@ =============== S U B	R O U T	I N E =======================================


sub_5628:				@ CODE XREF: sub_55FC+22p
					@ DisplayLOGO+C2p
		PUSH.W	{R0-R11,LR}
		SUB	SP, SP,	#0xC
		LSRS	R0, R1,	#3
		AND.W	R1, R1,	#7
		STR	R0, [SP,#4]
		RSB.W	R0, R1,	#8
		STR	R0, [SP]
		LDRB	R0, [R2,#1]
		LDRB.W	R11, [R2]
		LSRS	R0, R0,	#3
		MOVS	R5, #0
		ADD.W	LR, R2,	#2
		MOV	R6, R5
		STR	R0, [SP,#8]
		B	loc_56CA
@ ---------------------------------------------------------------------------

loc_5650:				@ CODE XREF: sub_5628+A6j
		LDR	R0, [SP,#4]
		LDR	R2, off_56D8
		ADD	R0, R6
		ADD.W	R2, R2,	R0,LSL#6
		LDR	R0, [SP,#0xC]
		ADDS	R3, R2,	R0
		ADD.W	R4, R3,	#0x40
		MOVS	R0, #0
		B	loc_56C2
@ ---------------------------------------------------------------------------

loc_5666:				@ CODE XREF: sub_5628+9Cj
		LDRB.W	R2, [LR,R5]
		LDR	R7, [SP,#0x18]
		CBZ	R7, loc_5672
		MVNS	R2, R2
		UXTB	R2, R2

loc_5672:				@ CODE XREF: sub_5628+44j
		CBZ	R1, loc_56B8
		LDR.W	R10, off_56DC
		LDRB	R7, [R4,R0]
		SUB.W	R9, R10, #8
		LDRB.W	R12, [R10,R1]
		AND.W	R7, R7,	R12
		STRB	R7, [R4,R0]
		LDR.W	R12, [SP]
		LDRB.W	R8, [R9,R1]
		LSR.W	R12, R2, R12
		AND.W	R12, R12, R8
		ORR.W	R12, R12, R7
		STRB.W	R12, [R4,R0]
		LDRB	R7, [R3,R0]
		LDRB.W	R12, [R9,R1]
		LSLS	R2, R1
		AND.W	R7, R7,	R12
		STRB	R7, [R3,R0]
		LDRB.W	R12, [R10,R1]
		AND.W	R2, R2,	R12
		ORRS	R2, R7

loc_56B8:				@ CODE XREF: sub_5628:loc_5672j
		STRB	R2, [R3,R0]
		ADDS	R0, R0,	#1
		ADDS	R5, R5,	#1
		UXTB	R0, R0
		UXTH	R5, R5

loc_56C2:				@ CODE XREF: sub_5628+3Cj
		CMP	R0, R11
		BCC	loc_5666
		ADDS	R6, R6,	#1
		UXTB	R6, R6

loc_56CA:				@ CODE XREF: sub_5628+26j
		LDR	R0, [SP,#8]
		CMP	R6, R0
		BCC	loc_5650
		ADD	SP, SP,	#0x1C
		MOV	R0, R11
		POP.W	{R4-R11,PC}
@ End of function sub_5628

@ ---------------------------------------------------------------------------
off_56D8:	.long ScreenBuffer	@ DATA XREF: sub_5628+2Ar
off_56DC:	.long byte_D75C		@ DATA XREF: sub_5628+4Cr

@ =============== S U B	R O U T	I N E =======================================


SSD1306_ScreenOff:			@ CODE XREF: ScreenOff:loc_5ABAj
		PUSH	{R4,LR}
		MOVS	R0, #0xAE
		BL	DisplayWriteByte
		LDR	R0, dword_5710
		MOVS	R4, #0
		STR	R4, [R0]	@ PC4_PDIO = 0
		MOVS	R0, #100
		BL	WaitOnTMR2	@ Waits	R0 ms
		LDR	R0, dword_5710
		SUBS	R0, #0x8C
		STR	R4, [R0]	@ PA1_PDIO = 0
		MOVS	R0, #100
		BL	WaitOnTMR2	@ Waits	R0 ms
		LDR	R0, dword_5710
		SUBS	R0, #0x90
		STR	R4, [R0]	@ PA0_PDIO = 0
		POP.W	{R4,LR}
		MOVS	R0, #100
		B.W	WaitOnTMR2	@ Waits	R0 ms
@ End of function SSD1306_ScreenOff

@ ---------------------------------------------------------------------------
dword_5710:	.long 0x40004890	@ DATA XREF: SSD1306_ScreenOff+8r
					@ SSD1306_ScreenOff+14r ...

@ =============== S U B	R O U T	I N E =======================================


SSD1306_Refresh:			@ CODE XREF: sub_5594+Ap
					@ DisplayRefresh:loc_5AD2j
		PUSH	{R4-R6,LR}
		LDR	R5, off_5754
		LDR	R6, off_5758
		MOVS	R4, #0

loc_571C:				@ CODE XREF: SSD1306_Refresh+3Cj
		ADD.W	R0, R4,	#0xB0
		UXTB	R0, R0
		BL	DisplayWriteByte
		MOVS	R0, #0
		BL	DisplayWriteByte
		LDRB.W	R0, [R6,#0x7C]
		LSLS	R0, R0,	#29
		BPL	loc_5738
		MOVS	R0, #0x12
		B	loc_573A
@ ---------------------------------------------------------------------------

loc_5738:				@ CODE XREF: SSD1306_Refresh+1Ej
		MOVS	R0, #0x10

loc_573A:				@ CODE XREF: SSD1306_Refresh+22j
		BL	DisplayWriteByte
		CBZ	R4, loc_5742
		ADDS	R5, #0x40

loc_5742:				@ CODE XREF: SSD1306_Refresh+2Aj
		MOVS	R1, #0x40
		MOV	R0, R5
		BL	sub_5184
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #0x10
		BCC	loc_571C
		POP	{R4-R6,PC}
@ End of function SSD1306_Refresh

@ ---------------------------------------------------------------------------
off_5754:	.long ScreenBuffer	@ DATA XREF: SSD1306_Refresh+2r
off_5758:	.long dfData		@ DATA XREF: SSD1306_Refresh+4r

@ =============== S U B	R O U T	I N E =======================================


DisplayFillRect:			@ CODE XREF: ShowBatCharging+42p
					@ ShowBattery+64p ...
		PUSH.W	{R4-R8,LR}
		MOV	R5, R3
		MOV	R7, R2
		MOV	R4, R1
		MOV	R8, R0
		LDR	R6, [SP,#0x18]
		B	loc_577C
@ ---------------------------------------------------------------------------

loc_576C:				@ CODE XREF: DisplayFillRect+22j
		MOV	R3, R6
		MOV	R2, R7
		MOV	R1, R4
		MOV	R0, R8
		BL	DisplayHLine
		ADDS	R4, R4,	#1
		UXTB	R4, R4

loc_577C:				@ CODE XREF: DisplayFillRect+Ej
		CMP	R4, R5
		BLS	loc_576C
		POP.W	{R4-R8,PC}
@ End of function DisplayFillRect


@ =============== S U B	R O U T	I N E =======================================


ClearScreenBuffer:			@ CODE XREF: DrawScreen+42p
					@ ShowLOGOMenu+2p ...
		LDR	R0, off_5798
		LDRB	R0, [R0]
		CBZ	R0, loc_5792
		CMP	R0, #1
		BNE	locret_5796
		B.W	sub_5320
@ ---------------------------------------------------------------------------

loc_5792:				@ CODE XREF: ClearScreenBuffer+4j
		B.W	sub_55D8
@ ---------------------------------------------------------------------------

locret_5796:				@ CODE XREF: ClearScreenBuffer+8j
		BX	LR
@ End of function ClearScreenBuffer

@ ---------------------------------------------------------------------------
off_5798:	.long DisplayModel	@ DATA XREF: ClearScreenBufferr

@ =============== S U B	R O U T	I N E =======================================


DisplayImage:				@ CODE XREF: DisplayString+Ep
					@ ShowBatCharging+1Cp ...
		LDR	R3, off_57B4
		LDRB	R3, [R3]
		CBZ	R3, loc_57AC
		CMP	R3, #1
		BNE	locret_57B2
		MOVS	R3, #0
		B.W	sub_533C
@ ---------------------------------------------------------------------------

loc_57AC:				@ CODE XREF: DisplayImage+4j
		MOVS	R3, #0
		B.W	sub_55FC
@ ---------------------------------------------------------------------------

locret_57B2:				@ CODE XREF: DisplayImage+8j
		BX	LR
@ End of function DisplayImage

@ ---------------------------------------------------------------------------
off_57B4:	.long DisplayModel	@ DATA XREF: DisplayImager

@ =============== S U B	R O U T	I N E =======================================


DisplayImageInv:			@ CODE XREF: DisplayStringInv+Ep
					@ ShowTCRSet+F6p ...
		LDR	R3, off_57D0
		LDRB	R3, [R3]
		CBZ	R3, loc_57C6
		CMP	R3, #1
		BNE	locret_57CC
		B.W	sub_533C
@ ---------------------------------------------------------------------------

loc_57C6:				@ CODE XREF: DisplayImageInv+4j
		MOVS	R3, #1
		B.W	sub_55FC
@ ---------------------------------------------------------------------------

locret_57CC:				@ CODE XREF: DisplayImageInv+8j
		BX	LR
@ End of function DisplayImageInv

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
off_57D0:	.long DisplayModel	@ DATA XREF: DisplayImageInvr

@ =============== S U B	R O U T	I N E =======================================


DisplayLOGO:				@ CODE XREF: ShowMainView+1E4p
					@ ShowMainView+300p ...
		PUSH.W	{R4-R10,LR}
		SUB.W	SP, SP,	#0x200
		MOV	R9, R1
		MOV	R10, R0
		MOV.W	R1, #0x200
		MOV	R0, SP
		BL	MemClear
		LDR	R0, off_589C
		LDRB.W	R0, [R0,#(dfStatus-dfData)]
		LSLS	R0, R0,	#28
		BMI	loc_584C
		LDR	R0, off_58A0
		MOVS	R6, #0
		MOV.W	R7, #0x40000000
		LDRB	R0, [R0]
		MOV	R5, SP
		CBZ	R0, loc_5854
		CMP	R0, #1
		BNE	loc_584C
		BL	UnlockRegisters5
		BL	FMCEnableISP
		MOVS	R4, #0
		MOV.W	R8, #0x19000

loc_5814:				@ CODE XREF: DisplayLOGO+52j
		ADD.W	R1, R5,	R4,LSL#8
		ADD.W	R0, R8,	R4,LSL#8
		BL	FMCRead100
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #2
		BCC	loc_5814
		BL	FMCDisableISP
		STR.W	R6, [R7,#0x100]
		LDRB.W	R0, [SP]
		CMP	R0, #0x40
		BNE	loc_584C
		LDRB.W	R0, [SP,#1]
		CMP	R0, #0x28
		BNE	loc_584C
		MOVS	R3, #0
		MOV	R2, SP
		MOV	R1, R9
		MOV	R0, R10
		BL	sub_5368

loc_584C:				@ CODE XREF: DisplayLOGO+1Ej
					@ DisplayLOGO+30j ...
		ADD.W	SP, SP,	#0x200
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_5854:				@ CODE XREF: DisplayLOGO+2Cj
		BL	UnlockRegisters5
		BL	FMCEnableISP
		MOVS	R4, #0
		MOV.W	R8, #0x19200

loc_5862:				@ CODE XREF: DisplayLOGO+A0j
		ADD.W	R1, R5,	R4,LSL#8
		ADD.W	R0, R8,	R4,LSL#8
		BL	FMCRead100
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #2
		BCC	loc_5862
		BL	FMCDisableISP
		STR.W	R6, [R7,#0x100]
		LDRB.W	R0, [SP]
		CMP	R0, #64
		BNE	loc_584C
		LDRB.W	R0, [SP,#1]
		CMP	R0, #40
		BNE	loc_584C
		MOVS	R3, #0
		MOV	R2, SP
		MOV	R1, R9
		MOV	R0, R10
		BL	sub_5628
		B	loc_584C
@ End of function DisplayLOGO

@ ---------------------------------------------------------------------------
off_589C:	.long dfData		@ DATA XREF: DisplayLOGO+16r
off_58A0:	.long DisplayModel	@ DATA XREF: DisplayLOGO+20r

@ =============== S U B	R O U T	I N E =======================================


DisplayValue:				@ CODE XREF: ShowBattVolts+1Cp
					@ ShowBoardTemp+1Cp ...

anonymous_0	=  0

		PUSH.W	{R4-R10,LR}
		SUB	SP, SP,	#0x18
		MOV	R10, R1
		LDRD.W	R5, R4,	[SP,#0x38]
		CBNZ	R4, loc_58DA
		MOVW	R1, #10000
		CMP	R2, R1
		BCC	loc_58BE
		MOVS	R4, #5
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58BE:				@ CODE XREF: DisplayValue+14j
		CMP.W	R2, #1000
		BCC	loc_58C8
		MOVS	R4, #4
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58C8:				@ CODE XREF: DisplayValue+1Ej
		CMP	R2, #100
		BCC	loc_58D0
		MOVS	R4, #3
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58D0:				@ CODE XREF: DisplayValue+26j
		CMP	R2, #10
		BCC	loc_58D8
		MOVS	R4, #2
		B	loc_58DA
@ ---------------------------------------------------------------------------

loc_58D8:				@ CODE XREF: DisplayValue+2Ej
		MOVS	R4, #1

loc_58DA:				@ CODE XREF: DisplayValue+Cj
					@ DisplayValue+18j ...
		MOVS	R6, #0
		MOV	R8, SP
		MOV.W	R12, #10
		B	loc_5902
@ ---------------------------------------------------------------------------

loc_58E4:				@ CODE XREF: DisplayValue+60j
		UDIV.W	R1, R2,	R12
		MLS.W	R1, R12, R1, R2
		UDIV.W	R2, R2,	R12
		SUB.W	R9, R4,	R6
		ADDS	R7, R1,	R5
		ADD.W	R9, R8,	R9,LSL#1
		ADDS	R6, R6,	#1
		STRH.W	R7, [R9,#-2]
		UXTB	R6, R6

loc_5902:				@ CODE XREF: DisplayValue+3Ej
		CMP	R6, R4
		BCC	loc_58E4
		MOVS	R1, #0
		STRH.W	R1, [R8,R6,LSL#1]
		CBZ	R3, loc_596E
		CMP	R4, R3
		BLS	loc_5978
		SUBS	R1, R4,	R3
		B	loc_5924
@ ---------------------------------------------------------------------------

loc_5916:				@ CODE XREF: DisplayValue+82j
		LDRH.W	R2, [R8,R4,LSL#1]
		ADD.W	R3, R8,	R4,LSL#1
		SUBS	R4, R4,	#1
		STRH	R2, [R3,#2]
		UXTB	R4, R4

loc_5924:				@ CODE XREF: DisplayValue+70j
		CMP	R1, R4
		BLE	loc_5916
		CMP	R5, #0xB
		BEQ	loc_594E
		CMP	R5, #0x15
		BEQ	loc_5952
		CMP	R5, #0x1F
		BEQ	loc_5956
		CMP	R5, #0x29
		BEQ	loc_595A
		CMP	R5, #0x33
		BEQ	loc_595E
		CMP	R5, #0x3D
		BEQ	loc_5962
		CMP	R5, #0x48
		BEQ	loc_5966
		CMP	R5, #0x52
		BEQ	loc_596A
		CMP	R5, #0x5C
		BEQ	loc_5970
		B	loc_5978
@ ---------------------------------------------------------------------------

loc_594E:				@ CODE XREF: DisplayValue+86j
		MOVS	R1, #0xC1
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5952:				@ CODE XREF: DisplayValue+8Aj
		MOVS	R1, #0xD8
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5956:				@ CODE XREF: DisplayValue+8Ej
		MOVS	R1, #0xDC
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_595A:				@ CODE XREF: DisplayValue+92j
		MOVS	R1, #0xDF
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_595E:				@ CODE XREF: DisplayValue+96j
		MOVS	R1, #0xF1
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5962:				@ CODE XREF: DisplayValue+9Aj
		MOVS	R1, #0x47
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_5966:				@ CODE XREF: DisplayValue+9Ej
		MOVS	R1, #0xF7
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_596A:				@ CODE XREF: DisplayValue+A2j
		MOVS	R1, #0xF9
		B	loc_5972
@ ---------------------------------------------------------------------------

loc_596E:				@ CODE XREF: DisplayValue+68j
		B	loc_5978
@ ---------------------------------------------------------------------------

loc_5970:				@ CODE XREF: DisplayValue+A6j
		MOVS	R1, #0x66

loc_5972:				@ CODE XREF: DisplayValue+ACj
					@ DisplayValue+B0j ...
		ADD.W	R2, R8,	R4,LSL#1
		STRH	R1, [R2,#2]

loc_5978:				@ CODE XREF: DisplayValue+6Cj
					@ DisplayValue+A8j ...
		MOV	R1, R0
		MOV	R2, R10
		MOV	R0, R8
		BL	DisplayString
		ADD	SP, SP,	#0x18
		POP.W	{R4-R10,PC}
@ End of function DisplayValue


@ =============== S U B	R O U T	I N E =======================================


DisplayValue2:				@ CODE XREF: ShowTCRSet+84p

anonymous_0	=  0

		PUSH.W	{R4-R10,LR}
		SUB	SP, SP,	#0x18
		MOV	R10, R1
		LDRD.W	R6, R4,	[SP,#0x38]
		CBNZ	R4, loc_59BE
		MOVW	R1, #10000
		CMP	R2, R1
		BCC	loc_59A2
		MOVS	R4, #5
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59A2:				@ CODE XREF: DisplayValue2+14j
		CMP.W	R2, #1000
		BCC	loc_59AC
		MOVS	R4, #4
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59AC:				@ CODE XREF: DisplayValue2+1Ej
		CMP	R2, #100
		BCC	loc_59B4
		MOVS	R4, #3
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59B4:				@ CODE XREF: DisplayValue2+26j
		CMP	R2, #10
		BCC	loc_59BC
		MOVS	R4, #2
		B	loc_59BE
@ ---------------------------------------------------------------------------

loc_59BC:				@ CODE XREF: DisplayValue2+2Ej
		MOVS	R4, #1

loc_59BE:				@ CODE XREF: DisplayValue2+Cj
					@ DisplayValue2+18j ...
		MOVS	R5, #0
		MOV	R8, SP
		MOV.W	R12, #10
		B	loc_59E6
@ ---------------------------------------------------------------------------

loc_59C8:				@ CODE XREF: DisplayValue2+60j
		UDIV.W	R1, R2,	R12
		MLS.W	R1, R12, R1, R2
		UDIV.W	R2, R2,	R12
		SUB.W	R9, R4,	R5
		ADDS	R7, R1,	R6
		ADD.W	R9, R8,	R9,LSL#1
		ADDS	R5, R5,	#1
		STRH.W	R7, [R9,#-2]
		UXTB	R5, R5

loc_59E6:				@ CODE XREF: DisplayValue2+3Ej
		CMP	R5, R4
		BCC	loc_59C8
		MOVS	R1, #0
		STRH.W	R1, [R8,R5,LSL#1]
		CBZ	R3, loc_5A42
		CMP	R4, R3
		BLS	loc_5A42
		SUBS	R1, R4,	R3
		B	loc_5A08
@ ---------------------------------------------------------------------------

loc_59FA:				@ CODE XREF: DisplayValue2+82j
		LDRH.W	R2, [R8,R4,LSL#1]
		ADD.W	R3, R8,	R4,LSL#1
		SUBS	R4, R4,	#1
		STRH	R2, [R3,#2]
		UXTB	R4, R4

loc_5A08:				@ CODE XREF: DisplayValue2+70j
		CMP	R1, R4
		BLE	loc_59FA
		CMP	R6, #0x52
		BEQ	loc_5A26
		CMP	R6, #0x33
		BEQ	loc_5A2A
		CMP	R6, #0x29
		BEQ	loc_5A2E
		CMP	R6, #0x15
		BEQ	loc_5A32
		CMP	R6, #0x1F
		BEQ	loc_5A36
		CMP	R6, #0xB
		BEQ	loc_5A3A
		B	loc_5A42
@ ---------------------------------------------------------------------------

loc_5A26:				@ CODE XREF: DisplayValue2+86j
		MOVS	R1, #0xF9
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A2A:				@ CODE XREF: DisplayValue2+8Aj
		MOVS	R1, #0xF1
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A2E:				@ CODE XREF: DisplayValue2+8Ej
		MOVS	R1, #0xDF
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A32:				@ CODE XREF: DisplayValue2+92j
		MOVS	R1, #0xD8
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A36:				@ CODE XREF: DisplayValue2+96j
		MOVS	R1, #0xDC
		B	loc_5A3C
@ ---------------------------------------------------------------------------

loc_5A3A:				@ CODE XREF: DisplayValue2+9Aj
		MOVS	R1, #0xC1

loc_5A3C:				@ CODE XREF: DisplayValue2+A0j
					@ DisplayValue2+A4j ...
		ADD.W	R2, R8,	R4,LSL#1
		STRH	R1, [R2,#2]

loc_5A42:				@ CODE XREF: DisplayValue2+68j
					@ DisplayValue2+6Cj ...
		MOV	R1, R0
		MOV	R2, R10
		MOV	R0, R8
		BL	DisplayStringInv
		ADD	SP, SP,	#0x18
		POP.W	{R4-R10,PC}
@ End of function DisplayValue2


@ =============== S U B	R O U T	I N E =======================================


DisplayString:				@ CODE XREF: DisplayValue+DAp
					@ DisplayStringCentered+14p ...
		PUSH	{R4-R6,LR}
		MOV	R6, R2
		MOV	R5, R1
		MOV	R4, R0

loc_5A5A:				@ CODE XREF: DisplayString+1Cj
		MOV	R1, R6
		LDRH	R2, [R4]
		MOV	R0, R5
		BL	DisplayImage
		ADD	R0, R5
		UXTB	R5, R0
		LDRH.W	R0, [R4,#2]!
		CMP	R0, #0
		BNE	loc_5A5A
		POP	{R4-R6,PC}
@ End of function DisplayString


@ =============== S U B	R O U T	I N E =======================================


DisplayStringInv:			@ CODE XREF: DisplayValue2+C0p
					@ ShowLOGOMenu+64j ...
		PUSH	{R4-R6,LR}
		MOV	R6, R2
		MOV	R5, R1
		MOV	R4, R0

loc_5A7A:				@ CODE XREF: DisplayStringInv+1Cj
		MOV	R1, R6
		LDRH	R2, [R4]
		MOV	R0, R5
		BL	DisplayImageInv
		ADD	R0, R5
		UXTB	R5, R0
		LDRH.W	R0, [R4,#2]!
		CMP	R0, #0
		BNE	loc_5A7A
		POP	{R4-R6,PC}
@ End of function DisplayStringInv


@ =============== S U B	R O U T	I N E =======================================


DisplayStringCentered:			@ CODE XREF: ShowBattVolts+6p
					@ ShowBoardTemp+6p ...
		PUSH	{R4-R6,LR}
		MOV	R4, R1
		MOV	R5, R0
		BL	sub_51A8
		MOV	R1, R0
		MOV	R2, R4
		MOV	R0, R5
		POP.W	{R4-R6,LR}
		B.W	DisplayString
@ End of function DisplayStringCentered

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


ScreenOff:				@ CODE XREF: sub_4F0C+2p
		LDR	R0, off_5AC0
		LDRB	R0, [R0]
		CBZ	R0, loc_5ABA
		CMP	R0, #1
		BNE	locret_5ABE
		B.W	SSD1327_ScreenOff
@ ---------------------------------------------------------------------------

loc_5ABA:				@ CODE XREF: ScreenOff+4j
		B.W	SSD1306_ScreenOff
@ ---------------------------------------------------------------------------

locret_5ABE:				@ CODE XREF: ScreenOff+8j
		BX	LR
@ End of function ScreenOff

@ ---------------------------------------------------------------------------
off_5AC0:	.long DisplayModel	@ DATA XREF: ScreenOffr

@ =============== S U B	R O U T	I N E =======================================


DisplayRefresh:				@ CODE XREF: DrawScreen:def_2000147Cp
					@ j_DisplayRefreshj
		LDR	R0, off_5AD8
		LDRB	R0, [R0]
		CBZ	R0, loc_5AD2
		CMP	R0, #1
		BNE	locret_5AD6
		B.W	SSD1327_Refresh
@ ---------------------------------------------------------------------------

loc_5AD2:				@ CODE XREF: DisplayRefresh+4j
		B.W	SSD1306_Refresh
@ ---------------------------------------------------------------------------

locret_5AD6:				@ CODE XREF: DisplayRefresh+8j
		BX	LR
@ End of function DisplayRefresh

@ ---------------------------------------------------------------------------
off_5AD8:	.long DisplayModel	@ DATA XREF: DisplayRefreshr

@ =============== S U B	R O U T	I N E =======================================


SetTimeoutValue:			@ CODE XREF: sub_854:loc_886p
					@ sub_854+4Ej ...
		LDR	R2, off_5AEC
		LDR	R1, off_5AE8
		LDRB	R2, [R2,#1]
		STRB.W	R0, [R1,R2,LSL#3]
		BX	LR
@ End of function SetTimeoutValue

@ ---------------------------------------------------------------------------
off_5AE8:	.long TimeoutsTable	@ DATA XREF: SetTimeoutValue+2r
off_5AEC:	.long TimeoutMask	@ DATA XREF: SetTimeoutValuer

@ =============== S U B	R O U T	I N E =======================================


NextMode:				@ CODE XREF: EventHandler:loc_4362p
		LDR	R1, off_5B2C
		MOV	R0, R1
		LDRB.W	R2, [R1,#(dfTiOn-dfData)]
		LDRB.N	R0, [R0,#(dfMode-dfData)]
		CBNZ	R2, loc_5AFE
		CBZ	R0, loc_5B0E

loc_5AFE:				@ CODE XREF: NextMode+Aj
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB.N	R0, [R1,#(dfMode-dfData)]
		CMP	R0, #7
		BCC	loc_5B12
		MOVS	R0, #0
		STRB.N	R0, [R1,#(dfMode-dfData)]
		B	loc_5B1E
@ ---------------------------------------------------------------------------

loc_5B0E:				@ CODE XREF: NextMode+Cj
		MOVS	R0, #4
		B	loc_5B26
@ ---------------------------------------------------------------------------

loc_5B12:				@ CODE XREF: NextMode+16j
		CBZ	R0, loc_5B1E
		CMP	R0, #1
		BEQ	loc_5B24
		CMP	R0, #2
		BEQ	loc_5B24
		B	loc_5B28
@ ---------------------------------------------------------------------------

loc_5B1E:				@ CODE XREF: NextMode+1Cj
					@ NextMode:loc_5B12j
		LDRB.W	R0, [R1,#(dfLastTCMode-dfData)]
		B	loc_5B26
@ ---------------------------------------------------------------------------

loc_5B24:				@ CODE XREF: NextMode+26j NextMode+2Aj
		MOVS	R0, #3

loc_5B26:				@ CODE XREF: NextMode+20j NextMode+32j
		STRB.N	R0, [R1,#(dfMode-dfData)]

loc_5B28:				@ CODE XREF: NextMode+2Cj
		B.W	ModeChange
@ End of function NextMode

@ ---------------------------------------------------------------------------
off_5B2C:	.long dfData		@ DATA XREF: NextModer

@ =============== S U B	R O U T	I N E =======================================


sub_5B30:				@ CODE XREF: InitPWM+Ep InitPWM+1Ap
		PUSH.W	{R4-R12,LR}
		MOV	R4, R0
		MOVS	R5, #1
		MOV	R6, R1
		LSLS	R0, R5,	#30
		LDR	R1, dword_5C28
		LDR.W	R0, [R0,#0x218]
		MOV	R9, R3
		MOV	R8, R2
		MOVW	R7, #0xFFFF
		CMP	R4, R1
		BNE	loc_5B54
		AND.W	R0, R0,	#1
		B	loc_5B58
@ ---------------------------------------------------------------------------

loc_5B54:				@ CODE XREF: sub_5B30+1Cj
		AND.W	R0, R0,	#2

loc_5B58:				@ CODE XREF: sub_5B30+22j
		CBZ	R0, loc_5B7A
		BL	GetFrequencies
		LDR	R0, off_5C2C
		LDR	R0, [R0]

loc_5B62:				@ CODE XREF: sub_5B30+4Ej
		MOV.W	R2, #0x10000
		MOVW	R3, #0xFFF

loc_5B6A:				@ CODE XREF: sub_5B30+56j
		UDIV.W	R1, R0,	R8
		UDIV.W	R1, R1,	R5
		CMP	R1, R2
		BHI	loc_5B80
		UXTH	R7, R1
		B	loc_5B88
@ ---------------------------------------------------------------------------

loc_5B7A:				@ CODE XREF: sub_5B30:loc_5B58j
		BL	GetPLLFreq2
		B	loc_5B62
@ ---------------------------------------------------------------------------

loc_5B80:				@ CODE XREF: sub_5B30+44j
		ADDS	R5, R5,	#1
		UXTH	R5, R5
		CMP	R5, R3
		BCC	loc_5B6A

loc_5B88:				@ CODE XREF: sub_5B30+48j
		ADDS	R1, R5,	#1
		MULS	R1, R7
		UDIV.W	R12, R0, R1
		SUBS	R5, R5,	#1
		LSRS	R1, R6,	#1
		ADD.W	R1, R4,	R1,LSL#2
		UXTH	R0, R5
		STR	R0, [R1,#0x14]
		LDR	R0, [R4,#4]
		LSLS	R1, R6,	#1
		MOVS	R3, #3
		LSLS	R3, R1
		BICS	R0, R3
		MOV.W	R10, #1
		LSL.W	R3, R10, R1
		ORRS	R0, R3
		STR	R0, [R4,#4]
		LDR	R0, [R4,#4]
		LSLS	R2, R6
		BICS	R0, R2
		STR	R0, [R4,#4]
		SUBS	R7, R7,	#1
		ADD.W	R2, R4,	R6,LSL#2
		UXTH	R5, R7
		STR	R5, [R2,#0x30]
		MOV.W	R8, #0x10
		ADD.W	R8, R8,	R6,LSL#1
		MOV.W	R11, #0x30003
		MOVS	R0, #2
		LSL.W	R0, R0,	R8
		LSL.W	R6, R11, R1
		CMP.W	R9, #0
		BEQ	loc_5C04
		ADDS	R5, R5,	#1
		MUL.W	R1, R9,	R5
		MOVS	R3, #0x64
		UDIV.W	R1, R1,	R3
		SUBS	R1, R1,	#1
		STR	R1, [R2,#0x50]
		LDR.W	R1, [R4,#0xB0]!
		BICS	R1, R6
		STR	R1, [R4]
		LDR	R2, [R4]
		LSL.W	R1, R10, R8
		ORRS	R2, R1
		STR	R2, [R4]
		B	loc_5C16
@ ---------------------------------------------------------------------------

loc_5C04:				@ CODE XREF: sub_5B30+AEj
		MOVS	R1, #0
		STR	R1, [R2,#0x50]
		LDR.W	R1, [R4,#0xB0]!
		BICS	R1, R6
		STR	R1, [R4]
		LDR	R1, [R4]
		ORRS	R1, R3
		STR	R1, [R4]

loc_5C16:				@ CODE XREF: sub_5B30+D2j
		LDR	R1, [R4,#4]
		BICS	R1, R6
		STR	R1, [R4,#4]
		LDR	R1, [R4,#4]
		ORRS	R1, R0
		STR	R1, [R4,#4]
		MOV	R0, R12
		POP.W	{R4-R12,PC}
@ End of function sub_5B30

@ ---------------------------------------------------------------------------
dword_5C28:	.long 0x40058000	@ DATA XREF: sub_5B30+Cr
off_5C2C:	.long CPUClock		@ DATA XREF: sub_5B30+2Er

@ =============== S U B	R O U T	I N E =======================================


sub_5C30:				@ CODE XREF: InitPWM+22p InitPWM+34p
		LDR.W	R2, [R0,#0xD8]!
		ORRS	R2, R1
		STR	R2, [R0]
		BX	LR
@ End of function sub_5C30


@ =============== S U B	R O U T	I N E =======================================


sub_5C3A:				@ CODE XREF: InitPWM+2Cp InitPWM+3Ep
		LDR.W	R2, [R0,#0xE0]!
		MOV.W	R3, #0x100
		LSLS	R3, R1
		ORRS	R2, R3
		STR	R2, [R0]
		BX	LR
@ End of function sub_5C3A

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


InitPWM:				@ CODE XREF: InitHardware+32p
		PUSH	{R4-R6,LR}
		LDR	R5, dword_5CB0
		LDR	R4, dword_5CB4
		MOVS	R3, #0
		MOV	R2, R5
		MOV	R1, R3
		MOV	R0, R4
		BL	sub_5B30
		MOVS	R3, #0
		MOV	R2, R5
		MOVS	R1, #2
		MOV	R0, R4
		BL	sub_5B30
		MOVS	R1, #1
		MOV	R0, R4
		BL	sub_5C30
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R4
		BL	sub_5C3A
		MOVS	R1, #4
		MOV	R0, R4
		BL	sub_5C30
		MOVS	R2, #0
		MOVS	R1, #2
		MOV	R0, R4
		BL	sub_5C3A
		MOVS	R1, #1
		MOV	R0, R4
		BL	sub_5D0C
		MOVS	R1, #4
		MOV	R0, R4
		BL	sub_5D0C
		LDR	R2, off_5CB8
		MOVS	R1, #0
		STRH	R1, [R2]
		STR	R1, [R4,#0x58]
		LDR	R0, off_5CBC
		STRH	R1, [R0]
		STR	R1, [R4,#0x50]
		POP	{R4-R6,PC}
@ End of function InitPWM

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_5CB0:	.long 150000		@ DATA XREF: InitPWM+2r
dword_5CB4:	.long 0x40058000	@ DATA XREF: InitPWM+4r
off_5CB8:	.long BoostDuty		@ DATA XREF: InitPWM+52r
off_5CBC:	.long BuckDuty		@ DATA XREF: InitPWM+5Ar

@ =============== S U B	R O U T	I N E =======================================


InitGPIO_PWM:				@ CODE XREF: InitGPIO+14p InitGPIO+1Cp ...
		LDR	R3, dword_5D08	@ PC_MODE
		MOV.W	R2, #0x40000000
		CBZ	R0, loc_5CE0
		CMP	R0, #2
		BNE	locret_5CDE
		LDR	R0, [R2,#0x40]
		BIC.W	R0, R0,	#0xF00
		STR	R0, [R2,#0x40]
		LDR	R0, [R2,#0x40]
		CBZ	R1, loc_5CFA
		ORR.W	R0, R0,	#0x600	@ PC2 =	PWM0 output/capture input

loc_5CDC:				@ CODE XREF: InitGPIO_PWM+30j
		STR	R0, [R2,#0x40]

locret_5CDE:				@ CODE XREF: InitGPIO_PWM+Aj
		BX	LR
@ ---------------------------------------------------------------------------

loc_5CE0:				@ CODE XREF: InitGPIO_PWM+6j
		LDR	R0, [R2,#0x40]
		BIC.W	R0, R0,	#0xF
		STR	R0, [R2,#0x40]
		LDR	R0, [R2,#0x40]
		CBZ	R1, loc_5CF2
		ORR.W	R0, R0,	#6	@ PC0 =	PWM0 output/capture input
		B	loc_5CDC
@ ---------------------------------------------------------------------------

loc_5CF2:				@ CODE XREF: InitGPIO_PWM+2Aj
		STR	R0, [R2,#0x40]
		MOVS	R2, #1
		MOV	R1, R2		@ PC0 =	push-pull output
		B	loc_5D00
@ ---------------------------------------------------------------------------

loc_5CFA:				@ CODE XREF: InitGPIO_PWM+16j
		STR	R0, [R2,#0x40]
		MOVS	R2, #1
		MOVS	R1, #4		@ PC2 =	push-pull output

loc_5D00:				@ CODE XREF: InitGPIO_PWM+38j
		MOV	R0, R3
		B.W	SetGPIOMode
@ End of function InitGPIO_PWM

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_5D08:	.long 0x40004080	@ DATA XREF: InitGPIO_PWMr

@ =============== S U B	R O U T	I N E =======================================


sub_5D0C:				@ CODE XREF: InitPWM+46p InitPWM+4Ep
		LDR	R2, [R0,#0x20]
		ORRS	R2, R1
		STR	R2, [R0,#0x20]
		BX	LR
@ End of function sub_5D0C


@ =============== S U B	R O U T	I N E =======================================


FlushAndSleep:				@ CODE XREF: sub_4F0C+5Ep
		LDR	R0, dword_5D20

loc_5D16:				@ CODE XREF: FlushAndSleep+6j
		LDR	R1, [R0,#0x18]
		LSLS	R1, R1,	#3	@ UART0	TXEMPTYF
		BPL	loc_5D16
		B.W	glb_FCC
@ End of function FlushAndSleep

@ ---------------------------------------------------------------------------
dword_5D20:	.long 0x40070000	@ DATA XREF: FlushAndSleepr

@ =============== S U B	R O U T	I N E =======================================


DevicesOnOff:				@ CODE XREF: sub_4F0C+18p sub_4F0C+82p
		PUSH.W	{R4-R12,LR}
		LDR	R5, dword_5F54
		LDR.W	R8, dword_5F58
		LDR	R4, dword_5F54
		ADDS	R5, #0x20
		LDR	R7, dword_5F58
		LDR.W	R10, dword_5F5C
		LDR.W	R9, dword_5F60
		LDR	R6, dword_5F64
		MOV.W	R11, #0
		ADD.W	R8, R8,	#0x20
		CMP	R0, #0
		BEQ	loc_5E48
		LDR	R0, [R4]
		BIC.W	R0, R0,	#0x20000000
		STR	R0, [R4]	@ TMR0_CTL.INTEN = 0
		LDR	R0, [R5]
		BIC.W	R0, R0,	#0x20000000
		STR	R0, [R5]	@ TMR1_CTL.INTEN = 0
		LDR	R0, [R7]
		BIC.W	R0, R0,	#0x20000000
		STR	R0, [R7]	@ TMR2_CTL.INTEN = 0
		LDR.W	R1, [R8]
		BIC.W	R1, R1,	#0x20000000
		STR.W	R1, [R8]	@ TMR3_CTL.INTEN = 0
		LDR	R0, dword_5F68
		BL	ADCDisable
		MOVS	R1, #0
		MOVS	R0, #1
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #2
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #0xE
		BL	SetADCState
		LDR	R0, dword_5F5C
		MOV	R4, R11
		ADDS	R0, #0x28
		STR.W	R11, [R0]
		SUBS	R0, R0,	#4
		STR.W	R11, [R0]
		MOVS	R1, #0
		MOV	R0, R1
		BL	InitGPIO_PWM
		LDR	R0, dword_5F5C
		ADDS	R0, #0x30
		STR	R4, [R0]
		SUBS	R0, R0,	#4
		STR	R4, [R0]
		MOVS	R1, #0
		MOVS	R0, #2
		BL	InitGPIO_PWM
		STR.W	R4, [R10]
		MOVS	R1, #0
		MOV	R0, R9
		BL	sub_2350
		LDR	R0, dword_5F5C
		ADDS	R0, #0x64
		STR	R4, [R0]
		MOVS	R2, #1
		MOV	R1, R2
		MOV	R0, R9
		BL	SetGPIOMode
		MOVS	R1, #7
		MOV	R0, R9
		BL	sub_2350
		LDR	R0, dword_5F5C
		ADDS	R0, #0x80
		STR	R4, [R0]
		MOVS	R2, #1
		MOVS	R1, #0x80
		MOV	R0, R9
		BL	SetGPIOMode
		LSLS	R5, R5,	#0x19
		LDR	R0, [R5,#0x54]
		LDR	R1, dword_5F6C
		ANDS	R0, R1
		STR	R0, [R5,#0x54]
		LDR	R0, [R5,#0x54]
		STR	R0, [R5,#0x54]
		LDR	R0, dword_5F5C
		ADDS	R0, #0xD0
		STR	R4, [R0]
		LDR	R7, dword_5F60
		ASRS	R1, R0,	#0x13
		ADDS	R7, #0x40
		MOVS	R2, #1
		MOV	R0, R7
		BL	SetGPIOMode
		LDR	R0, dword_5F5C
		ADDS	R0, #0xD4
		STR	R4, [R0]
		ASRS	R1, R0,	#0x12
		MOVS	R2, #1
		MOV	R0, R7
		BL	SetGPIOMode
		LDR	R0, dword_5F5C
		ADDS	R0, #0xD8
		STR	R4, [R0]
		MOVS	R2, #1
		MOVS	R1, #8
		MOV	R0, R7
		BL	SetGPIOMode
		LDR	R0, dword_5F5C
		ADDS	R0, #0xCC
		STR	R4, [R0]
		MOV.W	R8, #0x10001
		MOV	R2, R8
		MOVS	R1, #0
		MOV	R0, R7
		BL	SetGPIOTrigInt
		MOV	R2, R8
		MOVS	R1, #2
		MOV	R0, R9
		B	loc_5E4A
@ ---------------------------------------------------------------------------

loc_5E48:				@ CODE XREF: DevicesOnOff+24j
		B	loc_5E88
@ ---------------------------------------------------------------------------

loc_5E4A:				@ CODE XREF: DevicesOnOff+122j
		BL	SetGPIOTrigInt
		MOV	R2, R8
		MOVS	R1, #3
		MOV	R0, R9
		BL	SetGPIOTrigInt
		BL	UnlockRegisters4
		LDR	R0, [R5,#0x2C]
		BIC.W	R0, R0,	#0x100
		STR	R0, [R5,#0x2C]
		LDR	R0, [R5,#0x1C]
		BIC.W	R0, R0,	#2
		STR	R0, [R5,#0x1C]
		BL	sub_64FC
		STR	R4, [R5,#0x28]
		STR.W	R4, [R5,#0x100]
		MOV.W	R0, #0x108
		STR	R0, [R6,#4]
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x108
		STR	R0, [R6]

locret_5E84:				@ CODE XREF: DevicesOnOff+22Ej
		POP.W	{R4-R12,PC}
@ ---------------------------------------------------------------------------

loc_5E88:				@ CODE XREF: DevicesOnOff:loc_5E48j
		MOV.W	R0, #0x108
		STR	R0, [R6,#4]
		BL	UnlockRegisters4
		MOV.W	R0, #0x100
		LSLS	R6, R0,	#0x16
		STR	R0, [R6,#0x2C]
		LDR	R0, [R6,#0x1C]
		ORR.W	R0, R0,	#2
		STR	R0, [R6,#0x1C]
		MOVS	R0, #3
		STR	R0, [R6,#0x28]
		MOVS	R1, #0
		MOVS	R0, #8
		BL	SetupBOD
		STR.W	R11, [R6,#0x100]
		LDR	R0, dword_5F60
		MOVS	R1, #0
		ADDS	R0, #0x40
		BL	sub_2350
		MOVS	R1, #2
		MOV	R0, R9
		BL	sub_2350
		MOVS	R1, #3
		MOV	R0, R9
		BL	sub_2350
		LDR	R0, [R6,#0x54]
		LDR	R1, dword_5F6C
		ANDS	R0, R1
		STR	R0, [R6,#0x54]
		LDR	R0, [R6,#0x54]
		LDR	R1, dword_5F70
		ORRS	R0, R1
		STR	R0, [R6,#0x54]
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R9
		BL	SetGPIOMode
		MOVS	R2, #1
		MOVS	R1, #0
		MOV	R0, R9
		BL	SetGPIOTrigInt
		MOVS	R2, #0
		MOVS	R1, #0x80
		MOV	R0, R9
		BL	SetGPIOMode
		ASRS	R2, R6,	#0xE
		MOVS	R1, #7
		MOV	R0, R9
		BL	SetGPIOTrigInt
		MOV.W	R0, #0x40004000
		LDR.W	R1, [R0,#0xD4]!
		ORR.W	R1, R1,	#0x80
		STR	R1, [R0]
		MOVS	R1, #1
		STR.W	R1, [R10]
		MOV	R0, R1
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #2
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #0xE
		BL	SetADCState
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R4]
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R5]
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R7]
		LDR.W	R1, [R8]
		ORR.W	R1, R1,	#0x20000000
		STR.W	R1, [R8]
		B	locret_5E84
@ End of function DevicesOnOff

@ ---------------------------------------------------------------------------
dword_5F54:	.long 0x40050000	@ DATA XREF: DevicesOnOff+4r
					@ DevicesOnOff+Ar
dword_5F58:	.long 0x40051000	@ DATA XREF: DevicesOnOff+6r
					@ DevicesOnOff+Er
dword_5F5C:	.long 0x4000485C	@ DATA XREF: DevicesOnOff+10r
					@ DevicesOnOff+68r ...
dword_5F60:	.long 0x400040C0	@ DATA XREF: DevicesOnOff+14r
					@ DevicesOnOff+DAr ...
dword_5F64:	.long 0x400C0000	@ DATA XREF: DevicesOnOff+18r
dword_5F68:	.long 0x40043000	@ DATA XREF: DevicesOnOff+4Ar
dword_5F6C:	.long 0xFF000FFF	@ DATA XREF: DevicesOnOff+CAr
					@ DevicesOnOff+1AAr
dword_5F70:	.long 0x222000		@ DATA XREF: DevicesOnOff+1B2r

@ =============== S U B	R O U T	I N E =======================================


sub_5F74:				@ CODE XREF: sub_2788+42p
		PUSH	{R4-R6,LR}
		MOV	R6, R1
		MOV	R2, R1
		MOV	R1, R0
		LDR	R0, off_5FFC
		BL	sub_844C	@ Copy R2 bytes	from R1	to R0
		LDR	R4, off_5FFC
		MOV.W	R5, #-1
		LDRB	R1, [R4,#1]
		CMP	R1, #0x12
		BHI	loc_5FC8
		CMP	R1, R6
		BHI	loc_5FC8
		LDR.W	R0, [R4,#0xA]
		LDR	R2, dword_6000
		CMP	R0, R2
		BNE	loc_5FC8
		MOV	R0, R4
		BL	Checksum	@ R0 = Sum of the R1 bytes at R0
		LDR.W	R1, [R4,#0xE]
		CMP	R1, R0
		BNE	loc_5FC8
		LDRB	R0, [R4]
		CMP	R0, #0x7C	@ Reset	Dataflash
		BEQ	loc_5FF2
		BGT	loc_5FC0
		CMP	R0, #0x35	@ Get info
		BEQ	loc_5FCC
		CMP	R0, #0x3C	@ Update LDROM
		BEQ	loc_5FE2
		CMP	R0, #0x53	@ Write	Dataflash
		BNE	loc_5FC8
		B	loc_5FD4
@ ---------------------------------------------------------------------------

loc_5FC0:				@ CODE XREF: sub_5F74+3Cj
		CMP	R0, #0xA5	@ Set boot logo
		BEQ	loc_5FDC
		CMP	R0, #0xB4	@ Reset	system
		BEQ	loc_5FEA

loc_5FC8:				@ CODE XREF: sub_5F74+18j sub_5F74+1Cj ...
		MOV	R0, R5
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_5FCC:				@ CODE XREF: sub_5F74+40j
		LDR	R0, off_5FFC
		BL	sub_25B8
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FD4:				@ CODE XREF: sub_5F74+4Aj
		LDR	R0, off_5FFC
		BL	sub_26D8
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FDC:				@ CODE XREF: sub_5F74+4Ej
		LDR	R0, off_5FFC
		BL	sub_2678

loc_5FE2:				@ CODE XREF: sub_5F74+44j
		LDR	R0, off_5FFC
		BL	sub_272C
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FEA:				@ CODE XREF: sub_5F74+52j
		LDR	R0, off_5FFC
		BL	sub_2C38
		B	loc_5FF8
@ ---------------------------------------------------------------------------

loc_5FF2:				@ CODE XREF: sub_5F74+3Aj
		LDR	R0, off_5FFC
		BL	sub_2C00

loc_5FF8:				@ CODE XREF: sub_5F74+5Ej sub_5F74+66j ...
		MOVS	R0, #0
		POP	{R4-R6,PC}
@ End of function sub_5F74

@ ---------------------------------------------------------------------------
off_5FFC:	.long byte_20001A7C	@ DATA XREF: sub_5F74+8r sub_5F74+Er ...
dword_6000:	.long 0x43444948	@ DATA XREF: sub_5F74+22r

@ =============== S U B	R O U T	I N E =======================================


Overtemp:				@ CODE XREF: EventHandler+200p
					@ GotoMain+913Ep
		PUSH	{R4,LR}
		BL	StopFire
		LDR	R0, off_602C
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x20000
		STR	R1, [R0]
		LDR	R0, off_6030
		MOVS	R1, #29
		STRB	R1, [R0,#1]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		MOVS	R1, #2
		STRB	R1, [R0]
		LDR	R0, off_6034
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]
		POP	{R4,PC}
@ End of function Overtemp

@ ---------------------------------------------------------------------------
		.balign 4,0
off_602C:	.long dword_20000064	@ DATA XREF: Overtemp+6r
off_6030:	.long ScreenDuration	@ DATA XREF: Overtemp+10r
off_6034:	.long KeyPressTime	@ DATA XREF: Overtemp+1Ar

@ =============== S U B	R O U T	I N E =======================================


sub_6038:				@ CODE XREF: EventHandler+216p
					@ GotoMain:loc_930Ep
		PUSH.W	{R4-R8,LR}
		MOVS	R1, #1
		MOV	R0, R1
		BL	SetADCState
		MOVS	R1, #1
		MOVS	R0, #2
		BL	SetADCState
		MOVS	R0, #2
		BL	WaitOnTMR2	@ Waits	R0 ms
		LDR	R4, off_61D8
		MOVS	R7, #100
		LDR	R6, off_61DC
		LDRB	R0, [R4]
		LDR	R5, off_61E0
		CMP	R0, #8
		BEQ	loc_6068
		LDRH	R1, [R5]
		LSLS	R1, R1,	#23
		BMI	loc_606E
		B	loc_6084
@ ---------------------------------------------------------------------------

loc_6068:				@ CODE XREF: sub_6038+26j
		LDRH	R0, [R5]
		LSLS	R0, R0,	#23
		BPL	loc_6076

loc_606E:				@ CODE XREF: sub_6038+2Cj
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x4000000
		STR	R0, [R5]

loc_6076:				@ CODE XREF: sub_6038+34j
		MOVS	R0, #50
		BL	GetVoltsForPower
		STR	R0, [R6]
		CBNZ	R0, loc_6094

loc_6080:				@ CODE XREF: sub_6038+52j
		STR	R7, [R6]
		B	loc_60A0
@ ---------------------------------------------------------------------------

loc_6084:				@ CODE XREF: sub_6038+2Ej
		CMP	R0, #9
		BEQ	loc_6122
		CMP	R0, #10
		BNE	loc_6080
		MOVS	R0, #150

loc_608E:				@ CODE XREF: sub_6038+ECj
		BL	GetVoltsForPower
		STR	R0, [R6]

loc_6094:				@ CODE XREF: sub_6038+46j
		MOV	R1, R0
		MOV.W	R0, #600
		CMP	R1, R0
		BLS	loc_60A0
		STR	R0, [R6]

loc_60A0:				@ CODE XREF: sub_6038+4Aj sub_6038+64j
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x2000
		STR	R0, [R5]
		BL	ReachTargetVoltage
		MOVS	R0, #2
		BL	WaitOnTMR2	@ Waits	R0 ms
		BL	ReadAtoTemp
		LDR	R0, [R5]
		MOV.W	R7, #0
		BIC.W	R0, R0,	#0x2000
		STR	R0, [R5]
		LSLS	R0, R0,	#0x17
		BMI	loc_60EE
		LDR	R0, dword_61E4
		STR	R7, [R0]
		LDR	R0, dword_61E4
		ADDS	R0, #8
		STR	R7, [R0]
		MOVS	R1, #0
		MOVS	R0, #1
		BL	SetADCState
		MOVS	R1, #0
		MOVS	R0, #2
		BL	SetADCState
		LDR	R0, off_61E8
		STRH	R7, [R0]
		LDR	R0, dword_61EC
		STR	R7, [R0,#0x58]
		LDR	R1, off_61F0
		STRH	R7, [R1]
		STR	R7, [R0,#0x50]

loc_60EE:				@ CODE XREF: sub_6038+8Cj
		LDR.W	R12, off_61F4
		LDR	R1, off_61F8
		MOVS	R6, #1
		LDRB.W	R0, [R12]
		CBZ	R0, loc_612A
		CMP	R0, #1
		BEQ	loc_6126
		CMP	R0, #2
		BEQ	loc_612E
		CMP	R0, #3
		BEQ	loc_612A
		STRB	R7, [R1]

loc_610A:				@ CODE XREF: sub_6038+F4j sub_6038+FAj
		LDRB	R2, [R4]
		MOV	R3, R4
		CMP	R2, #0xC
		BCS	loc_6116
		ADDS	R2, R2,	#1
		STRB	R2, [R3]

loc_6116:				@ CODE XREF: sub_6038+D8j
		MOV	R4, R12
		CMP	R0, #4
		BEQ	loc_6138
		STRH	R7, [R4,#2]
		CBZ	R0, loc_6134
		B	loc_614A
@ ---------------------------------------------------------------------------

loc_6122:				@ CODE XREF: sub_6038+4Ej
		MOVS	R0, #100
		B	loc_608E
@ ---------------------------------------------------------------------------

loc_6126:				@ CODE XREF: sub_6038+C6j
		MOVS	R2, #2
		B	loc_6130
@ ---------------------------------------------------------------------------

loc_612A:				@ CODE XREF: sub_6038+C2j sub_6038+CEj
		STRB	R6, [R1]
		B	loc_610A
@ ---------------------------------------------------------------------------

loc_612E:				@ CODE XREF: sub_6038+CAj
		MOVS	R2, #3

loc_6130:				@ CODE XREF: sub_6038+F0j
		STRB	R2, [R1]
		B	loc_610A
@ ---------------------------------------------------------------------------

loc_6134:				@ CODE XREF: sub_6038+E6j
		STRB	R7, [R3]
		B	loc_614A
@ ---------------------------------------------------------------------------

loc_6138:				@ CODE XREF: sub_6038+E2j
		LDRB	R0, [R3]
		CMP	R0, #0xB
		BNE	locret_61D4
		LDR	R0, off_61FC
		MOVS	R2, #10
		LDR	R0, [R0]
		UDIV.W	R0, R0,	R2
		STRH	R0, [R4,#2]

loc_614A:				@ CODE XREF: sub_6038+E8j sub_6038+FEj
		LDR.W	LR, off_6200
		LDRB	R1, [R1]
		LDRB.W	R2, [LR]
		CMP	R1, R2
		BNE	loc_6178
		LDRH	R0, [R4,#2]
		MOVS	R3, #20
		UDIV.W	R7, R0,	R3
		LDRH.W	R12, [R4,#4]
		ADD	R7, R0
		CMP	R7, R12
		BCC	loc_6178
		UDIV.W	R3, R0,	R3
		SUBS	R0, R0,	R3
		CMP	R0, R12
		BGT	loc_6178
		STRH.W	R12, [R4,#2]

loc_6178:				@ CODE XREF: sub_6038+11Ej
					@ sub_6038+130j ...
		LDRH	R0, [R4,#2]
		LDRH	R3, [R4,#4]
		CMP	R0, R3
		BNE	loc_6184
		CMP	R1, R2
		BEQ	loc_61A0

loc_6184:				@ CODE XREF: sub_6038+146j
		CBNZ	R3, loc_6188
		STRB	R6, [R4,#1]

loc_6188:				@ CODE XREF: sub_6038:loc_6184j
		STRH	R0, [R4,#4]
		STRB.W	R1, [LR]
		BL	sub_90DC
		LDR	R0, [R5]
		MOVS	R1, #0x1E
		ORR.W	R0, R0,	#0x20000
		STR	R0, [R5]
		LDR	R0, off_6204
		STRB	R1, [R0]

loc_61A0:				@ CODE XREF: sub_6038+14Aj
		LDRB	R0, [R4,#1]
		CMP	R0, #0
		BEQ	locret_61D4
		CMP	R0, #2
		BNE	loc_61AC
		STRB	R6, [R4,#1]

loc_61AC:				@ CODE XREF: sub_6038+170j
		LDR	R1, off_6208
		LDRH.N	R0, [R1,#(dfResistance-dfData)]
		CBNZ	R0, loc_61BE
		LDRH	R0, [R4,#2]
		CBZ	R0, loc_61BE
		STRH.N	R0, [R1,#(dfResistance-dfData)]
		LDR	R1, off_620C
		MOVS	R0, #50
		STRB	R0, [R1]

loc_61BE:				@ CODE XREF: sub_6038+178j
					@ sub_6038+17Cj
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x18800000
		ORR.W	R0, R0,	#0x80000000
		STR	R0, [R5]
		LDR	R0, off_6210
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]

locret_61D4:				@ CODE XREF: sub_6038+104j
					@ sub_6038+16Cj
		POP.W	{R4-R8,PC}
@ End of function sub_6038

@ ---------------------------------------------------------------------------
off_61D8:	.long byte_2000003E	@ DATA XREF: sub_6038+1Ar
off_61DC:	.long TargetVolts	@ DATA XREF: sub_6038+1Er
off_61E0:	.long dword_20000064	@ DATA XREF: sub_6038+22r
dword_61E4:	.long 0x40004884	@ DATA XREF: sub_6038+8Er sub_6038+92r
off_61E8:	.long BoostDuty		@ DATA XREF: sub_6038+A8r
dword_61EC:	.long 0x40058000	@ DATA XREF: sub_6038+ACr
off_61F0:	.long BuckDuty		@ DATA XREF: sub_6038+B0r
off_61F4:	.long AtoError		@ DATA XREF: sub_6038:loc_60EEr
off_61F8:	.long byte_2000003D	@ DATA XREF: sub_6038+BAr
off_61FC:	.long AtoRezMilli	@ DATA XREF: sub_6038+106r
off_6200:	.long byte_20000082	@ DATA XREF: sub_6038:loc_614Ar
off_6204:	.long ScreenDuration	@ DATA XREF: sub_6038+164r
off_6208:	.long dfData		@ DATA XREF: sub_6038:loc_61ACr
off_620C:	.long UpdateDFTimer	@ DATA XREF: sub_6038+180r
off_6210:	.long dword_20000068	@ DATA XREF: sub_6038+192r

@ =============== S U B	R O U T	I N E =======================================


sub_6214:				@ CODE XREF: InitGPIO_SPI0+32j
		LDR	R3, [R0,#8]
		ORRS	R1, R2
		BIC.W	R3, R3,	#0xD
		ORRS	R3, R1
		ORR.W	R1, R3,	#8
		STR	R1, [R0,#8]
		BX	LR
@ End of function sub_6214

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


InitGPIO_SPI0:				@ CODE XREF: InitHardware+2Ap
		PUSH	{R3-R5,LR}
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x54]
		LDR	R2, dword_6260
		ANDS	R1, R2
		STR	R1, [R0,#0x54]
		LDR	R1, [R0,#0x54]
		LDR	R2, dword_6264
		ORRS	R1, R2
		STR	R1, [R0,#0x54]	@ PE11-PE13 = SPI0 MOSI0/SS/CLK
		LDR	R0, dword_6268
		LDR	R4, dword_626C
		STR	R0, [SP]
		MOVS	R3, #8
		MOVS	R2, #4
		MOVS	R1, #0
		MOV	R0, R4
		BL	sub_6270
		MOV	R0, R4
		POP.W	{R3-R5,LR}
		MOVS	R2, #0
		MOVS	R1, #1
		B.W	sub_6214
@ End of function InitGPIO_SPI0

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
dword_6260:	.long 0xFF000FFF	@ DATA XREF: InitGPIO_SPI0+8r
dword_6264:	.long 0x222000		@ DATA XREF: InitGPIO_SPI0+10r
dword_6268:	.long 4000000		@ DATA XREF: InitGPIO_SPI0+16r
dword_626C:	.long 0x40060000	@ DATA XREF: InitGPIO_SPI0+18r

@ =============== S U B	R O U T	I N E =======================================


sub_6270:				@ CODE XREF: InitGPIO_SPI0+24p
		PUSH.W	{R4-R10,LR}
		LDR.W	R8, dword_6430
		LDR	R6, [SP,#0x20]
		MOV	R7, R3
		MOV	R10, R2
		MOV	R9, R1
		MOV	R4, R0
		CMP	R0, R8
		BEQ	loc_628C
		LDR	R0, dword_6434
		CMP	R4, R0
		BNE	loc_6294

loc_628C:				@ CODE XREF: sub_6270+14j
		LDR	R0, [R4,#0x60]
		BIC.W	R0, R0,	#1
		STR	R0, [R4,#0x60]

loc_6294:				@ CODE XREF: sub_6270+1Aj
		CMP	R7, #0x20
		BNE	loc_629A
		MOVS	R7, #0

loc_629A:				@ CODE XREF: sub_6270+26j
		BL	GetCPUClock
		MOV	R5, R0
		MOVS	R2, #0
		LDR	R3, dword_6438
		MOV.W	R0, #0x40000000
		CMP.W	R9, #0
		BEQ	loc_62D2
		STR	R2, [R4,#8]
		ORR.W	R1, R9,	R7,LSL#8
		ORR.W	R1, R1,	R10
		ORR.W	R1, R1,	#1
		STR	R1, [R4]
		STR	R2, [R4,#4]
		CMP	R4, R3
		BNE	loc_63A4
		LDR.W	R1, [R0,#0x218]
		BIC.W	R1, R1,	#0xC
		ORR.W	R1, R1,	#8
		B	loc_641E
@ ---------------------------------------------------------------------------

loc_62D2:				@ CODE XREF: sub_6270+3Cj
		MOV	R9, R2
		STR	R2, [R4,#8]
		ORR.W	R1, R2,	R7,LSL#8
		ORR.W	R1, R1,	R10
		ORR.W	R1, R1,	#1
		STR	R1, [R4]
		CMP	R6, R5
		BCC	loc_6318
		CMP	R4, R3
		BNE	loc_62FA
		LDR.W	R1, [R0,#0x218]
		BIC.W	R1, R1,	#0xC
		ORR.W	R1, R1,	#8
		B	loc_6314
@ ---------------------------------------------------------------------------

loc_62FA:				@ CODE XREF: sub_6270+7Aj
		LDR.W	R1, [R0,#0x218]
		CMP	R4, R8
		BNE	loc_630C
		BIC.W	R1, R1,	#0x30
		ORR.W	R1, R1,	#0x20
		B	loc_6314
@ ---------------------------------------------------------------------------

loc_630C:				@ CODE XREF: sub_6270+90j
		BIC.W	R1, R1,	#0xC0
		ORR.W	R1, R1,	#0x80

loc_6314:				@ CODE XREF: sub_6270+88j sub_6270+9Aj
		STR.W	R1, [R0,#0x218]

loc_6318:				@ CODE XREF: sub_6270+76j
		LDR	R1, dword_643C
		LDR	R2, dword_6440
		CMP	R4, R3
		BNE	loc_6340
		LDR.W	R3, [R0,#0x218]
		TST.W	R3, #0xC
		BEQ	loc_63A6
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#2, #2
		CMP	R1, #1
		BEQ	loc_63AA
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#2, #2
		B	loc_638E
@ ---------------------------------------------------------------------------

loc_6340:				@ CODE XREF: sub_6270+AEj
		LDR.W	R3, [R0,#0x218]
		CMP	R4, R8
		BNE	loc_6374
		TST.W	R3, #0x30
		BEQ	loc_63A6
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#4, #2
		CMP	R1, #1
		BEQ	loc_63AA
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#4, #2
		CMP	R1, #2
		BNE	loc_6392
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#0x18

loc_636C:				@ CODE XREF: sub_6270+146j
		CMP	R0, #0
		BGE	loc_63B8
		LSRS	R0, R5,	#1
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_6374:				@ CODE XREF: sub_6270+D6j
		TST.W	R3, #0xC0
		BEQ	loc_63A6
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#6, #2
		CMP	R1, #1
		BEQ	loc_63AA
		LDR.W	R1, [R0,#0x218]
		UBFX.W	R1, R1,	#6, #2

loc_638E:				@ CODE XREF: sub_6270+CEj
		CMP	R1, #2
		BEQ	loc_63B0

loc_6392:				@ CODE XREF: sub_6270+F4j
		MOV	R0, R2

loc_6394:				@ CODE XREF: sub_6270+102j
					@ sub_6270+138j ...
		CMP	R6, R5
		BCS	loc_639C
		CMP	R6, R0
		BCC	loc_63BC

loc_639C:				@ CODE XREF: sub_6270+126j
		STR.W	R9, [R4,#4]

locret_63A0:				@ CODE XREF: sub_6270+170j
					@ sub_6270+182j ...
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_63A4:				@ CODE XREF: sub_6270+52j
		B	loc_63F4
@ ---------------------------------------------------------------------------

loc_63A6:				@ CODE XREF: sub_6270+B8j sub_6270+DCj ...
		MOV	R0, R1
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_63AA:				@ CODE XREF: sub_6270+C4j sub_6270+E8j ...
		BL	sub_F1C
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_63B0:				@ CODE XREF: sub_6270+120j
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#0x19
		B	loc_636C
@ ---------------------------------------------------------------------------

loc_63B8:				@ CODE XREF: sub_6270+FEj
		MOV	R0, R5
		B	loc_6394
@ ---------------------------------------------------------------------------

loc_63BC:				@ CODE XREF: sub_6270+12Aj
		CBZ	R6, loc_63D6
		ADD.W	R1, R0,	R0,LSL#2
		LSLS	R1, R1,	#1
		UDIV.W	R1, R1,	R6
		MOVS	R2, #0xA
		ADDS	R1, R1,	#5
		UDIV.W	R1, R1,	R2
		SUBS	R1, R1,	#1
		CMP	R1, #0xFF
		BLS	loc_63E2

loc_63D6:				@ CODE XREF: sub_6270:loc_63BCj
		LDR	R1, [R4,#4]
		ORR.W	R1, R1,	#0xFF
		STR	R1, [R4,#4]
		LSRS	R0, R0,	#8
		B	locret_63A0
@ ---------------------------------------------------------------------------

loc_63E2:				@ CODE XREF: sub_6270+164j
		LDR	R2, [R4,#4]
		BIC.W	R2, R2,	#0xFF
		ORRS	R2, R1
		STR	R2, [R4,#4]
		ADDS	R1, R1,	#1
		UDIV.W	R0, R0,	R1
		B	locret_63A0
@ ---------------------------------------------------------------------------

loc_63F4:				@ CODE XREF: sub_6270:loc_63A4j
		LDR.W	R1, [R0,#0x218]
		CMP	R4, R8
		BNE	loc_6416
		BIC.W	R1, R1,	#0x30
		ORR.W	R1, R1,	#0x20
		STR.W	R1, [R0,#0x218]
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#0x18

loc_640E:				@ CODE XREF: sub_6270+1B8j
		CMP	R0, #0
		BGE	loc_642A
		LSRS	R0, R5,	#1
		B	locret_63A0
@ ---------------------------------------------------------------------------

loc_6416:				@ CODE XREF: sub_6270+18Aj
		BIC.W	R1, R1,	#0xC0
		ORR.W	R1, R1,	#0x80

loc_641E:				@ CODE XREF: sub_6270+60j
		STR.W	R1, [R0,#0x218]
		LDR.W	R0, [R0,#0x210]
		LSLS	R0, R0,	#25
		B	loc_640E
@ ---------------------------------------------------------------------------

loc_642A:				@ CODE XREF: sub_6270+1A0j
		MOV	R0, R5
		B	locret_63A0
@ End of function sub_6270

@ ---------------------------------------------------------------------------
		.byte 0
		.byte 0
dword_6430:	.long 0x40061000	@ DATA XREF: sub_6270+4r
dword_6434:	.long 0x40062000	@ DATA XREF: sub_6270+16r
dword_6438:	.long 0x40060000	@ DATA XREF: sub_6270+32r
dword_643C:	.long 12000000		@ DATA XREF: sub_6270:loc_6318r
dword_6440:	.long 22118400		@ DATA XREF: sub_6270+AAr

@ =============== S U B	R O U T	I N E =======================================


SSD1327_WriteBytes:			@ CODE XREF: DisplayWriteByte+14j
					@ sub_5184+10j

@ FUNCTION CHUNK AT 00000FCC SIZE 0000001C BYTES

		PUSH.W	{R4-R9,LR}
		MOV	R9, R2
		LDR	R2, dword_64C0
		MOV.W	R8, #1
		CMP	R0, #0x40
		BEQ	loc_6460
		MOVS	R3, #0
		STR	R3, [R2]

loc_6458:				@ CODE XREF: SSD1327_WriteBytes+20j
		MOVS	R6, #0
		LDR.W	R12, dword_64C4
		B	loc_647E
@ ---------------------------------------------------------------------------

loc_6460:				@ CODE XREF: SSD1327_WriteBytes+Ej
		STR.W	R8, [R2]
		B	loc_6458
@ ---------------------------------------------------------------------------

loc_6466:				@ CODE XREF: SSD1327_WriteBytes+3Cj
		CMP	R0, #0x40
		BEQ	loc_6486
		LDRB	R2, [R1]
		STR.W	R2, [R12,#0x20]

loc_6470:				@ CODE XREF: SSD1327_WriteBytes+32j
		LDR.W	R2, [R12,#0x14]
		LSLS	R2, R2,	#0x1F
		BNE	loc_6470

loc_6478:				@ CODE XREF: SSD1327_WriteBytes+7Aj
		ADDS	R6, R6,	#1
		UXTH	R6, R6
		ADDS	R1, R1,	#1

loc_647E:				@ CODE XREF: SSD1327_WriteBytes+1Aj
		CMP	R6, R9
		BCC	loc_6466
		POP.W	{R4-R9,PC}
@ ---------------------------------------------------------------------------

loc_6486:				@ CODE XREF: SSD1327_WriteBytes+24j
		MOVS	R3, #0

loc_6488:				@ CODE XREF: SSD1327_WriteBytes+78j
		LSLS	R4, R3,	#0x19
		LSRS	R4, R4,	#0x18
		RSB.W	R4, R4,	#7
		LSL.W	R4, R8,	R4
		UXTB	R4, R4
		LDRB	R5, [R1]
		MOVS	R2, #0
		LSRS	R7, R4,	#1
		TST	R5, R4
		BEQ	loc_64A2
		MOVS	R2, #0xF

loc_64A2:				@ CODE XREF: SSD1327_WriteBytes+5Aj
		TST	R5, R7
		BEQ	loc_64AA
		ORR.W	R2, R2,	#0xF0

loc_64AA:				@ CODE XREF: SSD1327_WriteBytes+60j
		STR.W	R2, [R12,#0x20]

loc_64AE:				@ CODE XREF: SSD1327_WriteBytes+70j
		LDR.W	R2, [R12,#0x14]
		LSLS	R2, R2,	#0x1F
		BNE	loc_64AE
		ADDS	R3, R3,	#1
		UXTB	R3, R3
		CMP	R3, #4
		BCC	loc_6488
		B	loc_6478
@ End of function SSD1327_WriteBytes

@ ---------------------------------------------------------------------------
dword_64C0:	.long 0x40004928	@ DATA XREF: SSD1327_WriteBytes+6r
dword_64C4:	.long 0x40060000	@ DATA XREF: SSD1327_WriteBytes+16r

@ =============== S U B	R O U T	I N E =======================================


SSD1306_WriteBytes:			@ CODE XREF: DisplayWriteByte:loc_5178j
					@ sub_5184+18j
		PUSH	{R4,LR}
		LDR	R3, dword_64F4
		CMP	R0, #0x40
		BEQ	loc_64DA
		MOVS	R0, #0

loc_64D2:				@ CODE XREF: SSD1306_WriteBytes+14j
		STR	R0, [R3]
		MOVS	R0, #0
		LDR	R3, dword_64F8
		B	loc_64EE
@ ---------------------------------------------------------------------------

loc_64DA:				@ CODE XREF: SSD1306_WriteBytes+6j
		MOVS	R0, #1
		B	loc_64D2
@ ---------------------------------------------------------------------------

loc_64DE:				@ CODE XREF: SSD1306_WriteBytes+28j
		LDRB	R4, [R1]
		STR	R4, [R3,#0x20]

loc_64E2:				@ CODE XREF: SSD1306_WriteBytes+1Ej
		LDR	R4, [R3,#0x14]
		LSLS	R4, R4,	#31
		BNE	loc_64E2
		ADDS	R0, R0,	#1
		UXTH	R0, R0
		ADDS	R1, R1,	#1

loc_64EE:				@ CODE XREF: SSD1306_WriteBytes+10j
		CMP	R0, R2
		BCC	loc_64DE
		POP	{R4,PC}
@ End of function SSD1306_WriteBytes

@ ---------------------------------------------------------------------------
dword_64F4:	.long 0x40004928	@ DATA XREF: SSD1306_WriteBytes+2r
dword_64F8:	.long 0x40060000	@ DATA XREF: SSD1306_WriteBytes+Er

@ =============== S U B	R O U T	I N E =======================================


sub_64FC:				@ CODE XREF: DevicesOnOff+148p
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#0x18]
		BIC.W	R1, R1,	#1
		STR	R1, [R0,#0x18]
		BX	LR
@ End of function sub_64FC


@ =============== S U B	R O U T	I N E =======================================


SetupBOD:				@ CODE XREF: DevicesOnOff+186p
					@ InitDevices+108p
		MOV.W	R2, #0x40000000
		LDR	R3, [R2,#0x18]
		ORR.W	R3, R3,	#1
		STR	R3, [R2,#0x18]	@ BODEN	= 1
		LDR	R3, [R2,#0x18]
		BIC.W	R3, R3,	#8
		ORRS	R3, R0
		STR	R3, [R2,#0x18]	@ BODIF	= R0
		LDR	R0, [R2,#0x18]
		BIC.W	R0, R0,	#6
		ORRS	R0, R1
		STR	R0, [R2,#0x18]	@ BODVL	= R1
		BX	LR
@ End of function SetupBOD


@ =============== S U B	R O U T	I N E =======================================


InitDevices:				@ CODE XREF: InitHardware+6p
		PUSH.W	{R4-R10,LR}
		MOVS	R0, #4
		BL	CLK_PWRCTL_SetBits @ 22.1184 MHz internal high speed RC	oscillator (HIRC) Enabled
		MOVS	R0, #0x10	@ HIRCSTB bit
		BL	WaitClockReady
		MOVS	R1, #0		@ HCLKDIV = 0
		MOVS	R0, #7		@ HCLKSEL = HIRC
		BL	HCLKSelDiv
		MOVS	R0, #3
		BL	CLK_PWRCTL_SetBits @ LXT (32.768 kHz external) & LXT (4-20 MHz external) enabled
		MOVS	R0, #3		@ HTXSTB | LTXSTB bits
		BL	WaitClockReady
		LDR	R0, dword_6640	@ FMC_BA
		LDR	R1, [R0,#0x18]	@ FMC_FTCTL
		ORR.W	R1, R1,	#0x70	@ Freq Optim Mode (FOM)	<= 72MHz
		STR	R1, [R0,#0x18]
		LDR	R0, dword_6644
		BL	SetCoreClock
		MOVS	R0, #4		@ PLLSTB
		BL	WaitClockReady
		LDR	R4, dword_6648
		MOV	R0, R4
		BL	DevClkEnable	@ PWM0CKEN = 1
		MOVS	R2, #0
		MOVS	R1, #1
		MOV	R0, R4
		BL	DevClkSelDiv	@ PWM0SEL = PCLK0
		LDR	R0, dword_664C
		BL	PeriphReset	@ PWM0 reset
		LDR	R4, dword_6650
		MOV	R0, R4
		BL	DevClkEnable	@ UART0CKEN = 1
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R4
		BL	DevClkSelDiv	@ UARTDIV = 0 (HXT/1)
		LDR	R4, dword_6654
		MOV	R0, R4
		BL	DevClkEnable	@ USBDCKEN = 1
		MOVS	R2, #0x20
		MOVS	R1, #0
		MOV	R0, R4
		BL	DevClkSelDiv	@ USBDIV = 2 (PLL/3)
		ASRS	R0, R4,	#22
		LSLS	R4, R0,	#22
		STR	R0, [R4,#0x2C]	@ USB LDO33EN =	1
		MOV.W	R5, #0x56000000
		MOV	R0, R5
		BL	DevClkEnable	@ WDTCKEN = 1
		MOVS	R2, #0
		MOVS	R1, #3
		MOV	R0, R5
		BL	DevClkSelDiv	@ WDTSEL = LIRC	10kHz
		LDR	R0, dword_6658
		BL	DevClkEnable	@ SPI0CKEN = 1
		LDR	R6, dword_665C
		MOV	R0, R6
		BL	DevClkEnable	@ EADCCKEN = 1
		MOV.W	R5, #0x70000
		MOV	R2, R5
		MOVS	R1, #0
		MOV	R0, R6
		BL	DevClkSelDiv	@ EADCDIV = 7 (PCLK1/8)
		LDR	R6, dword_6660
		MOV	R0, R6
		BL	DevClkEnable	@ TMR0CKEN = 1
		LDR	R7, dword_6664
		MOV	R0, R7
		BL	DevClkEnable	@ TMR1CKEN = 1
		LDR.W	R8, dword_6668
		MOV	R0, R8
		BL	DevClkEnable	@ TMR2CKEN = 1
		LDR.W	R9, dword_666C
		MOV	R0, R9
		BL	DevClkEnable	@ TMR3CKEN = 1
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R6
		BL	DevClkSelDiv	@ TMR0SEL = HXT
		MOVS	R2, #0
		ASRS	R1, R4,	#17
		MOV	R0, R7
		BL	DevClkSelDiv	@ TMR1SEL = PCLK0
		MOVS	R2, #0
		MOV	R1, R5
		MOV	R0, R8
		BL	DevClkSelDiv	@ TMR2SEL = HIRC
		MOVS	R2, #0
		MOV	R1, R2
		MOV	R0, R9
		BL	DevClkSelDiv	@ TMR3SEL = HXT
		LDR	R0, [R4,#0x1C]
		ORR.W	R0, R0,	#2
		STR	R0, [R4,#0x1C]	@ VBATUGEN = 1
		MOVS	R0, #3
		STR	R0, [R4,#0x28]	@ VREFCTL = 3 (Vref = internal 2.56V)
		MOVS	R1, #0
		MOVS	R0, #8
		BL	SetupBOD	@ Brown-Out Detector at	2.2V
		POP.W	{R4-R10,LR}
		B.W	GetFrequencies
@ End of function InitDevices

@ ---------------------------------------------------------------------------
dword_6640:	.long 0x4000C000	@ DATA XREF: InitDevices+24r
dword_6644:	.long 72000000		@ DATA XREF: InitDevices+2Er
dword_6648:	.long 0xA2000010	@ DATA XREF: InitDevices+3Ar
dword_664C:	.long 0x8000010		@ DATA XREF: InitDevices+4Cr
dword_6650:	.long 0x57803D10	@ DATA XREF: InitDevices+52r
dword_6654:	.long 0x40003C9B	@ DATA XREF: InitDevices+64r
dword_6658:	.long 0x6620000C	@ DATA XREF: InitDevices+90r
dword_665C:	.long 0x4003FE1C	@ DATA XREF: InitDevices+96r
dword_6660:	.long 0x5E800002	@ DATA XREF: InitDevices+ACr
dword_6664:	.long 0x5EC00003	@ DATA XREF: InitDevices+B4r
dword_6668:	.long 0x5F000004	@ DATA XREF: InitDevices+BCr
dword_666C:	.long 0x5F400005	@ DATA XREF: InitDevices+C6r

@ =============== S U B	R O U T	I N E =======================================


ChipOneShotReset:			@ CODE XREF: sub_2C38-1F60p
					@ FMCCheckDFBA:loc_191Ep
		MOV.W	R0, #0x40000000
		LDR	R1, [R0,#8]
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		BX	LR
@ End of function ChipOneShotReset


@ =============== S U B	R O U T	I N E =======================================


PeriphReset:				@ CODE XREF: InitDevices+4Ep
					@ InitUART0+4p
		LSRS	R1, R0,	#24
		ADD.W	R1, R1,	#0x40000000
		LDR	R3, [R1,#8]
		MOVS	R2, #1
		LSLS	R2, R0
		ORRS	R3, R2
		STR	R3, [R1,#8]
		LDR	R0, [R1,#8]
		BICS	R0, R2
		STR	R0, [R1,#8]
		BX	LR
@ End of function PeriphReset


@ =============== S U B	R O U T	I N E =======================================


UnlockRegisters:			@ CODE XREF: InitHardware+2p
					@ sub_2C38:loc_CD4p ...
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_66A0:				@ CODE XREF: UnlockRegisters+1Cj
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_66A0
		POP	{R4,PC}
@ End of function UnlockRegisters


@ =============== S U B	R O U T	I N E =======================================


UnlockRegisters2:			@ CODE XREF: InitDataFlash+4p
					@ UpdateDataFlash+4Ap ...
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_66C0:				@ CODE XREF: UnlockRegisters2+1Cj
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_66C0
		POP	{R4,PC}
@ End of function UnlockRegisters2


@ =============== S U B	R O U T	I N E =======================================


UnlockRegisters3:			@ CODE XREF: sub_2788+124p
					@ sub_2788+1B2p
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#30
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_66E0:				@ CODE XREF: UnlockRegisters3+1Cj
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_66E0
		POP	{R4,PC}
@ End of function UnlockRegisters3


@ =============== S U B	R O U T	I N E =======================================


UnlockRegisters4:			@ CODE XREF: sub_4F0C:loc_4F5Ap
					@ DevicesOnOff+134p ...
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#0x1E
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_6700:				@ CODE XREF: UnlockRegisters4+1Cj
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_6700
		POP	{R4,PC}
@ End of function UnlockRegisters4


@ =============== S U B	R O U T	I N E =======================================


UnlockRegisters5:			@ CODE XREF: DisplayLOGO+32p
					@ DisplayLOGO:loc_5854p
		MOVS	R1, #0x59
		PUSH	{R4,LR}
		LSLS	R0, R1,	#0x1E
		MOVS	R2, #0x16
		MOVS	R3, #0x88

loc_6720:				@ CODE XREF: UnlockRegisters5+1Cj
		STR.W	R1, [R0,#0x100]
		STR.W	R2, [R0,#0x100]
		STR.W	R3, [R0,#0x100]
		LDR.W	R4, [R0,#0x100]
		CMP	R4, #0
		BEQ	loc_6720
		POP	{R4,PC}
@ End of function UnlockRegisters5

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


PutCharUART0:				@ CODE XREF: PutChar+4p
		LDR	R1, dword_6754

loc_673A:				@ CODE XREF: PutCharUART0+6j
		LDR	R2, [R1,#0x18]
		LSLS	R2, R2,	#8
		BMI	loc_673A
		STR	R0, [R1]
		CMP	R0, #0xA
		BNE	locret_6750

loc_6746:				@ CODE XREF: PutCharUART0+12j
		LDR	R0, [R1,#0x18]
		LSLS	R0, R0,	#8
		BMI	loc_6746
		MOVS	R0, #0xD
		STR	R0, [R1]

locret_6750:				@ CODE XREF: PutCharUART0+Cj
		BX	LR
@ End of function PutCharUART0

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_6754:	.long 0x40070000	@ DATA XREF: PutCharUART0r

@ =============== S U B	R O U T	I N E =======================================


sub_6758:				@ CODE XREF: sub_9B0+44p sub_9B0+8Cp
		LDR	R1, off_6760
		STRB	R0, [R1]
		BX	LR
@ End of function sub_6758

@ ---------------------------------------------------------------------------
		@.align 0x10
		.byte 0
		.byte 0
off_6760:	.long byte_20000148	@ DATA XREF: sub_6758r

@ =============== S U B	R O U T	I N E =======================================


ShowBatCharging:			@ CODE XREF: DrawScreen:loc_14CCp

var_8		= -8

		LDR	R0, off_6774
		LDRB.W	R0, [R0,#0x87]
		CMP	R0, #2
		BNE	locret_6772
		B.W	loc_6778
@ ---------------------------------------------------------------------------

locret_6772:				@ CODE XREF: ShowBatCharging+8j
		BX	LR
@ ---------------------------------------------------------------------------
off_6774:	.long dfData		@ DATA XREF: ShowBatChargingr
@ ---------------------------------------------------------------------------

loc_6778:				@ CODE XREF: ShowBatCharging+Aj
		PUSH	{R3,LR}
		MOVS	R2, #0xC4
		MOVS	R1, #115
		MOVS	R0, #8
		BL	DisplayImage
		LDR	R0, off_67BC
		MOVS	R1, #1
		MOVS	R2, #9
		LDRB	R0, [R0]
		CMP	R0, #10
		BEQ	loc_67AC
		LDR	R0, off_67C0
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	locret_67AA
		ADD.W	R0, R2,	R0,LSL#2
		UXTB	R2, R0
		STR	R1, [SP]

loc_67A0:				@ CODE XREF: ShowBatCharging+54j
		MOVS	R3, #124
		MOVS	R1, #118
		MOVS	R0, #10
		BL	DisplayFillRect

locret_67AA:				@ CODE XREF: ShowBatCharging+32j
					@ ShowBatCharging+4Ej
		POP	{R3,PC}
@ ---------------------------------------------------------------------------

loc_67AC:				@ CODE XREF: ShowBatCharging+2Aj
		LDR	R0, off_67C4
		LDR	R0, [R0]
		LSLS	R0, R0,	#10
		BPL	locret_67AA
		MOVS	R2, #49
		STR	R1, [SP]
		B	loc_67A0
@ End of function ShowBatCharging

@ ---------------------------------------------------------------------------
		.balign 4,0
off_67BC:	.long BatteryTenth	@ DATA XREF: ShowBatCharging+20r
off_67C0:	.long BatAnimLevel	@ DATA XREF: ShowBatCharging+2Cr
off_67C4:	.long dword_20000064	@ DATA XREF: ShowBatCharging:loc_67ACr

@ =============== S U B	R O U T	I N E =======================================


ShowBattery:				@ CODE XREF: ShowMainView+7FCp

var_8		= -8

		LDR	R0, off_67D8
		LDRB.W	R0, [R0,#0x87]
		CMP	R0, #2
		BNE	locret_67D6
		B.W	loc_67DC
@ ---------------------------------------------------------------------------

locret_67D6:				@ CODE XREF: ShowBattery+8j
		BX	LR
@ ---------------------------------------------------------------------------
off_67D8:	.long dfData		@ DATA XREF: ShowBatteryr
@ ---------------------------------------------------------------------------

loc_67DC:				@ CODE XREF: ShowBattery+Aj
		LDR	R0, off_6834
		PUSH	{R3,LR}
		LDR	R0, [R0]
		LSLS	R1, R0,	#12
		BPL	loc_67F2
		LSLS	R1, R0,	#19
		BMI	loc_67F2
		LSLS	R0, R0,	#11
		BPL	locret_6830
		MOVS	R2, #0xC4
		B	loc_67FC
@ ---------------------------------------------------------------------------

loc_67F2:				@ CODE XREF: ShowBattery+1Cj
					@ ShowBattery+20j
		LSLS	R1, R0,	#10
		BPL	loc_6808
		LSLS	R0, R0,	#19
		BPL	loc_6808
		MOVS	R2, #0xC5

loc_67FC:				@ CODE XREF: ShowBattery+28j
		MOVS	R1, #112
		POP.W	{R3,LR}
		MOVS	R0, #8
		B.W	DisplayImage
@ ---------------------------------------------------------------------------

loc_6808:				@ CODE XREF: ShowBattery+2Cj
					@ ShowBattery+30j
		MOVS	R2, #0xC4
		MOVS	R1, #112
		MOVS	R0, #8
		BL	DisplayImage
		LDR	R0, off_6838
		LDRB	R0, [R0]
		CMP	R0, #0
		BEQ	locret_6830
		MOVS	R1, #1
		STR	R1, [SP]
		MOVS	R1, #9
		ADD.W	R0, R1,	R0,LSL#2
		UXTB	R2, R0
		MOVS	R3, #121
		MOVS	R1, #115
		MOVS	R0, #10
		BL	DisplayFillRect

locret_6830:				@ CODE XREF: ShowBattery+24j
					@ ShowBattery+50j
		POP	{R3,PC}
@ End of function ShowBattery

@ ---------------------------------------------------------------------------
		.balign 4,0
off_6834:	.long dword_20000064	@ DATA XREF: ShowBattery:loc_67DCr
off_6838:	.long BatteryTenth	@ DATA XREF: ShowBattery+4Ar

@ =============== S U B	R O U T	I N E =======================================


ShowBattVolts:				@ CODE XREF: DrawScreen:loc_1534p
		PUSH	{R2-R4,LR}
		MOVS	R1, #88
		LDR	R0, off_686C
		BL	DisplayStringCentered
		MOVS	R1, #3
		MOVS	R0, #0x29
		STRD.W	R0, R1,	[SP]
		LDR	R0, off_6870
		MOVS	R3, #2
		MOVS	R1, #102
		LDRH	R2, [R0]
		MOVS	R0, #6
		BL	DisplayValue
		ADD	SP, SP,	#8
		MOVS	R2, #0xB8
		MOVS	R1, #102
		POP.W	{R4,LR}
		MOVS	R0, #46
		B.W	DisplayImage
@ End of function ShowBattVolts

@ ---------------------------------------------------------------------------
off_686C:	.long String_Battery	@ DATA XREF: ShowBattVolts+4r
off_6870:	.long BatteryVoltage	@ DATA XREF: ShowBattVolts+12r

@ =============== S U B	R O U T	I N E =======================================


ShowBoardTemp:				@ CODE XREF: DrawScreen:loc_14F6p
		PUSH	{R2-R4,LR}
		MOVS	R1, #88
		LDR	R0, off_6898
		BL	DisplayStringCentered
		MOVS	R1, #2
		MOVS	R0, #0x52
		STRD.W	R0, R1,	[SP]
		LDR	R0, off_689C
		MOVS	R3, #0
		MOVS	R1, #102
		LDRB	R2, [R0]
		MOVS	R0, #16
		BL	DisplayValue
		POP	{R2-R4,PC}
@ End of function ShowBoardTemp

@ ---------------------------------------------------------------------------
		.balign 4,0
off_6898:	.long String_Temp	@ DATA XREF: ShowBoardTemp+4r
off_689C:	.long BoardTemp		@ DATA XREF: ShowBoardTemp+12r

@ =============== S U B	R O U T	I N E =======================================


DrawBFLine:				@ CODE XREF: ShowMainView+510p
					@ ShowMainView+53Ep ...
		PUSH.W	{R4-R8,LR}
		MOVS	R4, #0
		MOV	R8, R0
		ADDS	R7, R0,	#1

loc_68AA:				@ CODE XREF: DrawBFLine+2Ej
		ADD.W	R5, R4,	R4,LSL#2
		ADDS	R6, R5,	#2
		UXTB	R2, R6
		UXTB	R0, R5
		MOVS	R3, #1
		MOV	R1, R8
		BL	DisplayHLine
		UXTB	R2, R6
		UXTB	R1, R7
		UXTB	R0, R5
		MOVS	R3, #1
		BL	DisplayHLine
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #0xD
		BCC	loc_68AA
		POP.W	{R4-R8,PC}
@ End of function DrawBFLine


@ =============== S U B	R O U T	I N E =======================================


ShowNewCoil:				@ CODE XREF: DrawScreen:loc_14EAp
		PUSH	{R2-R6,LR}
		MOVS	R1, #0x32
		LDR	R0, =String_NewCoil
		BL	DisplayStringCentered
		MOVS	R4, #3
		MOVS	R5, #0xB
		LDR	R6, =dfData
		STRD.W	R5, R4,	[SP]
		LDRH.N	R2, [R6,#(dfResistance-dfData)]
		MOVS	R3, #2
		MOVS	R1, #62
		MOVS	R0, #16
		BL	DisplayValue
		MOVS	R2, #0xC0
		MOVS	R1, #62
		MOVS	R0, #40
		BL	DisplayImage
		LDR	R0, =String_NewCoil
		MOVS	R1, #74
		ADDS.N	R0, #(String_Right-String_NewCoil)
		BL	DisplayStringCentered
		LDR	R0, =String_NewCoil
		MOVS	R1, #90
		ADDS.N	R0, #(String_SameCoil-String_NewCoil)
		BL	DisplayStringCentered
		LDRB.N	R0, [R6,#(dfMode-dfData)]
		CMP	R0, #1
		BEQ	loc_6924
		CBZ	R0, loc_692C
		CMP	R0, #2
		BEQ	loc_6934
		CMP	R0, #3
		BEQ	loc_693E
		B	loc_6950
@ ---------------------------------------------------------------------------

loc_6924:				@ CODE XREF: ShowNewCoil+42j
		STRD.W	R5, R4,	[SP]
		LDRH	R2, [R6,#0x1E]
		B	loc_6946
@ ---------------------------------------------------------------------------

loc_692C:				@ CODE XREF: ShowNewCoil+44j
		STRD.W	R5, R4,	[SP]
		LDRH	R2, [R6,#0x20]
		B	loc_6946
@ ---------------------------------------------------------------------------

loc_6934:				@ CODE XREF: ShowNewCoil+48j
		STRD.W	R5, R4,	[SP]
		LDRH.W	R2, [R6,#0x84]
		B	loc_6946
@ ---------------------------------------------------------------------------

loc_693E:				@ CODE XREF: ShowNewCoil+4Cj
		STRD.W	R5, R4,	[SP]
		LDRH.W	R2, [R6,#0x90]

loc_6946:				@ CODE XREF: ShowNewCoil+56j
					@ ShowNewCoil+5Ej ...
		MOVS	R3, #2
		MOVS	R1, #102
		MOVS	R0, #16
		BL	DisplayValue

loc_6950:				@ CODE XREF: ShowNewCoil+4Ej
		MOVS	R2, #0xC0
		MOVS	R1, #102
		MOVS	R0, #40
		BL	DisplayImage
		POP.W	{R2-R6,LR}
		LDR	R0, =String_NewCoil
		MOVS	R1, #114
		ADDS.N	R0, #(String_Left-String_NewCoil)
		B.W	DisplayStringCentered
@ End of function ShowNewCoil

@ ---------------------------------------------------------------------------
			.balign 4,0
			.pool

@ =============== S U B	R O U T	I N E =======================================


ShowMainView:				@ CODE XREF: DrawScreen:loc_14C6p

var_30		= -0x30
var_2C		= -0x2C

		LDR	R0, off_6980
		LDRB.W	R0, [R0,#0x87]
		CMP	R0, #2
		BNE	locret_697E
		B.W	loc_6984
@ ---------------------------------------------------------------------------

locret_697E:				@ CODE XREF: ShowMainView+8j
		BX	LR
@ ---------------------------------------------------------------------------
off_6980:	.long dfData		@ DATA XREF: ShowMainViewr
@ ---------------------------------------------------------------------------

loc_6984:				@ CODE XREF: ShowMainView+Aj
		PUSH.W	{R2-R12,LR}
		LDR	R4, off_6D84
		LDR.W	R10, off_6D88
		LDRB	R0, [R4,#0xE]	@ dfMode
		LDRH	R2, [R4,#0x10]	@ dfPower
		CMP	R0, #5
		BNE	loc_69B6
		LDRH.W	R0, [R10]
		LSLS	R0, R0,	#0x17
		BPL	loc_69AA
		LDR	R0, off_6D8C
		LDRH	R0, [R0]
		UXTH	R0, R0
		BL	sub_31DC
		B	loc_69B4
@ ---------------------------------------------------------------------------

loc_69AA:				@ CODE XREF: ShowMainView+2Cj
		LDR	R0, off_6D90
		MOVS	R1, #0
		LDRH	R0, [R0]
		BL	sub_121C

loc_69B4:				@ CODE XREF: ShowMainView+38j
		MOV	R2, R0

loc_69B6:				@ CODE XREF: ShowMainView+24j
		LDR.W	R8, off_6D94	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDRB.W	R3, [R8]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R3, #2
		BNE	loc_69CE
		LDR	R0, off_6D98
		LDR	R0, [R0]
		MULS	R2, R0
		MOVS	R0, #0x64
		UDIV.W	R2, R2,	R0

loc_69CE:				@ CODE XREF: ShowMainView+50j
		MOV	R9, R4
		LDRB	R0, [R4,#0xE]
		MOVS	R1, #0x48
		LDR	R6, off_6D9C
		MOVS	R5, #3
		MOVS	R4, #0x1F
		MOV.W	R11, #1
		CMP	R0, #1
		BEQ	loc_69FC
		MOV	R7, R9
		CBZ	R0, loc_69FC
		CMP	R0, #2
		BEQ	loc_69FC
		CMP	R0, #3
		BEQ	loc_69FC
		CMP	R0, #4
		BEQ	loc_6AF0
		CMP	R0, #5
		BEQ	loc_6AF2
		CMP	R0, #6
		BEQ	loc_6AF4
		B	loc_6F74
@ ---------------------------------------------------------------------------

loc_69FC:				@ CODE XREF: ShowMainView+70j
					@ ShowMainView+74j ...
		CMP	R3, #2
		BEQ	loc_6AF6
		STRD.W	R1, R5,	[SP]
		MOVS	R3, #0
		MOV	R7, R9
		LDRH.W	R2, [R9,#0x12]	@ dfTemp
		MOVS	R1, #13
		MOV	R0, R3
		BL	DisplayValue
		LDRB	R0, [R7,#0x1B]
		CBZ	R0, loc_6A68
		MOVS	R2, #0xE0

loc_6A1A:				@ CODE XREF: ShowMainView+FAj
		MOVS	R1, #20
		MOVS	R0, #48
		BL	DisplayImage
		LDR.W	R0, [R10]
		MOV.W	R8, #0xB
		LSLS	R0, R0,	#0xD
		BMI	loc_6A38
		LDRB	R0, [R6]
		CMP	R0, #0
		BEQ	loc_6A66
		CMP	R0, #1
		BEQ	loc_6B02

loc_6A38:				@ CODE XREF: ShowMainView+BCj
		LDRB	R0, [R7,#0xE]
		CMP	R0, #1
		BEQ	loc_6A6C
		CMP	R0, #2
		BEQ	loc_6A80
		CMP	R0, #3
		MOV.W	R2, #2
		MOV.W	R1, #0
		BEQ	loc_6AB6
		LDR	R0, off_6DA0
		BL	DisplayString
		LDR	R0, off_6DA0
		MOVS	R2, #2
		MOVS	R1, #32
		SUBS	R0, #0x60

loc_6A5C:				@ CODE XREF: ShowMainView+10Ej
		BL	DisplayString

loc_6A60:				@ CODE XREF: ShowMainView+144j
					@ ShowMainView+190j
		LDRB	R0, [R6]
		CMP	R0, #1
		BEQ	loc_6B02

loc_6A66:				@ CODE XREF: ShowMainView+C2j
		B	loc_6B4A
@ ---------------------------------------------------------------------------

loc_6A68:				@ CODE XREF: ShowMainView+A6j
		MOVS	R2, #0xE1
		B	loc_6A1A
@ ---------------------------------------------------------------------------

loc_6A6C:				@ CODE XREF: ShowMainView+CCj
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, off_6DA0
		BL	DisplayString
		LDR	R0, off_6DA0
		MOVS	R2, #2
		MOVS	R1, #32
		SUBS	R0, #0x5A
		B	loc_6A5C
@ ---------------------------------------------------------------------------

loc_6A80:				@ CODE XREF: ShowMainView+D0j
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, off_6DA0
		BL	DisplayString
		LDR	R0, off_6DA0
		MOVS	R2, #2
		MOVS	R1, #32
		SUBS	R0, #0x54
		BL	DisplayString
		MOVS	R2, #4
		MOVS	R1, #3
		MOVS	R0, #48
		BL	DisplayImage
		MOVS	R2, #2
		MOVS	R1, #3
		MOVS	R0, #54
		BL	DisplayImage
		MOVS	R2, #7
		MOVS	R1, #3
		MOVS	R0, #59
		BL	DisplayImage
		B	loc_6A60
@ ---------------------------------------------------------------------------

loc_6AB6:				@ CODE XREF: ShowMainView+DCj
		LDR	R0, off_6DA0
		SUBS	R0, #(String_TEMP-String_TCR)
		BL	DisplayString
		STRD.W	R8, R5,	[SP]
		LDRB.W	R0, [R7,#0x88]	@ dfTCRIndex
		MOVS	R3, #0
		ADD.W	R0, R7,	R0,LSL#1
		MOVS	R1, #2
		LDRH.W	R2, [R0,#0x8A]
		MOVS	R0, #25
		BL	DisplayValue
		MOVS	R2, #0xA8
		MOVS	R1, #2
		MOVS	R0, #49
		BL	DisplayImage
		STRD.W	R8, R11, [SP]
		MOVS	R3, #0
		LDRB.W	R2, [R7,#0x88]
		MOVS	R1, #2
		B	loc_6AF8
@ ---------------------------------------------------------------------------

loc_6AF0:				@ CODE XREF: ShowMainView+80j
		B	loc_6C04
@ ---------------------------------------------------------------------------

loc_6AF2:				@ CODE XREF: ShowMainView+84j
		B	loc_6C92
@ ---------------------------------------------------------------------------

loc_6AF4:				@ CODE XREF: ShowMainView+88j
		B	loc_6D5A
@ ---------------------------------------------------------------------------

loc_6AF6:				@ CODE XREF: ShowMainView+8Ej
		B	loc_6D54
@ ---------------------------------------------------------------------------

loc_6AF8:				@ CODE XREF: ShowMainView+17Ej
		MOVS	R0, #57
		ADDS	R2, R2,	#1
		BL	DisplayValue
		B	loc_6A60
@ ---------------------------------------------------------------------------

loc_6B02:				@ CODE XREF: ShowMainView+C6j
					@ ShowMainView+F4j
		LDRB	R0, [R7,#0xE]
		CMP	R0, #3
		BNE	loc_6B34
		LDR	R0, off_6DA0
		MOVS	R2, #2
		MOVS	R1, #0
		SUBS	R0, #0x48
		BL	DisplayString
		STRD.W	R8, R5,	[SP]
		LDRB.W	R0, [R7,#0x88]
		MOVS	R3, #0
		ADD.W	R0, R7,	R0,LSL#1
		MOVS	R1, #2
		LDRH.W	R2, [R0,#0x8A]
		MOVS	R0, #0x19
		BL	DisplayValue
		LDRB	R0, [R6]
		CMP	R0, #1
		BNE	loc_6B4A

loc_6B34:				@ CODE XREF: ShowMainView+196j
		LDRB	R0, [R7,#0xE]
		CBZ	R0, loc_6B40
		CMP	R0, #1
		BEQ	loc_6B40
		CMP	R0, #2
		BNE	loc_6B4A

loc_6B40:				@ CODE XREF: ShowMainView+1C6j
					@ ShowMainView+1CAj
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, off_6DA0
		BL	DisplayString

loc_6B4A:				@ CODE XREF: ShowMainView:loc_6A66j
					@ ShowMainView+1C2j ...
		LDR	R0, off_6DA4
		LDRH	R0, [R0]
		CBNZ	R0, loc_6B58
		MOVS	R1, #0
		MOV	R0, R1
		BL	DisplayLOGO

loc_6B58:				@ CODE XREF: ShowMainView+1DEj
		LDR.W	R0, [R10]
		LSLS	R0, R0,	#0xD
		BMI	loc_6B78
		LDRB	R0, [R6]
		CMP	R0, #2
		BNE	loc_6B78
		LDR	R0, dword_6DA8
		LDR	R0, [R0]
		CMP	R0, #1
		BNE	loc_6B78
		LDR	R0, dword_6DA8
		ADDS	R0, R0,	#4
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_6BD0

loc_6B78:				@ CODE XREF: ShowMainView+1EEj
					@ ShowMainView+1F4j ...
		LDR	R0, off_6DA0
		MOVS	R2, #0x36
		MOVS	R1, #0
		SUBS	R0, #0x40
		BL	DisplayString
		LDRH	R2, [R7,#0x14]
		CMP	R2, #0x63
		BHI	loc_6BA2
		MOVS	R0, #2
		STRD.W	R4, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DisplayValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x30
		B	loc_6D4E
@ ---------------------------------------------------------------------------

loc_6BA2:				@ CODE XREF: ShowMainView+218j
		CMP.W	R2, #0x3E8
		BCC	loc_6BEE
		LDRB	R0, [R6]
		CMP	R0, #2
		BNE	loc_6BD2
		LDR	R0, dword_6DA8
		LDR	R0, [R0]
		CMP	R0, #1
		BNE	loc_6BC0
		LDR	R0, dword_6DA8
		ADDS	R0, R0,	#4
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_6BD2

loc_6BC0:				@ CODE XREF: ShowMainView+244j
		MOVS	R0, #4
		STRD.W	R4, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		BL	DisplayValue

loc_6BD0:				@ CODE XREF: ShowMainView+206j
		B	loc_6F6C
@ ---------------------------------------------------------------------------

loc_6BD2:				@ CODE XREF: ShowMainView+23Cj
					@ ShowMainView+24Ej
		MOVS	R0, #0xA
		UDIV.W	R2, R2,	R0
		MOVS	R3, #0
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		STRD.W	R4, R5,	[SP]
		BL	DisplayValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x35
		B	loc_6D4E
@ ---------------------------------------------------------------------------

loc_6BEE:				@ CODE XREF: ShowMainView+236j
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		STRD.W	R4, R5,	[SP]
		BL	DisplayValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOV	R0, R1
		B	loc_6D4E
@ ---------------------------------------------------------------------------

loc_6C04:				@ CODE XREF: ShowMainView:loc_6AF0j
		CMP	R2, #0x63
		BHI	loc_6C20
		MOVS	R0, #2
		STRD.W	R1, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0xD
		MOVS	R0, #5
		BL	DisplayValue
		MOVS	R2, #0xB9
		MOVS	R1, #0x12
		MOVS	R0, #0x2D
		B	loc_6C48
@ ---------------------------------------------------------------------------

loc_6C20:				@ CODE XREF: ShowMainView+296j
		CMP.W	R2, #0x3E8
		BCC	loc_6C34
		MOVS	R1, #4
		MOVS	R0, #0x29
		MOVS	R3, #1
		STRD.W	R0, R1,	[SP]
		MOVS	R1, #0x12
		B	loc_6C3C
@ ---------------------------------------------------------------------------

loc_6C34:				@ CODE XREF: ShowMainView+2B4j
		STRD.W	R1, R5,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0xD

loc_6C3C:				@ CODE XREF: ShowMainView+2C2j
		MOVS	R0, #0
		BL	DisplayValue
		MOVS	R2, #0x98
		MOVS	R1, #0x1A
		MOVS	R0, #0x36

loc_6C48:				@ CODE XREF: ShowMainView+2AEj
		BL	DisplayImage
		LDR.W	R0, [R10]
		LDRB	R1, [R6]
		UBFX.W	R0, R0,	#0x12, #1
		ORRS	R0, R1
		BEQ	loc_6C66
		LDR	R0, off_6DA0
		MOVS	R2, #2
		MOVS	R1, #0
		ADDS	R0, #0x2A
		BL	DisplayString

loc_6C66:				@ CODE XREF: ShowMainView+2E8j
		LDR	R0, off_6DA4
		LDRH	R0, [R0]
		CBNZ	R0, loc_6C74
		MOVS	R1, #0
		MOV	R0, R1
		BL	DisplayLOGO

loc_6C74:				@ CODE XREF: ShowMainView+2FAj
		LDRB.W	R0, [R8]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R0, #2
		BEQ	loc_6D54
		LDR	R0, off_6DA0
		MOVS	R2, #0x36
		MOVS	R1, #0
		ADDS	R0, #0x44
		BL	DisplayString
		STRD.W	R4, R5,	[SP]
		LDRH	R2, [R7,#0x16]
		MOVS	R3, #2
		B	loc_6D40
@ ---------------------------------------------------------------------------

loc_6C92:				@ CODE XREF: ShowMainView:loc_6AF2j
		LDRH.W	R0, [R10]
		MOV	R7, R10
		LSLS	R0, R0,	#0x17
		BMI	loc_6D04
		CMP	R2, #0x63
		BHI	loc_6CB8
		MOVS	R0, #2
		STRD.W	R1, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0xD
		MOVS	R0, #5
		BL	DisplayValue
		MOVS	R2, #0xB9
		MOVS	R1, #0x12
		MOVS	R0, #0x2D
		B	loc_6CE0
@ ---------------------------------------------------------------------------

loc_6CB8:				@ CODE XREF: ShowMainView+32Ej
		CMP.W	R2, #0x3E8
		BCC	loc_6CCC
		MOVS	R1, #4
		MOVS	R0, #0x29
		MOVS	R3, #1
		STRD.W	R0, R1,	[SP]
		MOVS	R1, #0x12
		B	loc_6CD4
@ ---------------------------------------------------------------------------

loc_6CCC:				@ CODE XREF: ShowMainView+34Cj
		STRD.W	R1, R5,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0xD

loc_6CD4:				@ CODE XREF: ShowMainView+35Aj
		MOVS	R0, #0
		BL	DisplayValue
		MOVS	R2, #0x98

loc_6CDC:				@ CODE XREF: ShowMainView+3A8j
		MOVS	R1, #0x1A
		MOVS	R0, #0x36

loc_6CE0:				@ CODE XREF: ShowMainView+346j
		BL	DisplayImage
		LDR	R0, [R7]
		LDRB	R1, [R6]
		UBFX.W	R0, R0,	#0x12, #1
		ORRS	R0, R1
		BEQ	loc_6CFC
		LDR	R0, off_6DA0
		MOVS	R2, #2
		MOVS	R1, #0
		ADDS	R0, #0x36
		BL	DisplayString

loc_6CFC:				@ CODE XREF: ShowMainView+37Ej
		LDR	R0, off_6DA4
		LDRH	R0, [R0]
		CBZ	R0, loc_6D1A
		B	loc_6D22
@ ---------------------------------------------------------------------------

loc_6D04:				@ CODE XREF: ShowMainView+32Aj
		STRD.W	R1, R5,	[SP]
		LDR	R0, off_6D8C
		MOVS	R3, #2
		MOVS	R1, #0xD
		LDR	R2, [R0]
		MOVS	R0, #0
		BL	DisplayValue
		MOVS	R2, #0x97
		B	loc_6CDC
@ ---------------------------------------------------------------------------

loc_6D1A:				@ CODE XREF: ShowMainView+390j
		MOVS	R1, #0
		MOV	R0, R1
		BL	DisplayLOGO

loc_6D22:				@ CODE XREF: ShowMainView+392j
		LDRB.W	R0, [R8]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R0, #2
		BEQ	loc_6D54
		LDR	R0, off_6DA0
		MOVS	R2, #0x36
		MOVS	R1, #0
		ADDS	R0, #0x44
		BL	DisplayString
		LDR	R0, off_6D90
		STRD.W	R4, R5,	[SP]
		MOVS	R3, #2
		LDRH	R2, [R0]

loc_6D40:				@ CODE XREF: ShowMainView+320j
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DisplayValue
		MOVS	R2, #0x97
		MOVS	R1, #0x36
		MOVS	R0, #0x39

loc_6D4E:				@ CODE XREF: ShowMainView+230j
					@ ShowMainView+27Cj ...
		BL	DisplayImage
		B	loc_6F6C
@ ---------------------------------------------------------------------------

loc_6D54:				@ CODE XREF: ShowMainView:loc_6AF6j
					@ ShowMainView+30Aj ...
		BL	ShowMainFiring
		B	loc_6F6C
@ ---------------------------------------------------------------------------

loc_6D5A:				@ CODE XREF: ShowMainView:loc_6AF4j
		LDR.W	R0, [R10]
		LDRB	R1, [R6]
		UBFX.W	R0, R0,	#0x12, #1
		ORRS	R0, R1
		BEQ	loc_6D74
		LDR	R0, off_6DA0
		MOVS	R2, #4
		MOVS	R1, #0xD
		ADDS	R0, #0x6C
		BL	DisplayString

loc_6D74:				@ CODE XREF: ShowMainView+3F6j
		LDR	R0, off_6DA0
		MOVS	R2, #0xF
		MOVS	R1, #0x17
		SUBS	R0, #0x30
		BL	DisplayString
		MOVS	R2, #0x61
		B	loc_6DAC
@ ---------------------------------------------------------------------------
off_6D84:	.long dfData		@ DATA XREF: ShowMainView+18r
off_6D88:	.long dword_20000064	@ DATA XREF: ShowMainView+1Ar
off_6D8C:	.long AtoVolts		@ DATA XREF: ShowMainView+2Er
					@ ShowMainView+398r
off_6D90:	.long BatteryVoltage	@ DATA XREF: ShowMainView:loc_69AAr
					@ ShowMainView+3C6r
off_6D94:	.long Screen		@ DATA XREF: ShowMainView:loc_69B6r
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
off_6D98:	.long dword_200000D8	@ DATA XREF: ShowMainView+52r
off_6D9C:	.long EditItemIndex	@ DATA XREF: ShowMainView+64r
off_6DA0:	.long String_TEMP	@ DATA XREF: ShowMainView+DEr
					@ ShowMainView+E4r ...
off_6DA4:	.long HideLogo		@ DATA XREF: ShowMainView:loc_6B4Ar
					@ ShowMainView:loc_6C66r ...
dword_6DA8:	.long 0x400048C8	@ DATA XREF: ShowMainView+1F6r
					@ ShowMainView+1FEr ...
@ ---------------------------------------------------------------------------

loc_6DAC:				@ CODE XREF: ShowMainView+412j
		MOVS	R1, #0x17
		LDR	R0, off_7174
		BL	DisplayString
		MOVS	R3, #1
		MOVS	R2, #0x15
		MOVS	R1, #0x12
		MOVS	R0, #0
		BL	DisplayHLine
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x12
		MOVS	R0, #0x2B
		BL	DisplayHLine
		MOVS	R3, #1
		MOVS	R2, #0x15
		MOVS	R1, #0x64
		MOVS	R0, #0
		BL	DisplayHLine
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x64
		MOVS	R0, #0x2B
		BL	DisplayHLine
		LDR	R1, off_7178	@ Saved	config # in start mode
		MOV	R9, R7
		LDRB	R1, [R1]	@ Saved	config # in start mode
		ADD.W	R0, R7,	R1,LSL#1
		LDRH.W	R0, [R0,#0x96]
		BL	SearchSTARTRez
		LDR	R1, off_717C
		MOVS	R2, #0xF
		CBZ	R0, loc_6E0E
		CMP	R0, #1
		BEQ	loc_6E0E
		CMP	R0, #2
		BEQ	loc_6E0E
		CMP	R0, #3
		BEQ	loc_6E0E
		MOVS	R7, #0
		MOV	R8, R2
		B	loc_6F0A
@ ---------------------------------------------------------------------------

loc_6E0E:				@ CODE XREF: ShowMainView+48Aj
					@ ShowMainView+48Ej ...
		LDR	R3, [R1]
		UDIV.W	R7, R3,	R2
		LDR	R3, off_7180
		ADD.W	R0, R3,	R0,LSL#2
		STR	R0, [SP,#0x30+var_2C]
		LDRH	R0, [R0,#2]
		UDIV.W	R0, R0,	R7
		NEGS	R0, R0
		ADD.W	R0, R0,	R0,LSL#2
		ADDS	R0, #0x63
		UXTH.W	R8, R0
		MOVS	R7, #0
		B	loc_6E88
@ ---------------------------------------------------------------------------

loc_6E32:				@ CODE XREF: ShowMainView+538j
		UDIV.W	R3, R0,	R2
		UDIV.W	R3, R1,	R3
		UDIV.W	R12, R0, R2
		LDR	R1, [SP,#0x30+var_2C]
		LDRH	R1, [R1,#2]
		UDIV.W	R12, R1, R12
		CMP	R3, R12
		BCC	loc_6E58
		UDIV.W	R0, R0,	R2
		UDIV.W	R0, R1,	R0
		SUBS	R0, R0,	#1
		CMP	R0, R7
		BLS	loc_6E76

loc_6E58:				@ CODE XREF: ShowMainView+4D8j
		NEGS	R0, R7
		ADD.W	R0, R0,	R0,LSL#2
		ADD.W	R1, R0,	#0x5F
		UXTB	R3, R1
		ADDS	R0, #0x5E
		UXTB	R1, R0
		MOVS	R2, #0x3F
		MOVS	R0, #0
		STR.W	R11, [SP]
		BL	DisplayFillRect
		B	loc_6E84
@ ---------------------------------------------------------------------------

loc_6E76:				@ CODE XREF: ShowMainView+4E6j
		NEGS	R0, R7
		ADD.W	R0, R0,	R0,LSL#2
		ADDS	R0, #0x5E
		UXTB	R0, R0
		BL	DrawBFLine

loc_6E84:				@ CODE XREF: ShowMainView+504j
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_6E88:				@ CODE XREF: ShowMainView+4C0j
		LDR	R0, off_717C
		LDR.W	R12, off_7178	@ Saved	config # in start mode
		MOVS	R2, #0xF
		LDR	R0, [R0]
		LDRB.W	R12, [R12]	@ Saved	config # in start mode
		UDIV.W	R3, R0,	R2
		ADD.W	R1, R9,	R12,LSL#1
		LDRH.W	R1, [R1,#0xAA]
		UDIV.W	R3, R1,	R3
		CMP	R3, R7
		BHI	loc_6E32
		CBNZ	R7, loc_6EB2
		MOVS	R0, #0x5E
		BL	DrawBFLine

loc_6EB2:				@ CODE XREF: ShowMainView+53Aj
		AND.W	R0, R8,	#0xFF
		BL	DrawBFLine
		AND.W	R1, R8,	#0xFF
		MOVS	R3, #0
		MOVS	R2, #0x28
		MOVS	R0, #0x19
		BL	DisplayHLine
		ADD.W	R0, R8,	#1
		UXTB	R1, R0
		MOVS	R3, #0
		MOVS	R2, #0x28
		MOVS	R0, #0x19
		BL	DisplayHLine
		SUB.W	R0, R8,	#3
		UXTB	R2, R0
		LDR	R0, off_7174
		MOVS	R1, #0x1D
		SUBS	R0, #0x26
		BL	DisplayString
		B	loc_6F2E
@ ---------------------------------------------------------------------------

loc_6EEA:				@ CODE XREF: ShowMainView+5B4j
		NEGS	R0, R7
		ADD.W	R0, R0,	R0,LSL#2
		ADD.W	R1, R0,	#0x5F
		UXTB	R3, R1
		ADDS	R0, #0x5E
		UXTB	R1, R0
		MOVS	R2, #0x3F
		MOVS	R0, #0
		STR.W	R11, [SP]
		BL	DisplayFillRect
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_6F0A:				@ CODE XREF: ShowMainView+49Cj
		LDR	R0, off_717C
		LDR	R1, [R0]
		LDR	R0, off_7178	@ Saved	config # in start mode
		UDIV.W	R2, R1,	R8
		LDRB	R0, [R0]	@ Saved	config # in start mode
		ADD.W	R0, R9,	R0,LSL#1
		LDRH.W	R0, [R0,#0xAA]
		UDIV.W	R0, R0,	R2
		CMP	R0, R7
		BHI	loc_6EEA
		CBNZ	R7, loc_6F2E
		MOVS	R0, #0x5E
		BL	DrawBFLine

loc_6F2E:				@ CODE XREF: ShowMainView+578j
					@ ShowMainView+5B6j
		LDRH.W	R0, [R10]
		LSLS	R0, R0,	#0x17
		BPL	loc_6F56
		MOVS	R1, #2
		MOVS	R0, #0x29
		STRD.W	R0, R1,	[SP]
		LDR	R0, off_7184
		MOVS	R3, #1
		MOVS	R1, #0x6E
		LDRH	R2, [R0]
		MOVS	R0, #0xA
		BL	DisplayValue
		MOVS	R2, #0xB7
		MOVS	R1, #0x6E
		MOVS	R0, #0x28
		BL	DisplayImage

loc_6F56:				@ CODE XREF: ShowMainView+5C4j
		LDR	R0, off_7188
		LDRB	R0, [R0]
		CBZ	R0, loc_6F6C
		MOVS	R0, #0
		STR	R0, [SP]
		MOVS	R3, #0x7F
		MOVS	R2, #0x34
		MOVS	R1, #0x6E
		MOVS	R0, #0xA
		BL	DisplayFillRect

loc_6F6C:				@ CODE XREF: ShowMainView:loc_6BD0j
					@ ShowMainView+3E2j ...
		LDRB.W	R0, [R9,#0xE]
		CMP	R0, #6
		BEQ	loc_7070

loc_6F74:				@ CODE XREF: ShowMainView+8Aj
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x2B
		MOVS	R0, #0
		BL	DisplayHLine
		LDR	R0, off_7188
		LDRB	R0, [R0]
		CBNZ	R0, loc_6F92
		MOVS	R3, #1
		MOVS	R2, #0x3F
		MOVS	R1, #0x6B
		MOVS	R0, #0
		BL	DisplayHLine

loc_6F92:				@ CODE XREF: ShowMainView+614j
		LDR.W	R0, [R10]
		MOV	R7, R10
		LSLS	R0, R0,	#0xD
		BMI	loc_6FA2
		LDRB	R0, [R6]
		CMP	R0, #3
		BEQ	loc_705C

loc_6FA2:				@ CODE XREF: ShowMainView+62Aj
		LDR	R0, off_7174
		MOVS	R2, #0x48
		MOVS	R1, #0
		ADDS	R0, #0x76
		BL	DisplayString
		LDRB.W	R0, [R9,#0xE]
		LDR	R2, off_718C
		LDR	R1, off_7190
		CMP	R0, #1
		BEQ	loc_6FCA
		CBZ	R0, loc_6FCA
		CMP	R0, #2
		BEQ	loc_6FCA
		CMP	R0, #3
		BEQ	loc_6FCA
		CMP	R0, #5
		BEQ	loc_701E
		B	loc_7024
@ ---------------------------------------------------------------------------

loc_6FCA:				@ CODE XREF: ShowMainView+648j
					@ ShowMainView+64Aj ...
		LDR	R0, off_7194
		LDRB	R0, [R0]
		CBNZ	R0, loc_7024
		LDRH	R0, [R1]
		CBZ	R0, loc_7024
		LDRH	R0, [R7]
		LSLS	R0, R0,	#0x17
		BPL	loc_6FEE

loc_6FDA:				@ CODE XREF: ShowMainView+6B2j
		LDR	R1, [R2]
		MOVS	R0, #0xA
		UDIV.W	R2, R1,	R0
		MOVS	R3, #2
		MOVS	R1, #0x47
		MOVS	R0, #0x1B
		STRD.W	R4, R5,	[SP]
		B	loc_6FFC
@ ---------------------------------------------------------------------------

loc_6FEE:				@ CODE XREF: ShowMainView+668j
		STRD.W	R4, R5,	[SP]
		LDRH.W	R2, [R9,#0x1C]
		MOVS	R3, #2

loc_6FF8:				@ CODE XREF: ShowMainView+6BCj
		MOVS	R1, #0x47
		MOVS	R0, #0x1B

loc_6FFC:				@ CODE XREF: ShowMainView+67Cj
		BL	DisplayValue
		MOVS	R2, #0xC0
		MOVS	R1, #0x49
		MOVS	R0, #0x38
		BL	DisplayImage
		LDRB.W	R0, [R9,#0xE]
		CMP	R0, #1
		BEQ	loc_702E
		CBZ	R0, loc_7034
		CMP	R0, #2
		BEQ	loc_703A
		CMP	R0, #3
		BEQ	loc_7040
		B	loc_7050
@ ---------------------------------------------------------------------------

loc_701E:				@ CODE XREF: ShowMainView+656j
		LDRH	R0, [R7]
		LSLS	R0, R0,	#0x17
		BMI	loc_6FDA

loc_7024:				@ CODE XREF: ShowMainView+658j
					@ ShowMainView+65Ej ...
		STRD.W	R4, R5,	[SP]
		MOVS	R3, #2
		LDRH	R2, [R1]
		B	loc_6FF8
@ ---------------------------------------------------------------------------

loc_702E:				@ CODE XREF: ShowMainView+6A0j
		LDRB.W	R0, [R9,#0x22]
		B	loc_7044
@ ---------------------------------------------------------------------------

loc_7034:				@ CODE XREF: ShowMainView+6A2j
		LDRB.W	R0, [R9,#0x23]
		B	loc_7044
@ ---------------------------------------------------------------------------

loc_703A:				@ CODE XREF: ShowMainView+6A6j
		LDRB.W	R0, [R9,#0x86]
		B	loc_7044
@ ---------------------------------------------------------------------------

loc_7040:				@ CODE XREF: ShowMainView+6AAj
		LDRB.W	R0, [R9,#0x92]

loc_7044:				@ CODE XREF: ShowMainView+6C2j
					@ ShowMainView+6C8j ...
		CBZ	R0, loc_7050
		MOVS	R2, #0xC3
		MOVS	R1, #0x49
		MOVS	R0, #0x38
		BL	DisplayImage

loc_7050:				@ CODE XREF: ShowMainView+6ACj
					@ ShowMainView:loc_7044j
		LDR	R0, [R7]
		LSLS	R0, R0,	#0xD
		BMI	loc_705C
		LDRB	R0, [R6]
		CMP	R0, #4
		BEQ	loc_70FE

loc_705C:				@ CODE XREF: ShowMainView+630j
					@ ShowMainView+6E4j
		LDRB.W	R0, [R9,#0x18]
		MOV	R6, R9
		CBZ	R0, loc_7080
		LDRH	R1, [R7]
		LSLS	R1, R1,	#0x13
		BPL	loc_7074
		LDR	R1, off_7198
		LDRH	R1, [R1]
		B	loc_7072
@ ---------------------------------------------------------------------------

loc_7070:				@ CODE XREF: ShowMainView+602j
		B	loc_70FE
@ ---------------------------------------------------------------------------

loc_7072:				@ CODE XREF: ShowMainView+6FEj
		CBZ	R1, loc_7080

loc_7074:				@ CODE XREF: ShowMainView+6F8j
		MOVS	R7, #5
		CMP	R0, #1
		BEQ	loc_70BE
		CMP	R0, #2
		BEQ	loc_70DA
		B	loc_70FE
@ ---------------------------------------------------------------------------

loc_7080:				@ CODE XREF: ShowMainView+6F2j
					@ ShowMainView:loc_7072j
		LDR	R0, off_7174
		MOVS	R2, #0x5B
		MOVS	R1, #0
		SUBS	R0, #0x10
		BL	DisplayString
		LDRH	R0, [R7]
		MOV.W	R3, #1
		LSLS	R0, R0,	#0x17
		BPL	loc_70A4
		LDR	R0, off_719C
		STRD.W	R4, R5,	[SP]
		MOVS	R1, #0x5A
		LDRH	R2, [R0]
		MOVS	R0, #0x1B
		B	loc_70AE
@ ---------------------------------------------------------------------------

loc_70A4:				@ CODE XREF: ShowMainView+724j
		MOVS	R2, #0
		MOVS	R1, #0x5A
		MOVS	R0, #0x1B
		STRD.W	R4, R5,	[SP]

loc_70AE:				@ CODE XREF: ShowMainView+732j
		BL	DisplayValue
		MOVS	R2, #0x9C
		MOVS	R1, #0x5C
		MOVS	R0, #0x38
		BL	DisplayImage
		B	loc_70FE
@ ---------------------------------------------------------------------------

loc_70BE:				@ CODE XREF: ShowMainView+708j
		LDR	R0, off_7174
		MOVS	R2, #0x5B
		MOVS	R1, #0
		ADDS	R0, #0x8A
		BL	DisplayString
		STRD.W	R4, R7,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0x5A
		MOVS	R0, #0x18
		LDR.W	R2, [R6,#0x134]
		B	loc_70FA
@ ---------------------------------------------------------------------------

loc_70DA:				@ CODE XREF: ShowMainView+70Cj
		LDR	R0, off_7174
		MOVS	R2, #0x5B
		MOVS	R1, #0
		ADDS	R0, #0x80
		BL	DisplayString
		LDR.W	R1, [R6,#0x138]
		MOVS	R0, #0xA
		UDIV.W	R2, R1,	R0
		STRD.W	R4, R7,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0x5A
		MOVS	R0, #0x18

loc_70FA:				@ CODE XREF: ShowMainView+768j
		BL	DisplayValue

loc_70FE:				@ CODE XREF: ShowMainView+6EAj
					@ ShowMainView:loc_7070j ...
		LDR	R0, off_7188
		LDRB	R0, [R0]
		CBZ	R0, loc_710C
		POP.W	{R2-R12,LR}
		B.W	ShowWeakBat
@ ---------------------------------------------------------------------------

loc_710C:				@ CODE XREF: ShowMainView+792j
		LDRB.W	R1, [R9,#0xE]
		CMP	R1, #6
		BNE	loc_7168
		LDRH.W	R1, [R10]
		LSLS	R1, R1,	#0x17
		BMI	locret_7170
		LDR	R1, dword_71A0
		LDR	R1, [R1]
		CMP	R1, #1
		BNE	loc_712E
		LDR	R1, dword_71A0
		ADDS	R1, R1,	#4
		LDR	R1, [R1]
		CMP	R1, #1
		BEQ	loc_7168

loc_712E:				@ CODE XREF: ShowMainView+7B2j
		LDR	R1, off_7178	@ Saved	config # in start mode
		LDRB	R1, [R1]	@ Saved	config # in start mode
		ADD.W	R0, R9,	R1,LSL#1
		LDRH.W	R2, [R0,#0xAA]
		CMP.W	R2, #0x3E8
		BCS	loc_7144
		MOVS	R3, #1
		B	loc_714C
@ ---------------------------------------------------------------------------

loc_7144:				@ CODE XREF: ShowMainView+7CEj
		MOVS	R0, #0xA
		UDIV.W	R2, R2,	R0
		MOVS	R3, #0

loc_714C:				@ CODE XREF: ShowMainView+7D2j
		MOVS	R1, #0x70
		MOVS	R0, #0xB
		STRD.W	R4, R5,	[SP]
		BL	DisplayValue
		ADD	SP, SP,	#8
		MOVS	R2, #0xB2
		POP.W	{R4-R12,LR}
		MOVS	R1, #0x72
		MOVS	R0, #0x2A
		B.W	DisplayImage
@ ---------------------------------------------------------------------------

loc_7168:				@ CODE XREF: ShowMainView+7A2j
					@ ShowMainView+7BCj
		POP.W	{R2-R12,LR}
		B.W	ShowBattery
@ ---------------------------------------------------------------------------

locret_7170:				@ CODE XREF: ShowMainView+7AAj
		POP.W	{R2-R12,PC}
@ End of function ShowMainView

@ ---------------------------------------------------------------------------
off_7174:	.long String_MIN_s	@ DATA XREF: ShowMainView+43Er
					@ ShowMainView+56Er ...
off_7178:	.long ConfigIndex	@ DATA XREF: ShowMainView+474r
					@ ShowMainView+51Ar ...
					@ Saved	config # in start mode
off_717C:	.long MaxPower		@ DATA XREF: ShowMainView+486r
					@ ShowMainView:loc_6E88r ...
off_7180:	.long STARTPowers	@ DATA XREF: ShowMainView+4A4r
off_7184:	.long FireDuration	@ DATA XREF: ShowMainView+5CEr
off_7188:	.long ShowWeakBatFlag	@ DATA XREF: ShowMainView:loc_6F56r
					@ ShowMainView+610r ...
off_718C:	.long AtoRezMilli	@ DATA XREF: ShowMainView+642r
off_7190:	.long AtoRez		@ DATA XREF: ShowMainView+644r
off_7194:	.long byte_200000B3	@ DATA XREF: ShowMainView:loc_6FCAr
off_7198:	.long EditModeTimer	@ DATA XREF: ShowMainView+6FAr
off_719C:	.long AtoCurrent	@ DATA XREF: ShowMainView+726r
dword_71A0:	.long 0x400048C8	@ DATA XREF: ShowMainView+7ACr
					@ ShowMainView+7B4r

@ =============== S U B	R O U T	I N E =======================================


ShowLOGOMenu:				@ CODE XREF: DrawScreen:loc_1526p

var_10		= -0x10

		PUSH	{R3-R5,LR}
		BL	ClearScreenBuffer
		MOVS	R2, #6
		MOVS	R1, #4
		LDR	R0, off_7228
		BL	DisplayString
		MOVS	R3, #1
		MOVS	R2, #63
		MOVS	R1, #16
		MOVS	R0, #0
		BL	DisplayHLine
		LDR	R4, off_722C
		MOVS	R1, #18
		MOVS	R2, #63
		LDRB.W	R0, [R4,#(dfStatus-dfData)]!
		UBFX.W	R0, R0,	#3, #1
		RSB.W	R0, R0,	R0,LSL#3
		ADD.W	R1, R1,	R0,LSL#1
		MOVS	R0, #1
		STR	R0, [SP]
		ADD.W	R0, R1,	#0xC
		UXTB	R3, R0
		MOVS	R0, #0
		BL	DisplayFillRect
		LDRB	R0, [R4]
		UBFX.W	R0, R0,	#3, #1
		CBZ	R0, loc_720C
		CMP	R0, #0
		BEQ	locret_7226
		MOVS	R2, #20
		MOVS	R1, #4
		LDR	R0, off_7230
		BL	DisplayString
		POP.W	{R3-R5,LR}
		LDR	R0, off_7230
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Off-String_On)
		B.W	DisplayStringInv
@ ---------------------------------------------------------------------------

loc_720C:				@ CODE XREF: ShowLOGOMenu+48j
		MOVS	R2, #20
		MOVS	R1, #4
		LDR	R0, off_7230
		BL	DisplayStringInv
		POP.W	{R3-R5,LR}
		LDR	R0, off_7230
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Off-String_On)
		B.W	DisplayString
@ ---------------------------------------------------------------------------

locret_7226:				@ CODE XREF: ShowLOGOMenu+4Cj
		POP	{R3-R5,PC}
@ End of function ShowLOGOMenu

@ ---------------------------------------------------------------------------
off_7228:	.long String_LOGO	@ DATA XREF: ShowLOGOMenu+Ar
off_722C:	.long dfData		@ DATA XREF: ShowLOGOMenu+1Cr
off_7230:	.long String_On		@ DATA XREF: ShowLOGOMenu+52r
					@ ShowLOGOMenu+5Cr ...

@ =============== S U B	R O U T	I N E =======================================


ShowGameMenu:				@ CODE XREF: DrawScreen:loc_152Cp

var_10		= -0x10

		PUSH	{R3-R5,LR}
		BL	ClearScreenBuffer
		MOVS	R2, #6
		MOVS	R1, #4
		LDR	R0, off_72E4
		BL	DisplayString
		MOVS	R3, #1
		MOVS	R2, #63
		MOVS	R1, #16
		MOVS	R0, #0
		BL	DisplayHLine
		LDR	R0, off_72E4
		MOVS	R2, #20
		MOVS	R1, #4
		ADDS	R0, #(String_Easy-String_Game)
		BL	DisplayString
		LDR	R0, off_72E4
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Normal-String_Game)
		BL	DisplayString
		LDR	R0, off_72E4
		MOVS	R2, #48
		MOVS	R1, #4
		ADDS	R0, #(String_Hard-String_Game)
		BL	DisplayString
		LDR	R0, off_72E4
		MOVS	R2, #62
		MOVS	R1, #4
		ADDS	R0, #(String_Exit-String_Game)
		BL	DisplayString
		LDR	R4, off_72E8
		MOVS	R1, #18
		MOVS	R2, #63
		LDRB.W	R0, [R4,#(dfFBDifficulty-dfData)]!
		RSB.W	R0, R0,	R0,LSL#3
		ADD.W	R0, R1,	R0,LSL#1
		UXTB	R1, R0
		MOVS	R0, #1
		STR	R0, [SP]
		ADD.W	R0, R1,	#12
		UXTB	R3, R0
		MOVS	R0, #0
		BL	DisplayFillRect
		LDRB	R0, [R4]
		CBZ	R0, loc_72C4
		CMP	R0, #1
		BEQ	loc_72CE
		CMP	R0, #2
		BEQ	loc_72D8
		CMP	R0, #3
		BNE	locret_72E2
		LDR	R0, off_72E4
		MOVS	R2, #62
		MOVS	R1, #4
		ADDS	R0, #(String_Exit-String_Game)

loc_72BC:				@ CODE XREF: ShowGameMenu+98j
					@ ShowGameMenu+A2j ...
		POP.W	{R3-R5,LR}
		B.W	DisplayStringInv
@ ---------------------------------------------------------------------------

loc_72C4:				@ CODE XREF: ShowGameMenu+72j
		LDR	R0, off_72E4
		MOVS	R2, #20
		MOVS	R1, #4
		ADDS	R0, #(String_Easy-String_Game)
		B	loc_72BC
@ ---------------------------------------------------------------------------

loc_72CE:				@ CODE XREF: ShowGameMenu+76j
		LDR	R0, off_72E4
		MOVS	R2, #34
		MOVS	R1, #4
		ADDS	R0, #(String_Normal-String_Game)
		B	loc_72BC
@ ---------------------------------------------------------------------------

loc_72D8:				@ CODE XREF: ShowGameMenu+7Aj
		LDR	R0, off_72E4
		MOVS	R2, #48
		MOVS	R1, #4
		ADDS	R0, #(String_Hard-String_Game)
		B	loc_72BC
@ ---------------------------------------------------------------------------

locret_72E2:				@ CODE XREF: ShowGameMenu+7Ej
		POP	{R3-R5,PC}
@ End of function ShowGameMenu

@ ---------------------------------------------------------------------------
off_72E4:	.long String_Game	@ DATA XREF: ShowGameMenu+Ar
					@ ShowGameMenu+1Cr ...
off_72E8:	.long dfData		@ DATA XREF: ShowGameMenu+4Cr

@ =============== S U B	R O U T	I N E =======================================


ShowTCRSet:				@ CODE XREF: DrawScreen:loc_1520p

var_28		= -0x28

		LDR	R0, off_72FC
		LDRB.W	R0, [R0,#0x87]
		CMP	R0, #2
		BNE	locret_72FA
		B.W	loc_7300
@ ---------------------------------------------------------------------------

locret_72FA:				@ CODE XREF: ShowTCRSet+8j
		BX	LR
@ ---------------------------------------------------------------------------
off_72FC:	.long dfData		@ DATA XREF: ShowTCRSetr
@ ---------------------------------------------------------------------------

loc_7300:				@ CODE XREF: ShowTCRSet+Aj
		PUSH.W	{R2-R10,LR}
		MOVS	R2, #6
		MOVS	R1, #7
		LDR	R0, off_744C
		BL	DisplayString
		MOVS	R3, #1
		MOVS	R2, #63
		MOVS	R1, #22
		MOVS	R0, #0
		BL	DisplayHLine
		LDR	R0, off_7450
		LDR	R1, off_7454
		LDR	R6, off_7458
		LDRB	R0, [R0]
		MOV.W	R7, #4
		LSLS	R0, R0,	#31
		MOV.W	R5, #0x1F
		MOV.W	R4, #0
		BEQ	loc_73C2
		MOV	R9, R1
		MOV	R8, R7

loc_7336:				@ CODE XREF: ShowTCRSet+D0j
		LDRB.W	R0, [R9]
		CMP	R0, R4
		BNE	loc_7376
		MOVS	R0, #1
		STR	R0, [SP]
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R7, R0,	R4,LSL#4
		ADD.W	R0, R7,	#52
		UXTB	R3, R0
		SUBS	R0, #22
		UXTB	R1, R0
		MOVS	R2, #62
		MOVS	R0, #28
		BL	DisplayFillRect
		STRD.W	R5, R8,	[SP]
		ADD.W	R0, R6,	R4,LSL#1
		ADDS	R7, #36
		LDRH.W	R2, [R0,#(dfTCRM1-dfData)]
		UXTB	R1, R7
		MOVS	R3, #0
		MOVS	R0, #30
		BL	DisplayValue2
		B	loc_7396
@ ---------------------------------------------------------------------------

loc_7376:				@ CODE XREF: ShowTCRSet+50j
		STRD.W	R5, R8,	[SP]
		ADD.W	R0, R6,	R4,LSL#1
		MOVS	R3, #0
		LDRH.W	R2, [R0,#(dfTCRM1-dfData)]
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R0, R0,	R4,LSL#4
		ADDS	R0, #36
		UXTB	R1, R0
		MOVS	R0, #30
		BL	DisplayValue

loc_7396:				@ CODE XREF: ShowTCRSet+88j
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R7, R0,	R4,LSL#4
		ADDS	R7, #33
		UXTB	R1, R7
		MOVS	R2, #0xED
		MOVS	R0, #0
		BL	DisplayImage
		UXTB	R1, R7
		ADD.W	R2, R4,	#0xEE
		MOVS	R0, #15
		BL	DisplayImage
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #3
		BCC	loc_7336

locret_73BE:				@ CODE XREF: ShowTCRSet+15Ej
		POP.W	{R2-R10,PC}
@ ---------------------------------------------------------------------------

loc_73C2:				@ CODE XREF: ShowTCRSet+44j
		MOV	R10, R1
		MOV	R9, R5
		MOV	R8, R6

loc_73C8:				@ CODE XREF: ShowTCRSet+15Cj
		LDRB.W	R0, [R10]
		CMP	R0, R4
		ADD.W	R0, R4,	R4,LSL#3
		BNE	loc_7406
		ADD.W	R6, R0,	R4,LSL#4
		ADD.W	R5, R6,	#33
		UXTB	R1, R5
		MOVS	R2, #0xED
		MOVS	R0, #0
		BL	DisplayImageInv
		UXTB	R1, R5
		ADD.W	R2, R4,	#0xEE
		MOVS	R0, #15
		BL	DisplayImageInv
		MOVS	R0, #0
		ADDS	R6, #49
		STR	R0, [SP]
		UXTB	R3, R6
		UXTB	R1, R5
		MOVS	R2, #30
		MOVS	R0, #25
		BL	DisplayFillRect
		B	loc_7422
@ ---------------------------------------------------------------------------

loc_7406:				@ CODE XREF: ShowTCRSet+E6j
		ADD.W	R5, R0,	R4,LSL#4
		ADDS	R5, #33
		UXTB	R1, R5
		MOVS	R2, #0xED
		MOVS	R0, #0
		BL	DisplayImage
		UXTB	R1, R5
		ADD.W	R2, R4,	#0xEE
		MOVS	R0, #15
		BL	DisplayImage

loc_7422:				@ CODE XREF: ShowTCRSet+118j
		STRD.W	R9, R7,	[SP]
		ADD.W	R0, R8,	R4,LSL#1
		MOVS	R3, #0
		LDRH.W	R2, [R0,#(dfTCRM1-dfData)]
		ADD.W	R0, R4,	R4,LSL#3
		ADD.W	R0, R0,	R4,LSL#4
		ADDS	R0, #36
		UXTB	R1, R0
		MOVS	R0, #30
		BL	DisplayValue
		ADDS	R4, R4,	#1
		UXTB	R4, R4
		CMP	R4, #3
		BCC	loc_73C8
		B	locret_73BE
@ End of function ShowTCRSet

@ ---------------------------------------------------------------------------
off_744C:	.long String_TCRSet	@ DATA XREF: ShowTCRSet+1Cr
off_7450:	.long dword_20000068	@ DATA XREF: ShowTCRSet+2Er
off_7454:	.long EditTCRIndex	@ DATA XREF: ShowTCRSet+30r
off_7458:	.long dfData		@ DATA XREF: ShowTCRSet+32r

@ =============== S U B	R O U T	I N E =======================================


ShowMainFiring:				@ CODE XREF: ShowMainView:loc_6D54p
		LDR	R0, off_746C
		LDRB.W	R0, [R0,#0x87]
		CMP	R0, #2
		BNE	locret_746A
		B.W	loc_7470
@ ---------------------------------------------------------------------------

locret_746A:				@ CODE XREF: ShowMainFiring+8j
		BX	LR
@ ---------------------------------------------------------------------------
off_746C:	.long dfData		@ DATA XREF: ShowMainFiringr
@ ---------------------------------------------------------------------------

loc_7470:				@ CODE XREF: ShowMainFiring+Aj
		PUSH.W	{R2-R8,LR}
		LDR	R5, off_7664
		MOVS	R6, #2
		LDRB	R0, [R5,#0xE]
		CMP	R0, #1
		BEQ	loc_74A4
		CBZ	R0, loc_74A4
		CMP	R0, #2
		BEQ	loc_74A4
		CMP	R0, #3
		BEQ	loc_74A4
		MOVS	R0, #0x29
		STRD.W	R0, R6,	[SP]
		LDR	R0, off_7668
		MOVS	R3, #1
		MOVS	R1, #0x31
		LDRH	R2, [R0]
		MOVS	R0, #0xA
		BL	DisplayValue
		MOVS	R2, #0xB7
		MOVS	R1, #0x31
		MOVS	R0, #0x28
		B	loc_7658
@ ---------------------------------------------------------------------------

loc_74A4:				@ CODE XREF: ShowMainFiring+20j
					@ ShowMainFiring+22j ...
		LDR	R1, off_766C
		LDR.W	R8, off_7670
		MOV.W	R4, #3
		LDR	R1, [R1]
		LDRB.W	R2, [R8]
		UBFX.W	R1, R1,	#0x12, #1
		ORRS	R1, R2
		BEQ	loc_74E2
		CMP	R0, #1
		BEQ	loc_7506
		CMP	R0, #2
		BEQ	loc_751A
		CMP	R0, #3
		MOV.W	R2, #2
		MOV.W	R1, #0
		BEQ	loc_7552
		LDR	R0, off_7674
		BL	DisplayString
		LDR	R0, off_7674
		MOVS	R2, #2
		MOVS	R1, #0x20
		SUBS	R0, #0x60

loc_74DE:				@ CODE XREF: ShowMainFiring+BCj
		BL	DisplayString

loc_74E2:				@ CODE XREF: ShowMainFiring+5Ej
					@ ShowMainFiring+F2j ...
		LDRB	R1, [R5,#0x1B]
		LDR	R0, off_7678
		MOVS	R7, #0x48
		CBZ	R1, loc_7550
		LDRH	R0, [R0]
		BL	FarenheitToC
		MOV	R2, R0
		LDRH	R0, [R5,#0x12]
		CMP	R0, R2
		BHI	loc_75B2

loc_74F8:				@ CODE XREF: ShowMainFiring+142j
		LDR	R0, off_7674
		MOVS	R2, #0x14
		MOVS	R1, #2
		SUBS	R0, #0x20
		BL	DisplayString
		B	loc_75CA
@ ---------------------------------------------------------------------------

loc_7506:				@ CODE XREF: ShowMainFiring+62j
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, off_7674
		BL	DisplayString
		LDR	R0, off_7674
		MOVS	R2, #2
		MOVS	R1, #0x20
		SUBS	R0, #0x5A
		B	loc_74DE
@ ---------------------------------------------------------------------------

loc_751A:				@ CODE XREF: ShowMainFiring+66j
		MOVS	R2, #2
		MOVS	R1, #0
		LDR	R0, off_7674
		BL	DisplayString
		LDR	R0, off_7674
		MOVS	R2, #2
		MOVS	R1, #0x20
		SUBS	R0, #0x54
		BL	DisplayString
		MOVS	R2, #4
		MOVS	R1, #3
		MOVS	R0, #0x30
		BL	DisplayImage
		MOVS	R2, #2
		MOVS	R1, #3
		MOVS	R0, #0x36
		BL	DisplayImage
		MOVS	R2, #7
		MOVS	R1, #3
		MOVS	R0, #0x3B
		BL	DisplayImage
		B	loc_74E2
@ ---------------------------------------------------------------------------

loc_7550:				@ CODE XREF: ShowMainFiring+8Cj
		B	loc_7598
@ ---------------------------------------------------------------------------

loc_7552:				@ CODE XREF: ShowMainFiring+72j
		LDR	R0, off_7674
		SUBS	R0, #0x48
		BL	DisplayString
		MOVS	R7, #0xB
		STRD.W	R7, R4,	[SP]
		LDRB.W	R0, [R5,#0x88]
		MOVS	R3, #0
		ADD.W	R0, R5,	R0,LSL#1
		MOVS	R1, #2
		LDRH.W	R2, [R0,#0x8A]
		MOVS	R0, #0x19
		BL	DisplayValue
		MOVS	R2, #0xA8
		MOVS	R1, #2
		MOVS	R0, #0x31
		BL	DisplayImage
		MOVS	R0, #1
		STRD.W	R7, R0,	[SP]
		LDRB.W	R2, [R5,#0x88]
		MOVS	R3, #0
		MOVS	R1, #2
		MOVS	R0, #0x39
		ADDS	R2, R2,	#1
		BL	DisplayValue
		B	loc_74E2
@ ---------------------------------------------------------------------------

loc_7598:				@ CODE XREF: ShowMainFiring:loc_7550j
		LDRH	R1, [R5,#0x12]
		LDRH	R2, [R0]
		CMP	R1, R2
		BLS	loc_74F8
		STRD.W	R7, R4,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0xD
		MOV	R0, R3
		BL	DisplayValue
		MOVS	R2, #0xE1
		B	loc_75C2
@ ---------------------------------------------------------------------------

loc_75B2:				@ CODE XREF: ShowMainFiring+9Aj
		STRD.W	R7, R4,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0xD
		MOV	R0, R3
		BL	DisplayValue
		MOVS	R2, #0xE0

loc_75C2:				@ CODE XREF: ShowMainFiring+154j
		MOVS	R1, #0x14
		MOVS	R0, #0x30
		BL	DisplayImage

loc_75CA:				@ CODE XREF: ShowMainFiring+A8j
		LDR	R0, off_7674
		MOVS	R2, #0x36
		MOVS	R1, #0
		SUBS	R0, #0x40
		BL	DisplayString
		LDR	R0, off_767C
		LDRH	R0, [R0]
		UXTH	R0, R0
		BL	sub_31DC
		MOVS	R1, #0x1F
		MOV	R2, R0
		CMP	R0, #0x63
		BHI	loc_75FE
		STRD.W	R1, R6,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DisplayValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x30
		B	loc_7658
@ ---------------------------------------------------------------------------

loc_75FE:				@ CODE XREF: ShowMainFiring+18Aj
		CMP.W	R2, #0x3E8
		BCC	loc_7644
		LDR	R0, dword_7680
		LDR	R0, [R0]
		CMP	R0, #1
		BEQ	loc_7614
		LDRB.W	R0, [R8]
		CMP	R0, #2
		BEQ	loc_7630

loc_7614:				@ CODE XREF: ShowMainFiring+1AEj
		MOVS	R0, #0xA
		UDIV.W	R2, R2,	R0
		STRD.W	R1, R4,	[SP]
		MOVS	R3, #0
		MOVS	R1, #0x34
		MOVS	R0, #0x1B
		BL	DisplayValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOVS	R0, #0x35
		B	loc_7658
@ ---------------------------------------------------------------------------

loc_7630:				@ CODE XREF: ShowMainFiring+1B6j
		MOVS	R0, #4
		STRD.W	R1, R0,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		BL	DisplayValue
		POP.W	{R2-R8,PC}
@ ---------------------------------------------------------------------------

loc_7644:				@ CODE XREF: ShowMainFiring+1A6j
		STRD.W	R1, R4,	[SP]
		MOVS	R3, #1
		MOVS	R1, #0x34
		MOVS	R0, #0x19
		BL	DisplayValue
		MOVS	R2, #0x98
		MOVS	R1, #0x36
		MOV	R0, R1

loc_7658:				@ CODE XREF: ShowMainFiring+46j
					@ ShowMainFiring+1A0j ...
		ADD	SP, SP,	#8
		POP.W	{R4-R8,LR}
		B.W	DisplayImage
@ End of function ShowMainFiring

@ ---------------------------------------------------------------------------
		.balign 4,0
off_7664:	.long dfData		@ DATA XREF: ShowMainFiring+18r
off_7668:	.long FireDuration	@ DATA XREF: ShowMainFiring+32r
off_766C:	.long dword_20000064	@ DATA XREF: ShowMainFiring:loc_74A4r
off_7670:	.long EditItemIndex	@ DATA XREF: ShowMainFiring+4Ar
off_7674:	.long String_TEMP	@ DATA XREF: ShowMainFiring+74r
					@ ShowMainFiring+7Ar ...
off_7678:	.long AtoTemp		@ DATA XREF: ShowMainFiring+88r
off_767C:	.long TargetVolts	@ DATA XREF: ShowMainFiring+17Ar
dword_7680:	.long 0x400048C8	@ DATA XREF: ShowMainFiring+1A8r

@ =============== S U B	R O U T	I N E =======================================


ShowVersion:				@ CODE XREF: DrawScreen:loc_151Ap
		PUSH	{R2-R4,LR}
		MOVS	R1, #88
		LDR	R0, off_76A8
		BL	DisplayStringCentered
		MOVS	R1, #3
		MOVS	R0, #0x52
		STRD.W	R0, R1,	[SP]
		MOVS	R3, #2
		MOVW	R2, #303
		MOVS	R1, #102
		MOVS	R0, #6
		BL	DisplayValue
		POP	{R2-R4,PC}
@ End of function ShowVersion

@ ---------------------------------------------------------------------------
		.balign 4,0
off_76A8:	.long String_Version	@ DATA XREF: ShowVersion+4r

@ =============== S U B	R O U T	I N E =======================================


ShowStealthMode:			@ CODE XREF: DrawScreen:loc_14E4p
		PUSH	{R4,LR}
		MOVS	R1, #0x58
		LDR	R0, off_76D4
		BL	DisplayStringCentered
		LDR	R0, off_76D8
		MOV.W	R1, #0x66
		LDRB.W	R0, [R0,#0x25]
		CBZ	R0, loc_76C8
		LDR	R0, off_76D4
		SUBS	R0, #(String_Stealth-String_ON)
		B	loc_76CC
@ ---------------------------------------------------------------------------

loc_76C8:				@ CODE XREF: ShowStealthMode+14j
		LDR	R0, off_76D4
		SUBS	R0, #(String_Stealth-String_OFF)

loc_76CC:				@ CODE XREF: ShowStealthMode+1Aj
		POP.W	{R4,LR}
		B.W	DisplayStringCentered
@ End of function ShowStealthMode

@ ---------------------------------------------------------------------------
off_76D4:	.long String_Stealth	@ DATA XREF: ShowStealthMode+4r
					@ ShowStealthMode+16r ...
off_76D8:	.long dfData		@ DATA XREF: ShowStealthMode+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowDevTooHot:				@ CODE XREF: DrawScreen:loc_14F0p
		PUSH	{R4,LR}
		MOVS	R1, #0x58
		LDR	R0, off_76F4
		BL	DisplayStringCentered
		LDR	R0, off_76F4
		MOVS	R1, #0x66
		POP.W	{R4,LR}
		ADDS	R0, #(String_TooHot-String_Device)
		B.W	DisplayStringCentered
@ End of function ShowDevTooHot

@ ---------------------------------------------------------------------------
off_76F4:	.long String_Device	@ DATA XREF: ShowDevTooHot+4r
					@ ShowDevTooHot+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowTiOnOff:				@ CODE XREF: DrawScreen:loc_153Ap
		LDR	R0, off_7710
		MOV.W	R1, #88
		LDRB.W	R0, [R0,#0x24]
		CBZ	R0, loc_7708
		LDR	R0, off_7714
		B	loc_770C
@ ---------------------------------------------------------------------------

loc_7708:				@ CODE XREF: ShowTiOnOff+Aj
		LDR	R0, off_7714
		ADDS	R0, #(String_TiOFF-String_TiON)

loc_770C:				@ CODE XREF: ShowTiOnOff+Ej
		B.W	DisplayStringCentered
@ End of function ShowTiOnOff

@ ---------------------------------------------------------------------------
off_7710:	.long dfData		@ DATA XREF: ShowTiOnOffr
off_7714:	.long String_TiON	@ DATA XREF: ShowTiOnOff+Cr
					@ ShowTiOnOff:loc_7708r

@ =============== S U B	R O U T	I N E =======================================


ShowAtoLow:				@ CODE XREF: DrawScreen:loc_14DEp
		PUSH	{R4,LR}
		MOVS	R1, #0x58
		LDR	R0, off_7730
		BL	DisplayStringCentered
		LDR	R0, off_7730
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Atomizer-String_Low)
		B.W	DisplayStringCentered
@ End of function ShowAtoLow

@ ---------------------------------------------------------------------------
off_7730:	.long String_Atomizer	@ DATA XREF: ShowAtoLow+4r
					@ ShowAtoLow+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowAtoShort:				@ CODE XREF: DrawScreen:loc_14D8p
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, off_774C
		BL	DisplayStringCentered
		LDR	R0, off_774C
		MOVS	R1, #102
		POP.W	{R4,LR}
		ADDS	R0, #(String_Short-String_Atomizer)
		B.W	DisplayStringCentered
@ End of function ShowAtoShort

@ ---------------------------------------------------------------------------
off_774C:	.long String_Atomizer	@ DATA XREF: ShowAtoShort+4r
					@ ShowAtoShort+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowBatLow:				@ CODE XREF: DrawScreen:loc_1502p
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, off_7768
		BL	DisplayStringCentered
		LDR	R0, off_7768
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Battery-String_Low)
		B.W	DisplayStringCentered
@ End of function ShowBatLow

@ ---------------------------------------------------------------------------
off_7768:	.long String_Battery	@ DATA XREF: ShowBatLow+4r
					@ ShowBatLow+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowBatLowLock:				@ CODE XREF: DrawScreen:loc_1508p
		PUSH	{R4,LR}
		MOVS	R1, #82
		LDR	R0, off_7790
		BL	DisplayStringCentered
		LDR	R0, off_7790
		MOVS	R1, #92
		SUBS	R0, #(String_Battery-String_Low)
		BL	DisplayStringCentered
		LDR	R0, off_7790
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Battery-String_Lock)
		B.W	DisplayStringCentered
@ End of function ShowBatLowLock

@ ---------------------------------------------------------------------------
		.balign 4,0
off_7790:	.long String_Battery	@ DATA XREF: ShowBatLowLock+4r
					@ ShowBatLowLock+Ar ...

@ =============== S U B	R O U T	I N E =======================================


ShowKeyLock:				@ CODE XREF: DrawScreen:loc_150Ep
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, off_77AC
		BL	DisplayStringCentered
		LDR	R0, off_77AC
		MOVS	R1, #102
		POP.W	{R4,LR}
		ADDS	R0, #(String_Lock-String_Key)
		B.W	DisplayStringCentered
@ End of function ShowKeyLock

@ ---------------------------------------------------------------------------
off_77AC:	.long String_Key	@ DATA XREF: ShowKeyLock+4r
					@ ShowKeyLock+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowKeyUnLock:				@ CODE XREF: DrawScreen:loc_1514p
		PUSH	{R4,LR}
		MOVS	R1, #0x58
		LDR	R0, off_77C8
		BL	DisplayStringCentered
		LDR	R0, off_77C8
		MOVS	R1, #0x66
		POP.W	{R4,LR}
		ADDS	R0, #(String_UnLock-String_Key)
		B.W	DisplayStringCentered
@ End of function ShowKeyUnLock

@ ---------------------------------------------------------------------------
off_77C8:	.long String_Key	@ DATA XREF: ShowKeyUnLock+4r
					@ ShowKeyUnLock+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowNoAtoFound:				@ CODE XREF: DrawScreen:loc_14D2p
		PUSH	{R4,LR}
		MOVS	R1, #0x52
		LDR	R0, off_77F0
		BL	DisplayStringCentered
		LDR	R0, off_77F0
		MOVS	R1, #0x5C
		ADDS	R0, #(String_Atomizer-String_No)
		BL	DisplayStringCentered
		LDR	R0, off_77F0
		MOVS	R1, #0x66
		POP.W	{R4,LR}
		ADDS	R0, #(String_Found-String_No)
		B.W	DisplayStringCentered
@ End of function ShowNoAtoFound

@ ---------------------------------------------------------------------------
		.balign 4,0
off_77F0:	.long String_No		@ DATA XREF: ShowNoAtoFound+4r
					@ ShowNoAtoFound+Ar ...

@ =============== S U B	R O U T	I N E =======================================


Show10sProtec:				@ CODE XREF: DrawScreen:loc_14FCp
		PUSH	{R4,LR}
		MOVS	R1, #88
		LDR	R0, off_780C
		BL	DisplayStringCentered
		LDR	R0, off_780C
		MOVS	R1, #102
		POP.W	{R4,LR}
		SUBS	R0, #(String_Over10s-String_Protec)
		B.W	DisplayStringCentered
@ End of function Show10sProtec

@ ---------------------------------------------------------------------------
off_780C:	.long String_Over10s	@ DATA XREF: Show10sProtec+4r
					@ Show10sProtec+Ar

@ =============== S U B	R O U T	I N E =======================================


ShowWeakBat:				@ CODE XREF: ShowMainView+798p
		PUSH	{R4,LR}
		MOVS	R1, #106
		LDR	R0, off_7828
		BL	DisplayStringCentered
		LDR	R0, off_7828
		MOVS	R1, #118
		POP.W	{R4,LR}
		ADDS	R0, #(String_Battery2-String_Weak)
		B.W	DisplayStringCentered
@ End of function ShowWeakBat

@ ---------------------------------------------------------------------------
off_7828:	.long String_Weak	@ DATA XREF: ShowWeakBat+4r
					@ ShowWeakBat+Ar

@ =============== S U B	R O U T	I N E =======================================


SleepIfIdle:				@ CODE XREF: GotoMain+906Cp
					@ GotoMain+9126p
		PUSH.W	{R4-R8,LR}
		LDR	R6, off_789C
		LDR	R4, off_78A0
		LDR	R0, [R6]
		LDRB	R2, [R4]
		UBFX.W	R1, R0,	#8, #1
		ORRS	R1, R2
		BNE	locret_7898
		LDR	R5, off_78A4	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDR	R2, off_78A8
		LDRB	R1, [R5]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDRH	R2, [R2]
		ORRS	R1, R2
		BNE	loc_7894
		LSLS	R0, R0,	#0x11
		BPL	loc_7894
		BL	sub_4F0C
		LDR	R1, off_78AC
		MOVS	R0, #2
		MOVS	R7, #0
		STRB	R0, [R1]
		LDR	R0, off_78B0
		STRB	R7, [R0]
		LDR	R0, off_78B4
		STR	R7, [R0]
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x8000
		STR	R0, [R6]
		BL	ReadBatteryVoltage
		LDR	R0, off_78B8
		LDRH	R0, [R0]
		CMP.W	R0, #300
		BHI	loc_788C
		LDRH	R0, [R6]
		LSLS	R0, R0,	#21
		BMI	loc_788C
		LDR	R0, off_78BC
		LDR	R1, [R0,#0x7C]
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#0x7C]
		STRB	R7, [R5]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu

loc_788C:				@ CODE XREF: SleepIfIdle+4Cj
					@ SleepIfIdle+52j
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x10000
		STR	R0, [R6]

loc_7894:				@ CODE XREF: SleepIfIdle+1Ej
					@ SleepIfIdle+22j
		MOVS	R0, #200
		STRB	R0, [R4]

locret_7898:				@ CODE XREF: SleepIfIdle+12j
		POP.W	{R4-R8,PC}
@ End of function SleepIfIdle

@ ---------------------------------------------------------------------------
off_789C:	.long dword_20000064	@ DATA XREF: SleepIfIdle+4r
off_78A0:	.long byte_2000004F	@ DATA XREF: SleepIfIdle+6r
off_78A4:	.long Screen		@ DATA XREF: SleepIfIdle+14r
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
off_78A8:	.long SleepTimer	@ DATA XREF: SleepIfIdle+16r
off_78AC:	.long byte_200000B3	@ DATA XREF: SleepIfIdle+28r
off_78B0:	.long byte_2000003E	@ DATA XREF: SleepIfIdle+30r
off_78B4:	.long AtoRezMilli	@ DATA XREF: SleepIfIdle+34r
off_78B8:	.long BatteryVoltage	@ DATA XREF: SleepIfIdle+44r
off_78BC:	.long dfData		@ DATA XREF: SleepIfIdle+54r

@ =============== S U B	R O U T	I N E =======================================


GetFrequencies:				@ CODE XREF: GetCPUClock+2p
					@ HCLKSelDiv+4Ap ...

var_C		= -0xC

		PUSH	{R3,R4,LR}
		ADR	R0, dword_7940
		MOV.W	R4, #0x40000000
		LDR	R0, [R0]
		STR	R0, [SP]
		LDR.W	R0, [R4,#0x240]	@ CLK_PLLCTL
		TST.W	R0, #0x50000
		BEQ	loc_78DA
		MOVS	R1, #0
		B	loc_790A
@ ---------------------------------------------------------------------------

loc_78DA:				@ CODE XREF: GetFrequencies+14j
		LSLS	R1, R0,	#12
		BPL	loc_78E2
		LDR	R1, dword_7944
		B	loc_78E4
@ ---------------------------------------------------------------------------

loc_78E2:				@ CODE XREF: GetFrequencies+1Cj
		LDR	R1, dword_7948

loc_78E4:				@ CODE XREF: GetFrequencies+20j
		LSLS	R2, R0,	#14
		BMI	loc_790A
		UBFX.W	R2, R0,	#0, #9	@ FBDIV
		UBFX.W	R3, R0,	#14, #2	@ OUTDIV
		LSRS	R1, R1,	#2
		ADDS	R2, R2,	#2
		LDRB.W	R3, [SP,R3]
		UBFX.W	R0, R0,	#9, #5	@ INDIV
		MULS	R1, R2
		ADDS	R0, R0,	#2
		SMULBB.W R0, R0, R3
		UDIV.W	R0, R1,	R0
		LSLS	R1, R0,	#2

loc_790A:				@ CODE XREF: GetFrequencies+18j
					@ GetFrequencies+26j
		LDR	R2, off_794C
		STR	R1, [R2,#8]	@ = PLLFOUT
		LDR.W	R0, [R4,#0x210]	@ CLK_CLKSEL0
		AND.W	R0, R0,	#7
		CMP	R0, #2		@ Source from PLL?
		BEQ	loc_7922
		ADD.W	R1, R2,	#0xC
		LDR.W	R1, [R1,R0,LSL#2]

loc_7922:				@ CODE XREF: GetFrequencies+58j
		LDR.W	R0, [R4,#0x220]	@ CLK_CLKDIV0
		AND.W	R0, R0,	#0xF	@ HCLKDIV
		ADDS	R0, R0,	#1
		UDIV.W	R0, R1,	R0
		LDR	R1, dword_7950
		STR	R0, [R2]	@ = CPUCLK
		ADD	R0, R1
		LSLS	R1, R1,	#1
		UDIV.W	R0, R0,	R1
		STR	R0, [R2,#4]	@ = CPUCLK en MHz (arrondi)
		POP	{R3,R4,PC}
@ End of function GetFrequencies

@ ---------------------------------------------------------------------------
dword_7940:	.long 0x4020201		@ DATA XREF: GetFrequencies+2o
					@ GetFrequencies+8r
dword_7944:	.long 22118400		@ DATA XREF: GetFrequencies+1Er
dword_7948:	.long 12000000		@ DATA XREF: GetFrequencies:loc_78E2r
off_794C:	.long CPUClock		@ DATA XREF: GetFrequencies:loc_790Ar
dword_7950:	.long 500000		@ DATA XREF: GetFrequencies+70r

@ =============== S U B	R O U T	I N E =======================================


EnableCopros:				@ CODE XREF: Reset_Handler+2Cp
					@ DATA XREF: Reset_Handler+2Ao	...
		LDR	R0, pCPACR
		LDR	R1, [R0]	@ CPACR
		ORR.W	R1, R1,	#0xF00000 @ Full access	to coprocessors	14 & 15
		STR	R1, [R0]
		BX	LR
@ End of function EnableCopros

@ ---------------------------------------------------------------------------
pCPACR:		.long 0xE000ED88	@ DATA XREF: EnableCoprosr

@ =============== S U B	R O U T	I N E =======================================


GetTMRSrcFrequency:			@ CODE XREF: SetTMRFreqAndMode+8p
		PUSH	{R4,LR}
		SUB	SP, SP,	#0x20
		MOV	R4, R0
		MOVS	R2, #0x20
		LDR	R1, off_79C0
		MOV	R0, SP
		BL	MemCpy
		LDR	R1, dword_79C4
		LSLS	R0, R1,	#0xE
		CMP	R4, R1
		BNE	loc_7986
		LDR.W	R0, [R0,#0x214]
		UBFX.W	R0, R0,	#8, #3
		B	loc_79AC
@ ---------------------------------------------------------------------------

loc_7986:				@ CODE XREF: GetTMRSrcFrequency+16j
		LDR	R1, dword_79C4
		ADDS	R1, #0x20
		CMP	R4, R1
		BNE	loc_7998
		LDR.W	R0, [R0,#0x214]
		UBFX.W	R0, R0,	#0xC, #3
		B	loc_79AC
@ ---------------------------------------------------------------------------

loc_7998:				@ CODE XREF: GetTMRSrcFrequency+28j
		LDR	R1, dword_79C8
		LDR.W	R0, [R0,#0x214]
		CMP	R4, R1
		BNE	loc_79A8
		UBFX.W	R0, R0,	#0x10, #3
		B	loc_79AC
@ ---------------------------------------------------------------------------

loc_79A8:				@ CODE XREF: GetTMRSrcFrequency+3Cj
		UBFX.W	R0, R0,	#20, #3

loc_79AC:				@ CODE XREF: GetTMRSrcFrequency+20j
					@ GetTMRSrcFrequency+32j ...
		CMP	R0, #2
		BEQ	loc_79B8
		LDR.W	R0, [SP,R0,LSL#2]

loc_79B4:				@ CODE XREF: GetTMRSrcFrequency+58j
		ADD	SP, SP,	#0x20
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_79B8:				@ CODE XREF: GetTMRSrcFrequency+4Aj
		LDR	R0, off_79CC
		LDR	R0, [R0]
		B	loc_79B4
@ End of function GetTMRSrcFrequency

@ ---------------------------------------------------------------------------
		.balign 4,0
off_79C0:	.long TMRSourceFreq	@ DATA XREF: GetTMRSrcFrequency+8r
dword_79C4:	.long 0x40050000	@ DATA XREF: GetTMRSrcFrequency+10r
					@ GetTMRSrcFrequency:loc_7986r
dword_79C8:	.long 0x40051000	@ DATA XREF: GetTMRSrcFrequency:loc_7998r
off_79CC:	.long CPUClock		@ DATA XREF: GetTMRSrcFrequency:loc_79B8r

@ =============== S U B	R O U T	I N E =======================================


SetTMRFreqAndMode:			@ CODE XREF: InitTimers+10p
					@ InitTimers+28p ...
		PUSH	{R4-R6,LR}
		MOV	R4, R2
		MOV	R6, R1
		MOV	R5, R0
		BL	GetTMRSrcFrequency
		MOVS	R1, #0
		CMP.W	R4, R0,LSR#1
		BLS	loc_79E8
		MOVS	R2, #2
		B	loc_7A0E
@ ---------------------------------------------------------------------------

loc_79E8:				@ CODE XREF: SetTMRFreqAndMode+12j
		LDR	R2, dword_7A20
		CMP	R0, R2
		BLS	loc_79F4
		MOVS	R1, #7
		LSRS	R0, R0,	#3
		B	loc_7A0A
@ ---------------------------------------------------------------------------

loc_79F4:				@ CODE XREF: SetTMRFreqAndMode+1Cj
		LDR	R2, dword_7A24
		CMP	R0, R2
		BLS	loc_7A00
		MOVS	R1, #3
		LSRS	R0, R0,	#2
		B	loc_7A0A
@ ---------------------------------------------------------------------------

loc_7A00:				@ CODE XREF: SetTMRFreqAndMode+28j
		LDR	R2, dword_7A28
		CMP	R0, R2
		BLS	loc_7A0A
		MOVS	R1, #1
		LSRS	R0, R0,	#1

loc_7A0A:				@ CODE XREF: SetTMRFreqAndMode+22j
					@ SetTMRFreqAndMode+2Ej ...
		UDIV.W	R2, R0,	R4

loc_7A0E:				@ CODE XREF: SetTMRFreqAndMode+16j
		ORRS	R6, R1
		STR	R6, [R5]
		STR	R2, [R5,#4]
		ADDS	R1, R1,	#1
		MULS	R2, R1
		UDIV.W	R0, R0,	R2
		POP	{R4-R6,PC}
@ End of function SetTMRFreqAndMode

@ ---------------------------------------------------------------------------
		@.align 0x10
		.balign 4,0
dword_7A20:	.long 64000000		@ DATA XREF: SetTMRFreqAndMode:loc_79E8r
dword_7A24:	.long 32000000		@ DATA XREF: SetTMRFreqAndMode:loc_79F4r
dword_7A28:	.long 16000000		@ DATA XREF: SetTMRFreqAndMode:loc_7A00r

@ =============== S U B	R O U T	I N E =======================================


TMR0_IRQHandler:			@ DATA XREF: ROM:000000C0o
		LDR	R0, dword_7A54
		LDR	R1, [R0,#8]
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	locret_7A52
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		LDR	R1, off_7A58
		LDR	R0, [R1]
		CMP.W	R0, #2000
		BCS	locret_7A52
		ADDS	R0, R0,	#1
		STR	R0, [R1]

locret_7A52:				@ CODE XREF: TMR0_IRQHandler+Aj
					@ TMR0_IRQHandler+20j
		BX	LR
@ End of function TMR0_IRQHandler

@ ---------------------------------------------------------------------------
dword_7A54:	.long 0x40050000	@ DATA XREF: TMR0_IRQHandlerr
off_7A58:	.long TMR0Counter2	@ DATA XREF: TMR0_IRQHandler+18r

@ =============== S U B	R O U T	I N E =======================================


TMR1_IRQHandler:			@ DATA XREF: ROM:000000C4o
		LDR	R0, dword_7A88
		LDR	R1, [R0,#8]	@ TIMER1_INTSTS
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	locret_7A86
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		LDR	R0, off_7A8C
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		LDR	R0, off_7A90
		LDR	R1, [R0,#4]
		ADDS	R1, R1,	#1
		STR	R1, [R0,#4]

locret_7A86:				@ CODE XREF: TMR1_IRQHandler+Aj
		BX	LR
@ End of function TMR1_IRQHandler

@ ---------------------------------------------------------------------------
dword_7A88:	.long 0x40050020	@ DATA XREF: TMR1_IRQHandlerr
off_7A8C:	.long dword_20000064	@ DATA XREF: TMR1_IRQHandler+18r
off_7A90:	.long TMR0Counter	@ DATA XREF: TMR1_IRQHandler+22r

@ =============== S U B	R O U T	I N E =======================================

@ Millisecond timer (1000Hz)

TMR2_IRQHandler:			@ DATA XREF: ROM:000000C8o
		LDR	R0, dword_7B10
		PUSH	{R4,R5}
		LDR	R1, [R0,#8]	@ TIMER2_INTSTS
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	loc_7B0C	@ not me!
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]	@ Clear	interrupt flag
		LDR	R3, off_7B14
		LDR	R4, off_7B18
		LDR	R0, [R3]
		ORR.W	R0, R0,	#6
		STR	R0, [R3]
		LDR	R1, [R4,#8]
		ADDS	R1, R1,	#1
		STR	R1, [R4,#8]
		LDR	R2, [R4,#8]
		MOVS	R1, #10
		UDIV.W	R5, R2,	R1
		MLS.W	R2, R1,	R5, R2
		CBNZ	R2, loc_7AD4
		ORR.W	R0, R0,	#8
		STR	R0, [R3]

loc_7AD4:				@ CODE XREF: TMR2_IRQHandler+38j
		LDR	R0, [R4,#8]
		LSLS	R2, R0,	#28
		LDR	R0, off_7B1C
		LDRB.W	R0, [R0,#0xC0]
		BNE	loc_7AE2
		CBZ	R0, loc_7B06

loc_7AE2:				@ CODE XREF: TMR2_IRQHandler+4Aj
		LDR	R2, [R4,#8]
		MOVS	R3, #0xD
		UDIV.W	R5, R2,	R3
		MLS.W	R2, R3,	R5, R2
		CBNZ	R2, loc_7AF4
		CMP	R0, #1
		BEQ	loc_7B06

loc_7AF4:				@ CODE XREF: TMR2_IRQHandler+5Aj
		LDR	R2, [R4,#8]
		UDIV.W	R3, R2,	R1
		MLS.W	R1, R1,	R3, R2
		CMP	R1, #0
		BNE	loc_7B0C
		CMP	R0, #2
		BNE	loc_7B0C

loc_7B06:				@ CODE XREF: TMR2_IRQHandler+4Cj
					@ TMR2_IRQHandler+5Ej
		POP	{R4,R5}
		B.W	TickFBTimeouts
@ ---------------------------------------------------------------------------

loc_7B0C:				@ CODE XREF: TMR2_IRQHandler+Cj
					@ TMR2_IRQHandler+6Cj ...
		POP	{R4,R5}
		BX	LR
@ End of function TMR2_IRQHandler

@ ---------------------------------------------------------------------------
dword_7B10:	.long 0x40051000	@ DATA XREF: TMR2_IRQHandlerr
off_7B14:	.long dword_20000064	@ DATA XREF: TMR2_IRQHandler+1Ar
off_7B18:	.long TMR0Counter	@ DATA XREF: TMR2_IRQHandler+1Cr
off_7B1C:	.long dfData		@ DATA XREF: TMR2_IRQHandler+44r

@ =============== S U B	R O U T	I N E =======================================


TMR3_IRQHandler:			@ DATA XREF: ROM:000000CCo
		LDR	R0, dword_7B8C
		PUSH	{R4,LR}
		LDR	R1, [R0,#8]
		UBFX.W	R1, R1,	#0, #1
		CMP	R1, #0
		BEQ	locret_7B88
		LDR	R1, [R0,#8]
		BIC.W	R1, R1,	#2
		ORR.W	R1, R1,	#1
		STR	R1, [R0,#8]
		LDR	R2, off_7B90
		LDR	R3, off_7B94
		LDR	R0, [R2]
		ORR.W	R0, R0,	#0x10
		STR	R0, [R2]
		LDR	R1, [R3,#0xC]
		ADDS	R1, R1,	#1
		STR	R1, [R3,#0xC]
		LDR	R1, [R3,#0xC]
		LSLS	R1, R1,	#0x1F
		BNE	loc_7B58
		ORR.W	R0, R0,	#0x20
		STR	R0, [R2]

loc_7B58:				@ CODE XREF: TMR3_IRQHandler+30j
		LDR	R0, [R3,#0xC]
		MOVS	R1, #5
		UDIV.W	R4, R0,	R1
		MLS.W	R0, R1,	R4, R0
		CBNZ	R0, loc_7B6E
		LDR	R0, [R2]
		ORR.W	R0, R0,	#0x40
		STR	R0, [R2]

loc_7B6E:				@ CODE XREF: TMR3_IRQHandler+44j
		LDR	R0, [R3,#0xC]
		MOVS	R1, #0xA
		UDIV.W	R2, R0,	R1
		MLS.W	R0, R1,	R2, R0
		CMP	R0, #0
		BNE	locret_7B88
		LDR	R0, off_7B98
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x100
		STR	R1, [R0]

locret_7B88:				@ CODE XREF: TMR3_IRQHandler+Cj
					@ TMR3_IRQHandler+5Cj
		POP	{R4,PC}
@ End of function TMR3_IRQHandler

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_7B8C:	.long 0x40051020	@ DATA XREF: TMR3_IRQHandlerr
off_7B90:	.long dword_20000064	@ DATA XREF: TMR3_IRQHandler+1Ar
off_7B94:	.long TMR0Counter	@ DATA XREF: TMR3_IRQHandler+1Cr
off_7B98:	.long dword_20000068	@ DATA XREF: TMR3_IRQHandler+5Er

@ =============== S U B	R O U T	I N E =======================================


CallTimeouts:				@ CODE XREF: GotoMain+9054p
		PUSH	{R4-R6,LR}
		LDR	R4, off_7BD8
		MOVS	R0, #1
		LDR	R5, off_7BDC
		STRB	R0, [R4]
		MOVS	R0, #0
		STRB	R0, [R4,#1]

loc_7BAA:				@ CODE XREF: CallTimeouts+36j
		LDRB	R0, [R4,#2]
		LDRB	R1, [R4]
		TST	R0, R1
		BEQ	loc_7BC2
		LDRB	R0, [R4,#1]
		LDRB.W	R1, [R5,R0,LSL#3]
		CBNZ	R1, loc_7BC2
		ADD.W	R0, R5,	R0,LSL#3
		LDR	R0, [R0,#4]
		BLX	R0

loc_7BC2:				@ CODE XREF: CallTimeouts+14j
					@ CallTimeouts+1Cj
		LDRB	R0, [R4]
		LSLS	R0, R0,	#1
		STRB	R0, [R4]
		LDRB	R0, [R4,#1]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R4,#1]
		CMP	R0, #3
		BCC	loc_7BAA
		POP	{R4-R6,PC}
@ End of function CallTimeouts

@ ---------------------------------------------------------------------------
		.balign 4,0
off_7BD8:	.long TimeoutMask	@ DATA XREF: CallTimeouts+2r
off_7BDC:	.long TimeoutsTable	@ DATA XREF: CallTimeouts+6r

@ =============== S U B	R O U T	I N E =======================================


ReadBoardTemp:				@ CODE XREF: GotoMain+9032p
					@ GotoMain+912Ep
		PUSH.W	{R4-R8,LR}
		LDR	R5, off_7CCC
		SUB.W	R4, R5,	#0x28

loc_7BEA:				@ CODE XREF: ReadBoardTemp+26j
		LDRB	R0, [R4,#0xB]
		CMP	R0, #0x10
		BCS	loc_7C0C
		MOVS	R0, #0xE
		BL	ADC_Read	@ R0: Channel
		LDR	R1, [R4,#0x3C]
		ADD	R0, R1
		STR	R0, [R4,#0x3C]
		LDRB	R0, [R4,#0xB]
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#0xB]
		LDR	R0, [R5]
		LSLS	R0, R0,	#0xF
		BMI	loc_7BEA

locret_7C08:				@ CODE XREF: ReadBoardTemp+E8j
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_7C0C:				@ CODE XREF: ReadBoardTemp+Ej
		LDR	R0, [R5]
		MOVS	R6, #0
		BIC.W	R0, R0,	#0x10000
		STR	R0, [R5]
		LDR	R0, [R4,#0x3C]
		MOVW	R1, #0x87F0
		LSRS	R0, R0,	#4
		STR	R0, [R4,#0x3C]
		CMP.W	R0, #0x1000
		BEQ	loc_7C4A
		CBZ	R0, loc_7C4A
		MOV.W	R2, #0x7D0
		MULS	R2, R0
		RSB.W	R0, R0,	#0x14A0
		UDIV.W	R0, R2,	R0
		ADD.W	R0, R0,	R0,LSL#2
		LSLS	R2, R0,	#1
		MOVW	R0, #0x276
		STR	R2, [R4,#0x3C]
		CMP	R2, R0
		BHI	loc_7C4E
		MOVS	R0, #0x63
		B	loc_7CC2
@ ---------------------------------------------------------------------------

loc_7C4A:				@ CODE XREF: ReadBoardTemp+44j
					@ ReadBoardTemp+46j
		STR	R1, [R4,#0x3C]
		B	loc_7C52
@ ---------------------------------------------------------------------------

loc_7C4E:				@ CODE XREF: ReadBoardTemp+64j
		CMP	R2, R1
		BCC	loc_7C56

loc_7C52:				@ CODE XREF: ReadBoardTemp+6Cj
		STRB	R6, [R4,#0xA]
		B	loc_7CC4
@ ---------------------------------------------------------------------------

loc_7C56:				@ CODE XREF: ReadBoardTemp+70j
		LDR	R0, off_7CD0
		MOVS	R1, #1

loc_7C5A:				@ CODE XREF: ReadBoardTemp+88j
		LDR.W	R3, [R0,R1,LSL#2]
		CMP	R3, R2
		BLS	loc_7C6A
		ADDS	R1, R1,	#1
		UXTB	R1, R1
		CMP	R1, #20
		BCC	loc_7C5A

loc_7C6A:				@ CODE XREF: ReadBoardTemp+80j
		ADD.W	R3, R0,	R1,LSL#2
		LDR.W	R5, [R0,R1,LSL#2]
		LDR.W	R3, [R3,#-4]
		ADD.W	R2, R2,	R2,LSL#2
		ADD.W	R3, R3,	R3,LSL#2
		LSLS	R3, R3,	#1
		NEGS	R0, R5
		ADD.W	R0, R0,	R0,LSL#2
		ADD.W	R0, R3,	R0,LSL#1
		MOVS	R3, #5
		UDIV.W	R0, R0,	R3
		UXTH	R3, R0
		MOVS	R0, #0
		ADD.W	R5, R5,	R5,LSL#2

loc_7C98:				@ CODE XREF: ReadBoardTemp+DAj
		MUL.W	R7, R3,	R0
		ADD.W	R7, R7,	R5,LSL#1
		CMP.W	R7, R2,LSL#1
		BHI	loc_7CB4
		ADDS	R7, R0,	#1
		MULS	R7, R3
		ADD.W	R7, R7,	R5,LSL#1
		CMP.W	R7, R2,LSL#1
		BHI	loc_7CBC

loc_7CB4:				@ CODE XREF: ReadBoardTemp+C4j
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #5
		BCC	loc_7C98

loc_7CBC:				@ CODE XREF: ReadBoardTemp+D2j
		ADD.W	R1, R1,	R1,LSL#2
		SUBS	R0, R1,	R0

loc_7CC2:				@ CODE XREF: ReadBoardTemp+68j
		STRB	R0, [R4,#0xA]

loc_7CC4:				@ CODE XREF: ReadBoardTemp+74j
		STRB	R6, [R4,#0xB]
		STR	R6, [R4,#0x3C]
		B	locret_7C08
@ End of function ReadBoardTemp

@ ---------------------------------------------------------------------------
		.balign 4,0
off_7CCC:	.long dword_20000064	@ DATA XREF: ReadBoardTemp+4r
off_7CD0:	.long BoardTempTable	@ DATA XREF: ReadBoardTemp:loc_7C56r

@ =============== S U B	R O U T	I N E =======================================


InitTimers:				@ CODE XREF: InitHardware+36p
		PUSH.W	{R4-R8,LR}
		LDR	R4, dword_7D80
		MOV.W	R7, #0x8000000	@ OPMODE = periodic
		LDR	R2, dword_7D7C
		MOV	R1, R7
		MOV	R0, R4
		BL	SetTMRFreqAndMode @ TMR0: 100kHz
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R4]	@ INTEN	= 1
		LDR	R5, dword_7D80
		MOVW	R2, #5000
		ADDS	R5, #0x20
		MOV	R1, R7
		MOV	R0, R5
		BL	SetTMRFreqAndMode @ TMR2: 5000Hz
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R5]	@ INTEN	= 1
		LDR	R6, dword_7D84
		MOV.W	R2, #1000
		MOV	R1, R7
		MOV	R0, R6
		BL	SetTMRFreqAndMode @ TMR3: 1000Hz
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R6]	@ INTEN	= 1
		MOV	R1, R7
		LDR	R7, dword_7D84
		MOVS	R2, #10
		ADDS	R7, #0x20
		MOV	R0, R7
		BL	SetTMRFreqAndMode @ TMR4: 10Hz
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x20000000
		STR	R0, [R7]	@ INTEN	= 1
		MOVS	R0, #0x20
		BL	NVICEnableInt
		MOVS	R0, #0x21
		BL	NVICEnableInt
		MOVS	R0, #0x22
		BL	NVICEnableInt
		MOVS	R0, #0x23
		BL	NVICEnableInt	@ Enable all 4 IRQs
		LDR	R1, off_7D88
		MOVS	R0, #0
		STR	R0, [R1,#0xC]
		STR	R0, [R1,#8]
		STR	R0, [R1,#4]
		STR	R0, [R1]	@ Reset	soft counters
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R4]
		LDR	R0, [R5]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R5]
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R6]
		LDR	R0, [R7]
		ORR.W	R0, R0,	#0x40000000
		STR	R0, [R7]	@ Start	TMR counters
		POP.W	{R4-R8,PC}
@ End of function InitTimers

@ ---------------------------------------------------------------------------
dword_7D7C:	.long 100000		@ DATA XREF: InitTimers+Ar
dword_7D80:	.long 0x40050000	@ DATA XREF: InitTimers+4r
					@ InitTimers+1Cr
dword_7D84:	.long 0x40051000	@ DATA XREF: InitTimers+34r
					@ InitTimers+4Cr
off_7D88:	.long TMR0Counter	@ DATA XREF: InitTimers+78r

@ =============== S U B	R O U T	I N E =======================================


TimedItems:				@ CODE XREF: GotoMain+9068p
					@ GotoMain:loc_926Ap
		PUSH.W	{R4-R8,LR}
		LDR	R5, off_7ED8	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		LDRB	R0, [R5]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CBNZ	R0, loc_7DA0
		LDR	R1, off_7EDC
		LDRH	R0, [R1]
		CBZ	R0, loc_7DA0
		SUBS	R0, R0,	#1
		STRH	R0, [R1]

loc_7DA0:				@ CODE XREF: TimedItems+8j
					@ TimedItems+Ej
		LDR	R0, dword_7EE0	@ PD7_PDIO
		LDR	R0, [R0]
		LDR	R6, off_7EE4
		CBNZ	R0, loc_7DB6
		LDRB	R0, [R6,#0xC]
		CMP	R0, #2
		BCC	loc_7DB6
		CMP	R0, #50
		BCS	loc_7DB6
		ADDS	R0, R0,	#1
		STRB	R0, [R6,#0xC]

loc_7DB6:				@ CODE XREF: TimedItems+1Aj
					@ TimedItems+20j ...
		LDRB	R0, [R6,#0x13]
		CBZ	R0, loc_7DBE
		SUBS	R0, R0,	#1
		STRB	R0, [R6,#0x13]

loc_7DBE:				@ CODE XREF: TimedItems+2Cj
		LDR	R4, off_7EE4
		LDRH	R0, [R6,#0x16]
		MOVS	R7, #0x1E
		LDR.W	R8, off_7EE8
		ADDS	R4, #0x28
		CBZ	R0, loc_7E1C
		SUBS	R0, R0,	#1
		LSLS	R0, R0,	#0x10
		LSRS	R0, R0,	#0x10
		MOV	R1, R4
		STRH	R0, [R6,#0x16]
		LDR	R2, [R1]
		MOV.W	R3, #0x32
		ORR.W	R1, R2,	#0x40000
		BEQ	loc_7DEE
		UDIV.W	R12, R0, R3
		MLS.W	R0, R3,	R12, R0
		CBZ	R0, loc_7E0A
		B	loc_7E1C
@ ---------------------------------------------------------------------------

loc_7DEE:				@ CODE XREF: TimedItems+54j
		LDR	R0, off_7EE4
		ADDS	R0, #0x2C
		LDR	R2, [R0]
		BIC.W	R2, R2,	#0x10
		STR	R2, [R0]
		ORR.W	R0, R1,	#0x20000
		STR	R0, [R4]
		LDR	R0, off_7EEC
		STRB.W	R7, [R8]
		STRB	R3, [R0]
		B	loc_7E1C
@ ---------------------------------------------------------------------------

loc_7E0A:				@ CODE XREF: TimedItems+5Ej
		LSLS	R0, R2,	#0xD
		BPL	loc_7E16
		BIC.W	R0, R2,	#0x40000
		STR	R0, [R4]
		B	loc_7E18
@ ---------------------------------------------------------------------------

loc_7E16:				@ CODE XREF: TimedItems+80j
		STR	R1, [R4]

loc_7E18:				@ CODE XREF: TimedItems+88j
		BL	MainView

loc_7E1C:				@ CODE XREF: TimedItems+3Ej
					@ TimedItems+60j ...
		LDRB	R0, [R6,#0x15]
		CBZ	R0, loc_7E32
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R6,#0x15]
		BNE	loc_7E32
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x800
		STR	R0, [R4]

loc_7E32:				@ CODE XREF: TimedItems+92j
					@ TimedItems+9Cj
		LDRB	R0, [R6,#4]
		MOVS	R2, #0
		CBZ	R0, loc_7E44
		SUBS	R0, R0,	#1
		ANDS.W	R0, R0,	#0xFF
		STRB	R0, [R6,#4]
		BNE	loc_7E44
		STRB	R2, [R6,#3]

loc_7E44:				@ CODE XREF: TimedItems+AAj
					@ TimedItems+B4j
		LDR	R1, off_7EF0
		LDRB	R0, [R1]
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		STRB	R0, [R1]
		CMP	R0, #0x64
		BCC	locret_7EB4
		STRB	R2, [R1]
		LDR	R0, [R4]
		LSLS	R1, R0,	#0x13
		BPL	loc_7E94
		LSLS	R1, R0,	#0xA
		BMI	loc_7E64
		ORR.W	R1, R0,	#0x200000
		B	loc_7E68
@ ---------------------------------------------------------------------------

loc_7E64:				@ CODE XREF: TimedItems+D0j
		BIC.W	R1, R0,	#0x200000

loc_7E68:				@ CODE XREF: TimedItems+D6j
		STR	R1, [R4]
		LDRB	R0, [R5]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R0, #1
		BEQ	loc_7E78
		CMP	R0, #3
		BEQ	loc_7E78
		CMP	R0, #5
		BNE	locret_7EB4

loc_7E78:				@ CODE XREF: TimedItems+E2j
					@ TimedItems+E6j
		LDRB	R2, [R6,#0x11]
		CMP	R2, #0xA
		BCC	loc_7E82
		LDRB	R2, [R6,#0xF]
		B	loc_7E84
@ ---------------------------------------------------------------------------

loc_7E82:				@ CODE XREF: TimedItems+F0j
		ADDS	R2, R2,	#1

loc_7E84:				@ CODE XREF: TimedItems+F4j
		STRB	R2, [R6,#0x11]
		CMP	R0, #3
		BEQ	loc_7ED0
		CMP	R0, #1
		BEQ	loc_7ED0
		STRB.W	R7, [R8]
		B	loc_7ED0
@ ---------------------------------------------------------------------------

loc_7E94:				@ CODE XREF: TimedItems+CCj
		LSLS	R1, R0,	#0xC
		BPL	loc_7EB8
		LSLS	R1, R0,	#0xB
		BMI	loc_7EA2
		ORR.W	R0, R0,	#0x100000
		B	loc_7EA6
@ ---------------------------------------------------------------------------

loc_7EA2:				@ CODE XREF: TimedItems+10Ej
		BIC.W	R0, R0,	#0x100000

loc_7EA6:				@ CODE XREF: TimedItems+114j
		STR	R0, [R4]
		LDRB	R1, [R5]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R1, #1
		BNE	locret_7EB4
		ORR.W	R0, R0,	#0x20000

loc_7EB2:				@ CODE XREF: TimedItems+148j
		STR	R0, [R4]

locret_7EB4:				@ CODE XREF: TimedItems+C4j
					@ TimedItems+EAj ...
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_7EB8:				@ CODE XREF: TimedItems+10Aj
		LSLS	R1, R0,	#0xA
		BMI	loc_7EC0
		LSLS	R1, R0,	#0xB
		BPL	locret_7EB4

loc_7EC0:				@ CODE XREF: TimedItems+12Ej
		BIC.W	R1, R0,	#0x300000
		STR	R1, [R4]
		LDRB	R0, [R5]	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		CMP	R0, #1
		BEQ	loc_7ED0
		CMP	R0, #3
		BNE	locret_7EB4

loc_7ED0:				@ CODE XREF: TimedItems+FCj
					@ TimedItems+100j ...
		ORR.W	R0, R1,	#0x20000
		B	loc_7EB2
@ End of function TimedItems

@ ---------------------------------------------------------------------------
		.balign 4,0
off_7ED8:	.long Screen		@ DATA XREF: TimedItems+4r
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
off_7EDC:	.long SleepTimer	@ DATA XREF: TimedItems+Ar
dword_7EE0:	.long 0x400048DC	@ DATA XREF: TimedItems:loc_7DA0r
off_7EE4:	.long byte_2000003C	@ DATA XREF: TimedItems+18r
					@ TimedItems:loc_7DBEr	...
off_7EE8:	.long ScreenDuration	@ DATA XREF: TimedItems+38r
off_7EEC:	.long UpdateDFTimer	@ DATA XREF: TimedItems+74r
off_7EF0:	.long byte_200000F7	@ DATA XREF: TimedItems:loc_7E44r

@ =============== S U B	R O U T	I N E =======================================


InitUART0:				@ CODE XREF: InitHardware+22p

var_24		= -0x24

		PUSH	{R4,LR}
		LDR	R0, dword_7F0C	@ UART0RST
		BL	PeriphReset
		POP.W	{R4,LR}
		MOV.W	R1, #115200
		LDR	R0, dword_7F10
		B.W	loc_7F14
@ ---------------------------------------------------------------------------
		.balign 4,0
dword_7F0C:	.long 0x4000010		@ DATA XREF: InitUART0+2r
dword_7F10:	.long 0x40070000	@ DATA XREF: InitUART0+10r
@ ---------------------------------------------------------------------------

loc_7F14:				@ CODE XREF: InitUART0+12j
		PUSH.W	{R0-R8,LR}
		MOV	R4, R0
		LDR	R0, off_7F94
		MOV	R5, R1
		LDMIA	R0, {R0-R3}
		STMEA.W	SP, {R0-R3}
		MOV.W	R0, #0x40000000
		LDR.W	R1, [R0,#0x214]	@ CLK_CLKSEL
		LDR.W	R0, [R0,#0x220]	@ CLK_CLKDIV0
		UBFX.W	R7, R1,	#24, #2	@ UARTSEL
		UBFX.W	R6, R0,	#8, #4	@ UARTDIV
		MOVS	R0, #0
		STR	R0, [R4,#0x30]	@ UART0_FUNCSEL	= UART
		MOVS	R0, #3
		STR	R0, [R4,#0xC]	@ UART0_LINE.WLS = 3 (8	bits word length)
		LDR	R0, [R4,#8]
		LDR	R1, dword_7F98
		ANDS	R0, R1
		STR	R0, [R4,#8]	@ FIFO trigger level for INT and flow control =	1 byte
		MOV	R8, SP
		CMP	R7, #1
		BNE	loc_7F54
		BL	GetPLLFreq
		STR	R0, [SP,#4]

loc_7F54:				@ CODE XREF: InitUART0+58j
		CMP	R5, #0
		BEQ	locret_7F8E
		LDR.W	R1, [R8,R7,LSL#2]
		ADDS	R6, R6,	#1
		UDIV.W	R0, R1,	R6
		ADD.W	R0, R0,	R5,LSR#1
		UDIV.W	R0, R0,	R5
		SUBS	R0, R0,	#2
		CMP.W	R0, #0x10000
		BCC	loc_7F88
		UDIV.W	R0, R1,	R6
		ADD.W	R0, R0,	R5,LSL#3
		UDIV.W	R0, R0,	R5
		MVN.W	R1, #1
		ADD.W	R0, R1,	R0,LSR#4
		B	loc_7F8C
@ ---------------------------------------------------------------------------

loc_7F88:				@ CODE XREF: InitUART0+7Cj
		ORR.W	R0, R0,	#0x30000000

loc_7F8C:				@ CODE XREF: InitUART0+92j
		STR	R0, [R4,#0x24]	@ UART_BAUD

locret_7F8E:				@ CODE XREF: InitUART0+62j
		POP.W	{R0-R8,PC}
@ End of function InitUART0

@ ---------------------------------------------------------------------------
		.balign 4,0
off_7F94:	.long dword_DAAC	@ DATA XREF: InitUART0+26r
dword_7F98:	.long 0xFFF0FF0F	@ DATA XREF: InitUART0+4Er

@ =============== S U B	R O U T	I N E =======================================


sub_7F9C:				@ CODE XREF: sub_7FB8:loc_7FFEp
					@ DisplayTextXY+10p

var_8		= -8

		PUSH	{R3,LR}
		SUBS	R2, #0x20
		LDR	R3, off_7FB4
		UXTB	R2, R2
		ADD.W	R2, R3,	R2,LSL#4
		STR	R2, [SP]
		MOVS	R3, #0x10
		MOVS	R2, #8
		BL	sub_805E
		POP	{R3,PC}
@ End of function sub_7F9C

@ ---------------------------------------------------------------------------
off_7FB4:	.long FBFont		@ DATA XREF: sub_7F9C+4r

@ =============== S U B	R O U T	I N E =======================================


sub_7FB8:				@ CODE XREF: sub_854+102p sub_854+118p ...
		PUSH.W	{R4-R11,LR}
		MOV	R4, R3
		MOV	R5, R2
		MOV	R11, R1
		MOV	R6, R0
		MOVW	R7, #10000
		MOV.W	R8, #1000
		MOV.W	R9, #100
		MOV.W	R10, #10
		B	loc_800A
@ ---------------------------------------------------------------------------

loc_7FD6:				@ CODE XREF: sub_7FB8+54j
		CMP	R5, #6		@ switch 6 cases
		BCS	def_20007FDA	@ jumptable 20007FDA default case
		TBB.W	[PC,R5]		@ switch jump
@ ---------------------------------------------------------------------------
jpt_20007FDA:	.byte 0x12		@ jump table for switch	statement
		.byte 0x28
		.byte 0x21
		.byte 0x1A
		.byte 6
		.byte 3
@ ---------------------------------------------------------------------------

loc_7FE4:				@ CODE XREF: sub_7FB8+22j
		UDIV.W	R0, R4,	R7	@ jumptable 20007FDA case 5
		B	loc_7FF6
@ ---------------------------------------------------------------------------

loc_7FEA:				@ CODE XREF: sub_7FB8+22j
		UDIV.W	R0, R4,	R7	@ jumptable 20007FDA case 4
		MLS.W	R1, R7,	R0, R4
		UDIV.W	R0, R1,	R8

loc_7FF6:				@ CODE XREF: sub_7FB8+30j sub_7FB8+66j
		ADDS	R0, #0x30
		UXTB	R2, R0
		MOV	R1, R11
		MOV	R0, R6

loc_7FFE:				@ CODE XREF: sub_7FB8+84j
		BL	sub_7F9C

def_20007FDA:				@ CODE XREF: sub_7FB8+20j sub_7FB8+22j
		ADDS	R6, #8		@ jumptable 20007FDA default case
		SUBS	R5, R5,	#1
		UXTB	R6, R6
		UXTB	R5, R5

loc_800A:				@ CODE XREF: sub_7FB8+1Cj
		CMP	R5, #0
		BNE	loc_7FD6
		POP.W	{R4-R11,PC}
@ ---------------------------------------------------------------------------

loc_8012:				@ CODE XREF: sub_7FB8+22j
		UDIV.W	R1, R4,	R8	@ jumptable 20007FDA case 3
		MLS.W	R1, R8,	R1, R4
		UDIV.W	R0, R1,	R9
		B	loc_7FF6
@ ---------------------------------------------------------------------------

loc_8020:				@ CODE XREF: sub_7FB8+22j
		UDIV.W	R1, R4,	R9	@ jumptable 20007FDA case 2
		MLS.W	R1, R9,	R1, R4
		UDIV.W	R2, R1,	R10
		B	loc_8036
@ ---------------------------------------------------------------------------

loc_802E:				@ CODE XREF: sub_7FB8+22j
		UDIV.W	R1, R4,	R10	@ jumptable 20007FDA case 1
		MLS.W	R2, R10, R1, R4

loc_8036:				@ CODE XREF: sub_7FB8+74j
		MOV	R1, R11
		MOV	R0, R6
		ADDS	R2, #0x30
		B	loc_7FFE
@ End of function sub_7FB8


@ =============== S U B	R O U T	I N E =======================================


DisplayTextXY:				@ CODE XREF: sub_854+E6p sub_854+F0p ...
		PUSH	{R4-R6,LR}
		MOV	R4, R2
		MOV	R6, R1
		MOV	R5, R0
		B	loc_8056
@ ---------------------------------------------------------------------------

loc_8048:				@ CODE XREF: DisplayTextXY+1Cj
		MOV	R1, R6
		MOV	R0, R5
		ADDS	R4, R4,	#1
		BL	sub_7F9C
		ADDS	R5, #8
		UXTB	R5, R5

loc_8056:				@ CODE XREF: DisplayTextXY+8j
		LDRB	R2, [R4]
		CMP	R2, #0
		BNE	loc_8048
		POP	{R4-R6,PC}
@ End of function DisplayTextXY


@ =============== S U B	R O U T	I N E =======================================


sub_805E:				@ CODE XREF: sub_1798+Ep sub_504C+2Ap	...

var_28		= -0x28
arg_0		=  0

		PUSH.W	{R3-R11,LR}
		MOV	R9, R3
		LDR.W	R8, [SP,#0x28]
		MOV	R10, R1
		MOV	R6, R0
		MOV.W	R11, R2,LSR#3
		STR	R0, [SP]
		B	loc_80AC
@ ---------------------------------------------------------------------------

loc_8074:				@ CODE XREF: sub_805E+56j
		MOVS	R7, #0
		B	loc_809E
@ ---------------------------------------------------------------------------

loc_8078:				@ CODE XREF: sub_805E+42j
		LDRB.W	R5, [R8],#1
		MOVS	R4, #0

loc_807E:				@ CODE XREF: sub_805E+3Aj
		LSLS	R0, R5,	#0x1F
		BEQ	loc_808C
		MOVS	R2, #1
		MOV	R1, R10
		MOV	R0, R6
		BL	sub_8188

loc_808C:				@ CODE XREF: sub_805E+22j
		ADDS	R6, R6,	#1
		ADDS	R4, R4,	#1
		LSRS	R5, R5,	#1
		UXTB	R4, R4
		UXTB	R6, R6
		CMP	R4, #8
		BCC	loc_807E
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_809E:				@ CODE XREF: sub_805E+18j
		CMP	R7, R11
		BCC	loc_8078
		ADD.W	R0, R10, #1
		LDR	R6, [SP]
		AND.W	R10, R0, #0xFF

loc_80AC:				@ CODE XREF: sub_805E+14j
		SUBS.W	R1, R9,	#1
		AND.W	R9, R1,	#0xFF
		BCS	loc_8074
		POP.W	{R3-R11,PC}
@ End of function sub_805E


@ =============== S U B	R O U T	I N E =======================================


sub_80BA:				@ CODE XREF: sub_854+CCp sub_854+DCp

anonymous_0	=  0

		PUSH.W	{R4-R10,LR}
		MOV	R4, R0
		LDRD.W	R10, R0, [SP,#0x20]
		MOV	R6, R3
		MOV	R8, R2
		MOV	R5, R1
		CBZ	R0, loc_8110
		CMP	R5, R6
		BLS	loc_80D6
		MOV	R7, R3
		MOV	R6, R1
		B	loc_80D8
@ ---------------------------------------------------------------------------

loc_80D6:				@ CODE XREF: sub_80BA+14j
		MOV	R7, R1

loc_80D8:				@ CODE XREF: sub_80BA+1Aj
		CMP	R8, R4
		BCS	loc_80E2
		SUB.W	R0, R4,	R8
		B	loc_80E6
@ ---------------------------------------------------------------------------

loc_80E2:				@ CODE XREF: sub_80BA+20j
		SUB.W	R0, R8,	R4

loc_80E6:				@ CODE XREF: sub_80BA+26j
		AND.W	R8, R0,	#0xFF
		B	loc_8108
@ ---------------------------------------------------------------------------

loc_80EC:				@ CODE XREF: sub_80BA+50j
		MOVS	R5, #0
		B	loc_8100
@ ---------------------------------------------------------------------------

loc_80F0:				@ CODE XREF: sub_80BA+48j
		ADDS	R0, R4,	R5
		UXTB	R0, R0
		MOV	R2, R10
		MOV	R1, R7
		BL	sub_8188
		ADDS	R5, R5,	#1
		UXTB	R5, R5

loc_8100:				@ CODE XREF: sub_80BA+34j
		CMP	R5, R8
		BCC	loc_80F0
		ADDS	R7, R7,	#1
		UXTB	R7, R7

loc_8108:				@ CODE XREF: sub_80BA+30j
		CMP	R7, R6
		BLS	loc_80EC

locret_810C:				@ CODE XREF: sub_80BA+CCj
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_8110:				@ CODE XREF: sub_80BA+10j
		MOV	R0, R2
		CMP	R4, R8
		BLS	loc_811A
		MOV	R8, R4
		MOV	R4, R0

loc_811A:				@ CODE XREF: sub_80BA+5Aj
		CMP	R5, R6
		BLS	loc_8122
		MOV	R6, R1
		MOV	R5, R3

loc_8122:				@ CODE XREF: sub_80BA+62j
		SUB.W	R9, R8,	R4
		AND.W	R7, R9,	#0xFF
		B	loc_8138
@ ---------------------------------------------------------------------------

loc_812C:				@ CODE XREF: sub_80BA+82j
		ADDS	R0, R4,	R7
		UXTB	R0, R0
		MOV	R2, R10
		MOV	R1, R5
		BL	sub_8188

loc_8138:				@ CODE XREF: sub_80BA+70j
		SUBS	R7, R7,	#1
		UXTB	R7, R7
		BCS	loc_812C
		AND.W	R7, R9,	#0xFF
		B	loc_8150
@ ---------------------------------------------------------------------------

loc_8144:				@ CODE XREF: sub_80BA+9Aj
		ADDS	R0, R4,	R7
		UXTB	R0, R0
		MOV	R2, R10
		MOV	R1, R6
		BL	sub_8188

loc_8150:				@ CODE XREF: sub_80BA+88j
		SUBS	R7, R7,	#1
		UXTB	R7, R7
		BCS	loc_8144
		SUBS	R7, R6,	R5
		UXTB	R6, R7
		B	loc_8168
@ ---------------------------------------------------------------------------

loc_815C:				@ CODE XREF: sub_80BA+B2j
		ADDS	R0, R5,	R6
		UXTB	R1, R0
		MOV	R2, R10
		MOV	R0, R4
		BL	sub_8188

loc_8168:				@ CODE XREF: sub_80BA+A0j
		SUBS	R6, R6,	#1
		UXTB	R6, R6
		BCS	loc_815C
		ADDS	R7, R7,	#1
		UXTB	R4, R7
		B	loc_8180
@ ---------------------------------------------------------------------------

loc_8174:				@ CODE XREF: sub_80BA+CAj
		ADDS	R0, R5,	R4
		UXTB	R1, R0
		MOV	R2, R10
		MOV	R0, R8
		BL	sub_8188

loc_8180:				@ CODE XREF: sub_80BA+B8j
		SUBS	R4, R4,	#1
		UXTB	R4, R4
		BCS	loc_8174
		B	locret_810C
@ End of function sub_80BA


@ =============== S U B	R O U T	I N E =======================================


sub_8188:				@ CODE XREF: sub_805E+2Ap sub_80BA+3Ep ...
		PUSH	{R4,R5,LR}
		LDR	R4, off_81E4
		CMP	R0, #0x7F
		BHI	locret_81DC
		CMP	R1, #0x3F
		BHI	locret_81DC
		LDR	R3, off_81E8
		RSB.W	R0, R0,	#0x7F
		UXTB	R0, R0
		LDRB	R5, [R3]
		MOVS	R3, #1
		CBZ	R5, loc_81C0
		MOV.W	R0, R0,LSL#3
		ADD.W	R0, R0,	R1,LSR#3
		CMP	R2, #0
		AND.W	R1, R1,	#7
		LDRB	R2, [R4,R0]
		RSB.W	R1, R1,	#7
		LSL.W	R3, R3,	R1
		BEQ	loc_81DE
		ORRS	R2, R3
		B	loc_81E0
@ ---------------------------------------------------------------------------

loc_81C0:				@ CODE XREF: sub_8188+18j
		LSRS	R5, R0,	#3
		AND.W	R0, R0,	#7
		LSLS	R3, R0
		ADD.W	R0, R1,	R5,LSL#6
		ADD	R0, R4
		UXTB	R3, R3
		LDRB	R1, [R0]
		CBZ	R2, loc_81D8
		ORRS	R1, R3
		B	loc_81DA
@ ---------------------------------------------------------------------------

loc_81D8:				@ CODE XREF: sub_8188+4Aj
		BICS	R1, R3

loc_81DA:				@ CODE XREF: sub_8188+4Ej
		STRB	R1, [R0]

locret_81DC:				@ CODE XREF: sub_8188+6j sub_8188+Aj
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_81DE:				@ CODE XREF: sub_8188+32j
		BICS	R2, R3

loc_81E0:				@ CODE XREF: sub_8188+36j
		STRB	R2, [R4,R0]
		POP	{R4,R5,PC}
@ End of function sub_8188

@ ---------------------------------------------------------------------------
off_81E4:	.long ScreenBuffer	@ DATA XREF: sub_8188+2r
off_81E8:	.long DisplayModel	@ DATA XREF: sub_8188+Cr

@ =============== S U B	R O U T	I N E =======================================


sub_81EC:				@ CODE XREF: USBD_IRQHandler+8Ap
		PUSH.W	{R4-R8,LR}
		LDR	R4, off_8260
		LDR	R0, [R4,#8]
		LDR	R5, dword_8264
		MOVS	R6, #0
		CBZ	R0, loc_823C
		LDR	R3, [R4,#8]
		LDR	R7, [R4,#0x20]
		SUBS	R2, R5,	#4
		MOV	R1, R4
		LDR	R0, dword_8268
		LDR	R1, [R1,#4]
		LDR	R2, [R2]
		CMP	R3, R7
		ADD	R0, R2
		BLS	loc_822C
		LDR	R2, [R4,#0x20]
		BL	ReadUSBDRAM	@ Copy R2 bytes	from R1	to R0
		LDR	R0, [R4,#0x20]
		STR	R0, [R5]
		LDR	R1, [R4,#0x20]
		LDR	R0, [R4,#4]
		ADD	R0, R1
		STR	R0, [R4,#4]
		LDR	R0, [R4,#8]
		LDR	R1, [R4,#0x20]
		SUBS	R0, R0,	R1
		STR	R0, [R4,#8]

locret_8228:				@ CODE XREF: sub_81EC+4Ej sub_81EC+72j
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_822C:				@ CODE XREF: sub_81EC+20j
		LDR	R2, [R4,#8]
		BL	ReadUSBDRAM	@ Copy R2 bytes	from R1	to R0
		LDR	R0, [R4,#8]
		STR	R0, [R5]
		STR	R6, [R4,#4]
		STR	R6, [R4,#8]
		B	locret_8228
@ ---------------------------------------------------------------------------

loc_823C:				@ CODE XREF: sub_81EC+Cj
		LDR	R0, off_8260
		ADDS	R0, #0x40
		LDRB	R1, [R0]
		CBNZ	R1, loc_825C
		LDRB	R0, [R0,#1]
		CMP	R0, #5
		BNE	loc_825C
		LDR	R0, dword_826C
		LDR	R1, [R0,#8]
		LDR	R2, [R4,#0x18]
		CMP	R1, R2
		BEQ	loc_825C
		LDR	R1, [R0,#8]
		CBNZ	R1, loc_825C
		LDR	R1, [R4,#0x18]
		STR	R1, [R0,#8]

loc_825C:				@ CODE XREF: sub_81EC+56j sub_81EC+5Cj ...
		STR	R6, [R5]
		B	locret_8228
@ End of function sub_81EC

@ ---------------------------------------------------------------------------
off_8260:	.long byte_20000100	@ DATA XREF: sub_81EC+4r
					@ sub_81EC:loc_823Cr
dword_8264:	.long 0x400C0504	@ DATA XREF: sub_81EC+8r
dword_8268:	.long 0x400C0100	@ DATA XREF: sub_81EC+16r
dword_826C:	.long 0x400C0000	@ DATA XREF: sub_81EC+5Er

@ =============== S U B	R O U T	I N E =======================================


sub_8270:				@ CODE XREF: USBD_IRQHandler+98p
		PUSH	{R4-R6,LR}
		LDR	R4, off_82AC
		LDR	R0, [R4,#0x10]
		LDR	R1, [R4,#0x14]
		CMP	R0, R1
		BCS	locret_82A8
		LDR	R6, dword_82B0
		LDR	R5, [R6]
		SUBS	R0, R6,	#4
		LDR	R0, [R0]
		LDR	R1, dword_82B4
		MOV	R2, R5
		ADD	R1, R0
		LDR	R0, [R4,#0xC]
		BL	ReadUSBDRAM	@ Copy R2 bytes	from R1	to R0
		LDR	R0, [R4,#0xC]
		ADD	R0, R5
		STR	R0, [R4,#0xC]
		LDR	R0, [R4,#0x10]
		ADD	R0, R5
		STR	R0, [R4,#0x10]
		LDR	R0, [R4,#0x10]
		LDR	R1, [R4,#0x14]
		CMP	R0, R1
		BCS	locret_82A8
		LDR	R0, [R4,#0x20]
		STR	R0, [R6]

locret_82A8:				@ CODE XREF: sub_8270+Aj sub_8270+32j
		POP	{R4-R6,PC}
@ End of function sub_8270

@ ---------------------------------------------------------------------------
		.balign 4,0
off_82AC:	.long byte_20000100	@ DATA XREF: sub_8270+2r
dword_82B0:	.long 0x400C0514	@ DATA XREF: sub_8270+Cr
dword_82B4:	.long 0x400C0100	@ DATA XREF: sub_8270+14r

@ =============== S U B	R O U T	I N E =======================================


sub_82B8:				@ CODE XREF: sub_85B4+76p

@ FUNCTION CHUNK AT 00008508 SIZE 00000012 BYTES

		PUSH	{R4-R6,LR}
		LDR	R3, off_834C
		LDR	R5, dword_8350
		LDR	R4, dword_8350
		LDRB	R0, [R3,#7]
		LDRB	R1, [R3,#6]
		LDRB	R2, [R3,#3]
		ADD.W	R1, R1,	R0,LSL#8
		SUB.W	R0, R3,	#0x40
		ADDS	R5, #0x10
		LDR	R0, [R0,#0x3C]
		CMP	R2, #3
		BEQ	loc_8318
		BGT	loc_82E2
		CMP	R2, #1
		BEQ	loc_82EC
		CMP	R2, #2
		BNE	loc_833A
		B	loc_82F6
@ ---------------------------------------------------------------------------

loc_82E2:				@ CODE XREF: sub_82B8+1Ej
		CMP	R2, #0x21
		BEQ	loc_8308
		CMP	R2, #0x22
		BNE	loc_833A
		B	loc_8314
@ ---------------------------------------------------------------------------

loc_82EC:				@ CODE XREF: sub_82B8+22j
		CMP	R1, #0x12
		BCC	loc_82F2
		MOVS	R1, #0x12

loc_82F2:				@ CODE XREF: sub_82B8+36j
		LDR	R0, [R0]
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_82F6:				@ CODE XREF: sub_82B8+28j
		LDR	R0, [R0,#4]
		LDRB	R2, [R0,#3]
		LDRB	R3, [R0,#2]
		ADD.W	R2, R3,	R2,LSL#8
		CMP	R1, R2
		BCC	loc_832A

loc_8304:				@ CODE XREF: sub_82B8+70j
		MOV	R1, R2
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_8308:				@ CODE XREF: sub_82B8+2Cj
		CMP	R1, #9
		BCC	loc_830E
		MOVS	R1, #9

loc_830E:				@ CODE XREF: sub_82B8+52j
		LDR	R0, [R0,#4]
		ADDS	R0, #0x12
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_8314:				@ CODE XREF: sub_82B8+32j
		LDR	R0, [R0,#0xC]
		B	loc_832A
@ ---------------------------------------------------------------------------

loc_8318:				@ CODE XREF: sub_82B8+1Cj
		LDRB	R2, [R3,#2]
		CMP	R2, #4
		BCS	loc_833A
		LDR	R0, [R0,#8]
		LDR.W	R0, [R0,R2,LSL#2]
		LDRB	R2, [R0]
		CMP	R2, R1
		BLS	loc_8304

loc_832A:				@ CODE XREF: sub_82B8+3Cj sub_82B8+4Aj ...
		BL	sub_8498
		POP.W	{R4-R6,LR}
		MOVS	R1, #0
		MOV	R0, R1
		B.W	loc_8508
@ ---------------------------------------------------------------------------

loc_833A:				@ CODE XREF: sub_82B8+26j sub_82B8+30j ...
		LDR	R0, [R4]
		ORR.W	R0, R0,	#2
		STR	R0, [R4]
		LDR	R0, [R5]
		ORR.W	R0, R0,	#2
		STR	R0, [R5]
		POP	{R4-R6,PC}
@ End of function sub_82B8

@ ---------------------------------------------------------------------------
off_834C:	.long byte_20000140	@ DATA XREF: sub_82B8+2r
dword_8350:	.long 0x400C050C	@ DATA XREF: sub_82B8+4r sub_82B8+6r

@ =============== S U B	R O U T	I N E =======================================


sub_8354:				@ CODE XREF: sub_2564+4p
		MOVS	R2, #8
		LDR	R1, off_835C
		B.W	ReadUSBDRAM	@ Copy R2 bytes	from R1	to R0
@ End of function sub_8354

@ ---------------------------------------------------------------------------
off_835C:	.long byte_20000140	@ DATA XREF: sub_8354+2r

@ =============== S U B	R O U T	I N E =======================================


USBD_IRQHandler:			@ DATA XREF: ROM:00000114o
		PUSH	{R4-R6,LR}
		LDR	R5, dword_8444
		LDR	R4, [R5,#4]
		LDR	R0, [R5,#0x10]
		AND.W	R6, R0,	#0xF
		LSLS	R0, R4,	#0x1D
		BPL	loc_8388
		MOVS	R0, #4
		STR	R0, [R5,#4]
		LDR	R0, [R5,#0x14]
		LSLS	R0, R0,	#0x1F
		LDR	R0, [R5,#0x10]
		BEQ	loc_8382
		ORR.W	R0, R0,	#0x90
		B	loc_8386
@ ---------------------------------------------------------------------------

loc_8382:				@ CODE XREF: USBD_IRQHandler+1Aj
		BIC.W	R0, R0,	#0x80

loc_8386:				@ CODE XREF: USBD_IRQHandler+20j
		STR	R0, [R5,#0x10]

loc_8388:				@ CODE XREF: USBD_IRQHandler+Ej
		LSLS	R0, R4,	#0x1F
		BEQ	loc_83B8
		MOVS	R0, #1
		STR	R0, [R5,#4]
		LSLS	R0, R6,	#0x1F
		BEQ	loc_83A0
		LDR	R0, [R5,#0x10]
		ORR.W	R0, R0,	#0x90
		STR	R0, [R5,#0x10]
		BL	sub_87EC

loc_83A0:				@ CODE XREF: USBD_IRQHandler+32j
		LSLS	R0, R6,	#0x1E
		BPL	loc_83AC
		LDR	R0, [R5,#0x10]
		BIC.W	R0, R0,	#0x10
		STR	R0, [R5,#0x10]

loc_83AC:				@ CODE XREF: USBD_IRQHandler+42j
		LSLS	R0, R6,	#0x1D
		BPL	loc_83B8
		LDR	R0, [R5,#0x10]
		ORR.W	R0, R0,	#0x90
		STR	R0, [R5,#0x10]

loc_83B8:				@ CODE XREF: USBD_IRQHandler+2Aj
					@ USBD_IRQHandler+4Ej
		LSLS	R0, R4,	#0x1E
		BPL	loc_8440
		CMP	R4, #0
		BGE	loc_83E0
		MOV.W	R0, #0x80000000
		STR	R0, [R5,#4]
		LDR	R0, dword_8448
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		LDR	R0, dword_8448
		ADDS	R0, #0x10
		LDR	R1, [R0]
		ORR.W	R1, R1,	#1
		STR	R1, [R0]
		BL	sub_8524

loc_83E0:				@ CODE XREF: USBD_IRQHandler+5Ej
		LSLS	R0, R4,	#0xF
		BPL	loc_83EE
		MOV.W	R0, #0x10000
		STR	R0, [R5,#4]
		BL	sub_81EC

loc_83EE:				@ CODE XREF: USBD_IRQHandler+82j
		LSLS	R0, R4,	#0xE
		BPL	loc_83FC
		MOV.W	R0, #0x20000
		STR	R0, [R5,#4]
		BL	sub_8270

loc_83FC:				@ CODE XREF: USBD_IRQHandler+90j
		LSLS	R0, R4,	#0xD
		BPL	loc_840A
		MOV.W	R0, #0x40000
		STR	R0, [R5,#4]
		BL	usbEventEndpoint2

loc_840A:				@ CODE XREF: USBD_IRQHandler+9Ej
		LSLS	R0, R4,	#0xC
		BPL	loc_8418
		MOV.W	R0, #0x80000
		STR	R0, [R5,#4]
		BL	sub_2130

loc_8418:				@ CODE XREF: USBD_IRQHandler+ACj
		LSLS	R0, R4,	#0xB
		BPL	loc_8422
		MOV.W	R0, #0x100000
		STR	R0, [R5,#4]

loc_8422:				@ CODE XREF: USBD_IRQHandler+BAj
		LSLS	R0, R4,	#0xA
		BPL	loc_842C
		MOV.W	R0, #0x200000
		STR	R0, [R5,#4]

loc_842C:				@ CODE XREF: USBD_IRQHandler+C4j
		LSLS	R0, R4,	#9
		BPL	loc_8436
		MOV.W	R0, #0x400000
		STR	R0, [R5,#4]

loc_8436:				@ CODE XREF: USBD_IRQHandler+CEj
		LSLS	R0, R4,	#8
		BPL	loc_8440
		MOV.W	R0, #0x800000
		STR	R0, [R5,#4]

loc_8440:				@ CODE XREF: USBD_IRQHandler+5Aj
					@ USBD_IRQHandler+D8j
		STR	R4, [R5,#4]
		POP	{R4-R6,PC}
@ End of function USBD_IRQHandler

@ ---------------------------------------------------------------------------
dword_8444:	.long 0x400C0000	@ DATA XREF: USBD_IRQHandler+2r
dword_8448:	.long 0x400C050C	@ DATA XREF: USBD_IRQHandler+66r
					@ USBD_IRQHandler+70r

@ =============== S U B	R O U T	I N E =======================================

@ Copy R2 bytes	from R1	to R0

sub_844C:				@ CODE XREF: sub_25B8+60p sub_2788+58p ...
		B	loc_8456
@ ---------------------------------------------------------------------------

loc_844E:				@ CODE XREF: sub_844C+Cj
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_8456:				@ CODE XREF: sub_844Cj
		SUBS	R2, R2,	#1
		BCS	loc_844E
		BX	LR
@ End of function sub_844C


@ =============== S U B	R O U T	I N E =======================================

@ Copy R2 bytes	from R1	to R0

ReadUSBDRAM:				@ CODE XREF: sub_81EC+24p sub_81EC+42p ...
		B	loc_8466
@ ---------------------------------------------------------------------------

loc_845E:				@ CODE XREF: ReadUSBDRAM+Cj
		LDRB.W	R3, [R1],#1
		STRB.W	R3, [R0],#1

loc_8466:				@ CODE XREF: ReadUSBDRAMj
		SUBS	R2, R2,	#1
		BCS	loc_845E
		BX	LR
@ End of function ReadUSBDRAM


@ =============== S U B	R O U T	I N E =======================================


sub_846C:				@ CODE XREF: InitUSB+8p
		LDR	R3, off_8490
		STR	R0, [R3,#0x3C]
		STRD.W	R1, R2,	[R3,#0x2C]
		LDR	R0, [R0]
		LDRB	R0, [R0,#7]
		STR	R0, [R3,#0x20]
		LDR	R0, dword_8494
		MOV.W	R1, #0x7D0
		STR	R1, [R0,#0x10]
		LDR.W	R1, [R0,#0x90]
		ORR.W	R1, R1,	#1
		STR.W	R1, [R0,#0x90]
		BX	LR
@ End of function sub_846C

@ ---------------------------------------------------------------------------
off_8490:	.long byte_20000100	@ DATA XREF: sub_846Cr
dword_8494:	.long 0x400C0000	@ DATA XREF: sub_846C+Er

@ =============== S U B	R O U T	I N E =======================================


sub_8498:				@ CODE XREF: sub_82B8:loc_832Ap
		PUSH.W	{R4-R8,LR}
		LDR	R4, off_84FC
		MOV	R5, R1
		LDR	R7, [R4,#0x20]
		LDR	R1, dword_8500
		LDR	R2, dword_8500
		LDR	R3, dword_8504
		SUBS	R2, #8
		SUBS	R6, R1,	#4
		CMP	R5, R7
		BLS	loc_84DA
		LDR	R7, [R4,#0x20]
		ADD	R7, R0
		STR	R7, [R4,#4]
		LDR	R7, [R4,#0x20]
		SUBS	R5, R5,	R7
		STR	R5, [R4,#8]
		LDR	R5, [R1]
		ORR.W	R5, R5,	#0x80
		STR	R5, [R1]
		LDR	R1, [R2]
		LDR	R2, [R4,#0x20]
		ADD	R3, R1
		MOV	R1, R0
		MOV	R0, R3
		BL	ReadUSBDRAM	@ Copy R2 bytes	from R1	to R0
		LDR	R0, [R4,#0x20]
		STR	R0, [R6]

locret_84D6:				@ CODE XREF: sub_8498+60j
		POP.W	{R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_84DA:				@ CODE XREF: sub_8498+16j
		MOVS	R7, #0
		STR	R7, [R4,#4]
		STR	R7, [R4,#8]
		LDR	R4, [R1]
		ORR.W	R4, R4,	#0x80
		STR	R4, [R1]
		LDR	R1, [R2]
		MOV	R2, R5
		ADD	R3, R1
		MOV	R1, R0
		MOV	R0, R3
		BL	ReadUSBDRAM	@ Copy R2 bytes	from R1	to R0
		STR	R5, [R6]
		B	locret_84D6
@ End of function sub_8498

@ ---------------------------------------------------------------------------
		.balign 4,0
off_84FC:	.long byte_20000100	@ DATA XREF: sub_8498+4r
dword_8500:	.long 0x400C0508	@ DATA XREF: sub_8498+Ar sub_8498+Cr
dword_8504:	.long 0x400C0100	@ DATA XREF: sub_8498+Er
@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR sub_82B8

loc_8508:				@ CODE XREF: sub_82B8+7Ej
					@ sub_85B4+110j
		LDR	R2, off_851C
		STR	R0, [R2,#0xC]
		MOVS	R0, #0
		STR	R0, [R2,#0x10]
		STR	R1, [R2,#0x14]
		LDR	R0, [R2,#0x20]
		LDR	R1, dword_8520
		STR	R0, [R1]
		BX	LR
@ END OF FUNCTION CHUNK	FOR sub_82B8
@ ---------------------------------------------------------------------------
		.balign 4,0
off_851C:	.long byte_20000100	@ DATA XREF: sub_82B8:loc_8508r
dword_8520:	.long 0x400C0514	@ DATA XREF: sub_82B8+25Cr

@ =============== S U B	R O U T	I N E =======================================


sub_8524:				@ CODE XREF: USBD_IRQHandler+7Cp
		PUSH	{R4,LR}
		MOVS	R2, #8
		LDR	R1, dword_8578
		LDR	R0, off_857C
		BL	ReadUSBDRAM	@ Copy R2 bytes	from R1	to R0
		LDR	R0, off_857C
		LDRB	R0, [R0]
		ANDS.W	R0, R0,	#0x60
		BEQ	loc_855E
		LDR	R1, off_857C
		SUBS	R1, #0x40
		CMP	R0, #0x20
		BEQ	loc_8566
		CMP	R0, #0x40
		BEQ	loc_856A
		LDR	R0, dword_8580
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]
		LDR	R0, dword_8580
		ADDS	R0, #0x10
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]

locret_855C:				@ CODE XREF: sub_8524+4Aj
		POP	{R4,PC}
@ ---------------------------------------------------------------------------

loc_855E:				@ CODE XREF: sub_8524+14j
		POP.W	{R4,LR}
		B.W	sub_85B4
@ ---------------------------------------------------------------------------

loc_8566:				@ CODE XREF: sub_8524+1Cj
		LDR	R0, [R1,#0x2C]
		B	loc_856C
@ ---------------------------------------------------------------------------

loc_856A:				@ CODE XREF: sub_8524+20j
		LDR	R0, [R1,#0x28]

loc_856C:				@ CODE XREF: sub_8524+44j
		CMP	R0, #0
		BEQ	locret_855C
		POP.W	{R4,LR}
		BX	R0
@ End of function sub_8524

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_8578:	.long 0x400C0100	@ DATA XREF: sub_8524+4r
off_857C:	.long byte_20000140	@ DATA XREF: sub_8524+6r sub_8524+Cr ...
dword_8580:	.long 0x400C050C	@ DATA XREF: sub_8524+22r sub_8524+2Cr

@ =============== S U B	R O U T	I N E =======================================


sub_8584:				@ CODE XREF: sub_2564+20p
		LDR	R3, dword_85B0
		MOVS	R1, #0

loc_8588:				@ CODE XREF: sub_8584+28j
		ADD.W	R2, R3,	R1,LSL#4
		LDR	R2, [R2]
		AND.W	R2, R2,	#0xF
		CMP	R2, R0
		BNE	loc_85A8
		LDR	R0, dword_85B0
		ADDS	R0, R0,	#4
		ADD.W	R0, R0,	R1,LSL#4
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]
		BX	LR
@ ---------------------------------------------------------------------------

loc_85A8:				@ CODE XREF: sub_8584+10j
		ADDS	R1, R1,	#1
		CMP	R1, #8
		BLT	loc_8588
		BX	LR
@ End of function sub_8584

@ ---------------------------------------------------------------------------
dword_85B0:	.long 0x400C0508	@ DATA XREF: sub_8584r	sub_8584+12r

@ =============== S U B	R O U T	I N E =======================================


sub_85B4:				@ CODE XREF: sub_8524+3Ep
		PUSH.W	{R4-R10,LR}
		LDR	R1, off_8794
		MOVS	R5, #0
		STR	R5, [R1,#4]
		STR	R5, [R1,#8]
		ADD.W	R3, R1,	#0x40
		ADD.W	R0, R1,	#0x40
		LDRB	R2, [R3,#4]
		LDRB	R0, [R0]
		LDR	R6, dword_8798
		AND.W	R12, R2, #0xF
		LDR.W	R8, dword_879C
		LDR.W	R10, dword_87A0
		LDRB	R3, [R3,#1]
		LDR	R2, dword_87A4
		LSLS	R7, R0,	#0x18
		MOV.W	R9, #1
		ADD.W	R4, R6,	#4
		BPL	loc_86E4
		SUBS	R7, R6,	#4
		CBZ	R3, loc_8644
		CMP	R3, #6
		BEQ	loc_8626
		CMP	R3, #8
		BEQ	loc_85FC
		CMP	R3, #0xA
		BNE	loc_86C8
		B	loc_862E
@ ---------------------------------------------------------------------------

loc_85FC:				@ CODE XREF: sub_85B4+40j
		LDR	R0, [R1,#0x1C]
		LDR	R1, [R7]
		ADD	R1, R2
		STRB.W	R0, [R1,#0x100]
		LDR	R0, dword_87A0
		SUBS	R0, R0,	#4
		LDR	R1, [R0]
		ORR.W	R1, R1,	#0x80
		STR	R1, [R0]
		SUBS	R0, R0,	#4
		STR	R5, [R0]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		STR.W	R9, [R6]

locret_8622:				@ CODE XREF: sub_85B4+12Cj
					@ sub_85B4+1A6j
		POP.W	{R4-R10,PC}
@ ---------------------------------------------------------------------------

loc_8626:				@ CODE XREF: sub_85B4+3Cj
		POP.W	{R4-R10,LR}
		B.W	sub_82B8
@ ---------------------------------------------------------------------------

loc_862E:				@ CODE XREF: sub_85B4+46j
		LDR	R0, [R1,#0x24]
		LDR	R1, [R7]
		ADD	R1, R2
		STRB.W	R0, [R1,#0x100]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		MOV	R0, R9
		B	loc_86BA
@ ---------------------------------------------------------------------------

loc_8644:				@ CODE XREF: sub_85B4+38j
		CMP	R0, #0x80
		BEQ	loc_8652
		CMP	R0, #0x81
		BEQ	loc_8670
		CMP	R0, #0x82
		BEQ	loc_867A
		B	loc_86A8
@ ---------------------------------------------------------------------------

loc_8652:				@ CODE XREF: sub_85B4+92j
		LDR	R3, [R1,#0x3C]
		MOVS	R0, #0
		LDR	R3, [R3,#4]
		LDRB	R3, [R3,#7]
		MOVS.W	R12, R3,LSL#25
		BPL	loc_8662
		MOVS	R0, #1

loc_8662:				@ CODE XREF: sub_85B4+AAj
		LSLS	R3, R3,	#0x1A
		BPL	loc_86A0
		LDRB	R1, [R1]
		ORR.W	R0, R0,	R1,LSL#1
		UXTB	R0, R0
		B	loc_86A0
@ ---------------------------------------------------------------------------

loc_8670:				@ CODE XREF: sub_85B4+96j
		LDR	R0, [R7]
		ADD	R0, R2
		STRB.W	R5, [R0,#0x100]
		B	loc_86A8
@ ---------------------------------------------------------------------------

loc_867A:				@ CODE XREF: sub_85B4+9Aj
		MOVS	R0, #0

loc_867C:				@ CODE XREF: sub_85B4+E0j
		ADD.W	R1, R4,	R0,LSL#4
		LDR	R3, [R1]
		AND.W	R3, R3,	#0xF
		CMP	R3, R12
		BNE	loc_8690
		ADD.W	R1, R8,	R0,LSL#4
		B	loc_8696
@ ---------------------------------------------------------------------------

loc_8690:				@ CODE XREF: sub_85B4+D4j
		ADDS	R0, R0,	#1
		CMP	R0, #8
		BLT	loc_867C

loc_8696:				@ CODE XREF: sub_85B4+DAj
		LDR	R0, [R1]
		ANDS.W	R0, R0,	#2
		BEQ	loc_86A0
		MOVS	R0, #1

loc_86A0:				@ CODE XREF: sub_85B4+B0j sub_85B4+BAj ...
		LDR	R1, [R7]
		ADD	R1, R2
		STRB.W	R0, [R1,#0x100]

loc_86A8:				@ CODE XREF: sub_85B4+9Cj sub_85B4+C4j
		LDR	R0, [R7]
		ADD	R0, R2
		STRB.W	R5, [R0,#0x101]
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		MOVS	R0, #2

loc_86BA:				@ CODE XREF: sub_85B4+8Ej
		STR	R0, [R6]
		POP.W	{R4-R10,LR}
		MOVS	R1, #0
		MOV	R0, R1
		B.W	loc_8508
@ ---------------------------------------------------------------------------

loc_86C8:				@ CODE XREF: sub_85B4+44j
					@ sub_85B4+142j ...
		LDR.W	R0, [R8]
		ORR.W	R0, R0,	#2
		STR.W	R0, [R8]
		LDR.W	R1, [R10]
		ORR.W	R1, R1,	#2
		STR.W	R1, [R10]
		B	locret_8622
@ ---------------------------------------------------------------------------
		B	loc_86E4
@ ---------------------------------------------------------------------------

loc_86E4:				@ CODE XREF: sub_85B4+34j
					@ sub_85B4+12Ej
		LDR	R0, off_8794
		ADDS	R0, #0x40
		CMP	R3, #5
		LDRB	R0, [R0,#2]
		BEQ	loc_875E
		BGT	loc_8700
		CMP	R3, #1
		BEQ	loc_8712
		CMP	R3, #3
		BNE	loc_86C8
		CBZ	R0, loc_875C
		CMP	R0, #1
		BEQ	loc_878C
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8700:				@ CODE XREF: sub_85B4+13Aj
		CMP	R3, #9
		BEQ	loc_8762
		CMP	R3, #0xB
		BNE	loc_86C8
		STR	R0, [R1,#0x24]
		LDR	R0, [R1,#0x30]

loc_870C:				@ CODE XREF: sub_85B4+1B2j
		CBZ	R0, loc_8750
		BLX	R0 @ Default_Handler
@ ---------------------------------------------------------------------------
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8712:				@ CODE XREF: sub_85B4+13Ej
		CBZ	R0, loc_871A
		CMP	R0, #1
		BEQ	loc_874E
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_871A:				@ CODE XREF: sub_85B4:loc_8712j
		LDR	R7, [R1,#0x38]
		MOVS	R0, #0
		MOV	R3, R9

loc_8720:				@ CODE XREF: sub_85B4+196j
		ADD.W	R1, R2,	R0,LSL#4
		LDR.W	R8, [R1,#0x508]
		AND.W	R8, R8,	#0xF
		CMP	R8, R12
		BNE	loc_8746
		LSL.W	R8, R3,	R0
		TST.W	R8, R7
		BNE	loc_8746
		LDR.W	R8, [R1,#0x50C]
		BIC.W	R8, R8,	#2
		STR.W	R8, [R1,#0x50C]

loc_8746:				@ CODE XREF: sub_85B4+17Aj
					@ sub_85B4+184j
		ADDS	R0, R0,	#1
		CMP	R0, #8
		BLT	loc_8720
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_874E:				@ CODE XREF: sub_85B4+162j
		STRB	R5, [R1]

loc_8750:				@ CODE XREF: sub_85B4+14Aj
					@ sub_85B4:loc_870Cj ...
		LDR	R0, [R4]
		ORR.W	R0, R0,	#0x80
		STR	R0, [R4]
		STR	R5, [R6]
		B	locret_8622
@ ---------------------------------------------------------------------------

loc_875C:				@ CODE XREF: sub_85B4+144j
		B	loc_8768
@ ---------------------------------------------------------------------------

loc_875E:				@ CODE XREF: sub_85B4+138j
		STR	R0, [R1,#0x18]
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8762:				@ CODE XREF: sub_85B4+14Ej
		STR	R0, [R1,#0x1C]
		LDR	R0, [R1,#0x34]
		B	loc_870C
@ ---------------------------------------------------------------------------

loc_8768:				@ CODE XREF: sub_85B4:loc_875Cj
					@ sub_85B4+1D4j
		ADD.W	R1, R4,	R0,LSL#4
		LDR	R1, [R1]
		AND.W	R1, R1,	#0xF
		CMP	R1, R12
		BNE	loc_8784
		ADD.W	R0, R8,	R0,LSL#4
		LDR	R1, [R0]
		ORR.W	R1, R1,	#2
		STR	R1, [R0]
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_8784:				@ CODE XREF: sub_85B4+1C0j
		ADDS	R0, R0,	#1
		CMP	R0, #8
		BLT	loc_8768
		B	loc_8750
@ ---------------------------------------------------------------------------

loc_878C:				@ CODE XREF: sub_85B4+148j
		STRB.W	R9, [R1]
		B	loc_8750
@ End of function sub_85B4

@ ---------------------------------------------------------------------------
		.balign 4,0
off_8794:	.long byte_20000100	@ DATA XREF: sub_85B4+4r
					@ sub_85B4:loc_86E4r
dword_8798:	.long 0x400C0504	@ DATA XREF: sub_85B4+18r
dword_879C:	.long 0x400C050C	@ DATA XREF: sub_85B4+1Er
dword_87A0:	.long 0x400C051C	@ DATA XREF: sub_85B4+22r sub_85B4+52r
dword_87A4:	.long 0x400C0000	@ DATA XREF: sub_85B4+28r

@ =============== S U B	R O U T	I N E =======================================


sub_87A8:				@ CODE XREF: InitUSB+10p
		LDR	R0, off_87E0
		LDR	R1, [R0]
		LDR	R0, dword_87E4
		MULS	R1, R0
		MOV.W	R0, #0xE000E000
		STR	R1, [R0,#0x14]
		MOVS	R1, #0
		STR	R1, [R0,#0x18]
		MOVS	R1, #5
		STR	R1, [R0,#0x10]

loc_87BE:				@ CODE XREF: sub_87A8+1Aj
		LDR	R1, [R0,#0x10]
		LSLS	R1, R1,	#0xF
		BPL	loc_87BE
		LDR	R0, dword_87E8
		LDR.W	R1, [R0,#0x90]
		BIC.W	R1, R1,	#1
		STR.W	R1, [R0,#0x90]
		MOVW	R1, #0x10F
		STR	R1, [R0,#4]
		LDR	R2, [R0]
		ORRS	R2, R1
		STR	R2, [R0]
		BX	LR
@ End of function sub_87A8

@ ---------------------------------------------------------------------------
off_87E0:	.long CPUClockMHz	@ DATA XREF: sub_87A8r
dword_87E4:	.long 100000		@ DATA XREF: sub_87A8+4r
dword_87E8:	.long 0x400C0000	@ DATA XREF: sub_87A8+1Cr

@ =============== S U B	R O U T	I N E =======================================


sub_87EC:				@ CODE XREF: USBD_IRQHandler+3Cp
		LDR	R1, off_8804
		MOVS	R0, #0
		STR	R0, [R1,#4]
		STR	R0, [R1,#8]
		STR	R0, [R1,#0xC]
		STR	R0, [R1,#0x10]
		STR	R0, [R1,#0x14]
		STR	R0, [R1,#0x40]
		STR	R0, [R1,#0x44]
		LDR	R1, dword_8808
		STR	R0, [R1,#8]	@ USBD_FADDR
		BX	LR
@ End of function sub_87EC

@ ---------------------------------------------------------------------------
off_8804:	.long byte_20000100	@ DATA XREF: sub_87ECr
dword_8808:	.long 0x400C0000	@ DATA XREF: sub_87EC+12r

@ =============== S U B	R O U T	I N E =======================================


InitUSB:				@ CODE XREF: InitHardware+3Ap
		PUSH	{R4,LR}
		MOVS	R2, #0
		LDR	R1, off_882C
		LDR	R0, off_8830
		BL	sub_846C
		BL	sub_2BA8
		BL	sub_87A8
		POP.W	{R4,LR}
		MOVS	R0, #0x35
		B.W	NVICEnableInt	@ USB IRQ enabled
@ End of function InitUSB

@ ---------------------------------------------------------------------------
		.balign 4,0
off_882C:	.long sub_2564+1	@ DATA XREF: InitUSB+4r
off_8830:	.long off_D818		@ DATA XREF: InitUSB+6r

@ =============== S U B	R O U T	I N E =======================================


sub_8834:				@ DATA XREF: sub_9B0+68o ROM:off_A80o
		PUSH	{R4,LR}
		LDR	R4, off_8880
		LDRB	R0, [R4,#2]
		CBZ	R0, loc_8848
		ADDS	R0, R0,	#1
		STRB	R0, [R4,#2]
		LDR	R0, off_8884
		LDRB	R0, [R0]
		BL	DeleteTimeout	@ R0 Timeout #

loc_8848:				@ CODE XREF: sub_8834+6j
		LDRSB.W	R0, [R4]
		CMP	R0, #0
		BLT	locret_887C
		LDR	R0, dword_8888
		LDR	R0, [R0]
		CMP	R0, #0
		BNE	locret_887C
		LDR	R0, off_888C
		LDRB.W	R0, [R0,#0xC0]
		CMP	R0, #2
		BEQ	loc_8874
		CMP	R0, #1
		BEQ	loc_8878
		MOVS	R0, #0xF2

loc_8868:				@ CODE XREF: sub_8834+42j sub_8834+46j
		STRB	R0, [R4,#1]
		POP.W	{R4,LR}
		MOVS	R0, #0xA
		B.W	SetTimeoutValue
@ ---------------------------------------------------------------------------

loc_8874:				@ CODE XREF: sub_8834+2Cj
		MOVS	R0, #0xEC
		B	loc_8868
@ ---------------------------------------------------------------------------

loc_8878:				@ CODE XREF: sub_8834+30j
		MOVS	R0, #0xEF
		B	loc_8868
@ ---------------------------------------------------------------------------

locret_887C:				@ CODE XREF: sub_8834+1Aj sub_8834+22j
		POP	{R4,PC}
@ End of function sub_8834

@ ---------------------------------------------------------------------------
		.balign 4,0
off_8880:	.long byte_2000014A	@ DATA XREF: sub_8834+2r
off_8884:	.long CurrentTimeout	@ DATA XREF: sub_8834+Cr
dword_8888:	.long 0x40004900	@ DATA XREF: sub_8834+1Cr
off_888C:	.long dfData		@ DATA XREF: sub_8834+24r

@ =============== S U B	R O U T	I N E =======================================

@ Attributes: thunk

j_DisplayRefresh:			@ CODE XREF: sub_854+20p
					@ sub_854:loc_880p ...
		B.W	DisplayRefresh
@ End of function j_DisplayRefresh


@ =============== S U B	R O U T	I N E =======================================


TickFBTimeouts:				@ CODE XREF: TMR2_IRQHandler+74p
		LDR	R2, off_88B0
		MOVS	R0, #0

loc_8898:				@ CODE XREF: TickFBTimeouts+16j
		LDRB.W	R1, [R2,R0,LSL#3]
		CBZ	R1, loc_88A4
		SUBS	R1, R1,	#1
		STRB.W	R1, [R2,R0,LSL#3]

loc_88A4:				@ CODE XREF: TickFBTimeouts+8j
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #3
		BCC	loc_8898
		BX	LR
@ End of function TickFBTimeouts

@ ---------------------------------------------------------------------------
		.balign 4,0
off_88B0:	.long TimeoutsTable	@ DATA XREF: TickFBTimeoutsr

@ =============== S U B	R O U T	I N E =======================================


SwitchRezLock:				@ CODE XREF: EventHandler:loc_4416p
		PUSH	{R4,R5,LR}
		LDR	R5, off_8954
		LDR	R0, off_8958
		MOV	R1, R5
		LDRB	R2, [R5,#0xE]
		MOVS	R3, #0
		MOVS	R4, #1
		LDRH	R0, [R0]
		LDRH	R1, [R1,#0x1C]
		CMP	R2, #1
		BEQ	loc_88E0
		CBZ	R2, loc_88FE
		CMP	R2, #2
		BEQ	loc_891C
		CMP	R2, #3
		BNE	locret_88DE
		LDRB.W	R2, [R5,#0x92]
		CBZ	R2, loc_893C
		STRB.W	R3, [R5,#0x92]

locret_88DE:				@ CODE XREF: SwitchRezLock+1Ej
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_88E0:				@ CODE XREF: SwitchRezLock+14j
		LDRB.W	R2, [R5,#0x22]
		CBZ	R2, loc_88EC
		STRB.W	R3, [R5,#0x22]

locret_88EA:				@ CODE XREF: SwitchRezLock+3Aj
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_88EC:				@ CODE XREF: SwitchRezLock+30j
		CMP	R0, #0
		BEQ	locret_88EA
		STRB.W	R4, [R5,#0x22]
		CBNZ	R1, loc_88F8
		STRH	R0, [R5,#0x1C]

loc_88F8:				@ CODE XREF: SwitchRezLock+40j
		LDRH	R0, [R5,#0x1C]
		STRH	R0, [R5,#0x1E]
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_88FE:				@ CODE XREF: SwitchRezLock+16j
		LDRB.W	R2, [R5,#0x23]
		CBZ	R2, loc_890A
		STRB.W	R3, [R5,#0x23]

locret_8908:				@ CODE XREF: SwitchRezLock+58j
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_890A:				@ CODE XREF: SwitchRezLock+4Ej
		CMP	R0, #0
		BEQ	locret_8908
		STRB.W	R4, [R5,#0x23]
		CBNZ	R1, loc_8916
		STRH	R0, [R5,#0x1C]

loc_8916:				@ CODE XREF: SwitchRezLock+5Ej
		LDRH	R0, [R5,#0x1C]
		STRH	R0, [R5,#0x20]
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_891C:				@ CODE XREF: SwitchRezLock+1Aj
		LDRB.W	R2, [R5,#0x86]
		CBZ	R2, loc_8928
		STRB.W	R3, [R5,#0x86]

locret_8926:				@ CODE XREF: SwitchRezLock+76j
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_8928:				@ CODE XREF: SwitchRezLock+6Cj
		CMP	R0, #0
		BEQ	locret_8926
		STRB.W	R4, [R5,#0x86]
		CBNZ	R1, loc_8934
		STRH	R0, [R5,#0x1C]

loc_8934:				@ CODE XREF: SwitchRezLock+7Cj
		LDRH	R0, [R5,#0x1C]
		STRH.W	R0, [R5,#0x84]

locret_893A:				@ CODE XREF: SwitchRezLock+8Cj
					@ SwitchRezLock+9Cj
		POP	{R4,R5,PC}
@ ---------------------------------------------------------------------------

loc_893C:				@ CODE XREF: SwitchRezLock+24j
		B	loc_893E
@ ---------------------------------------------------------------------------

loc_893E:				@ CODE XREF: SwitchRezLock:loc_893Cj
		CMP	R0, #0
		BEQ	locret_893A
		STRB.W	R4, [R5,#0x92]
		CBNZ	R1, loc_894A
		STRH	R0, [R5,#0x1C]

loc_894A:				@ CODE XREF: SwitchRezLock+92j
		LDRH	R0, [R5,#0x1C]
		STRH.W	R0, [R5,#0x90]
		B	locret_893A
@ End of function SwitchRezLock

@ ---------------------------------------------------------------------------
		.balign 4,0
off_8954:	.long dfData		@ DATA XREF: SwitchRezLock+2r
off_8958:	.long AtoRez		@ DATA XREF: SwitchRezLock+4r

@ =============== S U B	R O U T	I N E =======================================


InitVariables:				@ CODE XREF: GotoMain+9018p
		PUSH	{R4,LR}
		BL	InitDataFlash
		LDR	R0, off_89A0
		LDR	R3, off_89AC
		MOVW	R2, #0xFFFF
		LDRB	R1, [R0,#1]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0,#1]
		LDR	R0, off_89A4
		LDRB	R1, [R0]
		ORR.W	R1, R1,	#0x80
		STRB	R1, [R0]
		LDR	R1, off_89A8
		LDR	R0, [R1]
		STRH	R2, [R3]
		LDR	R3, off_89B0
		MOVS	R2, #1
		ORR.W	R0, R0,	#0x880
		STRB	R2, [R3]
		LDR	R3, off_89B4
		MOVS	R2, #0xFF
		ORR.W	R0, R0,	#0x40000
		STRB	R2, [R3]
		STR	R0, [R1]
		LDR	R1, off_89B8
		MOVS	R0, #0
		STRB	R0, [R1]
		POP	{R4,PC}
@ End of function InitVariables

@ ---------------------------------------------------------------------------
off_89A0:	.long KeyPressTime	@ DATA XREF: InitVariables+6r
off_89A4:	.long LastInputs	@ DATA XREF: InitVariables+16r
off_89A8:	.long dword_20000064	@ DATA XREF: InitVariables+20r
off_89AC:	.long word_200000B6	@ DATA XREF: InitVariables+8r
off_89B0:	.long byte_200000B3	@ DATA XREF: InitVariables+26r
off_89B4:	.long byte_2000004F	@ DATA XREF: InitVariables+30r
off_89B8:	.long EditItemIndex	@ DATA XREF: InitVariables+3Cr

@ =============== S U B	R O U T	I N E =======================================


SetupWDT:				@ CODE XREF: InitHardware+14p
					@ sub_4F0C+5Ap	...
		PUSH	{R4,LR}
		LDR	R4, dword_89D4
		STR	R1, [R4,#4]	@ WDT_ALTCTL.RSTDSEL = R1 (reset delay)
		ORR.W	R0, R0,	R2,LSL#1 @ RSTEN = R2
		ORR.W	R0, R0,	R3,LSL#4 @ WKEN	= R3
		ORR.W	R0, R0,	#0x80	@ WDTEN	= 1
		STR	R0, [R4]
		POP	{R4,PC}
@ End of function SetupWDT

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_89D4:	.long 0x40040000	@ DATA XREF: SetupWDT+2r

@ =============== S U B	R O U T	I N E =======================================


PutTextf:				@ CODE XREF: InitHardware+40p
					@ InitHardware+52j ...

var_14		= -0x14
varg_r0		= -0x10
varg_r1		= -0xC
varg_r2		= -8
varg_r3		= -4

		PUSH	{R0-R3}
		LDR	R3, off_89F0
		PUSH	{R4,LR}
		ADD	R1, SP,	#0xC
		LDR	R2, off_89F4
		LDR	R0, [SP,#8]
		BL	FormatAndPutText
		POP	{R4}
		LDR.W	PC, [SP],#0x14
@ End of function PutTextf

@ ---------------------------------------------------------------------------
		.balign 4,0
off_89F0:	.long PutChar+1		@ DATA XREF: PutTextf+2r
off_89F4:	.long unk_200000FC	@ DATA XREF: PutTextf+8r

@ =============== S U B	R O U T	I N E =======================================


sub_89F8:				@ CODE XREF: GetAtoVWVolts+36p
					@ GetVoltsForPower+24p	...

var_20		= -0x20

		PUSH	{LR}
		VPUSH	{D8-D9}
		FCPYS	S18, S0
		FCPYS	S19, S1
		SUB	SP, SP,	#0xC
		FMRRD	R0, R1,	D9
		BL	sub_3B8
		FMDRR	D8, R0,	R1
		FMRS	R0, S16
		FMRS	R1, S17
		FSTD	D8, [SP]
		CMP	R0, #0
		IT ne
		MOVNE	R0, #1
		ORRS	R0, R1
		BIC.W	R0, R0,	#0x80000000
		RSB.W	R0, R0,	#0xFF00000
		ADD.W	R0, R0,	#0x70000000
		LSRS	R0, R0,	#0x1F
		BEQ	loc_8A62
		FMRS	R1, S18
		FMRS	R0, S19
		FSTD	D9, [SP]
		CMP	R1, #0
		IT ne
		MOVNE	R1, #1
		ORRS	R0, R1
		BIC.W	R0, R0,	#0x80000000
		RSB.W	R0, R0,	#0xFF00000
		ADD.W	R0, R0,	#0x70000000
		LSRS	R0, R0,	#0x1F
		ITT eq
		MOVEQ	R0, #1
		BLEQ	sub_8A90

loc_8A62:				@ CODE XREF: sub_89F8+3Ej
		FCPYS	S0, S16
		ADD	SP, SP,	#0xC
		FCPYS	S1, S17
		VPOP	{D8-D9}
		POP	{PC}
@ End of function sub_89F8


@ =============== S U B	R O U T	I N E =======================================


MemCpy2:				@ DATA XREF: ROM:0000E218o
		B	loc_8A7A
@ ---------------------------------------------------------------------------

loc_8A74:				@ CODE XREF: MemCpy2+Aj
		LDMIA	R0!, {R3}
		SUBS	R2, R2,	#4
		STMIA	R1!, {R3}

loc_8A7A:				@ CODE XREF: MemCpy2j
		CMP	R2, #0
		BNE	loc_8A74
		BX	LR
@ End of function MemCpy2


@ =============== S U B	R O U T	I N E =======================================


nullsub_1:
		BX	LR
@ End of function nullsub_1


@ =============== S U B	R O U T	I N E =======================================


MemClear2:				@ DATA XREF: ROM:0000E228o
		MOVS	R0, #0
		B	loc_8A8A
@ ---------------------------------------------------------------------------

loc_8A86:				@ CODE XREF: MemClear2+Aj
		STMIA	R1!, {R0}
		SUBS	R2, R2,	#4

loc_8A8A:				@ CODE XREF: MemClear2+2j
		CMP	R2, #0
		BNE	loc_8A86
		BX	LR
@ End of function MemClear2


@ =============== S U B	R O U T	I N E =======================================


sub_8A90:				@ CODE XREF: sub_89F8+66p
		LDR	R1, off_8A98
		STR	R0, [R1]
		BX	LR
@ End of function sub_8A90

@ ---------------------------------------------------------------------------
		.balign 4,0
off_8A98:	.long dword_20000168	@ DATA XREF: sub_8A90r

@ =============== S U B	R O U T	I N E =======================================


FormatAndPutText:			@ CODE XREF: PutTextf+Cp

var_68		= -0x68
var_67		= -0x67
var_48		= -0x48
var_44		= -0x44
var_43		= -0x43
var_40		= -0x40
var_3C		= -0x3C
anonymous_0	= -0x2C

		PUSH.W	{R0-R11,LR}
		SUB	SP, SP,	#0x34
		MOV	R7, R1
		MOV	R5, R0
		MOVS	R6, #0
		B	loc_8AB8
@ ---------------------------------------------------------------------------

loc_8AAA:				@ CODE XREF: FormatAndPutText+20j
		CMP	R0, #0x25
		BEQ	loc_8AC6
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R5, R5,	#1
		ADDS	R6, R6,	#1

loc_8AB8:				@ CODE XREF: FormatAndPutText+Cj
					@ FormatAndPutText+3E2j
		LDRB	R0, [R5]
		CMP	R0, #0
		BNE	loc_8AAA

loc_8ABE:				@ CODE XREF: FormatAndPutText+108j
		ADD	SP, SP,	#0x44
		MOV	R0, R6
		POP.W	{R4-R11,PC}
@ ---------------------------------------------------------------------------

loc_8AC6:				@ CODE XREF: FormatAndPutText+10j
		MOVS	R4, #0
		MOV	R10, R4
		MOV	R9, R4
		MOVS	R2, #1
		LDR	R1, dword_8E80
		B	loc_8AD4
@ ---------------------------------------------------------------------------

loc_8AD2:				@ CODE XREF: FormatAndPutText+44j
		ORRS	R4, R0

loc_8AD4:				@ CODE XREF: FormatAndPutText+34j
		LDRB.W	R3, [R5,#1]!
		SUBS	R3, #0x20
		LSL.W	R0, R2,	R3
		TST	R0, R1
		BNE	loc_8AD2
		LDRB	R0, [R5]
		CMP	R0, #0x2A
		BEQ	loc_8B0A
		MVN.W	R2, #0x2F

loc_8AEC:				@ CODE XREF: FormatAndPutText+6Cj
		LDRB	R0, [R5]
		SUB.W	R1, R0,	#0x30
		CMP	R1, #9
		BHI	loc_8B20
		ADD.W	R1, R10, R10,LSL#2
		ADD.W	R1, R2,	R1,LSL#1
		ORR.W	R4, R4,	#2
		ADD.W	R10, R0, R1
		ADDS	R5, R5,	#1
		B	loc_8AEC
@ ---------------------------------------------------------------------------

loc_8B0A:				@ CODE XREF: FormatAndPutText+4Aj
		LDMIA	R7!, {R0}
		MOVS.W	R10, R0
		BPL	loc_8B1A
		ORR.W	R4, R4,	#0x2000
		RSB.W	R10, R10, #0

loc_8B1A:				@ CODE XREF: FormatAndPutText+74j
		ORR.W	R4, R4,	#2
		ADDS	R5, R5,	#1

loc_8B20:				@ CODE XREF: FormatAndPutText+58j
		LDRB	R0, [R5]
		CMP	R0, #0x2E
		BNE	loc_8B56
		LDRB.W	R0, [R5,#1]!
		ORR.W	R4, R4,	#4
		CMP	R0, #0x2A
		BEQ	loc_8B50
		MVN.W	R2, #0x2F

loc_8B36:				@ CODE XREF: FormatAndPutText+B2j
		LDRB	R0, [R5]
		SUB.W	R1, R0,	#0x30
		CMP	R1, #9
		BHI	loc_8B56
		ADD.W	R1, R9,	R9,LSL#2
		ADD.W	R1, R2,	R1,LSL#1
		ADD.W	R9, R0,	R1
		ADDS	R5, R5,	#1
		B	loc_8B36
@ ---------------------------------------------------------------------------

loc_8B50:				@ CODE XREF: FormatAndPutText+94j
		LDR.W	R9, [R7],#4
		ADDS	R5, R5,	#1

loc_8B56:				@ CODE XREF: FormatAndPutText+88j
					@ FormatAndPutText+A2j
		LDRB	R0, [R5]
		CMP	R0, #0x6C
		BEQ	loc_8B7C
		BGT	loc_8B6C
		CMP	R0, #0x4C
		BEQ	loc_8B92
		CMP	R0, #0x68
		BEQ	loc_8B82
		CMP	R0, #0x6A
		BNE	loc_8B94
		B	loc_8B76
@ ---------------------------------------------------------------------------

loc_8B6C:				@ CODE XREF: FormatAndPutText+C0j
		CMP	R0, #0x74
		BEQ	loc_8B92
		CMP	R0, #0x7A
		BNE	loc_8B94
		B	loc_8B92
@ ---------------------------------------------------------------------------

loc_8B76:				@ CODE XREF: FormatAndPutText+CEj
		ORR.W	R4, R4,	#0x200000
		B	loc_8B92
@ ---------------------------------------------------------------------------

loc_8B7C:				@ CODE XREF: FormatAndPutText+BEj
		ORR.W	R4, R4,	#0x100000
		B	loc_8B86
@ ---------------------------------------------------------------------------

loc_8B82:				@ CODE XREF: FormatAndPutText+C8j
		ORR.W	R4, R4,	#0x300000

loc_8B86:				@ CODE XREF: FormatAndPutText+E4j
		LDRB	R1, [R5,#1]
		CMP	R1, R0
		BNE	loc_8B92
		ADD.W	R4, R4,	#0x100000
		ADDS	R5, R5,	#1

loc_8B92:				@ CODE XREF: FormatAndPutText+C4j
					@ FormatAndPutText+D2j	...
		ADDS	R5, R5,	#1

loc_8B94:				@ CODE XREF: FormatAndPutText+CCj
					@ FormatAndPutText+D6j
		LDRB	R2, [R5]
		CMP	R2, #0x6E
		BEQ	loc_8BDA
		BGT	loc_8BB6
		CMP	R2, #0x63
		BEQ	loc_8C04
		BGT	loc_8BAC
		CMP	R2, #0
		BEQ	loc_8ABE
		CMP	R2, #0x58
		BNE	loc_8BCE
		B	loc_8CF4
@ ---------------------------------------------------------------------------

loc_8BAC:				@ CODE XREF: FormatAndPutText+104j
		CMP	R2, #0x64
		BEQ	loc_8C82
		CMP	R2, #0x69
		BNE	loc_8BCE
		B	loc_8C82
@ ---------------------------------------------------------------------------

loc_8BB6:				@ CODE XREF: FormatAndPutText+FEj
		CMP	R2, #0x73
		BEQ	loc_8C18
		BGT	loc_8BC6
		CMP	R2, #0x6F
		BEQ	loc_8CA8
		CMP	R2, #0x70
		BNE	loc_8BCE
		B	loc_8CFE
@ ---------------------------------------------------------------------------

loc_8BC6:				@ CODE XREF: FormatAndPutText+11Ej
		CMP	R2, #0x75
		BEQ	loc_8CAA
		CMP	R2, #0x78
		BEQ	loc_8CAC

loc_8BCE:				@ CODE XREF: FormatAndPutText+10Cj
					@ FormatAndPutText+116j ...
		MOV	R0, R2
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R6, R6,	#1
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BDA:				@ CODE XREF: FormatAndPutText+FCj
		UBFX.W	R0, R4,	#0x14, #3
		CMP	R0, #2
		BEQ	loc_8BF0
		CMP	R0, #3
		BEQ	loc_8BFA
		CMP	R0, #4
		LDMIA	R7!, {R0}
		BEQ	loc_8C00
		STR	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BF0:				@ CODE XREF: FormatAndPutText+144j
		LDMIA	R7!, {R0}
		ASRS	R1, R6,	#0x1F
		STRD.W	R6, R1,	[R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8BFA:				@ CODE XREF: FormatAndPutText+148j
		LDMIA	R7!, {R0}
		STRH	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8C00:				@ CODE XREF: FormatAndPutText+14Ej
		STRB	R6, [R0]
		B	loc_8E7C
@ ---------------------------------------------------------------------------

loc_8C04:				@ CODE XREF: FormatAndPutText+102j
		LDRB.W	R0, [R7],#4
		STRB.W	R0, [SP]
		MOVS	R0, #0
		STRB.W	R0, [SP,#1]
		MOV	R11, SP
		MOVS	R0, #1
		B	loc_8C20
@ ---------------------------------------------------------------------------

loc_8C18:				@ CODE XREF: FormatAndPutText+11Cj
		LDR.W	R11, [R7],#4
		MOV.W	R0, #0xFFFFFFFF

loc_8C20:				@ CODE XREF: FormatAndPutText+17Aj
		LSLS	R1, R4,	#0x1D
		MOV.W	R1, #0
		BMI	loc_8C2E
		B	loc_8C46
@ ---------------------------------------------------------------------------

loc_8C2A:				@ CODE XREF: FormatAndPutText+19Aj
					@ FormatAndPutText+1A2j
		ADD.W	R1, R8,	#1

loc_8C2E:				@ CODE XREF: FormatAndPutText+18Aj
		MOV	R8, R1
		CMP	R1, R9
		BGE	loc_8C54
		CMP	R8, R0
		BLT	loc_8C2A
		LDRB.W	R1, [R11,R8]
		CMP	R1, #0
		BNE	loc_8C2A
		B	loc_8C54
@ ---------------------------------------------------------------------------

loc_8C42:				@ CODE XREF: FormatAndPutText+1AEj
					@ FormatAndPutText+1B6j
		ADD.W	R1, R8,	#1

loc_8C46:				@ CODE XREF: FormatAndPutText+18Cj
		MOV	R8, R1
		CMP	R1, R0
		BLT	loc_8C42
		LDRB.W	R1, [R11,R8]
		CMP	R1, #0
		BNE	loc_8C42

loc_8C54:				@ CODE XREF: FormatAndPutText+196j
					@ FormatAndPutText+1A4j
		LDRD.W	R2, R3,	[SP,#0x3C]
		SUB.W	R0, R10, R8
		MOV	R9, R0
		MOV	R1, R4
		BL	sub_8ED0
		ADD	R0, R6
		ADD.W	R6, R0,	R8
		B	loc_8C76
@ ---------------------------------------------------------------------------

loc_8C6C:				@ CODE XREF: FormatAndPutText+1DEj
		LDRD.W	R1, R2,	[SP,#0x3C]
		LDRB.W	R0, [R11],#1
		BLX	R2

loc_8C76:				@ CODE XREF: FormatAndPutText+1CEj
		SUBS.W	R8, R8,	#1
		BCS	loc_8C6C
		MOV	R1, R4
		MOV	R0, R9
		B	loc_8E72
@ ---------------------------------------------------------------------------

loc_8C82:				@ CODE XREF: FormatAndPutText+112j
					@ FormatAndPutText+118j
		MOVS	R1, #0xA
		UBFX.W	R3, R4,	#0x14, #3
		MOV.W	R11, #0
		STR	R1, [SP,#0x20]
		CMP	R3, #2
		BEQ	loc_8C9C
		LDMIA	R7!, {R0}
		ASRS	R1, R0,	#0x1F
		CMP	R3, #3
		BEQ	loc_8CAE
		B	loc_8CB2
@ ---------------------------------------------------------------------------

loc_8C9C:				@ CODE XREF: FormatAndPutText+1F4j
		ADDS	R7, R7,	#7
		BIC.W	R7, R7,	#7
		LDRD.W	R0, R1,	[R7],#8
		B	loc_8CBA
@ ---------------------------------------------------------------------------

loc_8CA8:				@ CODE XREF: FormatAndPutText+122j
		B	loc_8D10
@ ---------------------------------------------------------------------------

loc_8CAA:				@ CODE XREF: FormatAndPutText+12Cj
		B	loc_8CEC
@ ---------------------------------------------------------------------------

loc_8CAC:				@ CODE XREF: FormatAndPutText+130j
		B	loc_8CF0
@ ---------------------------------------------------------------------------

loc_8CAE:				@ CODE XREF: FormatAndPutText+1FCj
		SXTH	R0, R0
		ASRS	R1, R0,	#0x1F

loc_8CB2:				@ CODE XREF: FormatAndPutText+1FEj
		CMP	R3, #4
		BNE	loc_8CBA
		SXTB	R0, R0
		ASRS	R1, R0,	#0x1F

loc_8CBA:				@ CODE XREF: FormatAndPutText+20Aj
					@ FormatAndPutText+218j
		SUBS	R3, R0,	#0
		SBCS.W	R3, R1,	#0
		BGE	loc_8CD2
		MOV.W	R12, #0
		RSBS.W	R0, R0,	R12
		SBC.W	R1, R12, R1
		MOVS	R3, #0x2D
		B	loc_8CD8
@ ---------------------------------------------------------------------------

loc_8CD2:				@ CODE XREF: FormatAndPutText+224j
		LSLS	R3, R4,	#0x14
		BPL	loc_8CE0
		MOVS	R3, #0x2B

loc_8CD8:				@ CODE XREF: FormatAndPutText+234j
					@ FormatAndPutText+24Aj
		STRB.W	R3, [SP,#0x24]
		MOVS	R3, #1
		B	loc_8CE8
@ ---------------------------------------------------------------------------

loc_8CE0:				@ CODE XREF: FormatAndPutText+238j
		LSLS	R3, R4,	#0x1F
		BEQ	loc_8CE8
		MOVS	R3, #0x20
		B	loc_8CD8
@ ---------------------------------------------------------------------------

loc_8CE8:				@ CODE XREF: FormatAndPutText+242j
					@ FormatAndPutText+246j
		MOV	R8, R3
		B	loc_8D9E
@ ---------------------------------------------------------------------------

loc_8CEC:				@ CODE XREF: FormatAndPutText:loc_8CAAj
		MOVS	R1, #0xA
		B	loc_8D12
@ ---------------------------------------------------------------------------

loc_8CF0:				@ CODE XREF: FormatAndPutText:loc_8CACj
		MOVS	R1, #0x10
		B	loc_8D12
@ ---------------------------------------------------------------------------

loc_8CF4:				@ CODE XREF: FormatAndPutText+10Ej
		MOVS	R0, #0x10
		MOV.W	R11, #0
		STR	R0, [SP,#0x20]
		B	loc_8D18
@ ---------------------------------------------------------------------------

loc_8CFE:				@ CODE XREF: FormatAndPutText+128j
		MOVS	R1, #0x10
		MOV.W	R11, #0
		ORR.W	R4, R4,	#4
		MOV.W	R9, #8
		STR	R1, [SP,#0x20]
		B	loc_8D18
@ ---------------------------------------------------------------------------

loc_8D10:				@ CODE XREF: FormatAndPutText:loc_8CA8j
		MOVS	R1, #8

loc_8D12:				@ CODE XREF: FormatAndPutText+252j
					@ FormatAndPutText+256j
		MOV.W	R11, #0
		STR	R1, [SP,#0x20]

loc_8D18:				@ CODE XREF: FormatAndPutText+260j
					@ FormatAndPutText+272j
		UBFX.W	R3, R4,	#0x14, #3
		CMP	R3, #2
		BEQ	loc_8D2A
		LDMIA	R7!, {R0}
		MOVS	R1, #0
		CMP	R3, #3
		BEQ	loc_8D36
		B	loc_8D38
@ ---------------------------------------------------------------------------

loc_8D2A:				@ CODE XREF: FormatAndPutText+282j
		ADDS	R7, R7,	#7
		BIC.W	R7, R7,	#7
		LDRD.W	R0, R1,	[R7],#8
		B	loc_8D3E
@ ---------------------------------------------------------------------------

loc_8D36:				@ CODE XREF: FormatAndPutText+28Aj
		UXTH	R0, R0

loc_8D38:				@ CODE XREF: FormatAndPutText+28Cj
		CMP	R3, #4
		BNE	loc_8D3E
		UXTB	R0, R0

loc_8D3E:				@ CODE XREF: FormatAndPutText+298j
					@ FormatAndPutText+29Ej
		MOV.W	R8, #0
		LSLS	R3, R4,	#0x1C
		BPL	loc_8D9E
		CMP	R2, #0x70
		BEQ	loc_8D5A
		LDR.W	R12, [SP,#0x20]
		EOR.W	R12, R12, #0x10
		ORRS.W	R12, R12, R11
		BEQ	loc_8D64
		B	loc_8D78
@ ---------------------------------------------------------------------------

loc_8D5A:				@ CODE XREF: FormatAndPutText+2ACj
		MOVS	R3, #0x40
		STRB.W	R3, [SP,#0x68+var_44]
		MOVS	R3, #1
		B	loc_8D76
@ ---------------------------------------------------------------------------

loc_8D64:				@ CODE XREF: FormatAndPutText+2BAj
		ORRS.W	R3, R0,	R1
		BEQ	loc_8D78
		MOVS	R3, #0x30
		STRB.W	R3, [SP,#0x24]
		STRB.W	R2, [SP,#0x25]
		MOVS	R3, #2

loc_8D76:				@ CODE XREF: FormatAndPutText+2C6j
		MOV	R8, R3

loc_8D78:				@ CODE XREF: FormatAndPutText+2BCj
					@ FormatAndPutText+2CCj
		LDR.W	R12, [SP,#0x20]
		EOR.W	R12, R12, #8
		ORRS.W	R12, R12, R11
		BNE	loc_8D9E
		ORRS.W	R3, R0,	R1
		BNE	loc_8D90
		LSLS	R3, R4,	#0x1D
		BPL	loc_8D9E

loc_8D90:				@ CODE XREF: FormatAndPutText+2EEj
		MOVS	R3, #0x30
		STRB.W	R3, [SP,#0x24]
		MOV.W	R8, #1
		SUB.W	R9, R9,	#1

loc_8D9E:				@ CODE XREF: FormatAndPutText+24Ej
					@ FormatAndPutText+2A8j ...
		CMP	R2, #0x58
		BEQ	loc_8DAC
		ADR	R2, a0123456789abcd @ "0123456789abcdef"

loc_8DA4:				@ CODE XREF: FormatAndPutText+312j
		STR	R2, [SP,#0x2C]
		ADD	R2, SP,	#0x20
		STR	R2, [SP,#0x28]
		B	loc_8DC4
@ ---------------------------------------------------------------------------

loc_8DAC:				@ CODE XREF: FormatAndPutText+304j
		ADR	R2, a0123456789ab_0 @ "0123456789ABCDEF"
		B	loc_8DA4
@ ---------------------------------------------------------------------------

loc_8DB0:				@ CODE XREF: FormatAndPutText+32Cj
		MOV	R3, R11
		LDR	R2, [SP,#0x20]
		BL	sub_2C8
		LDR	R3, [SP,#0x2C]
		LDRB	R3, [R3,R2]
		LDR	R2, [SP,#0x28]
		SUBS	R2, R2,	#1
		STR	R2, [SP,#0x28]
		STRB	R3, [R2]

loc_8DC4:				@ CODE XREF: FormatAndPutText+30Ej
		ORRS.W	R2, R0,	R1
		BNE	loc_8DB0
		LDR	R0, [SP,#0x28]
		SUB.W	R0, SP,	R0
		ADD.W	R11, R0, #0x20
		LSLS	R0, R4,	#0x1D
		BPL	loc_8DDE
		BIC.W	R4, R4,	#0x10000
		B	loc_8DE2
@ ---------------------------------------------------------------------------

loc_8DDE:				@ CODE XREF: FormatAndPutText+33Aj
		MOV.W	R9, #1

loc_8DE2:				@ CODE XREF: FormatAndPutText+340j
		CMP	R9, R11
		BLE	loc_8DEC
		SUB.W	R0, R9,	R11
		B	loc_8DEE
@ ---------------------------------------------------------------------------

loc_8DEC:				@ CODE XREF: FormatAndPutText+348j
		MOVS	R0, #0

loc_8DEE:				@ CODE XREF: FormatAndPutText+34Ej
		ADD.W	R1, R0,	R11
		ADD	R1, R8
		STR	R0, [SP,#0x20]
		SUB.W	R10, R10, R1
		LSLS	R0, R4,	#0xF
		BMI	loc_8E0C
		LDRD.W	R2, R3,	[SP,#0x3C]
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_8ED0
		ADD	R6, R0

loc_8E0C:				@ CODE XREF: FormatAndPutText+360j
		MOV.W	R9, #0
		B	loc_8E24
@ ---------------------------------------------------------------------------

loc_8E12:				@ CODE XREF: FormatAndPutText+38Aj
		ADD	R1, SP,	#0x24
		LDRB.W	R0, [R1,R9]
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADD.W	R9, R9,	#1
		ADDS	R6, R6,	#1

loc_8E24:				@ CODE XREF: FormatAndPutText+374j
		CMP	R9, R8
		BLT	loc_8E12
		LSLS	R0, R4,	#0xF
		BPL	loc_8E46
		LDRD.W	R2, R3,	[SP,#0x3C]
		MOV	R1, R4
		MOV	R0, R10
		BL	sub_8ED0
		ADD	R6, R0
		B	loc_8E46
@ ---------------------------------------------------------------------------

loc_8E3C:				@ CODE XREF: FormatAndPutText+3B2j
		LDRD.W	R1, R2,	[SP,#0x3C]
		MOVS	R0, #0x30
		BLX	R2
		ADDS	R6, R6,	#1

loc_8E46:				@ CODE XREF: FormatAndPutText+38Ej
					@ FormatAndPutText+39Ej
		LDR	R1, [SP,#0x20]
		SUBS	R0, R1,	#1
		STR	R0, [SP,#0x20]
		CMP	R1, #0
		BGT	loc_8E3C
		B	loc_8E64
@ ---------------------------------------------------------------------------

loc_8E52:				@ CODE XREF: FormatAndPutText+3D0j
		LDR	R0, [SP,#0x28]
		LDR	R1, [SP,#0x28]
		LDRB	R0, [R0]
		ADDS	R1, R1,	#1
		STR	R1, [SP,#0x28]
		LDRD.W	R1, R2,	[SP,#0x3C]
		BLX	R2
		ADDS	R6, R6,	#1

loc_8E64:				@ CODE XREF: FormatAndPutText+3B4j
		SUBS.W	R1, R11, #0
		SUB.W	R11, R11, #1
		BGT	loc_8E52
		MOV	R1, R4
		MOV	R0, R10

loc_8E72:				@ CODE XREF: FormatAndPutText+1E4j
		LDRD.W	R2, R3,	[SP,#0x3C]
		BL	sub_8EAC
		ADD	R6, R0

loc_8E7C:				@ CODE XREF: FormatAndPutText+13Cj
					@ FormatAndPutText+152j ...
		ADDS	R5, R5,	#1
		B	loc_8AB8
@ End of function FormatAndPutText

@ ---------------------------------------------------------------------------
dword_8E80:	.long 0x12809		@ DATA XREF: FormatAndPutText+32r
a0123456789abcd:.ascii "0123456789abcdef" @ DATA XREF: FormatAndPutText+306o
		.byte 0
		.balign 4,0
a0123456789ab_0:.ascii "0123456789ABCDEF" @ DATA XREF: FormatAndPutText:loc_8DACo
		.byte 0
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


sub_8EAC:				@ CODE XREF: FormatAndPutText+3DAp
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOVS	R5, #0
		MOV	R6, R3
		MOV	R7, R2
		LSLS	R0, R1,	#0x12
		BMI	loc_8EC6
		B	loc_8ECA
@ ---------------------------------------------------------------------------

loc_8EBE:				@ CODE XREF: sub_8EAC+1Cj
		MOV	R1, R7
		MOVS	R0, #0x20
		BLX	R6
		ADDS	R5, R5,	#1

loc_8EC6:				@ CODE XREF: sub_8EAC+Ej
		SUBS	R4, R4,	#1
		BPL	loc_8EBE

loc_8ECA:				@ CODE XREF: sub_8EAC+10j
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function sub_8EAC


@ =============== S U B	R O U T	I N E =======================================


sub_8ED0:				@ CODE XREF: FormatAndPutText+1C4p
					@ FormatAndPutText+36Ap ...
		PUSH.W	{R4-R8,LR}
		MOV	R4, R0
		MOVS	R5, #0
		MOV	R6, R3
		MOV	R8, R2
		LSLS	R0, R1,	#0xF
		BPL	loc_8EE4
		MOVS	R7, #0x30
		B	loc_8EE6
@ ---------------------------------------------------------------------------

loc_8EE4:				@ CODE XREF: sub_8ED0+Ej
		MOVS	R7, #0x20

loc_8EE6:				@ CODE XREF: sub_8ED0+12j
		LSLS	R0, R1,	#0x12
		BPL	loc_8EF4
		B	loc_8EF8
@ ---------------------------------------------------------------------------

loc_8EEC:				@ CODE XREF: sub_8ED0+26j
		MOV	R1, R8
		MOV	R0, R7
		BLX	R6
		ADDS	R5, R5,	#1

loc_8EF4:				@ CODE XREF: sub_8ED0+18j
		SUBS	R4, R4,	#1
		BPL	loc_8EEC

loc_8EF8:				@ CODE XREF: sub_8ED0+1Aj
		MOV	R0, R5
		POP.W	{R4-R8,PC}
@ End of function sub_8ED0

@ ---------------------------------------------------------------------------
		.balign 4,0

@ =============== S U B	R O U T	I N E =======================================


ClampPowers:				@ CODE XREF: sub_121C+1Ep
					@ SetMinMaxPower+46p
		LDR	R0, off_8F1C
		LDR	R1, [R0]
		CMP	R1, #0xA
		BCS	loc_8F0C
		MOVS	R1, #0xA
		STR	R1, [R0]

loc_8F0C:				@ CODE XREF: ClampPowers+6j
		LDR	R1, off_8F20
		LDR	R0, off_8F24
		LDR	R2, [R1]
		LDR	R0, [R0]
		CMP	R2, R0
		BLS	locret_8F1A
		STR	R0, [R1]

locret_8F1A:				@ CODE XREF: ClampPowers+16j
		BX	LR
@ End of function ClampPowers

@ ---------------------------------------------------------------------------
off_8F1C:	.long AtoMinPower	@ DATA XREF: ClampPowersr
off_8F20:	.long AtoMaxPower	@ DATA XREF: ClampPowers:loc_8F0Cr
off_8F24:	.long MaxPower		@ DATA XREF: ClampPowers+Er

@ =============== S U B	R O U T	I N E =======================================


ClampVolts:				@ CODE XREF: GetAtoVWVolts+60p
					@ SetMinMaxVolts+AEp
		LDR	R0, off_8F44
		LDR	R1, [R0]
		CMP	R1, #0x32
		BCS	loc_8F34
		MOVS	R1, #0x32
		STR	R1, [R0]

loc_8F34:				@ CODE XREF: ClampVolts+6j
		LDR	R1, off_8F48
		LDR	R0, off_8F4C
		LDR	R2, [R1]
		LDR	R0, [R0]
		CMP	R2, R0
		BLS	locret_8F42
		STR	R0, [R1]

locret_8F42:				@ CODE XREF: ClampVolts+16j
		BX	LR
@ End of function ClampVolts

@ ---------------------------------------------------------------------------
off_8F44:	.long AtoMinVolts	@ DATA XREF: ClampVoltsr
off_8F48:	.long AtoMaxVolts	@ DATA XREF: ClampVolts:loc_8F34r
off_8F4C:	.long MaxVWVolts	@ DATA XREF: ClampVolts+Er

@ =============== S U B	R O U T	I N E =======================================


PutChar:				@ DATA XREF: PutTextf+2o ROM:off_89F0o
		PUSH	{LR}
		MOV	R3, R0
		BL	PutCharUART0
		MOV	R0, R3
		POP	{PC}
@ End of function PutChar


@ =============== S U B	R O U T	I N E =======================================


SearchSTARTRez:				@ CODE XREF: SetAtoSTARTParams:loc_3936p
					@ SetAtoSTARTParams+98p ...
		PUSH	{R4,R5,LR}
		MOV	R2, R0
		MOVS	R0, #0
		LDR	R4, dword_8F8C
		MOVS	R3, #0xA

loc_8F66:				@ CODE XREF: SearchSTARTRez+28j
		LDRH.W	R1, [R4,R0,LSL#1]
		UDIV.W	R5, R1,	R3
		ADD	R5, R1
		CMP	R5, R2
		BCC	loc_8F7E
		UDIV.W	R5, R1,	R3
		SUBS	R1, R1,	R5
		CMP	R1, R2
		BLE	locret_8F88

loc_8F7E:				@ CODE XREF: SearchSTARTRez+16j
		ADDS	R0, R0,	#1
		UXTB	R0, R0
		CMP	R0, #4
		BCC	loc_8F66
		MOVS	R0, #4

locret_8F88:				@ CODE XREF: SearchSTARTRez+20j
		POP	{R4,R5,PC}
@ End of function SearchSTARTRez

@ ---------------------------------------------------------------------------
		.balign 4,0
dword_8F8C:	.long 0x9506		@ DATA XREF: SearchSTARTRez+6r

@ =============== S U B	R O U T	I N E =======================================


SetMinMaxPower:				@ CODE XREF: sub_90DC+6p
		PUSH	{R4,R5}
		LDR	R0, off_8FE8
		LDR	R5, off_8FEC
		LDR	R4, off_8FF0
		LDRB	R0, [R0]
		MOVS	R3, #0xA
		CBNZ	R0, loc_8FDA
		LDR	R0, off_8FF4
		LDRH	R1, [R0]
		CBZ	R1, loc_8FDA
		LDR	R2, off_8FF8
		ADD.W	R0, R1,	R1,LSL#3
		ADD.W	R0, R0,	R1,LSL#4
		LDR	R2, [R2]
		UXTH	R0, R0
		CMP	R0, R2
		BLS	loc_8FB8
		UXTH	R0, R2

loc_8FB8:				@ CODE XREF: SetMinMaxPower+24j
		MULS	R0, R0
		SDIV.W	R0, R0,	R1
		ADDS	R0, R0,	#5
		UDIV.W	R0, R0,	R3
		STR	R0, [R4]
		MOVW	R0, #0x9C4
		UDIV.W	R0, R0,	R1
		UDIV.W	R0, R0,	R3
		STR	R0, [R5]
		POP	{R4,R5}
		B.W	ClampPowers
@ ---------------------------------------------------------------------------

loc_8FDA:				@ CODE XREF: SetMinMaxPower+Cj
					@ SetMinMaxPower+12j
		LDR	R0, off_8FFC
		STR	R3, [R5]
		LDR	R0, [R0]
		STR	R0, [R4]
		POP	{R4,R5}
		BX	LR
@ End of function SetMinMaxPower

@ ---------------------------------------------------------------------------
		.balign 4,0
off_8FE8:	.long byte_2000003D	@ DATA XREF: SetMinMaxPower+2r
off_8FEC:	.long AtoMinPower	@ DATA XREF: SetMinMaxPower+4r
off_8FF0:	.long AtoMaxPower	@ DATA XREF: SetMinMaxPower+6r
off_8FF4:	.long AtoRez		@ DATA XREF: SetMinMaxPower+Er
off_8FF8:	.long MaxVWVolts	@ DATA XREF: SetMinMaxPower+14r
off_8FFC:	.long MaxPower		@ DATA XREF: SetMinMaxPower:loc_8FDAr

@ =============== S U B	R O U T	I N E =======================================


SetMinMaxVolts:				@ CODE XREF: sub_90DC+2p
		PUSH	{R4-R6,LR}
		LDR	R0, off_90C4
		LDR	R4, off_90C8
		LDR	R5, off_90CC
		VPUSH	{D8}
		LDRB	R0, [R0]
		CBNZ	R0, loc_908A
		LDR	R6, off_90D0
		LDRH	R0, [R6]
		CBZ	R0, loc_908A
		LDR	R1, off_90D4
		CDP	p10, 0xB, c8,c2,c4, 0
		FLDS	S0, [R1]
		FUITOS	S1, S0
		FMSR	S0, R0
		FUITOS	S0, S0
		FMULS	S0, S1,	S0
		FMULS	S0, S0,	S16
		FMRS	R0, S0
		BL	sub_26A
		FMDRR	D0, R0,	R1
		BL	sub_89F8
		FMRRD	R0, R1,	D0
		BL	sub_238
		UXTH	R0, R0
		FMSR	S0, R0
		FUITOS	S0, S0
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		STR	R0, [R5]
		LDRH	R0, [R6]
		FMSR	S0, R0
		FUITOS	S0, S0
		FMULS	S0, S0,	S16
		FMULS	S0, S0,	S16
		FMRS	R0, S0
		BL	sub_26A
		FMDRR	D0, R0,	R1
		BL	sub_89F8
		FMRRD	R0, R1,	D0
		B	loc_908C
@ ---------------------------------------------------------------------------

loc_908A:				@ CODE XREF: SetMinMaxVolts+Ej
					@ SetMinMaxVolts+14j
		B	loc_90B2
@ ---------------------------------------------------------------------------

loc_908C:				@ CODE XREF: SetMinMaxVolts+88j
		BL	sub_238
		UXTH	R0, R0
		FMSR	S0, R0
		FUITOS	S0, S0
		FTOUIZS	S0, S0
		FMRS	R0, S0
		UXTH	R0, R0
		STR	R0, [R4]
		VPOP	{D8}
		POP.W	{R4-R6,LR}
		B.W	ClampVolts
@ ---------------------------------------------------------------------------

loc_90B2:				@ CODE XREF: SetMinMaxVolts:loc_908Aj
		MOVS	R0, #0x32
		STR	R0, [R4]
		LDR	R0, off_90D8
		LDR	R0, [R0]
		STR	R0, [R5]
		VPOP	{D8}
		POP	{R4-R6,PC}
@ End of function SetMinMaxVolts

@ ---------------------------------------------------------------------------
		.balign 4,0
off_90C4:	.long byte_2000003D	@ DATA XREF: SetMinMaxVolts+2r
off_90C8:	.long AtoMinVolts	@ DATA XREF: SetMinMaxVolts+4r
off_90CC:	.long AtoMaxVolts	@ DATA XREF: SetMinMaxVolts+6r
off_90D0:	.long AtoRez		@ DATA XREF: SetMinMaxVolts+10r
off_90D4:	.long MaxPower		@ DATA XREF: SetMinMaxVolts+16r
off_90D8:	.long MaxVWVolts	@ DATA XREF: SetMinMaxVolts+B6r

@ =============== S U B	R O U T	I N E =======================================


sub_90DC:				@ CODE XREF: sub_6038+156p
		PUSH	{R4-R6,LR}
		BL	SetMinMaxVolts
		BL	SetMinMaxPower
		LDR	R0, off_9144
		LDRB	R0, [R0]
		CMP	R0, #0
		BNE	locret_9128
		LDR	R0, off_9148
		LDRH	R0, [R0]
		CMP	R0, #0
		BEQ	locret_9128
		BL	SetAtoSTARTParams
		LDR	R5, off_914C
		LDRB	R0, [R5,#0xE]
		CMP	R0, #6
		BEQ	loc_912A
		LDRH	R4, [R5,#0x10]

loc_9104:				@ CODE XREF: sub_90DC+5Aj
		LDR	R0, off_9150
		LDR	R0, [R0]
		CMP	R4, R0
		BCS	loc_910E
		UXTH	R4, R0

loc_910E:				@ CODE XREF: sub_90DC+2Ej
		LDR	R0, off_9154
		LDR	R0, [R0]
		CMP	R4, R0
		BLS	loc_9118
		UXTH	R4, R0

loc_9118:				@ CODE XREF: sub_90DC+38j
		MOV	R0, R4
		BL	GetAtoVWVolts
		STRH	R0, [R5,#0x16]
		LDRB	R1, [R5,#0xE]
		CMP	R1, #6
		BEQ	loc_9138
		STRH	R4, [R5,#0x10]

locret_9128:				@ CODE XREF: sub_90DC+10j sub_90DC+18j
		POP	{R4-R6,PC}
@ ---------------------------------------------------------------------------

loc_912A:				@ CODE XREF: sub_90DC+24j
		LDR	R0, off_9158	@ Saved	config # in start mode
		LDRB	R0, [R0]	@ Saved	config # in start mode
		ADD.W	R0, R5,	R0,LSL#1
		LDRH.W	R4, [R0,#0xAA]
		B	loc_9104
@ ---------------------------------------------------------------------------

loc_9138:				@ CODE XREF: sub_90DC+48j
		MOVS	R1, #1
		BL	sub_121C
		STRH	R0, [R5,#0x10]
		POP	{R4-R6,PC}
@ End of function sub_90DC

@ ---------------------------------------------------------------------------
		.balign 4,0
off_9144:	.long byte_2000003D	@ DATA XREF: sub_90DC+Ar
off_9148:	.long AtoRez		@ DATA XREF: sub_90DC+12r
off_914C:	.long dfData		@ DATA XREF: sub_90DC+1Er
off_9150:	.long AtoMinPower	@ DATA XREF: sub_90DC:loc_9104r
off_9154:	.long AtoMaxPower	@ DATA XREF: sub_90DC:loc_910Er
off_9158:	.long ConfigIndex	@ DATA XREF: sub_90DC:loc_912Ar
					@ Saved	config # in start mode
@ ---------------------------------------------------------------------------
@ START	OF FUNCTION CHUNK FOR GotoMain

Main:					@ CODE XREF: GotoMain+2j
					@ DATA XREF: GotoMaino	...
		BL	InitHardware
		BL	InitVariables
		LDR	R6, off_9380
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x8000
		STR	R0, [R6]
		BL	ReadBatteryVoltage
		LDR	R0, [R6]
		ORR.W	R0, R0,	#0x10000
		STR	R0, [R6]
		BL	ReadBoardTemp
		BL	InitDisplay
		BL	MainView
		LDR.W	R9, off_9384
		LDR	R4, off_9388
		LDR.W	R8, off_938C	@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
		ADDS	R7, R6,	#4
		SUB.W	R5, R6,	#0x28

loc_9196:				@ CODE XREF: GotoMain+9086j
					@ GotoMain+9092j ...
		LDRH	R0, [R7]
		LSLS	R0, R0,	#22
		BPL	loc_91DC
		BL	CallTimeouts
		LDR	R0, [R6]
		LSLS	R1, R0,	#28
		BPL	loc_91CA
		BIC.W	R0, R0,	#8
		STR	R0, [R6]
		BL	ResetWatchDog
		BL	TimedItems
		BL	SleepIfIdle
		BL	GetUserInput
		LDR	R0, dword_9390	@ PE0 (fire button)
		LDR	R0, [R0]
		CBNZ	R0, loc_91CA
		LDR	R1, off_9394
		MOVW	R0, #3000
		STRH	R0, [R1]

loc_91CA:				@ CODE XREF: GotoMain+905Cj
					@ GotoMain+9078j
		LDR	R0, [R6]
		LSLS	R1, R0,	#27
		BPL	loc_9196
		BIC.W	R0, R0,	#0x10
		STR	R0, [R6]
		BL	UpdateFlash
		B	loc_9196
@ ---------------------------------------------------------------------------

loc_91DC:				@ CODE XREF: GotoMain+9052j
		LDRH	R0, [R6]
		LSLS	R0, R0,	#0x17
		BPL	loc_91E6
		BL	GetAtoCurrent

loc_91E6:				@ CODE XREF: GotoMain+9098j
		LDR	R0, [R6]
		LSLS	R1, R0,	#0x1F
		BEQ	loc_91FA
		BIC.W	R0, R0,	#1
		STR	R0, [R6]
		LSLS	R0, R0,	#0x17
		BPL	loc_91FA
		BL	RegulateBuckBoost

loc_91FA:				@ CODE XREF: GotoMain+90A2j
					@ GotoMain+90ACj
		LDR	R0, [R6]
		LSLS	R1, R0,	#0x1E
		BPL	loc_924E
		BIC.W	R0, R0,	#2
		STR	R0, [R6]
		LSLS	R0, R0,	#0x17
		BPL	loc_924E
		BL	ReadAtoTemp
		LDR	R0, [R6]
		LSLS	R0, R0,	#8
		BPL	loc_9228
		LDRB	R0, [R4,#0xE]
		CMP	R0, #1
		BEQ	loc_9224	@ TODO:	bug in rez auto-detect (wrong modes tested)
		CBZ	R0, loc_9224	@ TODO:	bug in rez auto-detect (wrong modes tested)
		CMP	R0, #2
		BEQ	loc_9224	@ TODO:	bug in rez auto-detect (wrong modes tested)
		CMP	R0, #3
		BNE	loc_9238

loc_9224:				@ CODE XREF: GotoMain+90D0j
					@ GotoMain+90D2j ...
		BL	CheckMode	@ TODO:	bug in rez auto-detect (wrong modes tested)

loc_9228:				@ CODE XREF: GotoMain+90CAj
		LDRB	R0, [R4,#0xE]
		CMP	R0, #1
		BEQ	loc_9244
		CBZ	R0, loc_9244
		CMP	R0, #2
		BEQ	loc_9244
		CMP	R0, #3
		BEQ	loc_9244

loc_9238:				@ CODE XREF: GotoMain+90DAj
		UXTB	R0, R0
		CMP	R0, #4
		BEQ	loc_924A
		CMP	R0, #6
		BEQ	loc_924A
		B	loc_924E
@ ---------------------------------------------------------------------------

loc_9244:				@ CODE XREF: GotoMain+90E4j
					@ GotoMain+90E6j ...
		BL	TweakTargetVoltsTC
		B	loc_924E
@ ---------------------------------------------------------------------------

loc_924A:				@ CODE XREF: GotoMain+90F4j
					@ GotoMain+90F8j
		BL	TweakTargetVoltsVW

loc_924E:				@ CODE XREF: GotoMain+90B6j
					@ GotoMain+90C0j ...
		LDR	R0, [R6]
		LSLS	R1, R0,	#0x1C
		BPL	loc_9298
		BIC.W	R0, R0,	#8
		STR	R0, [R6]
		BL	ResetWatchDog
		LDR	R0, [R6]
		LSLS	R1, R0,	#0x18
		BPL	loc_926A
		BIC.W	R0, R0,	#0x80
		STR	R0, [R6]

loc_926A:				@ CODE XREF: GotoMain+911Aj
		BL	TimedItems
		BL	SleepIfIdle
		BL	ReadBatteryVoltage
		BL	ReadBoardTemp
		LDRH	R0, [R6]
		LSLS	R0, R0,	#0x17
		BPL	loc_928A
		LDRB	R0, [R5,#0xA]
		CMP	R0, #0x46
		BCC	loc_928A
		BL	Overtemp

loc_928A:				@ CODE XREF: GotoMain+9136j
					@ GotoMain+913Cj
		LDRH	R0, [R5,#0x18]
		CMP	R0, #5
		BCC	loc_9294
		BL	sub_3738

loc_9294:				@ CODE XREF: GotoMain+9146j
		BL	GetUserInput

loc_9298:				@ CODE XREF: GotoMain+910Aj
		LDR	R0, [R6]
		LSLS	R1, R0,	#0x1B
		BPL	loc_92D6
		BIC.W	R0, R0,	#0x10
		STR	R0, [R6]
		BL	UpdateFlash
		LDR	R1, [R6]
		LSLS	R0, R1,	#0x17
		BPL	loc_92B4
		LDRH	R0, [R5,#0x1C]
		ADDS	R0, R0,	#1
		STRH	R0, [R5,#0x1C]

loc_92B4:				@ CODE XREF: GotoMain+9164j
		LDRB.W	R0, [R9]
		CBZ	R0, loc_92C0
		SUBS	R0, R0,	#1
		STRB.W	R0, [R9]

loc_92C0:				@ CODE XREF: GotoMain+9170j
		LSLS	R0, R1,	#0x17
		BPL	loc_92D2
		LDRB	R0, [R4,#0xE]
		CMP	R0, #4
		BEQ	loc_92D2
		CMP	R0, #5
		BEQ	loc_92D2
		CMP	R0, #6
		BNE	loc_92D6

loc_92D2:				@ CODE XREF: GotoMain+917Aj
					@ GotoMain+9180j ...
		BL	DrawScreen

loc_92D6:				@ CODE XREF: GotoMain+9154j
					@ GotoMain+9188j
		LDR	R0, [R6]
		LSLS	R1, R0,	#0x1A
		BPL	loc_931C
		BIC.W	R0, R0,	#0x20
		STR	R0, [R6]
		LSLS	R0, R0,	#0x17
		BMI	loc_9308
		LDRB.W	R0, [R4,#0x7C]
		LSLS	R0, R0,	#0x1F
		BNE	loc_9312
		LDRB	R0, [R5,#7]
		CMP	R0, #0xFF
		BNE	loc_9312
		LDRB.W	R0, [R8]
		CMP	R0, #1
		BEQ	loc_930E
		CBZ	R0, loc_930E
		CMP	R0, #3
		BEQ	loc_930E
		CMP	R0, #5
		BEQ	loc_930E
		B	loc_9312
@ ---------------------------------------------------------------------------

loc_9308:				@ CODE XREF: GotoMain+919Cj
		LDR	R0, off_9398
		LDR	R0, [R0]
		CBNZ	R0, loc_9312

loc_930E:				@ CODE XREF: GotoMain+91B2j
					@ GotoMain+91B4j ...
		BL	sub_6038

loc_9312:				@ CODE XREF: GotoMain+91A4j
					@ GotoMain+91AAj ...
		LDRH	R0, [R5,#0x18]
		CMP	R0, #5
		BCS	loc_931C
		BL	sub_3738

loc_931C:				@ CODE XREF: GotoMain+9192j
					@ GotoMain+91CEj
		LDR	R0, [R6]
		LSLS	R1, R0,	#0x19
		BPL	loc_9340
		BIC.W	R0, R0,	#0x40
		STR	R0, [R6]
		LSLS	R0, R0,	#0x17
		BPL	loc_9340
		LDRB	R0, [R4,#0xE]
		CMP	R0, #1
		BEQ	loc_933C
		CBZ	R0, loc_933C
		CMP	R0, #2
		BEQ	loc_933C
		CMP	R0, #3
		BNE	loc_9340

loc_933C:				@ CODE XREF: GotoMain+91E8j
					@ GotoMain+91EAj ...
		BL	DrawScreen

loc_9340:				@ CODE XREF: GotoMain+91D8j
					@ GotoMain+91E2j ...
		LDR	R0, [R7]
		LSLS	R1, R0,	#0x17
		BPL	loc_937A
		BIC.W	R0, R0,	#0x100
		STR	R0, [R7]
		LDR	R1, [R6]
		LSLS	R0, R1,	#0x17
		BMI	loc_937A
		LDRB.W	R0, [R4,#0x7C]
		LSLS	R0, R0,	#0x1F
		BNE	loc_937A
		LDRH	R0, [R5,#0x16]
		CBNZ	R0, loc_937A
		LDRH	R0, [R5,#0x1A]
		CBZ	R0, loc_937A
		LDRB.W	R2, [R8]
		CMP	R2, #1
		BNE	loc_937A
		SUBS	R0, R0,	#1
		LSLS	R0, R0,	#0x10
		LSRS	R0, R0,	#0x10
		STRH	R0, [R5,#0x1A]
		BNE	loc_937A

loc_9374:
		ORR.W	R0, R1,	#0x20000
		STR	R0, [R6]

loc_937A:				@ CODE XREF: GotoMain+91FCj
					@ GotoMain+9208j ...
		BL	EventHandler
		B	loc_9196
@ END OF FUNCTION CHUNK	FOR GotoMain
@ ---------------------------------------------------------------------------
off_9380:	.long dword_20000064	@ DATA XREF: GotoMain+901Cr
off_9384:	.long ShowWeakBatFlag	@ DATA XREF: GotoMain+903Er
off_9388:	.long dfData		@ DATA XREF: GotoMain+9042r
off_938C:	.long Screen		@ DATA XREF: GotoMain+9044r
					@ Screen (200000F6)
					@  0 Black
					@  1 Main view
					@  2 Firing
					@  3 Main view (?)
					@  4 (unused?)
					@  5 Black w/ Battery
					@ 20 No	Atomizer Found
					@ 21 Atomizer Short
					@ 22 Atomizer Low
					@ 23 10s Protection
					@ 24 Battery Low
					@ 25 Battery Low Lock
					@ 28 Key Lock
					@ 29 Device too	hot
					@ 31 Key UnLock
					@ 37 Board Temp
					@ 40 Stealth ON/OFF
					@ 41 Ti	ON/OFF
					@ 50 FW	Version
					@ 51 New Coil
					@ 54 Battery Voltage
					@ 59 TCR Set Menu
					@ 82 LOGO Menu
					@ 83 Game Menu
dword_9390:	.long 0x40004900	@ DATA XREF: GotoMain+9074r
off_9394:	.long SleepTimer	@ DATA XREF: GotoMain+907Ar
off_9398:	.long TargetVolts	@ DATA XREF: GotoMain:loc_9308r

@ =============== S U B	R O U T	I N E =======================================


DumpRegisters:				@ CODE XREF: HardFault_Handler+2B66p
		PUSH	{R4,LR}
		MOV	R4, R0
		LDR	R1, [R0]
		ADR	R0, aR00xX	@ "r0  = 0x%x\n"
		BL	PutTextf
		ADR	R0, aR10xX	@ "r1  = 0x%x\n"
		LDR	R1, [R4,#4]
		BL	PutTextf
		ADR	R0, aR20xX	@ "r2  = 0x%x\n"
		LDR	R1, [R4,#8]
		BL	PutTextf
		ADR	R0, aR30xX	@ "r3  = 0x%x\n"
		LDR	R1, [R4,#0xC]
		BL	PutTextf
		ADR	R0, aR120xX	@ "r12 = 0x%x\n"
		LDR	R1, [R4,#0x10]
		BL	PutTextf
		ADR	R0, aLr0xX	@ "lr  = 0x%x\n"
		LDR	R1, [R4,#0x14]
		BL	PutTextf
		ADR	R0, aPc0xX	@ "pc  = 0x%x\n"
		LDR	R1, [R4,#0x18]
		BL	PutTextf
		LDR	R1, [R4,#0x1C]
		POP.W	{R4,LR}
		ADR	R0, aPsr0xX	@ "psr = 0x%x\n"
		B.W	PutTextf
@ End of function DumpRegisters

@ ---------------------------------------------------------------------------
aR00xX:		.ascii "r0  = 0x%x"     @ DATA XREF: DumpRegisters+6o
		.byte 0xA
		.byte 0
aR10xX:		.ascii "r1  = 0x%x"     @ DATA XREF: DumpRegisters+Co
		.byte 0xA
		.byte 0
aR20xX:		.ascii "r2  = 0x%x"     @ DATA XREF: DumpRegisters+14o
		.byte 0xA
		.byte 0
aR30xX:		.ascii "r3  = 0x%x"     @ DATA XREF: DumpRegisters+1Co
		.byte 0xA
		.byte 0
aR120xX:	.ascii "r12 = 0x%x"     @ DATA XREF: DumpRegisters+24o
		.byte 0xA
		.byte 0
aLr0xX:		.ascii "lr  = 0x%x"     @ DATA XREF: DumpRegisters+2Co
		.byte 0xA
		.byte 0
aPc0xX:		.ascii "pc  = 0x%x"     @ DATA XREF: DumpRegisters+34o
		.byte 0xA
		.byte 0
aPsr0xX:	.ascii "psr = 0x%x"     @ DATA XREF: DumpRegisters+42o
		.byte 0xA
		.byte 0
byte_9444:	.byte 0xA		@ DATA XREF: sub_388C+6o ROM:off_38A8o
		.byte 0

		.byte 0x14
		.byte 0
		.byte 0x23
		.byte 0
		.byte 0x3C
		.byte 0
		.byte 0x50
		.byte 0
		.byte 0x6E
		.byte 0
		.byte 0x78
		.byte 0
		.byte 0x82
		.byte 0
		.byte 0x8C
		.byte 0
		.byte 0x96
		.byte 0
		.byte 0xA0
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0xAA
		.byte 0
		.byte 0
		.byte 0

		.end
